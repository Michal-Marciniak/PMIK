
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d1c  08005d1c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d24  08005d24  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08005d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000ec  08005e18  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005e18  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112b5  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028cf  00000000  00000000  000313d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  00033ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  000349e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017daf  00000000  00000000  000355e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7e3  00000000  00000000  0004d38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d829  00000000  00000000  0005ab72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e839b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  000e8418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bd8 	.word	0x08005bd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08005bd8 	.word	0x08005bd8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <rtc_set_time>:
char alarm_on_msg[20] = "Wylacz alarm!\n\r";
char alarm_off_msg[20] = "Alarm wylaczony!\n\r";
char alarm_set_msg[20] = "Alarm ustawiony!\n\r";

void rtc_set_time (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	  /**Initialize RTC and set the Time and Date
	  */

	get_Time();
 8000586:	f001 f97d 	bl	8001884 <get_Time>

	uint8_t hour = time.hour;
 800058a:	4b61      	ldr	r3, [pc, #388]	; (8000710 <rtc_set_time+0x190>)
 800058c:	789b      	ldrb	r3, [r3, #2]
 800058e:	77fb      	strb	r3, [r7, #31]
	uint8_t min = time.minutes;
 8000590:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <rtc_set_time+0x190>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	77bb      	strb	r3, [r7, #30]
	uint8_t sec = time.seconds;
 8000596:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <rtc_set_time+0x190>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	777b      	strb	r3, [r7, #29]

	uint8_t day = time.dayofmonth;
 800059c:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <rtc_set_time+0x190>)
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	773b      	strb	r3, [r7, #28]
	uint8_t year = time.year;
 80005a2:	4b5b      	ldr	r3, [pc, #364]	; (8000710 <rtc_set_time+0x190>)
 80005a4:	799b      	ldrb	r3, [r3, #6]
 80005a6:	76fb      	strb	r3, [r7, #27]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 80005a8:	7ffb      	ldrb	r3, [r7, #31]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f8dc 	bl	8001768 <decToBcd>
 80005b0:	4603      	mov	r3, r0
 80005b2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = decToBcd(min);
 80005b4:	7fbb      	ldrb	r3, [r7, #30]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f8d6 	bl	8001768 <decToBcd>
 80005bc:	4603      	mov	r3, r0
 80005be:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = decToBcd(sec);
 80005c0:	7f7b      	ldrb	r3, [r7, #29]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f8d0 	bl	8001768 <decToBcd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	71bb      	strb	r3, [r7, #6]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	484e      	ldr	r0, [pc, #312]	; (8000714 <rtc_set_time+0x194>)
 80005dc:	f003 fcb1 	bl	8003f42 <HAL_RTC_SetTime>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <rtc_set_time+0x6a>
	{
	  Error_Handler();
 80005e6:	f000 ff51 	bl	800148c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <rtc_set_time+0x190>)
 80005ec:	78db      	ldrb	r3, [r3, #3]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d826      	bhi.n	8000642 <rtc_set_time+0xc2>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <rtc_set_time+0x7c>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000619 	.word	0x08000619
 8000600:	0800061f 	.word	0x0800061f
 8000604:	08000625 	.word	0x08000625
 8000608:	0800062b 	.word	0x0800062b
 800060c:	08000631 	.word	0x08000631
 8000610:	08000637 	.word	0x08000637
 8000614:	0800063d 	.word	0x0800063d

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000618:	2301      	movs	r3, #1
 800061a:	703b      	strb	r3, [r7, #0]
		break;
 800061c:	e011      	b.n	8000642 <rtc_set_time+0xc2>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800061e:	2302      	movs	r3, #2
 8000620:	703b      	strb	r3, [r7, #0]
		break;
 8000622:	e00e      	b.n	8000642 <rtc_set_time+0xc2>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000624:	2303      	movs	r3, #3
 8000626:	703b      	strb	r3, [r7, #0]
		break;
 8000628:	e00b      	b.n	8000642 <rtc_set_time+0xc2>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800062a:	2304      	movs	r3, #4
 800062c:	703b      	strb	r3, [r7, #0]
		break;
 800062e:	e008      	b.n	8000642 <rtc_set_time+0xc2>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000630:	2305      	movs	r3, #5
 8000632:	703b      	strb	r3, [r7, #0]
		break;
 8000634:	e005      	b.n	8000642 <rtc_set_time+0xc2>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000636:	2306      	movs	r3, #6
 8000638:	703b      	strb	r3, [r7, #0]
		break;
 800063a:	e002      	b.n	8000642 <rtc_set_time+0xc2>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800063c:	2307      	movs	r3, #7
 800063e:	703b      	strb	r3, [r7, #0]
		break;
 8000640:	bf00      	nop

	}


	switch( (int) time.month) {
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <rtc_set_time+0x190>)
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	3b01      	subs	r3, #1
 8000648:	2b0b      	cmp	r3, #11
 800064a:	d83f      	bhi.n	80006cc <rtc_set_time+0x14c>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <rtc_set_time+0xd4>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000685 	.word	0x08000685
 8000658:	0800068b 	.word	0x0800068b
 800065c:	08000691 	.word	0x08000691
 8000660:	08000697 	.word	0x08000697
 8000664:	0800069d 	.word	0x0800069d
 8000668:	080006a3 	.word	0x080006a3
 800066c:	080006a9 	.word	0x080006a9
 8000670:	080006af 	.word	0x080006af
 8000674:	080006b5 	.word	0x080006b5
 8000678:	080006bb 	.word	0x080006bb
 800067c:	080006c1 	.word	0x080006c1
 8000680:	080006c7 	.word	0x080006c7

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 8000684:	2301      	movs	r3, #1
 8000686:	707b      	strb	r3, [r7, #1]
		  break;
 8000688:	e020      	b.n	80006cc <rtc_set_time+0x14c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 800068a:	2302      	movs	r3, #2
 800068c:	707b      	strb	r3, [r7, #1]
		  break;
 800068e:	e01d      	b.n	80006cc <rtc_set_time+0x14c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 8000690:	2303      	movs	r3, #3
 8000692:	707b      	strb	r3, [r7, #1]
		  break;
 8000694:	e01a      	b.n	80006cc <rtc_set_time+0x14c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 8000696:	2304      	movs	r3, #4
 8000698:	707b      	strb	r3, [r7, #1]
		  break;
 800069a:	e017      	b.n	80006cc <rtc_set_time+0x14c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 800069c:	2305      	movs	r3, #5
 800069e:	707b      	strb	r3, [r7, #1]
		  break;
 80006a0:	e014      	b.n	80006cc <rtc_set_time+0x14c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80006a2:	2306      	movs	r3, #6
 80006a4:	707b      	strb	r3, [r7, #1]
		  break;
 80006a6:	e011      	b.n	80006cc <rtc_set_time+0x14c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80006a8:	2307      	movs	r3, #7
 80006aa:	707b      	strb	r3, [r7, #1]
		  break;
 80006ac:	e00e      	b.n	80006cc <rtc_set_time+0x14c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80006ae:	2308      	movs	r3, #8
 80006b0:	707b      	strb	r3, [r7, #1]
		  break;
 80006b2:	e00b      	b.n	80006cc <rtc_set_time+0x14c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 80006b4:	2309      	movs	r3, #9
 80006b6:	707b      	strb	r3, [r7, #1]
		  break;
 80006b8:	e008      	b.n	80006cc <rtc_set_time+0x14c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 80006ba:	2310      	movs	r3, #16
 80006bc:	707b      	strb	r3, [r7, #1]
		  break;
 80006be:	e005      	b.n	80006cc <rtc_set_time+0x14c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 80006c0:	2311      	movs	r3, #17
 80006c2:	707b      	strb	r3, [r7, #1]
		  break;
 80006c4:	e002      	b.n	80006cc <rtc_set_time+0x14c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 80006c6:	2312      	movs	r3, #18
 80006c8:	707b      	strb	r3, [r7, #1]
		  break;
 80006ca:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 80006cc:	7f3b      	ldrb	r3, [r7, #28]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f84a 	bl	8001768 <decToBcd>
 80006d4:	4603      	mov	r3, r0
 80006d6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = decToBcd(year);
 80006d8:	7efb      	ldrb	r3, [r7, #27]
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f844 	bl	8001768 <decToBcd>
 80006e0:	4603      	mov	r3, r0
 80006e2:	70fb      	strb	r3, [r7, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <rtc_set_time+0x194>)
 80006ec:	f003 fce6 	bl	80040bc <HAL_RTC_SetDate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <rtc_set_time+0x17a>
	{
		Error_Handler();
 80006f6:	f000 fec9 	bl	800148c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80006fa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80006fe:	2101      	movs	r1, #1
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <rtc_set_time+0x194>)
 8000702:	f003 ff73 	bl	80045ec <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000130 	.word	0x20000130
 8000714:	200001f4 	.word	0x200001f4

08000718 <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość godzin, minut, sekund oraz dni, pozostałych do włączenia alarmu
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08f      	sub	sp, #60	; 0x3c
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	4603      	mov	r3, r0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	717b      	strb	r3, [r7, #5]
 8000732:	4613      	mov	r3, r2
 8000734:	713b      	strb	r3, [r7, #4]

	get_Time();
 8000736:	f001 f8a5 	bl	8001884 <get_Time>

	uint8_t alarm_day = time.dayofmonth + day;
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <rtc_set_alarm+0xd8>)
 800073c:	791a      	ldrb	r2, [r3, #4]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4413      	add	r3, r2
 8000742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t alarm_hour = time.hour + hour;
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <rtc_set_alarm+0xd8>)
 8000748:	789a      	ldrb	r2, [r3, #2]
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	4413      	add	r3, r2
 800074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarm_min = time.minutes + min;
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <rtc_set_alarm+0xd8>)
 8000754:	785a      	ldrb	r2, [r3, #1]
 8000756:	797b      	ldrb	r3, [r7, #5]
 8000758:	4413      	add	r3, r2
 800075a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// włączamy alarm 2 sekundy wcześniej niż zaplanowany, ponieważ transmisja uartem trwa 2s
	uint8_t alarm_sec = time.seconds + sec - 2;
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <rtc_set_alarm+0xd8>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	793b      	ldrb	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	3b02      	subs	r3, #2
 800076a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
	sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800076e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fff8 	bl	8001768 <decToBcd>
 8000778:	4603      	mov	r3, r0
 800077a:	733b      	strb	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800077c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fff1 	bl	8001768 <decToBcd>
 8000786:	4603      	mov	r3, r0
 8000788:	737b      	strb	r3, [r7, #13]
	sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 800078a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800078e:	4618      	mov	r0, r3
 8000790:	f000 ffea 	bl	8001768 <decToBcd>
 8000794:	4603      	mov	r3, r0
 8000796:	73bb      	strb	r3, [r7, #14]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80007b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 ffd7 	bl	8001768 <decToBcd>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 80007c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <rtc_set_alarm+0xdc>)
 80007d0:	f003 fd1c 	bl	800420c <HAL_RTC_SetAlarm_IT>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <rtc_set_alarm+0xc6>
	{
		Error_Handler();
 80007da:	f000 fe57 	bl	800148c <Error_Handler>
	}

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_set_msg, 20);
 80007de:	2214      	movs	r2, #20
 80007e0:	4905      	ldr	r1, [pc, #20]	; (80007f8 <rtc_set_alarm+0xe0>)
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <rtc_set_alarm+0xe4>)
 80007e4:	f003 ff73 	bl	80046ce <HAL_UART_Transmit_IT>
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 80007e8:	bf00      	nop
 80007ea:	373c      	adds	r7, #60	; 0x3c
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	20000130 	.word	0x20000130
 80007f4:	200001f4 	.word	0x200001f4
 80007f8:	20000028 	.word	0x20000028
 80007fc:	20000214 	.word	0x20000214

08000800 <activate_time_and_date>:

// Funkcja sygnalizująca, że użytkownik ustawia czas i datę
void activate_time_and_date (void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	if(uart_rx_data == 't') {
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <activate_time_and_date+0x50>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b74      	cmp	r3, #116	; 0x74
 800080a:	d102      	bne.n	8000812 <activate_time_and_date+0x12>
		time_and_date_activated_flag = 1;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <activate_time_and_date+0x54>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
	}

	if(time_and_date_activated_flag) {
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <activate_time_and_date+0x54>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d013      	beq.n	8000842 <activate_time_and_date+0x42>

		new_time_and_date[time_and_date_counter] = uart_rx_data;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <activate_time_and_date+0x58>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <activate_time_and_date+0x50>)
 8000822:	7819      	ldrb	r1, [r3, #0]
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <activate_time_and_date+0x5c>)
 8000826:	5499      	strb	r1, [r3, r2]

		++time_and_date_counter;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <activate_time_and_date+0x58>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <activate_time_and_date+0x58>)
 8000832:	701a      	strb	r2, [r3, #0]

		if(time_and_date_counter == 8) {
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <activate_time_and_date+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b08      	cmp	r3, #8
 800083a:	d102      	bne.n	8000842 <activate_time_and_date+0x42>
			time_and_date_set_flag = 1;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <activate_time_and_date+0x60>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	4902      	ldr	r1, [pc, #8]	; (8000850 <activate_time_and_date+0x50>)
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <activate_time_and_date+0x64>)
 8000848:	f003 ff86 	bl	8004758 <HAL_UART_Receive_IT>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000138 	.word	0x20000138
 8000854:	2000012c 	.word	0x2000012c
 8000858:	20000109 	.word	0x20000109
 800085c:	20000124 	.word	0x20000124
 8000860:	2000012e 	.word	0x2000012e
 8000864:	20000214 	.word	0x20000214

08000868 <activate_alarm>:

// Funkcja sygnalizująca, że użytkownik ustawia alarm
void activate_alarm() {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'a') {
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <activate_alarm+0x50>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b61      	cmp	r3, #97	; 0x61
 8000872:	d102      	bne.n	800087a <activate_alarm+0x12>
		alarm_activated_flag = 1;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <activate_alarm+0x54>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <activate_alarm+0x54>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d013      	beq.n	80008aa <activate_alarm+0x42>

		new_alarm_time[alarm_counter] = uart_rx_data;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <activate_alarm+0x58>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <activate_alarm+0x50>)
 800088a:	7819      	ldrb	r1, [r3, #0]
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <activate_alarm+0x5c>)
 800088e:	5499      	strb	r1, [r3, r2]

		++alarm_counter;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <activate_alarm+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <activate_alarm+0x58>)
 800089a:	701a      	strb	r2, [r3, #0]

		if(alarm_counter == 5) {
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <activate_alarm+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d102      	bne.n	80008aa <activate_alarm+0x42>
			alarm_set_flag = 1;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <activate_alarm+0x60>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	4902      	ldr	r1, [pc, #8]	; (80008b8 <activate_alarm+0x50>)
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <activate_alarm+0x64>)
 80008b0:	f003 ff52 	bl	8004758 <HAL_UART_Receive_IT>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000138 	.word	0x20000138
 80008bc:	20000118 	.word	0x20000118
 80008c0:	20000108 	.word	0x20000108
 80008c4:	2000011c 	.word	0x2000011c
 80008c8:	20000137 	.word	0x20000137
 80008cc:	20000214 	.word	0x20000214

080008d0 <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_RTC_AlarmAEventCallback+0x1c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	2000012d 	.word	0x2000012d

080008f0 <to_do_on_alarm>:

void to_do_on_alarm(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

	lcd_clear();
 80008f4:	f000 fa0c 	bl	8000d10 <lcd_clear>
	//lcd_back_light_on();

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <to_do_on_alarm+0x30>)
 8000900:	f001 fbfe 	bl	8002100 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_on_msg, 20);
 8000904:	2214      	movs	r2, #20
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <to_do_on_alarm+0x34>)
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <to_do_on_alarm+0x38>)
 800090a:	f003 fee0 	bl	80046ce <HAL_UART_Transmit_IT>
	lcd_send_alarm_on_msg();
 800090e:	f000 fb11 	bl	8000f34 <lcd_send_alarm_on_msg>

	HAL_Delay(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f001 f91b 	bl	8001b50 <HAL_Delay>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40020000 	.word	0x40020000
 8000924:	20000000 	.word	0x20000000
 8000928:	20000214 	.word	0x20000214

0800092c <to_do_on_alarm_off>:

void to_do_on_alarm_off(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	lcd_clear();
 8000930:	f000 f9ee 	bl	8000d10 <lcd_clear>
	//lcd_back_light_on();

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_off_msg, 20);
 8000934:	2214      	movs	r2, #20
 8000936:	4907      	ldr	r1, [pc, #28]	; (8000954 <to_do_on_alarm_off+0x28>)
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <to_do_on_alarm_off+0x2c>)
 800093a:	f003 fec8 	bl	80046ce <HAL_UART_Transmit_IT>
	lcd_send_alarm_off_msg();
 800093e:	f000 fb11 	bl	8000f64 <lcd_send_alarm_off_msg>
	HAL_Delay(3000);
 8000942:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000946:	f001 f903 	bl	8001b50 <HAL_Delay>

	lcd_clear();
 800094a:	f000 f9e1 	bl	8000d10 <lcd_clear>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000014 	.word	0x20000014
 8000958:	20000214 	.word	0x20000214

0800095c <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096c:	d108      	bne.n	8000980 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000976:	f001 fbc3 	bl	8002100 <HAL_GPIO_WritePin>
		alarm_flag = 0;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_GPIO_EXTI_Callback+0x30>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
	}
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020000 	.word	0x40020000
 800098c:	2000012d 	.word	0x2000012d

08000990 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <MX_GPIO_Init+0xcc>)
 8000a02:	f001 fb7d 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a1c:	f001 f9ee 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin;
 8000a20:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <MX_GPIO_Init+0xcc>)
 8000a3a:	f001 f9df 	bl	8001dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2028      	movs	r0, #40	; 0x28
 8000a44:	f001 f981 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a48:	2028      	movs	r0, #40	; 0x28
 8000a4a:	f001 f99a 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	10210000 	.word	0x10210000
 8000a64:	40020800 	.word	0x40020800

08000a68 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_I2C1_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x58>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa6:	f001 fb5d 	bl	8002164 <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 fcec 	bl	800148c <Error_Handler>
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000013c 	.word	0x2000013c
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <MX_I2C2_Init+0x54>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000ad0:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_I2C2_Init+0x58>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_I2C2_Init+0x50>)
 8000b02:	f001 fb2f 	bl	8002164 <HAL_I2C_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b0c:	f000 fcbe 	bl	800148c <Error_Handler>
  }

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000190 	.word	0x20000190
 8000b18:	40005800 	.word	0x40005800
 8000b1c:	000186a0 	.word	0x000186a0

08000b20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <HAL_I2C_MspInit+0x10c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12d      	bne.n	8000b9e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b70:	2304      	movs	r3, #4
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482e      	ldr	r0, [pc, #184]	; (8000c34 <HAL_I2C_MspInit+0x114>)
 8000b7c:	f001 f93e 	bl	8001dfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b9c:	e041      	b.n	8000c22 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <HAL_I2C_MspInit+0x118>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d13c      	bne.n	8000c22 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <HAL_I2C_MspInit+0x114>)
 8000be2:	f001 f90b 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be6:	2308      	movs	r3, #8
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000bf6:	2309      	movs	r3, #9
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <HAL_I2C_MspInit+0x114>)
 8000c02:	f001 f8fb 	bl	8001dfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_I2C_MspInit+0x110>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40005800 	.word	0x40005800

08000c3c <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/* sekwencja inicjalizująca wyświetlacz, z dokumentacji */
	HAL_Delay(40);
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f000 ff85 	bl	8001b50 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000c46:	2030      	movs	r0, #48	; 0x30
 8000c48:	f000 f8b8 	bl	8000dbc <lcd_write_command>
	HAL_Delay(5);
 8000c4c:	2005      	movs	r0, #5
 8000c4e:	f000 ff7f 	bl	8001b50 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000c52:	2030      	movs	r0, #48	; 0x30
 8000c54:	f000 f8b2 	bl	8000dbc <lcd_write_command>
	HAL_Delay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f000 ff79 	bl	8001b50 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000c5e:	2030      	movs	r0, #48	; 0x30
 8000c60:	f000 f8ac 	bl	8000dbc <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f000 f8a9 	bl	8000dbc <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8000c6a:	200c      	movs	r0, #12
 8000c6c:	f000 f8a6 	bl	8000dbc <lcd_write_command>

	HAL_Delay(5);
 8000c70:	2005      	movs	r0, #5
 8000c72:	f000 ff6d 	bl	8001b50 <HAL_Delay>

	lcd_generate_own_chars();
 8000c76:	f000 f98d 	bl	8000f94 <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8000c7a:	f000 f849 	bl	8000d10 <lcd_clear>

	/* włączenie podświetlenia */
	//lcd_back_light_off();
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <lcd_time_and_date_init>:

void lcd_time_and_date_init() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8

	get_Time();
 8000c8a:	f000 fdfb 	bl	8001884 <get_Time>

	// wyświetlanie godziny na LCD
	lcd_first_line();
 8000c8e:	f000 f880 	bl	8000d92 <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000c94:	789b      	ldrb	r3, [r3, #2]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	4916      	ldr	r1, [pc, #88]	; (8000d00 <lcd_time_and_date_init+0x7c>)
 8000ca8:	4816      	ldr	r0, [pc, #88]	; (8000d04 <lcd_time_and_date_init+0x80>)
 8000caa:	f004 fb8f 	bl	80053cc <siprintf>
	lcd_send_string(time_date_buffer);
 8000cae:	4815      	ldr	r0, [pc, #84]	; (8000d04 <lcd_time_and_date_init+0x80>)
 8000cb0:	f000 f928 	bl	8000f04 <lcd_send_string>

	//wyświetlenie poziomu baterii
	battery_level = 100;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <lcd_time_and_date_init+0x84>)
 8000cb6:	2264      	movs	r2, #100	; 0x64
 8000cb8:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <lcd_time_and_date_init+0x84>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fa2c 	bl	800111c <lcd_show_battery_level>

	// wyświetlanie daty na LCD
	lcd_second_line();
 8000cc4:	f000 f86f 	bl	8000da6 <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000cd0:	795b      	ldrb	r3, [r3, #5]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000cd6:	799b      	ldrb	r3, [r3, #6]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	490b      	ldr	r1, [pc, #44]	; (8000d0c <lcd_time_and_date_init+0x88>)
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <lcd_time_and_date_init+0x80>)
 8000ce0:	f004 fb74 	bl	80053cc <siprintf>
	lcd_send_string(time_date_buffer);
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <lcd_time_and_date_init+0x80>)
 8000ce6:	f000 f90d 	bl	8000f04 <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_show_week_day_name(time.dayofweek);
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <lcd_time_and_date_init+0x78>)
 8000cec:	78db      	ldrb	r3, [r3, #3]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f9c8 	bl	8001084 <lcd_show_week_day_name>
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000130 	.word	0x20000130
 8000d00:	08005bf0 	.word	0x08005bf0
 8000d04:	200001e4 	.word	0x200001e4
 8000d08:	200001f1 	.word	0x200001f1
 8000d0c:	08005c00 	.word	0x08005c00

08000d10 <lcd_clear>:

void lcd_clear(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 f851 	bl	8000dbc <lcd_write_command>
	HAL_Delay(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f000 ff18 	bl	8001b50 <HAL_Delay>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <lcd_back_light_on>:

// Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD
void lcd_back_light_on(void) {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	BL = 0x08;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <lcd_back_light_on+0x14>)
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	200001f2 	.word	0x200001f2

08000d3c <lcd_set_cursor>:
void lcd_back_light_off(void) {
	BL = 0x00;
}

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <lcd_set_cursor+0x24>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d009      	beq.n	8000d72 <lcd_set_cursor+0x36>
 8000d5e:	e011      	b.n	8000d84 <lcd_set_cursor+0x48>

		case 0:
			col_number |= (0x80);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d66:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f826 	bl	8000dbc <lcd_write_command>
			break;
 8000d70:	e008      	b.n	8000d84 <lcd_set_cursor+0x48>

		case 1:
			col_number |= (0xc0);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d78:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f81d 	bl	8000dbc <lcd_write_command>
			break;
 8000d82:	bf00      	nop
	}

	HAL_Delay(5);
 8000d84:	2005      	movs	r0, #5
 8000d86:	f000 fee3 	bl	8001b50 <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 8000d96:	2080      	movs	r0, #128	; 0x80
 8000d98:	f000 f810 	bl	8000dbc <lcd_write_command>
	HAL_Delay(5);
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f000 fed7 	bl	8001b50 <HAL_Delay>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 8000daa:	20c0      	movs	r0, #192	; 0xc0
 8000dac:	f000 f806 	bl	8000dbc <lcd_write_command>
	HAL_Delay(5);
 8000db0:	2005      	movs	r0, #5
 8000db2:	f000 fecd 	bl	8001b50 <HAL_Delay>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000dc6:	234e      	movs	r3, #78	; 0x4e
 8000dc8:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		// EN = 1, RS = 0
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f023 030f 	bic.w	r3, r3, #15
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <lcd_write_command+0x8c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	f023 030f 	bic.w	r3, r3, #15
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <lcd_write_command+0x8c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		// EN = 1, RS = 0
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <lcd_write_command+0x8c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	b25a      	sxtb	r2, r3
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <lcd_write_command+0x8c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	b299      	uxth	r1, r3
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2304      	movs	r3, #4
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <lcd_write_command+0x90>)
 8000e34:	f001 face 	bl	80023d4 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000e38:	2005      	movs	r0, #5
 8000e3a:	f000 fe89 	bl	8001b50 <HAL_Delay>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001f2 	.word	0x200001f2
 8000e4c:	2000013c 	.word	0x2000013c

08000e50 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000e5a:	234e      	movs	r3, #78	; 0x4e
 8000e5c:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f023 030f 	bic.w	r3, r3, #15
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <lcd_write_data+0xac>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	f023 030f 	bic.w	r3, r3, #15
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <lcd_write_data+0xac>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <lcd_write_data+0xac>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	b25a      	sxtb	r2, r3
 8000ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <lcd_write_data+0xac>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	b299      	uxth	r1, r3
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <lcd_write_data+0xb0>)
 8000ee8:	f001 fa74 	bl	80023d4 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000eec:	2005      	movs	r0, #5
 8000eee:	f000 fe2f 	bl	8001b50 <HAL_Delay>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001f2 	.word	0x200001f2
 8000f00:	2000013c 	.word	0x2000013c

08000f04 <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	while(*string)
 8000f0c:	e006      	b.n	8000f1c <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff9a 	bl	8000e50 <lcd_write_data>
	while(*string)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f4      	bne.n	8000f0e <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8000f24:	2005      	movs	r0, #5
 8000f26:	f000 fe13 	bl	8001b50 <HAL_Delay>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

	lcd_send_string("Wy");
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <lcd_send_alarm_on_msg+0x28>)
 8000f3a:	f7ff ffe3 	bl	8000f04 <lcd_send_string>
	lcd_send_own_char(3);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f850 	bl	8000fe4 <lcd_send_own_char>
	lcd_send_own_char(8);
 8000f44:	2008      	movs	r0, #8
 8000f46:	f000 f84d 	bl	8000fe4 <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <lcd_send_alarm_on_msg+0x2c>)
 8000f4c:	f7ff ffda 	bl	8000f04 <lcd_send_string>

	HAL_Delay(5);
 8000f50:	2005      	movs	r0, #5
 8000f52:	f000 fdfd 	bl	8001b50 <HAL_Delay>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08005c14 	.word	0x08005c14
 8000f60:	08005c18 	.word	0x08005c18

08000f64 <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

	lcd_send_string("Alarm wy");
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <lcd_send_alarm_off_msg+0x28>)
 8000f6a:	f7ff ffcb 	bl	8000f04 <lcd_send_string>
	lcd_send_own_char(3);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f838 	bl	8000fe4 <lcd_send_own_char>
	lcd_send_own_char(8);
 8000f74:	2008      	movs	r0, #8
 8000f76:	f000 f835 	bl	8000fe4 <lcd_send_own_char>
	lcd_send_string("czony");
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <lcd_send_alarm_off_msg+0x2c>)
 8000f7c:	f7ff ffc2 	bl	8000f04 <lcd_send_string>

	HAL_Delay(5);
 8000f80:	2005      	movs	r0, #5
 8000f82:	f000 fde5 	bl	8001b50 <HAL_Delay>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08005c28 	.word	0x08005c28
 8000f90:	08005c34 	.word	0x08005c34

08000f94 <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 8000f9a:	2040      	movs	r0, #64	; 0x40
 8000f9c:	f7ff ff0e 	bl	8000dbc <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	e015      	b.n	8000fd2 <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	e00c      	b.n	8000fc6 <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <lcd_generate_own_chars+0x4c>)
 8000fb2:	00d2      	lsls	r2, r2, #3
 8000fb4:	440a      	add	r2, r1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff48 	bl	8000e50 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	d9ef      	bls.n	8000fac <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d9e6      	bls.n	8000fa6 <lcd_generate_own_chars+0x12>
		}
	}
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000003c 	.word	0x2000003c

08000fe4 <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	d832      	bhi.n	800105c <lcd_send_own_char+0x78>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <lcd_send_own_char+0x18>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	0800101d 	.word	0x0800101d
 8001000:	08001025 	.word	0x08001025
 8001004:	0800102d 	.word	0x0800102d
 8001008:	08001035 	.word	0x08001035
 800100c:	0800103d 	.word	0x0800103d
 8001010:	08001045 	.word	0x08001045
 8001014:	0800104d 	.word	0x0800104d
 8001018:	08001055 	.word	0x08001055

		case 1:
			lcd_send_string("\x1");
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <lcd_send_own_char+0x80>)
 800101e:	f7ff ff71 	bl	8000f04 <lcd_send_string>
			break;
 8001022:	e01b      	b.n	800105c <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <lcd_send_own_char+0x84>)
 8001026:	f7ff ff6d 	bl	8000f04 <lcd_send_string>
			break;
 800102a:	e017      	b.n	800105c <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <lcd_send_own_char+0x88>)
 800102e:	f7ff ff69 	bl	8000f04 <lcd_send_string>
			break;
 8001032:	e013      	b.n	800105c <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 8001034:	480e      	ldr	r0, [pc, #56]	; (8001070 <lcd_send_own_char+0x8c>)
 8001036:	f7ff ff65 	bl	8000f04 <lcd_send_string>
			break;
 800103a:	e00f      	b.n	800105c <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <lcd_send_own_char+0x90>)
 800103e:	f7ff ff61 	bl	8000f04 <lcd_send_string>
			break;
 8001042:	e00b      	b.n	800105c <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <lcd_send_own_char+0x94>)
 8001046:	f7ff ff5d 	bl	8000f04 <lcd_send_string>
			break;
 800104a:	e007      	b.n	800105c <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <lcd_send_own_char+0x98>)
 800104e:	f7ff ff59 	bl	8000f04 <lcd_send_string>
			break;
 8001052:	e003      	b.n	800105c <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <lcd_send_own_char+0x9c>)
 8001056:	f7ff ff55 	bl	8000f04 <lcd_send_string>
			break;
 800105a:	bf00      	nop
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08005c3c 	.word	0x08005c3c
 8001068:	08005c40 	.word	0x08005c40
 800106c:	08005c44 	.word	0x08005c44
 8001070:	08005c48 	.word	0x08005c48
 8001074:	08005c4c 	.word	0x08005c4c
 8001078:	08005c50 	.word	0x08005c50
 800107c:	08005c54 	.word	0x08005c54
 8001080:	08005c58 	.word	0x08005c58

08001084 <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 800108e:	210c      	movs	r1, #12
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fe53 	bl	8000d3c <lcd_set_cursor>

	switch(day_number) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	3b01      	subs	r3, #1
 800109a:	2b06      	cmp	r3, #6
 800109c:	d82c      	bhi.n	80010f8 <lcd_show_week_day_name+0x74>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <lcd_show_week_day_name+0x20>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010c1 	.word	0x080010c1
 80010a8:	080010c9 	.word	0x080010c9
 80010ac:	080010d1 	.word	0x080010d1
 80010b0:	080010d9 	.word	0x080010d9
 80010b4:	080010e1 	.word	0x080010e1
 80010b8:	080010e9 	.word	0x080010e9
 80010bc:	080010f1 	.word	0x080010f1

		case 1:
			lcd_send_string("pon.");
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <lcd_show_week_day_name+0x7c>)
 80010c2:	f7ff ff1f 	bl	8000f04 <lcd_send_string>
			break;
 80010c6:	e017      	b.n	80010f8 <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 80010c8:	480e      	ldr	r0, [pc, #56]	; (8001104 <lcd_show_week_day_name+0x80>)
 80010ca:	f7ff ff1b 	bl	8000f04 <lcd_send_string>
			break;
 80010ce:	e013      	b.n	80010f8 <lcd_show_week_day_name+0x74>

		case 3:
			//lcd_send_own_char(6);
			lcd_send_string("sr.");
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <lcd_show_week_day_name+0x84>)
 80010d2:	f7ff ff17 	bl	8000f04 <lcd_send_string>
			break;
 80010d6:	e00f      	b.n	80010f8 <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <lcd_show_week_day_name+0x88>)
 80010da:	f7ff ff13 	bl	8000f04 <lcd_send_string>
			break;
 80010de:	e00b      	b.n	80010f8 <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <lcd_show_week_day_name+0x8c>)
 80010e2:	f7ff ff0f 	bl	8000f04 <lcd_send_string>
			break;
 80010e6:	e007      	b.n	80010f8 <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <lcd_show_week_day_name+0x90>)
 80010ea:	f7ff ff0b 	bl	8000f04 <lcd_send_string>
			break;
 80010ee:	e003      	b.n	80010f8 <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <lcd_show_week_day_name+0x94>)
 80010f2:	f7ff ff07 	bl	8000f04 <lcd_send_string>
			break;
 80010f6:	bf00      	nop
	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08005c5c 	.word	0x08005c5c
 8001104:	08005c64 	.word	0x08005c64
 8001108:	08005c68 	.word	0x08005c68
 800110c:	08005c6c 	.word	0x08005c6c
 8001110:	08005c74 	.word	0x08005c74
 8001114:	08005c78 	.word	0x08005c78
 8001118:	08005c80 	.word	0x08005c80

0800111c <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 8001126:	210b      	movs	r1, #11
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fe07 	bl	8000d3c <lcd_set_cursor>
	lcd_send_own_char(6);
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff ff58 	bl	8000fe4 <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <lcd_show_battery_level+0x40>)
 800113c:	4618      	mov	r0, r3
 800113e:	f004 f945 	bl	80053cc <siprintf>

	lcd_send_string(battery_level);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fedc 	bl	8000f04 <lcd_send_string>
	lcd_send_string("%");
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <lcd_show_battery_level+0x44>)
 800114e:	f7ff fed9 	bl	8000f04 <lcd_send_string>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08005c88 	.word	0x08005c88
 8001160:	08005c8c 	.word	0x08005c8c

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b08d      	sub	sp, #52	; 0x34
 8001168:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116a:	f000 fc7f 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116e:	f000 f8ed 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001172:	f7ff fc0d 	bl	8000990 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001176:	f7ff fc77 	bl	8000a68 <MX_I2C1_Init>
  MX_I2C2_Init();
 800117a:	f7ff fca3 	bl	8000ac4 <MX_I2C2_Init>
  MX_RTC_Init();
 800117e:	f000 f98d 	bl	800149c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001182:	f000 fbcf 	bl	8001924 <MX_USART2_UART_Init>

  /****************** UART BEGIN ******************/

  // Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
  // Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback.
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	495f      	ldr	r1, [pc, #380]	; (8001308 <main+0x1a4>)
 800118a:	4860      	ldr	r0, [pc, #384]	; (800130c <main+0x1a8>)
 800118c:	f003 fae4 	bl	8004758 <HAL_UART_Receive_IT>

  // wystąpienie przerwania po ukończeniu odbioru informacji (RXNE - Register Not Empty)
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  // wystąpienie przerwania po ukończeniu transmisji (TC - Transmition Complete)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <main+0x1a8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <main+0x1a8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800119e:	60da      	str	r2, [r3, #12]

  /****************** UART END ******************/

  /****************** LCD BEGIN ******************/

  lcd_init();
 80011a0:	f7ff fd4c 	bl	8000c3c <lcd_init>
  lcd_back_light_on();
 80011a4:	f7ff fdbe 	bl	8000d24 <lcd_back_light_on>

  /****************** LCD END ******************/

  // Wyłączenie brzęczyka oraz diody po włączeniu uC
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ae:	4858      	ldr	r0, [pc, #352]	; (8001310 <main+0x1ac>)
 80011b0:	f000 ffa6 	bl	8002100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2120      	movs	r1, #32
 80011b8:	4855      	ldr	r0, [pc, #340]	; (8001310 <main+0x1ac>)
 80011ba:	f000 ffa1 	bl	8002100 <HAL_GPIO_WritePin>

  // Wpisanie do rejestru RTC, czasu i daty pobranych z DS3231, aby czas w RTC był aktualny
  rtc_set_time();
 80011be:	f7ff f9df 	bl	8000580 <rtc_set_time>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	lcd_time_and_date_init();
 80011c2:	f7ff fd5f 	bl	8000c84 <lcd_time_and_date_init>

	if(alarm_flag) {
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <main+0x1b0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d008      	beq.n	80011e0 <main+0x7c>

		while (alarm_flag) {
 80011ce:	e001      	b.n	80011d4 <main+0x70>
			to_do_on_alarm();
 80011d0:	f7ff fb8e 	bl	80008f0 <to_do_on_alarm>
		while (alarm_flag) {
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <main+0x1b0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f9      	bne.n	80011d0 <main+0x6c>
		}

		to_do_on_alarm_off();
 80011dc:	f7ff fba6 	bl	800092c <to_do_on_alarm_off>
	}

	// wykonaj jeśli użytkownik ustawił nowy czas alarmu
	if(alarm_set_flag) {
 80011e0:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <main+0x1b4>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d044      	beq.n	8001272 <main+0x10e>

		get_Time();
 80011e8:	f000 fb4c 	bl	8001884 <get_Time>

		uint8_t days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm;
		char alarm_details_msg[9];

		days_to_alarm = new_alarm_time[1];	// dni to drugi element, ponieważ pierwszy to literka a
 80011ec:	4b4b      	ldr	r3, [pc, #300]	; (800131c <main+0x1b8>)
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	77fb      	strb	r3, [r7, #31]
											// mówiąca o tym, że ustawiamy alarm.
											// a jak alarm
		hours_to_alarm = new_alarm_time[2];
 80011f2:	4b4a      	ldr	r3, [pc, #296]	; (800131c <main+0x1b8>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	77bb      	strb	r3, [r7, #30]
		minutes_to_alarm = new_alarm_time[3];
 80011f8:	4b48      	ldr	r3, [pc, #288]	; (800131c <main+0x1b8>)
 80011fa:	78db      	ldrb	r3, [r3, #3]
 80011fc:	777b      	strb	r3, [r7, #29]
		seconds_to_alarm = new_alarm_time[4];
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <main+0x1b8>)
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	773b      	strb	r3, [r7, #28]

		rtc_set_alarm(days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm);
 8001204:	7f3b      	ldrb	r3, [r7, #28]
 8001206:	7f7a      	ldrb	r2, [r7, #29]
 8001208:	7fb9      	ldrb	r1, [r7, #30]
 800120a:	7ff8      	ldrb	r0, [r7, #31]
 800120c:	f7ff fa84 	bl	8000718 <rtc_set_alarm>

		lcd_clear();
 8001210:	f7ff fd7e 	bl	8000d10 <lcd_clear>

		sprintf(alarm_details_msg, "%02d:%02d:%02d", time.hour + hours_to_alarm, time.minutes + minutes_to_alarm, time.seconds + seconds_to_alarm);
 8001214:	4b42      	ldr	r3, [pc, #264]	; (8001320 <main+0x1bc>)
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	461a      	mov	r2, r3
 800121a:	7fbb      	ldrb	r3, [r7, #30]
 800121c:	441a      	add	r2, r3
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <main+0x1bc>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	4619      	mov	r1, r3
 8001224:	7f7b      	ldrb	r3, [r7, #29]
 8001226:	4419      	add	r1, r3
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <main+0x1bc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	7f3b      	ldrb	r3, [r7, #28]
 8001230:	4403      	add	r3, r0
 8001232:	f107 000c 	add.w	r0, r7, #12
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	460b      	mov	r3, r1
 800123a:	493a      	ldr	r1, [pc, #232]	; (8001324 <main+0x1c0>)
 800123c:	f004 f8c6 	bl	80053cc <siprintf>
		lcd_send_string("Alarm na godz.:");
 8001240:	4839      	ldr	r0, [pc, #228]	; (8001328 <main+0x1c4>)
 8001242:	f7ff fe5f 	bl	8000f04 <lcd_send_string>
		lcd_second_line();
 8001246:	f7ff fdae 	bl	8000da6 <lcd_second_line>
		lcd_send_string(alarm_details_msg);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fe58 	bl	8000f04 <lcd_send_string>

		HAL_Delay(3000);
 8001254:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001258:	f000 fc7a 	bl	8001b50 <HAL_Delay>
		lcd_clear();
 800125c:	f7ff fd58 	bl	8000d10 <lcd_clear>

		alarm_set_flag = 0;
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <main+0x1b4>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <main+0x1c8>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		alarm_counter = 0;
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <main+0x1cc>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	}

	if(time_and_date_set_flag) {
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <main+0x1d0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0a3      	beq.n	80011c2 <main+0x5e>

		uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
		char new_date_details_msg[12];

		new_sec = new_time_and_date[1];
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <main+0x1d4>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	76fb      	strb	r3, [r7, #27]
		new_min = new_time_and_date[2];
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <main+0x1d4>)
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	76bb      	strb	r3, [r7, #26]
		new_hour = new_time_and_date[3];
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <main+0x1d4>)
 8001288:	78db      	ldrb	r3, [r3, #3]
 800128a:	767b      	strb	r3, [r7, #25]
		new_dow = new_time_and_date[4];
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <main+0x1d4>)
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	763b      	strb	r3, [r7, #24]
		new_dom = new_time_and_date[5];
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <main+0x1d4>)
 8001294:	795b      	ldrb	r3, [r3, #5]
 8001296:	75fb      	strb	r3, [r7, #23]
		new_month = new_time_and_date[6];
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <main+0x1d4>)
 800129a:	799b      	ldrb	r3, [r3, #6]
 800129c:	75bb      	strb	r3, [r7, #22]
		new_year = new_time_and_date[7];
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <main+0x1d4>)
 80012a0:	79db      	ldrb	r3, [r3, #7]
 80012a2:	757b      	strb	r3, [r7, #21]

		set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 80012a4:	7e3c      	ldrb	r4, [r7, #24]
 80012a6:	7e7a      	ldrb	r2, [r7, #25]
 80012a8:	7eb9      	ldrb	r1, [r7, #26]
 80012aa:	7ef8      	ldrb	r0, [r7, #27]
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	7dbb      	ldrb	r3, [r7, #22]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4623      	mov	r3, r4
 80012ba:	f000 fa93 	bl	80017e4 <set_Time>

		lcd_clear();
 80012be:	f7ff fd27 	bl	8000d10 <lcd_clear>
		sprintf(new_date_details_msg, "%02d-%02d-20%02d", new_dom, new_month, new_year);
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	7db9      	ldrb	r1, [r7, #22]
 80012c6:	7d7b      	ldrb	r3, [r7, #21]
 80012c8:	4638      	mov	r0, r7
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	460b      	mov	r3, r1
 80012ce:	491b      	ldr	r1, [pc, #108]	; (800133c <main+0x1d8>)
 80012d0:	f004 f87c 	bl	80053cc <siprintf>
		lcd_send_string("Nowa data:");
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <main+0x1dc>)
 80012d6:	f7ff fe15 	bl	8000f04 <lcd_send_string>
		lcd_second_line();
 80012da:	f7ff fd64 	bl	8000da6 <lcd_second_line>
		lcd_send_string(new_date_details_msg);
 80012de:	463b      	mov	r3, r7
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe0f 	bl	8000f04 <lcd_send_string>

		HAL_Delay(3000);
 80012e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012ea:	f000 fc31 	bl	8001b50 <HAL_Delay>
		lcd_clear();
 80012ee:	f7ff fd0f 	bl	8000d10 <lcd_clear>

		time_and_date_set_flag = 0;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <main+0x1d0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		time_and_date_activated_flag = 0;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <main+0x1e0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
		time_and_date_counter = 0;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <main+0x1e4>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	lcd_time_and_date_init();
 8001304:	e75d      	b.n	80011c2 <main+0x5e>
 8001306:	bf00      	nop
 8001308:	20000138 	.word	0x20000138
 800130c:	20000214 	.word	0x20000214
 8001310:	40020000 	.word	0x40020000
 8001314:	2000012d 	.word	0x2000012d
 8001318:	20000137 	.word	0x20000137
 800131c:	2000011c 	.word	0x2000011c
 8001320:	20000130 	.word	0x20000130
 8001324:	08005c90 	.word	0x08005c90
 8001328:	08005ca0 	.word	0x08005ca0
 800132c:	20000118 	.word	0x20000118
 8001330:	20000108 	.word	0x20000108
 8001334:	2000012e 	.word	0x2000012e
 8001338:	20000124 	.word	0x20000124
 800133c:	08005cb0 	.word	0x08005cb0
 8001340:	08005cc4 	.word	0x08005cc4
 8001344:	2000012c 	.word	0x2000012c
 8001348:	20000109 	.word	0x20000109

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b098      	sub	sp, #96	; 0x60
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f004 f82e 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <SystemClock_Config+0x100>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a30      	ldr	r2, [pc, #192]	; (800144c <SystemClock_Config+0x100>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <SystemClock_Config+0x100>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <SystemClock_Config+0x104>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <SystemClock_Config+0x104>)
 80013aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <SystemClock_Config+0x104>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013bc:	230a      	movs	r3, #10
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2310      	movs	r3, #16
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013d4:	2308      	movs	r3, #8
 80013d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 ffef 	bl	80033cc <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013f4:	f000 f84a 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fa49 	bl	80038ac <HAL_RCC_ClockConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001420:	f000 f834 	bl	800148c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001424:	2302      	movs	r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f002 fc06 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800143e:	f000 f825 	bl	800148c <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3760      	adds	r7, #96	; 0x60
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart1, a nie coś innego
	if(huart->Instance==USART2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_UART_RxCpltCallback+0x2c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d108      	bne.n	8001478 <HAL_UART_RxCpltCallback+0x24>
	{
		activate_time_and_date();
 8001466:	f7ff f9cb 	bl	8000800 <activate_time_and_date>
		activate_alarm();
 800146a:	f7ff f9fd 	bl	8000868 <activate_alarm>

		// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800146e:	2201      	movs	r2, #1
 8001470:	4904      	ldr	r1, [pc, #16]	; (8001484 <HAL_UART_RxCpltCallback+0x30>)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_UART_RxCpltCallback+0x34>)
 8001474:	f003 f970 	bl	8004758 <HAL_UART_Receive_IT>
	}

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40004400 	.word	0x40004400
 8001484:	20000138 	.word	0x20000138
 8001488:	20000214 	.word	0x20000214

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b090      	sub	sp, #64	; 0x40
 80014a0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80014b6:	463b      	mov	r3, r7
 80014b8:	2228      	movs	r2, #40	; 0x28
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ff7d 	bl	80053bc <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_RTC_Init+0x110>)
 80014c4:	4a3a      	ldr	r2, [pc, #232]	; (80015b0 <MX_RTC_Init+0x114>)
 80014c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <MX_RTC_Init+0x110>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <MX_RTC_Init+0x110>)
 80014d0:	227f      	movs	r2, #127	; 0x7f
 80014d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <MX_RTC_Init+0x110>)
 80014d6:	22ff      	movs	r2, #255	; 0xff
 80014d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <MX_RTC_Init+0x110>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MX_RTC_Init+0x110>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <MX_RTC_Init+0x110>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ec:	482f      	ldr	r0, [pc, #188]	; (80015ac <MX_RTC_Init+0x110>)
 80014ee:	f002 fc97 	bl	8003e20 <HAL_RTC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80014f8:	f7ff ffc8 	bl	800148c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80014fc:	2318      	movs	r3, #24
 80014fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x33;
 8001502:	2333      	movs	r3, #51	; 0x33
 8001504:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	4823      	ldr	r0, [pc, #140]	; (80015ac <MX_RTC_Init+0x110>)
 8001520:	f002 fd0f 	bl	8003f42 <HAL_RTC_SetTime>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800152a:	f7ff ffaf 	bl	800148c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800152e:	2307      	movs	r3, #7
 8001530:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 8001534:	2310      	movs	r3, #16
 8001536:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x25;
 800153a:	2325      	movs	r3, #37	; 0x25
 800153c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 8001540:	2320      	movs	r3, #32
 8001542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	2201      	movs	r2, #1
 800154c:	4619      	mov	r1, r3
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <MX_RTC_Init+0x110>)
 8001550:	f002 fdb4 	bl	80040bc <HAL_RTC_SetDate>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800155a:	f7ff ff97 	bl	800148c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 800155e:	2319      	movs	r3, #25
 8001560:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 8001562:	2323      	movs	r3, #35	; 0x23
 8001564:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001566:	2310      	movs	r3, #16
 8001568:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 8001582:	2312      	movs	r3, #18
 8001584:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_RTC_Init+0x110>)
 8001596:	f002 fe39 	bl	800420c <HAL_RTC_SetAlarm_IT>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80015a0:	f7ff ff74 	bl	800148c <Error_Handler>
  }

}
 80015a4:	bf00      	nop
 80015a6:	3740      	adds	r7, #64	; 0x40
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001f4 	.word	0x200001f4
 80015b0:	40002800 	.word	0x40002800

080015b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_RTC_MspInit+0x30>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10a      	bne.n	80015dc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_RTC_MspInit+0x34>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2029      	movs	r0, #41	; 0x29
 80015d2:	f000 fbba 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015d6:	2029      	movs	r0, #41	; 0x29
 80015d8:	f000 fbd3 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40002800 	.word	0x40002800
 80015e8:	42470e3c 	.word	0x42470e3c

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_MspInit+0x4c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_MspInit+0x4c>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 fa3e 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <USART2_IRQHandler+0x10>)
 800169e:	f003 f8b1 	bl	8004804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000214 	.word	0x20000214

080016ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016b4:	f000 fd3e 	bl	8002134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <RTC_Alarm_IRQHandler+0x10>)
 80016c2:	f002 fedb 	bl	800447c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001f4 	.word	0x200001f4

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f003 fe32 	bl	8005368 <__errno>
 8001704:	4602      	mov	r2, r0
 8001706:	230c      	movs	r3, #12
 8001708:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20018000 	.word	0x20018000
 8001730:	00000400 	.word	0x00000400
 8001734:	2000010c 	.word	0x2000010c
 8001738:	20000260 	.word	0x20000260

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <SystemInit+0x28>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <SystemInit+0x28>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SystemInit+0x28>)
 8001752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001756:	609a      	str	r2, [r3, #8]
#endif
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <decToBcd>:
#define DS3231_ADDRESS 0xD0

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <decToBcd+0x48>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	1092      	asrs	r2, r2, #2
 800177a:	17db      	asrs	r3, r3, #31
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	b2d8      	uxtb	r0, r3
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <decToBcd+0x48>)
 8001788:	fb83 1302 	smull	r1, r3, r3, r2
 800178c:	1099      	asrs	r1, r3, #2
 800178e:	17d3      	asrs	r3, r2, #31
 8001790:	1ac9      	subs	r1, r1, r3
 8001792:	460b      	mov	r3, r1
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	1ad1      	subs	r1, r2, r3
 800179c:	b2cb      	uxtb	r3, r1
 800179e:	4403      	add	r3, r0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	66666667 	.word	0x66666667

080017b4 <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	461a      	mov	r2, r3
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4413      	add	r3, r2
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <set_Time>:
TIME time;

// Metoda odpowiedzialna za ustawienie czasu i daty
// set_Time(sec, min, hour, dow, dom, month, year)
void set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	4604      	mov	r4, r0
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	4603      	mov	r3, r0
 80017f8:	71bb      	strb	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	717b      	strb	r3, [r7, #5]
 80017fe:	4613      	mov	r3, r2
 8001800:	713b      	strb	r3, [r7, #4]
	uint8_t time_to_write[7];

	time_to_write[0] = decToBcd(sec);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ffaf 	bl	8001768 <decToBcd>
 800180a:	4603      	mov	r3, r0
 800180c:	723b      	strb	r3, [r7, #8]
	time_to_write[1] = decToBcd(min);
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ffa9 	bl	8001768 <decToBcd>
 8001816:	4603      	mov	r3, r0
 8001818:	727b      	strb	r3, [r7, #9]
	time_to_write[2] = decToBcd(hour);
 800181a:	797b      	ldrb	r3, [r7, #5]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffa3 	bl	8001768 <decToBcd>
 8001822:	4603      	mov	r3, r0
 8001824:	72bb      	strb	r3, [r7, #10]
	time_to_write[3] = decToBcd(dow);
 8001826:	793b      	ldrb	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff9d 	bl	8001768 <decToBcd>
 800182e:	4603      	mov	r3, r0
 8001830:	72fb      	strb	r3, [r7, #11]
	time_to_write[4] = decToBcd(dom);
 8001832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff96 	bl	8001768 <decToBcd>
 800183c:	4603      	mov	r3, r0
 800183e:	733b      	strb	r3, [r7, #12]
	time_to_write[5] = decToBcd(month);
 8001840:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff8f 	bl	8001768 <decToBcd>
 800184a:	4603      	mov	r3, r0
 800184c:	737b      	strb	r3, [r7, #13]
	time_to_write[6] = decToBcd(year);
 800184e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff88 	bl	8001768 <decToBcd>
 8001858:	4603      	mov	r3, r0
 800185a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
 800185c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2307      	movs	r3, #7
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2301      	movs	r3, #1
 800186e:	2200      	movs	r2, #0
 8001870:	21d0      	movs	r1, #208	; 0xd0
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <set_Time+0x9c>)
 8001874:	f000 feac 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	20000190 	.word	0x20000190

08001884 <get_Time>:

void get_Time (void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af04      	add	r7, sp, #16
	uint8_t time_to_red[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_red, 7, 1000);
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2307      	movs	r3, #7
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	463b      	mov	r3, r7
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	2200      	movs	r2, #0
 800189c:	21d0      	movs	r1, #208	; 0xd0
 800189e:	481f      	ldr	r0, [pc, #124]	; (800191c <get_Time+0x98>)
 80018a0:	f000 ff90 	bl	80027c4 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_red[0]);
 80018a4:	783b      	ldrb	r3, [r7, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff84 	bl	80017b4 <bcdToDec>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <get_Time+0x9c>)
 80018b2:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_red[1]);
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff7c 	bl	80017b4 <bcdToDec>
 80018bc:	4603      	mov	r3, r0
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <get_Time+0x9c>)
 80018c2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_red[2]);
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff74 	bl	80017b4 <bcdToDec>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <get_Time+0x9c>)
 80018d2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_red[3]);
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff6c 	bl	80017b4 <bcdToDec>
 80018dc:	4603      	mov	r3, r0
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <get_Time+0x9c>)
 80018e2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_red[4]);
 80018e4:	793b      	ldrb	r3, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff64 	bl	80017b4 <bcdToDec>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <get_Time+0x9c>)
 80018f2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_red[5]);
 80018f4:	797b      	ldrb	r3, [r7, #5]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff5c 	bl	80017b4 <bcdToDec>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <get_Time+0x9c>)
 8001902:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_red[6]);
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff54 	bl	80017b4 <bcdToDec>
 800190c:	4603      	mov	r3, r0
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <get_Time+0x9c>)
 8001912:	719a      	strb	r2, [r3, #6]
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000190 	.word	0x20000190
 8001920:	20000130 	.word	0x20000130

08001924 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_USART2_UART_Init+0x50>)
 800192c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001930:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800195c:	f002 fe6a 	bl	8004634 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f7ff fd91 	bl	800148c <Error_Handler>
  }

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000214 	.word	0x20000214
 8001974:	40004400 	.word	0x40004400

08001978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_UART_MspInit+0x94>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d133      	bne.n	8001a02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_UART_MspInit+0x98>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d2:	230c      	movs	r3, #12
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e2:	2307      	movs	r3, #7
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_UART_MspInit+0x9c>)
 80019ee:	f000 fa05 	bl	8001dfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2026      	movs	r0, #38	; 0x26
 80019f8:	f000 f9a7 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019fc:	2026      	movs	r0, #38	; 0x26
 80019fe:	f000 f9c0 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a1e:	e003      	b.n	8001a28 <LoopCopyDataInit>

08001a20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a26:	3104      	adds	r1, #4

08001a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a30:	d3f6      	bcc.n	8001a20 <CopyDataInit>
  ldr  r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a34:	e002      	b.n	8001a3c <LoopFillZerobss>

08001a36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a38:	f842 3b04 	str.w	r3, [r2], #4

08001a3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a40:	d3f9      	bcc.n	8001a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a42:	f7ff fe7b 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f003 fc95 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fb8b 	bl	8001164 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001a54:	08005d2c 	.word	0x08005d2c
  ldr  r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a5c:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001a60:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001a64:	2000025c 	.word	0x2000025c

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f94d 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fda4 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f965 	bl	8001d9e <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 f92d 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000007c 	.word	0x2000007c
 8001b08:	20000084 	.word	0x20000084
 8001b0c:	20000080 	.word	0x20000080

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000084 	.word	0x20000084
 8001b34:	20000254 	.word	0x20000254

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000254 	.word	0x20000254

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_Delay+0x40>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000084 	.word	0x20000084

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e00c      	b.n	8001dee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e159      	b.n	80020cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8148 	bne.w	80020c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00b      	beq.n	8001e56 <HAL_GPIO_Init+0x5a>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4a:	2b11      	cmp	r3, #17
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d130      	bne.n	8001eb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0xfc>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a2 	beq.w	80020c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <HAL_GPIO_Init+0x2e4>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <HAL_GPIO_Init+0x2e4>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_GPIO_Init+0x2e4>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_GPIO_Init+0x2e8>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_GPIO_Init+0x2ec>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x202>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_GPIO_Init+0x2f0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x1fe>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_GPIO_Init+0x2f4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x1fa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a45      	ldr	r2, [pc, #276]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a44      	ldr	r2, [pc, #272]	; (80020f8 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x1f2>
 8001fea:	2304      	movs	r3, #4
 8001fec:	e008      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e004      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ffe:	2300      	movs	r3, #0
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f002 0203 	and.w	r2, r2, #3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4093      	lsls	r3, r2
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002010:	4934      	ldr	r1, [pc, #208]	; (80020e4 <HAL_GPIO_Init+0x2e8>)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x300>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002042:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_GPIO_Init+0x300>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_GPIO_Init+0x300>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206c:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_GPIO_Init+0x300>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_GPIO_Init+0x300>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_GPIO_Init+0x300>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_GPIO_Init+0x300>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_GPIO_Init+0x300>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	f67f aea2 	bls.w	8001e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3724      	adds	r7, #36	; 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40013c00 	.word	0x40013c00

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fc02 	bl	800095c <HAL_GPIO_EXTI_Callback>
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e11f      	b.n	80023b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fcc8 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 fd14 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_I2C_Init+0x25c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <HAL_I2C_Init+0x84>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_I2C_Init+0x260>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e006      	b.n	80021f6 <HAL_I2C_Init+0x92>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_I2C_Init+0x264>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0db      	b.n	80023b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a72      	ldr	r2, [pc, #456]	; (80023cc <HAL_I2C_Init+0x268>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a64      	ldr	r2, [pc, #400]	; (80023c0 <HAL_I2C_Init+0x25c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d802      	bhi.n	8002238 <HAL_I2C_Init+0xd4>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	e009      	b.n	800224c <HAL_I2C_Init+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_I2C_Init+0x26c>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4956      	ldr	r1, [pc, #344]	; (80023c0 <HAL_I2C_Init+0x25c>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d80d      	bhi.n	8002288 <HAL_I2C_Init+0x124>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e59      	subs	r1, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb1 f3f3 	udiv	r3, r1, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	bf38      	it	cc
 8002284:	2304      	movcc	r3, #4
 8002286:	e04f      	b.n	8002328 <HAL_I2C_Init+0x1c4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_I2C_Init+0x150>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e012      	b.n	80022da <HAL_I2C_Init+0x176>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x17e>
 80022de:	2301      	movs	r3, #1
 80022e0:	e022      	b.n	8002328 <HAL_I2C_Init+0x1c4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <HAL_I2C_Init+0x1a4>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e58      	subs	r0, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Init+0x1c4>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6809      	ldr	r1, [r1, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6911      	ldr	r1, [r2, #16]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	000186a0 	.word	0x000186a0
 80023c4:	001e847f 	.word	0x001e847f
 80023c8:	003d08ff 	.word	0x003d08ff
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	461a      	mov	r2, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	817b      	strh	r3, [r7, #10]
 80023e4:	4613      	mov	r3, r2
 80023e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff fba6 	bl	8001b38 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	f040 80e0 	bne.w	80025bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2319      	movs	r3, #25
 8002402:	2201      	movs	r2, #1
 8002404:	4970      	ldr	r1, [pc, #448]	; (80025c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fe02 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	e0d3      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_I2C_Master_Transmit+0x50>
 8002420:	2302      	movs	r3, #2
 8002422:	e0cc      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d007      	beq.n	800244a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002458:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2221      	movs	r2, #33	; 0x21
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2210      	movs	r2, #16
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	893a      	ldrh	r2, [r7, #8]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_I2C_Master_Transmit+0x1f8>)
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800248c:	8979      	ldrh	r1, [r7, #10]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fbbc 	bl	8002c10 <I2C_MasterRequestWrite>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e08d      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b8:	e066      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6a39      	ldr	r1, [r7, #32]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fe7c 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d107      	bne.n	80024e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06b      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_I2C_Master_Transmit+0x188>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d017      	beq.n	800255c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	6a39      	ldr	r1, [r7, #32]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fe6c 	bl	800323e <I2C_WaitOnBTFFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e01a      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d194      	bne.n	80024ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000

080025d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ea:	f7ff faa5 	bl	8001b38 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 80d9 	bne.w	80027b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	496d      	ldr	r1, [pc, #436]	; (80027bc <HAL_I2C_Mem_Write+0x1ec>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fd01 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e0cc      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Write+0x56>
 8002622:	2302      	movs	r3, #2
 8002624:	e0c5      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2221      	movs	r2, #33	; 0x21
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_I2C_Mem_Write+0x1f0>)
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268e:	88f8      	ldrh	r0, [r7, #6]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4603      	mov	r3, r0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fb38 	bl	8002d14 <I2C_RequestMemoryWrite>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e081      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fd82 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d11b      	bne.n	8002750 <HAL_I2C_Mem_Write+0x180>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d017      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1aa      	bne.n	80026ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fd6e 	bl	800323e <I2C_WaitOnBTFFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e016      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	00100002 	.word	0x00100002
 80027c0:	ffff0000 	.word	0xffff0000

080027c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff f9ab 	bl	8001b38 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 8208 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	497b      	ldr	r1, [pc, #492]	; (80029e8 <HAL_I2C_Mem_Read+0x224>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fc07 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e1fb      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Read+0x56>
 8002816:	2302      	movs	r3, #2
 8002818:	e1f4      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2222      	movs	r2, #34	; 0x22
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a5b      	ldr	r2, [pc, #364]	; (80029ec <HAL_I2C_Mem_Read+0x228>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fad4 	bl	8002e40 <I2C_RequestMemoryRead>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1b0      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	623b      	str	r3, [r7, #32]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e184      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d11b      	bne.n	8002912 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e164      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	2b02      	cmp	r3, #2
 8002918:	d11b      	bne.n	8002952 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	e144      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002968:	e138      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	2b03      	cmp	r3, #3
 8002970:	f200 80f1 	bhi.w	8002b56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	2b01      	cmp	r3, #1
 800297a:	d123      	bne.n	80029c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fc9d 	bl	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e139      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c2:	e10b      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d14e      	bne.n	8002a6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	2200      	movs	r2, #0
 80029d4:	4906      	ldr	r1, [pc, #24]	; (80029f0 <HAL_I2C_Mem_Read+0x22c>)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fb1a 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e10e      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
 80029e6:	bf00      	nop
 80029e8:	00100002 	.word	0x00100002
 80029ec:	ffff0000 	.word	0xffff0000
 80029f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a68:	e0b8      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	2200      	movs	r2, #0
 8002a72:	4966      	ldr	r1, [pc, #408]	; (8002c0c <HAL_I2C_Mem_Read+0x448>)
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 facb 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0bf      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2200      	movs	r2, #0
 8002ace:	494f      	ldr	r1, [pc, #316]	; (8002c0c <HAL_I2C_Mem_Read+0x448>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fa9d 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e091      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b54:	e042      	b.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fbb0 	bl	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04c      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d118      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f aec2 	bne.w	800296a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00010004 	.word	0x00010004

08002c10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d006      	beq.n	8002c3a <I2C_MasterRequestWrite+0x2a>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d003      	beq.n	8002c3a <I2C_MasterRequestWrite+0x2a>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c38:	d108      	bne.n	8002c4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00b      	b.n	8002c64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	2b12      	cmp	r3, #18
 8002c52:	d107      	bne.n	8002c64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f9cd 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8a:	d103      	bne.n	8002c94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e035      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca0:	d108      	bne.n	8002cb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]
 8002cb2:	e01b      	b.n	8002cec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	11db      	asrs	r3, r3, #7
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0306 	and.w	r3, r3, #6
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f063 030f 	orn	r3, r3, #15
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <I2C_MasterRequestWrite+0xfc>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9f3 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e010      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ce2:	897b      	ldrh	r3, [r7, #10]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <I2C_MasterRequestWrite+0x100>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f9e3 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	00010008 	.word	0x00010008
 8002d10:	00010002 	.word	0x00010002

08002d14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f960 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d103      	bne.n	8002d6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e05f      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	492d      	ldr	r1, [pc, #180]	; (8002e3c <I2C_RequestMemoryWrite+0x128>)
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f998 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e04c      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa02 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e02b      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e021      	b.n	8002e30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9dc 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e005      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	00010002 	.word	0x00010002

08002e40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8c2 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea0:	d103      	bne.n	8002eaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0aa      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ebc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	4952      	ldr	r1, [pc, #328]	; (800300c <I2C_RequestMemoryRead+0x1cc>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f8fa 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e097      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f964 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e076      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	e021      	b.n	8002f6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f28:	893b      	ldrh	r3, [r7, #8]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6a39      	ldr	r1, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f93e 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e050      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6e:	6a39      	ldr	r1, [r7, #32]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f923 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e035      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f82b 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fce:	d103      	bne.n	8002fd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e013      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	4906      	ldr	r1, [pc, #24]	; (800300c <I2C_RequestMemoryRead+0x1cc>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f863 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	00010002 	.word	0x00010002

08003010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003020:	e025      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d021      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe fd85 	bl	8001b38 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e023      	b.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10d      	bne.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4013      	ands	r3, r2
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	e00c      	b.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d0b6      	beq.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030cc:	e051      	b.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d123      	bne.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e046      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d021      	beq.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fe fd03 	bl	8001b38 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d116      	bne.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e020      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10c      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e00b      	b.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d18d      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c8:	e02d      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8ce 	bl	800336c <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e02d      	b.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d021      	beq.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fca9 	bl	8001b38 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e007      	b.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d1ca      	bne.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800324a:	e02d      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f88d 	bl	800336c <I2C_IsAcknowledgeFailed>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e02d      	b.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d021      	beq.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fe fc68 	bl	8001b38 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d1ca      	bne.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032cc:	e042      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d119      	bne.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0210 	mvn.w	r2, #16
 80032e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e029      	b.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fe fc12 	bl	8001b38 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d1b5      	bne.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d11b      	bne.n	80033bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e25b      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d075      	beq.n	80034d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	4ba3      	ldr	r3, [pc, #652]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d00c      	beq.n	8003410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f6:	4ba0      	ldr	r3, [pc, #640]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d112      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b9d      	ldr	r3, [pc, #628]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340e:	d10b      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	4b99      	ldr	r3, [pc, #612]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05b      	beq.n	80034d4 <HAL_RCC_OscConfig+0x108>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d157      	bne.n	80034d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e236      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x74>
 8003432:	4b91      	ldr	r3, [pc, #580]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a90      	ldr	r2, [pc, #576]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e01d      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x98>
 800344a:	4b8b      	ldr	r3, [pc, #556]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a8a      	ldr	r2, [pc, #552]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a87      	ldr	r2, [pc, #540]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003464:	4b84      	ldr	r3, [pc, #528]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a83      	ldr	r2, [pc, #524]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a80      	ldr	r2, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fb58 	bl	8001b38 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fb54 	bl	8001b38 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e1fb      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xc0>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fb44 	bl	8001b38 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fb40 	bl	8001b38 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1e7      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0xe8>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d063      	beq.n	80035aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1bb      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b56      	ldr	r3, [pc, #344]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4952      	ldr	r1, [pc, #328]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	e03a      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b4f      	ldr	r3, [pc, #316]	; (800367c <HAL_RCC_OscConfig+0x2b0>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe faf9 	bl	8001b38 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe faf5 	bl	8001b38 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e19c      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4940      	ldr	r1, [pc, #256]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_RCC_OscConfig+0x2b0>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fad8 	bl	8001b38 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fad4 	bl	8001b38 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e17b      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d030      	beq.n	8003618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_RCC_OscConfig+0x2b4>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fab8 	bl	8001b38 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe fab4 	bl	8001b38 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e15b      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x200>
 80035ea:	e015      	b.n	8003618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_OscConfig+0x2b4>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe faa1 	bl	8001b38 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe fa9d 	bl	8001b38 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e144      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a0 	beq.w	8003766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x2b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d121      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <HAL_RCC_OscConfig+0x2b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <HAL_RCC_OscConfig+0x2b8>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fe fa63 	bl	8001b38 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e011      	b.n	800369a <HAL_RCC_OscConfig+0x2ce>
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	42470000 	.word	0x42470000
 8003680:	42470e80 	.word	0x42470e80
 8003684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fe fa56 	bl	8001b38 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0fd      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_OscConfig+0x4d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d106      	bne.n	80036bc <HAL_RCC_OscConfig+0x2f0>
 80036ae:	4b7d      	ldr	r3, [pc, #500]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a7c      	ldr	r2, [pc, #496]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	e01c      	b.n	80036f6 <HAL_RCC_OscConfig+0x32a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x312>
 80036c4:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a76      	ldr	r2, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b74      	ldr	r3, [pc, #464]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a73      	ldr	r2, [pc, #460]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0x32a>
 80036de:	4b71      	ldr	r3, [pc, #452]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a70      	ldr	r2, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b6e      	ldr	r3, [pc, #440]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fa1b 	bl	8001b38 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fa17 	bl	8001b38 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0bc      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCC_OscConfig+0x33a>
 8003728:	e014      	b.n	8003754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fe fa05 	bl	8001b38 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fa01 	bl	8001b38 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0a6      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ee      	bne.n	8003732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b52      	ldr	r3, [pc, #328]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a51      	ldr	r2, [pc, #324]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8092 	beq.w	8003894 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d05c      	beq.n	8003836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d141      	bne.n	8003808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCC_OscConfig+0x4dc>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe f9d5 	bl	8001b38 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe f9d1 	bl	8001b38 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e078      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a4:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	019b      	lsls	r3, r3, #6
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	4933      	ldr	r1, [pc, #204]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCC_OscConfig+0x4dc>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe f9aa 	bl	8001b38 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe f9a6 	bl	8001b38 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04d      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x41c>
 8003806:	e045      	b.n	8003894 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x4dc>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe f993 	bl	8001b38 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe f98f 	bl	8001b38 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e036      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x44a>
 8003834:	e02e      	b.n	8003894 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e029      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_RCC_OscConfig+0x4d8>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	429a      	cmp	r2, r3
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d115      	bne.n	8003890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800386a:	4013      	ands	r3, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003870:	4293      	cmp	r3, r2
 8003872:	d10d      	bne.n	8003890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d106      	bne.n	8003890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40007000 	.word	0x40007000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470060 	.word	0x42470060

080038ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0cc      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d90c      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003900:	4b59      	ldr	r3, [pc, #356]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800390a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003918:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	494d      	ldr	r1, [pc, #308]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d044      	beq.n	80039cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d119      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e067      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4934      	ldr	r1, [pc, #208]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fe f8cc 	bl	8001b38 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe f8c8 	bl	8001b38 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e04f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d20c      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4916      	ldr	r1, [pc, #88]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490e      	ldr	r1, [pc, #56]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a32:	f000 f821 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a36:	4601      	mov	r1, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	fa21 f303 	lsr.w	r3, r1, r3
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f82c 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023c00 	.word	0x40023c00
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08005cd0 	.word	0x08005cd0
 8003a70:	2000007c 	.word	0x2000007c
 8003a74:	20000080 	.word	0x20000080

08003a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	2300      	movs	r3, #0
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a8e:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d007      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x32>
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x38>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 808d 	bne.w	8003bbe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003aa6:	60bb      	str	r3, [r7, #8]
       break;
 8003aa8:	e08c      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aaa:	4b4b      	ldr	r3, [pc, #300]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aac:	60bb      	str	r3, [r7, #8]
      break;
 8003aae:	e089      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d023      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	ea03 0501 	and.w	r5, r3, r1
 8003adc:	ea04 0602 	and.w	r6, r4, r2
 8003ae0:	4a3d      	ldr	r2, [pc, #244]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ae2:	fb02 f106 	mul.w	r1, r2, r6
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	fb02 f205 	mul.w	r2, r2, r5
 8003aec:	440a      	add	r2, r1
 8003aee:	493a      	ldr	r1, [pc, #232]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003af0:	fba5 0101 	umull	r0, r1, r5, r1
 8003af4:	1853      	adds	r3, r2, r1
 8003af6:	4619      	mov	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f04f 0400 	mov.w	r4, #0
 8003afe:	461a      	mov	r2, r3
 8003b00:	4623      	mov	r3, r4
 8003b02:	f7fc fbbd 	bl	8000280 <__aeabi_uldivmod>
 8003b06:	4603      	mov	r3, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e049      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0e:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	f04f 0400 	mov.w	r4, #0
 8003b18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	ea03 0501 	and.w	r5, r3, r1
 8003b24:	ea04 0602 	and.w	r6, r4, r2
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	0154      	lsls	r4, r2, #5
 8003b36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b3a:	014b      	lsls	r3, r1, #5
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4622      	mov	r2, r4
 8003b40:	1b49      	subs	r1, r1, r5
 8003b42:	eb62 0206 	sbc.w	r2, r2, r6
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	f04f 0400 	mov.w	r4, #0
 8003b4e:	0194      	lsls	r4, r2, #6
 8003b50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b54:	018b      	lsls	r3, r1, #6
 8003b56:	1a5b      	subs	r3, r3, r1
 8003b58:	eb64 0402 	sbc.w	r4, r4, r2
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	00e2      	lsls	r2, r4, #3
 8003b66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b6a:	00d9      	lsls	r1, r3, #3
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4614      	mov	r4, r2
 8003b70:	195b      	adds	r3, r3, r5
 8003b72:	eb44 0406 	adc.w	r4, r4, r6
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	02a2      	lsls	r2, r4, #10
 8003b80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b84:	0299      	lsls	r1, r3, #10
 8003b86:	460b      	mov	r3, r1
 8003b88:	4614      	mov	r4, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f04f 0400 	mov.w	r4, #0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4623      	mov	r3, r4
 8003b98:	f7fc fb72 	bl	8000280 <__aeabi_uldivmod>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3301      	adds	r3, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	60bb      	str	r3, [r7, #8]
      break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bc0:	60bb      	str	r3, [r7, #8]
      break;
 8003bc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	017d7840 	.word	0x017d7840

08003bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000007c 	.word	0x2000007c

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0a9b      	lsrs	r3, r3, #10
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4a03      	ldr	r2, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0a:	5cd3      	ldrb	r3, [r2, r3]
 8003c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	08005ce0 	.word	0x08005ce0

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c20:	f7ff ffdc 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003c24:	4601      	mov	r1, r0
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0b5b      	lsrs	r3, r3, #13
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4a03      	ldr	r2, [pc, #12]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c32:	5cd3      	ldrb	r3, [r2, r3]
 8003c34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	08005ce0 	.word	0x08005ce0

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d035      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c72:	f7fd ff61 	bl	8001b38 <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c7a:	f7fd ff5d 	bl	8001b38 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0ba      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c8c:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	019a      	lsls	r2, r3, #6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	495a      	ldr	r1, [pc, #360]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cac:	4b57      	ldr	r3, [pc, #348]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cb2:	f7fd ff41 	bl	8001b38 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cba:	f7fd ff3d 	bl	8001b38 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e09a      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8083 	beq.w	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a48      	ldr	r2, [pc, #288]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d02:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d0e:	f7fd ff13 	bl	8001b38 <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fd ff0f 	bl	8001b38 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e06c      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d28:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d028      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d52:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d62:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d68:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d6e:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d114      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fd fedd 	bl	8001b38 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fd fed9 	bl	8001b38 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e034      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ee      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db0:	d10d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	4912      	ldr	r1, [pc, #72]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dd8:	6093      	str	r3, [r2, #8]
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de6:	490a      	ldr	r1, [pc, #40]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7c1a      	ldrb	r2, [r3, #16]
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dfe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	42470068 	.word	0x42470068
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470e40 	.word	0x42470e40
 8003e1c:	424711e0 	.word	0x424711e0

08003e20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e083      	b.n	8003f3a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7f5b      	ldrb	r3, [r3, #29]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd fbb6 	bl	80015b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	22ca      	movs	r2, #202	; 0xca
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2253      	movs	r2, #83	; 0x53
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fb7a 	bl	8004558 <RTC_EnterInitMode>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	22ff      	movs	r2, #255	; 0xff
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2204      	movs	r2, #4
 8003e76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e05e      	b.n	8003f3a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6919      	ldr	r1, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	041a      	lsls	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10e      	bne.n	8003f08 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb0c 	bl	8004508 <HAL_RTC_WaitForSynchro>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e018      	b.n	8003f3a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	22ff      	movs	r2, #255	; 0xff
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f42:	b590      	push	{r4, r7, lr}
 8003f44:	b087      	sub	sp, #28
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	7f1b      	ldrb	r3, [r3, #28]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_RTC_SetTime+0x1c>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e0aa      	b.n	80040b4 <HAL_RTC_SetTime+0x172>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2202      	movs	r2, #2
 8003f68:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d126      	bne.n	8003fbe <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fb11 	bl	80045b0 <RTC_ByteToBcd2>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fb0a 	bl	80045b0 <RTC_ByteToBcd2>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003fa0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	789b      	ldrb	r3, [r3, #2]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fb02 	bl	80045b0 <RTC_ByteToBcd2>
 8003fac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003fae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	78db      	ldrb	r3, [r3, #3]
 8003fb6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e018      	b.n	8003ff0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003fde:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003fe4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	78db      	ldrb	r3, [r3, #3]
 8003fea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	22ca      	movs	r2, #202	; 0xca
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2253      	movs	r2, #83	; 0x53
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 faa9 	bl	8004558 <RTC_EnterInitMode>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	22ff      	movs	r2, #255	; 0xff
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2204      	movs	r2, #4
 8004018:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e047      	b.n	80040b4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800402e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004032:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004042:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800406a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d111      	bne.n	800409e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fa44 	bl	8004508 <HAL_RTC_WaitForSynchro>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	22ff      	movs	r2, #255	; 0xff
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2204      	movs	r2, #4
 8004092:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e00a      	b.n	80040b4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	22ff      	movs	r2, #255	; 0xff
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80040b2:	2300      	movs	r3, #0
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd90      	pop	{r4, r7, pc}

080040bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	7f1b      	ldrb	r3, [r3, #28]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_RTC_SetDate+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e094      	b.n	8004202 <HAL_RTC_SetDate+0x146>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10e      	bne.n	8004108 <HAL_RTC_SetDate+0x4c>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	330a      	adds	r3, #10
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11c      	bne.n	8004148 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	78db      	ldrb	r3, [r3, #3]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fa4c 	bl	80045b0 <RTC_ByteToBcd2>
 8004118:	4603      	mov	r3, r0
 800411a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fa45 	bl	80045b0 <RTC_ByteToBcd2>
 8004126:	4603      	mov	r3, r0
 8004128:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800412a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	789b      	ldrb	r3, [r3, #2]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa3d 	bl	80045b0 <RTC_ByteToBcd2>
 8004136:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004138:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e00e      	b.n	8004166 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	78db      	ldrb	r3, [r3, #3]
 800414c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004154:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800415a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	22ca      	movs	r2, #202	; 0xca
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2253      	movs	r2, #83	; 0x53
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f9ee 	bl	8004558 <RTC_EnterInitMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2204      	movs	r2, #4
 800418e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e033      	b.n	8004202 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d111      	bne.n	80041ec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f99d 	bl	8004508 <HAL_RTC_WaitForSynchro>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	22ff      	movs	r2, #255	; 0xff
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2204      	movs	r2, #4
 80041e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e00a      	b.n	8004202 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}
	...

0800420c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	2300      	movs	r3, #0
 800421e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8004220:	4b93      	ldr	r3, [pc, #588]	; (8004470 <HAL_RTC_SetAlarm_IT+0x264>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a93      	ldr	r2, [pc, #588]	; (8004474 <HAL_RTC_SetAlarm_IT+0x268>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0adb      	lsrs	r3, r3, #11
 800422c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	7f1b      	ldrb	r3, [r3, #28]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_RTC_SetAlarm_IT+0x36>
 800423e:	2302      	movs	r3, #2
 8004240:	e111      	b.n	8004466 <HAL_RTC_SetAlarm_IT+0x25a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2202      	movs	r2, #2
 800424c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d137      	bne.n	80042c4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2200      	movs	r2, #0
 8004266:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f99f 	bl	80045b0 <RTC_ByteToBcd2>
 8004272:	4603      	mov	r3, r0
 8004274:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	785b      	ldrb	r3, [r3, #1]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f998 	bl	80045b0 <RTC_ByteToBcd2>
 8004280:	4603      	mov	r3, r0
 8004282:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004284:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	789b      	ldrb	r3, [r3, #2]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f990 	bl	80045b0 <RTC_ByteToBcd2>
 8004290:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004292:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	78db      	ldrb	r3, [r3, #3]
 800429a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800429c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f982 	bl	80045b0 <RTC_ByteToBcd2>
 80042ac:	4603      	mov	r3, r0
 80042ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80042b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80042b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80042be:	4313      	orrs	r3, r2
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e023      	b.n	800430c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2200      	movs	r2, #0
 80042d6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80042e4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80042ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80042f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80042fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004302:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004308:	4313      	orrs	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	22ca      	movs	r2, #202	; 0xca
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2253      	movs	r2, #83	; 0x53
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004330:	d141      	bne.n	80043b6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004340:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004352:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1e5a      	subs	r2, r3, #1
 8004358:	617a      	str	r2, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2203      	movs	r2, #3
 800436a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e077      	b.n	8004466 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0e7      	beq.n	8004354 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	e040      	b.n	8004438 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043c4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80043d6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	617a      	str	r2, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	22ff      	movs	r2, #255	; 0xff
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2203      	movs	r2, #3
 80043ee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e035      	b.n	8004466 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0e7      	beq.n	80043d8 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004436:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_RTC_SetAlarm_IT+0x26c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <HAL_RTC_SetAlarm_IT+0x26c>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004442:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <HAL_RTC_SetAlarm_IT+0x26c>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <HAL_RTC_SetAlarm_IT+0x26c>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
 800446e:	bf00      	nop
 8004470:	2000007c 	.word	0x2000007c
 8004474:	10624dd3 	.word	0x10624dd3
 8004478:	40013c00 	.word	0x40013c00

0800447c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc fa15 	bl	80008d0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80044b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8a3 	bl	8004620 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80044ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RTC_AlarmIRQHandler+0x88>)
 80044ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044f2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	775a      	strb	r2, [r3, #29]
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40013c00 	.word	0x40013c00

08004508 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004522:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004524:	f7fd fb08 	bl	8001b38 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800452a:	e009      	b.n	8004540 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800452c:	f7fd fb04 	bl	8001b38 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453a:	d901      	bls.n	8004540 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e007      	b.n	8004550 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ee      	beq.n	800452c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d119      	bne.n	80045a6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800457c:	f7fd fadc 	bl	8001b38 <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004582:	e009      	b.n	8004598 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004584:	f7fd fad8 	bl	8001b38 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004592:	d901      	bls.n	8004598 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e007      	b.n	80045a8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80045be:	e005      	b.n	80045cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	3b0a      	subs	r3, #10
 80045ca:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d8f6      	bhi.n	80045c0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	4313      	orrs	r3, r2
 80045de:	b2db      	uxtb	r3, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3350      	adds	r3, #80	; 0x50
 8004602:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4413      	add	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e03f      	b.n	80046c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd f98c 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2224      	movs	r2, #36	; 0x24
 8004664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 faf9 	bl	8004c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800468c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800469c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	4613      	mov	r3, r2
 80046da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d130      	bne.n	800474a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_UART_Transmit_IT+0x26>
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e029      	b.n	800474c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_UART_Transmit_IT+0x38>
 8004702:	2302      	movs	r3, #2
 8004704:	e022      	b.n	800474c <HAL_UART_Transmit_IT+0x7e>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2221      	movs	r2, #33	; 0x21
 800472a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004744:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b20      	cmp	r3, #32
 8004770:	d140      	bne.n	80047f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_UART_Receive_IT+0x26>
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e039      	b.n	80047f6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_UART_Receive_IT+0x38>
 800478c:	2302      	movs	r3, #2
 800478e:	e032      	b.n	80047f6 <HAL_UART_Receive_IT+0x9e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2222      	movs	r2, #34	; 0x22
 80047b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0220 	orr.w	r2, r2, #32
 80047ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_UART_IRQHandler+0x52>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f98c 	bl	8004b6c <UART_Receive_IT>
      return;
 8004854:	e0d1      	b.n	80049fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80b0 	beq.w	80049be <HAL_UART_IRQHandler+0x1ba>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <HAL_UART_IRQHandler+0x70>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80a5 	beq.w	80049be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_UART_IRQHandler+0x90>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_UART_IRQHandler+0xb0>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_UART_IRQHandler+0xd0>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	f043 0204 	orr.w	r2, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <HAL_UART_IRQHandler+0xfa>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_UART_IRQHandler+0xee>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	f043 0208 	orr.w	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d078      	beq.n	80049f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_UART_IRQHandler+0x11c>
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f926 	bl	8004b6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <HAL_UART_IRQHandler+0x144>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d031      	beq.n	80049ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f86f 	bl	8004a2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d123      	bne.n	80049a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <HAL_UART_IRQHandler+0x1fc>)
 800497a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	4618      	mov	r0, r3
 8004982:	f7fd fa18 	bl	8001db6 <HAL_DMA_Abort_IT>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d016      	beq.n	80049ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004996:	4610      	mov	r0, r2
 8004998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499a:	e00e      	b.n	80049ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f83b 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a2:	e00a      	b.n	80049ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f837 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049aa:	e006      	b.n	80049ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f833 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80049b8:	e01e      	b.n	80049f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ba:	bf00      	nop
    return;
 80049bc:	e01c      	b.n	80049f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_UART_IRQHandler+0x1d6>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f85c 	bl	8004a90 <UART_Transmit_IT>
    return;
 80049d8:	e00f      	b.n	80049fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_UART_IRQHandler+0x1f6>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8a4 	bl	8004b3c <UART_EndTransmit_IT>
    return;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80049f8:	bf00      	nop
  }
}
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08004a69 	.word	0x08004a69

08004a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ffc8 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b21      	cmp	r3, #33	; 0x21
 8004aa2:	d144      	bne.n	8004b2e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d11a      	bne.n	8004ae4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]
 8004ad6:	e00e      	b.n	8004af6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]
 8004ae2:	e008      	b.n	8004af6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6211      	str	r1, [r2, #32]
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4619      	mov	r1, r3
 8004b04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff51 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b22      	cmp	r3, #34	; 0x22
 8004b7e:	d171      	bne.n	8004c64 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d123      	bne.n	8004bd2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10e      	bne.n	8004bb6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb4:	e029      	b.n	8004c0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd0:	e01b      	b.n	8004c0a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6858      	ldr	r0, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	1c59      	adds	r1, r3, #1
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6291      	str	r1, [r2, #40]	; 0x28
 8004bea:	b2c2      	uxtb	r2, r0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e00c      	b.n	8004c0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	1c58      	adds	r0, r3, #1
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	6288      	str	r0, [r1, #40]	; 0x28
 8004c02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4619      	mov	r1, r3
 8004c18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d120      	bne.n	8004c60 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0220 	bic.w	r2, r2, #32
 8004c2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fbfc 	bl	8001454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e002      	b.n	8004c66 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cb2:	f023 030c 	bic.w	r3, r3, #12
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cde:	f040 818b 	bne.w	8004ff8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4ac1      	ldr	r2, [pc, #772]	; (8004fec <UART_SetConfig+0x37c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d005      	beq.n	8004cf8 <UART_SetConfig+0x88>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4abf      	ldr	r2, [pc, #764]	; (8004ff0 <UART_SetConfig+0x380>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f040 80bd 	bne.w	8004e72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe ff90 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8004cfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	461d      	mov	r5, r3
 8004d02:	f04f 0600 	mov.w	r6, #0
 8004d06:	46a8      	mov	r8, r5
 8004d08:	46b1      	mov	r9, r6
 8004d0a:	eb18 0308 	adds.w	r3, r8, r8
 8004d0e:	eb49 0409 	adc.w	r4, r9, r9
 8004d12:	4698      	mov	r8, r3
 8004d14:	46a1      	mov	r9, r4
 8004d16:	eb18 0805 	adds.w	r8, r8, r5
 8004d1a:	eb49 0906 	adc.w	r9, r9, r6
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d32:	4688      	mov	r8, r1
 8004d34:	4691      	mov	r9, r2
 8004d36:	eb18 0005 	adds.w	r0, r8, r5
 8004d3a:	eb49 0106 	adc.w	r1, r9, r6
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	461d      	mov	r5, r3
 8004d44:	f04f 0600 	mov.w	r6, #0
 8004d48:	196b      	adds	r3, r5, r5
 8004d4a:	eb46 0406 	adc.w	r4, r6, r6
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4623      	mov	r3, r4
 8004d52:	f7fb fa95 	bl	8000280 <__aeabi_uldivmod>
 8004d56:	4603      	mov	r3, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4ba5      	ldr	r3, [pc, #660]	; (8004ff4 <UART_SetConfig+0x384>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	f04f 0600 	mov.w	r6, #0
 8004d70:	46a9      	mov	r9, r5
 8004d72:	46b2      	mov	sl, r6
 8004d74:	eb19 0309 	adds.w	r3, r9, r9
 8004d78:	eb4a 040a 	adc.w	r4, sl, sl
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	46a2      	mov	sl, r4
 8004d80:	eb19 0905 	adds.w	r9, r9, r5
 8004d84:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d9c:	4689      	mov	r9, r1
 8004d9e:	4692      	mov	sl, r2
 8004da0:	eb19 0005 	adds.w	r0, r9, r5
 8004da4:	eb4a 0106 	adc.w	r1, sl, r6
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	461d      	mov	r5, r3
 8004dae:	f04f 0600 	mov.w	r6, #0
 8004db2:	196b      	adds	r3, r5, r5
 8004db4:	eb46 0406 	adc.w	r4, r6, r6
 8004db8:	461a      	mov	r2, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	f7fb fa60 	bl	8000280 <__aeabi_uldivmod>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b8b      	ldr	r3, [pc, #556]	; (8004ff4 <UART_SetConfig+0x384>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	; 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	3332      	adds	r3, #50	; 0x32
 8004dda:	4a86      	ldr	r2, [pc, #536]	; (8004ff4 <UART_SetConfig+0x384>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004de8:	4498      	add	r8, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	461d      	mov	r5, r3
 8004dee:	f04f 0600 	mov.w	r6, #0
 8004df2:	46a9      	mov	r9, r5
 8004df4:	46b2      	mov	sl, r6
 8004df6:	eb19 0309 	adds.w	r3, r9, r9
 8004dfa:	eb4a 040a 	adc.w	r4, sl, sl
 8004dfe:	4699      	mov	r9, r3
 8004e00:	46a2      	mov	sl, r4
 8004e02:	eb19 0905 	adds.w	r9, r9, r5
 8004e06:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e0a:	f04f 0100 	mov.w	r1, #0
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e1e:	4689      	mov	r9, r1
 8004e20:	4692      	mov	sl, r2
 8004e22:	eb19 0005 	adds.w	r0, r9, r5
 8004e26:	eb4a 0106 	adc.w	r1, sl, r6
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	461d      	mov	r5, r3
 8004e30:	f04f 0600 	mov.w	r6, #0
 8004e34:	196b      	adds	r3, r5, r5
 8004e36:	eb46 0406 	adc.w	r4, r6, r6
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	f7fb fa1f 	bl	8000280 <__aeabi_uldivmod>
 8004e42:	4603      	mov	r3, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b6a      	ldr	r3, [pc, #424]	; (8004ff4 <UART_SetConfig+0x384>)
 8004e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2164      	movs	r1, #100	; 0x64
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a65      	ldr	r2, [pc, #404]	; (8004ff4 <UART_SetConfig+0x384>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 0207 	and.w	r2, r3, #7
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4442      	add	r2, r8
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	e26f      	b.n	8005352 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e72:	f7fe febf 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004e76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	f04f 0600 	mov.w	r6, #0
 8004e80:	46a8      	mov	r8, r5
 8004e82:	46b1      	mov	r9, r6
 8004e84:	eb18 0308 	adds.w	r3, r8, r8
 8004e88:	eb49 0409 	adc.w	r4, r9, r9
 8004e8c:	4698      	mov	r8, r3
 8004e8e:	46a1      	mov	r9, r4
 8004e90:	eb18 0805 	adds.w	r8, r8, r5
 8004e94:	eb49 0906 	adc.w	r9, r9, r6
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ea4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ea8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004eac:	4688      	mov	r8, r1
 8004eae:	4691      	mov	r9, r2
 8004eb0:	eb18 0005 	adds.w	r0, r8, r5
 8004eb4:	eb49 0106 	adc.w	r1, r9, r6
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	461d      	mov	r5, r3
 8004ebe:	f04f 0600 	mov.w	r6, #0
 8004ec2:	196b      	adds	r3, r5, r5
 8004ec4:	eb46 0406 	adc.w	r4, r6, r6
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	f7fb f9d8 	bl	8000280 <__aeabi_uldivmod>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <UART_SetConfig+0x384>)
 8004ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	461d      	mov	r5, r3
 8004ee6:	f04f 0600 	mov.w	r6, #0
 8004eea:	46a9      	mov	r9, r5
 8004eec:	46b2      	mov	sl, r6
 8004eee:	eb19 0309 	adds.w	r3, r9, r9
 8004ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ef6:	4699      	mov	r9, r3
 8004ef8:	46a2      	mov	sl, r4
 8004efa:	eb19 0905 	adds.w	r9, r9, r5
 8004efe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f02:	f04f 0100 	mov.w	r1, #0
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f16:	4689      	mov	r9, r1
 8004f18:	4692      	mov	sl, r2
 8004f1a:	eb19 0005 	adds.w	r0, r9, r5
 8004f1e:	eb4a 0106 	adc.w	r1, sl, r6
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	461d      	mov	r5, r3
 8004f28:	f04f 0600 	mov.w	r6, #0
 8004f2c:	196b      	adds	r3, r5, r5
 8004f2e:	eb46 0406 	adc.w	r4, r6, r6
 8004f32:	461a      	mov	r2, r3
 8004f34:	4623      	mov	r3, r4
 8004f36:	f7fb f9a3 	bl	8000280 <__aeabi_uldivmod>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <UART_SetConfig+0x384>)
 8004f42:	fba3 1302 	umull	r1, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2164      	movs	r1, #100	; 0x64
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	3332      	adds	r3, #50	; 0x32
 8004f54:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <UART_SetConfig+0x384>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f62:	4498      	add	r8, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	461d      	mov	r5, r3
 8004f68:	f04f 0600 	mov.w	r6, #0
 8004f6c:	46a9      	mov	r9, r5
 8004f6e:	46b2      	mov	sl, r6
 8004f70:	eb19 0309 	adds.w	r3, r9, r9
 8004f74:	eb4a 040a 	adc.w	r4, sl, sl
 8004f78:	4699      	mov	r9, r3
 8004f7a:	46a2      	mov	sl, r4
 8004f7c:	eb19 0905 	adds.w	r9, r9, r5
 8004f80:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f84:	f04f 0100 	mov.w	r1, #0
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f98:	4689      	mov	r9, r1
 8004f9a:	4692      	mov	sl, r2
 8004f9c:	eb19 0005 	adds.w	r0, r9, r5
 8004fa0:	eb4a 0106 	adc.w	r1, sl, r6
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	461d      	mov	r5, r3
 8004faa:	f04f 0600 	mov.w	r6, #0
 8004fae:	196b      	adds	r3, r5, r5
 8004fb0:	eb46 0406 	adc.w	r4, r6, r6
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	f7fb f962 	bl	8000280 <__aeabi_uldivmod>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <UART_SetConfig+0x384>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <UART_SetConfig+0x384>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 0207 	and.w	r2, r3, #7
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4442      	add	r2, r8
 8004fe8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004fea:	e1b2      	b.n	8005352 <UART_SetConfig+0x6e2>
 8004fec:	40011000 	.word	0x40011000
 8004ff0:	40011400 	.word	0x40011400
 8004ff4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4ad7      	ldr	r2, [pc, #860]	; (800535c <UART_SetConfig+0x6ec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d005      	beq.n	800500e <UART_SetConfig+0x39e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4ad6      	ldr	r2, [pc, #856]	; (8005360 <UART_SetConfig+0x6f0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	f040 80d1 	bne.w	80051b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800500e:	f7fe fe05 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005012:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	469a      	mov	sl, r3
 8005018:	f04f 0b00 	mov.w	fp, #0
 800501c:	46d0      	mov	r8, sl
 800501e:	46d9      	mov	r9, fp
 8005020:	eb18 0308 	adds.w	r3, r8, r8
 8005024:	eb49 0409 	adc.w	r4, r9, r9
 8005028:	4698      	mov	r8, r3
 800502a:	46a1      	mov	r9, r4
 800502c:	eb18 080a 	adds.w	r8, r8, sl
 8005030:	eb49 090b 	adc.w	r9, r9, fp
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005040:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005044:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005048:	4688      	mov	r8, r1
 800504a:	4691      	mov	r9, r2
 800504c:	eb1a 0508 	adds.w	r5, sl, r8
 8005050:	eb4b 0609 	adc.w	r6, fp, r9
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4619      	mov	r1, r3
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	f04f 0400 	mov.w	r4, #0
 8005066:	0094      	lsls	r4, r2, #2
 8005068:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800506c:	008b      	lsls	r3, r1, #2
 800506e:	461a      	mov	r2, r3
 8005070:	4623      	mov	r3, r4
 8005072:	4628      	mov	r0, r5
 8005074:	4631      	mov	r1, r6
 8005076:	f7fb f903 	bl	8000280 <__aeabi_uldivmod>
 800507a:	4603      	mov	r3, r0
 800507c:	460c      	mov	r4, r1
 800507e:	461a      	mov	r2, r3
 8005080:	4bb8      	ldr	r3, [pc, #736]	; (8005364 <UART_SetConfig+0x6f4>)
 8005082:	fba3 2302 	umull	r2, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	469b      	mov	fp, r3
 8005090:	f04f 0c00 	mov.w	ip, #0
 8005094:	46d9      	mov	r9, fp
 8005096:	46e2      	mov	sl, ip
 8005098:	eb19 0309 	adds.w	r3, r9, r9
 800509c:	eb4a 040a 	adc.w	r4, sl, sl
 80050a0:	4699      	mov	r9, r3
 80050a2:	46a2      	mov	sl, r4
 80050a4:	eb19 090b 	adds.w	r9, r9, fp
 80050a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050c0:	4689      	mov	r9, r1
 80050c2:	4692      	mov	sl, r2
 80050c4:	eb1b 0509 	adds.w	r5, fp, r9
 80050c8:	eb4c 060a 	adc.w	r6, ip, sl
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	f04f 0400 	mov.w	r4, #0
 80050de:	0094      	lsls	r4, r2, #2
 80050e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050e4:	008b      	lsls	r3, r1, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	4623      	mov	r3, r4
 80050ea:	4628      	mov	r0, r5
 80050ec:	4631      	mov	r1, r6
 80050ee:	f7fb f8c7 	bl	8000280 <__aeabi_uldivmod>
 80050f2:	4603      	mov	r3, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	461a      	mov	r2, r3
 80050f8:	4b9a      	ldr	r3, [pc, #616]	; (8005364 <UART_SetConfig+0x6f4>)
 80050fa:	fba3 1302 	umull	r1, r3, r3, r2
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	2164      	movs	r1, #100	; 0x64
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	3332      	adds	r3, #50	; 0x32
 800510c:	4a95      	ldr	r2, [pc, #596]	; (8005364 <UART_SetConfig+0x6f4>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005118:	4498      	add	r8, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	469b      	mov	fp, r3
 800511e:	f04f 0c00 	mov.w	ip, #0
 8005122:	46d9      	mov	r9, fp
 8005124:	46e2      	mov	sl, ip
 8005126:	eb19 0309 	adds.w	r3, r9, r9
 800512a:	eb4a 040a 	adc.w	r4, sl, sl
 800512e:	4699      	mov	r9, r3
 8005130:	46a2      	mov	sl, r4
 8005132:	eb19 090b 	adds.w	r9, r9, fp
 8005136:	eb4a 0a0c 	adc.w	sl, sl, ip
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005146:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800514a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800514e:	4689      	mov	r9, r1
 8005150:	4692      	mov	sl, r2
 8005152:	eb1b 0509 	adds.w	r5, fp, r9
 8005156:	eb4c 060a 	adc.w	r6, ip, sl
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4619      	mov	r1, r3
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	f04f 0400 	mov.w	r4, #0
 800516c:	0094      	lsls	r4, r2, #2
 800516e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005172:	008b      	lsls	r3, r1, #2
 8005174:	461a      	mov	r2, r3
 8005176:	4623      	mov	r3, r4
 8005178:	4628      	mov	r0, r5
 800517a:	4631      	mov	r1, r6
 800517c:	f7fb f880 	bl	8000280 <__aeabi_uldivmod>
 8005180:	4603      	mov	r3, r0
 8005182:	460c      	mov	r4, r1
 8005184:	461a      	mov	r2, r3
 8005186:	4b77      	ldr	r3, [pc, #476]	; (8005364 <UART_SetConfig+0x6f4>)
 8005188:	fba3 1302 	umull	r1, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	2164      	movs	r1, #100	; 0x64
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	3332      	adds	r3, #50	; 0x32
 800519a:	4a72      	ldr	r2, [pc, #456]	; (8005364 <UART_SetConfig+0x6f4>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4442      	add	r2, r8
 80051ac:	609a      	str	r2, [r3, #8]
 80051ae:	e0d0      	b.n	8005352 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b0:	f7fe fd20 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80051b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	469a      	mov	sl, r3
 80051ba:	f04f 0b00 	mov.w	fp, #0
 80051be:	46d0      	mov	r8, sl
 80051c0:	46d9      	mov	r9, fp
 80051c2:	eb18 0308 	adds.w	r3, r8, r8
 80051c6:	eb49 0409 	adc.w	r4, r9, r9
 80051ca:	4698      	mov	r8, r3
 80051cc:	46a1      	mov	r9, r4
 80051ce:	eb18 080a 	adds.w	r8, r8, sl
 80051d2:	eb49 090b 	adc.w	r9, r9, fp
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051ea:	4688      	mov	r8, r1
 80051ec:	4691      	mov	r9, r2
 80051ee:	eb1a 0508 	adds.w	r5, sl, r8
 80051f2:	eb4b 0609 	adc.w	r6, fp, r9
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4619      	mov	r1, r3
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	0094      	lsls	r4, r2, #2
 800520a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800520e:	008b      	lsls	r3, r1, #2
 8005210:	461a      	mov	r2, r3
 8005212:	4623      	mov	r3, r4
 8005214:	4628      	mov	r0, r5
 8005216:	4631      	mov	r1, r6
 8005218:	f7fb f832 	bl	8000280 <__aeabi_uldivmod>
 800521c:	4603      	mov	r3, r0
 800521e:	460c      	mov	r4, r1
 8005220:	461a      	mov	r2, r3
 8005222:	4b50      	ldr	r3, [pc, #320]	; (8005364 <UART_SetConfig+0x6f4>)
 8005224:	fba3 2302 	umull	r2, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	469b      	mov	fp, r3
 8005232:	f04f 0c00 	mov.w	ip, #0
 8005236:	46d9      	mov	r9, fp
 8005238:	46e2      	mov	sl, ip
 800523a:	eb19 0309 	adds.w	r3, r9, r9
 800523e:	eb4a 040a 	adc.w	r4, sl, sl
 8005242:	4699      	mov	r9, r3
 8005244:	46a2      	mov	sl, r4
 8005246:	eb19 090b 	adds.w	r9, r9, fp
 800524a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800525a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800525e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005262:	4689      	mov	r9, r1
 8005264:	4692      	mov	sl, r2
 8005266:	eb1b 0509 	adds.w	r5, fp, r9
 800526a:	eb4c 060a 	adc.w	r6, ip, sl
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4619      	mov	r1, r3
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	0094      	lsls	r4, r2, #2
 8005282:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	461a      	mov	r2, r3
 800528a:	4623      	mov	r3, r4
 800528c:	4628      	mov	r0, r5
 800528e:	4631      	mov	r1, r6
 8005290:	f7fa fff6 	bl	8000280 <__aeabi_uldivmod>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	461a      	mov	r2, r3
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <UART_SetConfig+0x6f4>)
 800529c:	fba3 1302 	umull	r1, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2164      	movs	r1, #100	; 0x64
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	3332      	adds	r3, #50	; 0x32
 80052ae:	4a2d      	ldr	r2, [pc, #180]	; (8005364 <UART_SetConfig+0x6f4>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ba:	4498      	add	r8, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	469b      	mov	fp, r3
 80052c0:	f04f 0c00 	mov.w	ip, #0
 80052c4:	46d9      	mov	r9, fp
 80052c6:	46e2      	mov	sl, ip
 80052c8:	eb19 0309 	adds.w	r3, r9, r9
 80052cc:	eb4a 040a 	adc.w	r4, sl, sl
 80052d0:	4699      	mov	r9, r3
 80052d2:	46a2      	mov	sl, r4
 80052d4:	eb19 090b 	adds.w	r9, r9, fp
 80052d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052f0:	4689      	mov	r9, r1
 80052f2:	4692      	mov	sl, r2
 80052f4:	eb1b 0509 	adds.w	r5, fp, r9
 80052f8:	eb4c 060a 	adc.w	r6, ip, sl
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4619      	mov	r1, r3
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	f04f 0400 	mov.w	r4, #0
 800530e:	0094      	lsls	r4, r2, #2
 8005310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005314:	008b      	lsls	r3, r1, #2
 8005316:	461a      	mov	r2, r3
 8005318:	4623      	mov	r3, r4
 800531a:	4628      	mov	r0, r5
 800531c:	4631      	mov	r1, r6
 800531e:	f7fa ffaf 	bl	8000280 <__aeabi_uldivmod>
 8005322:	4603      	mov	r3, r0
 8005324:	460c      	mov	r4, r1
 8005326:	461a      	mov	r2, r3
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <UART_SetConfig+0x6f4>)
 800532a:	fba3 1302 	umull	r1, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2164      	movs	r1, #100	; 0x64
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	3332      	adds	r3, #50	; 0x32
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <UART_SetConfig+0x6f4>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	f003 020f 	and.w	r2, r3, #15
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4442      	add	r2, r8
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	e7ff      	b.n	8005352 <UART_SetConfig+0x6e2>
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	40011000 	.word	0x40011000
 8005360:	40011400 	.word	0x40011400
 8005364:	51eb851f 	.word	0x51eb851f

08005368 <__errno>:
 8005368:	4b01      	ldr	r3, [pc, #4]	; (8005370 <__errno+0x8>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000088 	.word	0x20000088

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4e0d      	ldr	r6, [pc, #52]	; (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	; (80053b0 <__libc_init_array+0x3c>)
 800537a:	1ba4      	subs	r4, r4, r6
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2500      	movs	r5, #0
 8005380:	42a5      	cmp	r5, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4e0b      	ldr	r6, [pc, #44]	; (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	; (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 fc26 	bl	8005bd8 <_init>
 800538c:	1ba4      	subs	r4, r4, r6
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2500      	movs	r5, #0
 8005392:	42a5      	cmp	r5, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800539c:	4798      	blx	r3
 800539e:	3501      	adds	r5, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053a6:	4798      	blx	r3
 80053a8:	3501      	adds	r5, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	08005d24 	.word	0x08005d24
 80053b0:	08005d24 	.word	0x08005d24
 80053b4:	08005d24 	.word	0x08005d24
 80053b8:	08005d28 	.word	0x08005d28

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <siprintf>:
 80053cc:	b40e      	push	{r1, r2, r3}
 80053ce:	b500      	push	{lr}
 80053d0:	b09c      	sub	sp, #112	; 0x70
 80053d2:	ab1d      	add	r3, sp, #116	; 0x74
 80053d4:	9002      	str	r0, [sp, #8]
 80053d6:	9006      	str	r0, [sp, #24]
 80053d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053dc:	4809      	ldr	r0, [pc, #36]	; (8005404 <siprintf+0x38>)
 80053de:	9107      	str	r1, [sp, #28]
 80053e0:	9104      	str	r1, [sp, #16]
 80053e2:	4909      	ldr	r1, [pc, #36]	; (8005408 <siprintf+0x3c>)
 80053e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e8:	9105      	str	r1, [sp, #20]
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	a902      	add	r1, sp, #8
 80053f0:	f000 f866 	bl	80054c0 <_svfiprintf_r>
 80053f4:	9b02      	ldr	r3, [sp, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	b01c      	add	sp, #112	; 0x70
 80053fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005400:	b003      	add	sp, #12
 8005402:	4770      	bx	lr
 8005404:	20000088 	.word	0x20000088
 8005408:	ffff0208 	.word	0xffff0208

0800540c <__ssputs_r>:
 800540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	688e      	ldr	r6, [r1, #8]
 8005412:	429e      	cmp	r6, r3
 8005414:	4682      	mov	sl, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	4699      	mov	r9, r3
 800541c:	d837      	bhi.n	800548e <__ssputs_r+0x82>
 800541e:	898a      	ldrh	r2, [r1, #12]
 8005420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005424:	d031      	beq.n	800548a <__ssputs_r+0x7e>
 8005426:	6825      	ldr	r5, [r4, #0]
 8005428:	6909      	ldr	r1, [r1, #16]
 800542a:	1a6f      	subs	r7, r5, r1
 800542c:	6965      	ldr	r5, [r4, #20]
 800542e:	2302      	movs	r3, #2
 8005430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005434:	fb95 f5f3 	sdiv	r5, r5, r3
 8005438:	f109 0301 	add.w	r3, r9, #1
 800543c:	443b      	add	r3, r7
 800543e:	429d      	cmp	r5, r3
 8005440:	bf38      	it	cc
 8005442:	461d      	movcc	r5, r3
 8005444:	0553      	lsls	r3, r2, #21
 8005446:	d530      	bpl.n	80054aa <__ssputs_r+0x9e>
 8005448:	4629      	mov	r1, r5
 800544a:	f000 fb2b 	bl	8005aa4 <_malloc_r>
 800544e:	4606      	mov	r6, r0
 8005450:	b950      	cbnz	r0, 8005468 <__ssputs_r+0x5c>
 8005452:	230c      	movs	r3, #12
 8005454:	f8ca 3000 	str.w	r3, [sl]
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	463a      	mov	r2, r7
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	f000 faa8 	bl	80059c0 <memcpy>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	6126      	str	r6, [r4, #16]
 800547e:	6165      	str	r5, [r4, #20]
 8005480:	443e      	add	r6, r7
 8005482:	1bed      	subs	r5, r5, r7
 8005484:	6026      	str	r6, [r4, #0]
 8005486:	60a5      	str	r5, [r4, #8]
 8005488:	464e      	mov	r6, r9
 800548a:	454e      	cmp	r6, r9
 800548c:	d900      	bls.n	8005490 <__ssputs_r+0x84>
 800548e:	464e      	mov	r6, r9
 8005490:	4632      	mov	r2, r6
 8005492:	4641      	mov	r1, r8
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	f000 fa9e 	bl	80059d6 <memmove>
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	1b9b      	subs	r3, r3, r6
 800549e:	60a3      	str	r3, [r4, #8]
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	441e      	add	r6, r3
 80054a4:	6026      	str	r6, [r4, #0]
 80054a6:	2000      	movs	r0, #0
 80054a8:	e7dc      	b.n	8005464 <__ssputs_r+0x58>
 80054aa:	462a      	mov	r2, r5
 80054ac:	f000 fb54 	bl	8005b58 <_realloc_r>
 80054b0:	4606      	mov	r6, r0
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d1e2      	bne.n	800547c <__ssputs_r+0x70>
 80054b6:	6921      	ldr	r1, [r4, #16]
 80054b8:	4650      	mov	r0, sl
 80054ba:	f000 faa5 	bl	8005a08 <_free_r>
 80054be:	e7c8      	b.n	8005452 <__ssputs_r+0x46>

080054c0 <_svfiprintf_r>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	461d      	mov	r5, r3
 80054c6:	898b      	ldrh	r3, [r1, #12]
 80054c8:	061f      	lsls	r7, r3, #24
 80054ca:	b09d      	sub	sp, #116	; 0x74
 80054cc:	4680      	mov	r8, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4616      	mov	r6, r2
 80054d2:	d50f      	bpl.n	80054f4 <_svfiprintf_r+0x34>
 80054d4:	690b      	ldr	r3, [r1, #16]
 80054d6:	b96b      	cbnz	r3, 80054f4 <_svfiprintf_r+0x34>
 80054d8:	2140      	movs	r1, #64	; 0x40
 80054da:	f000 fae3 	bl	8005aa4 <_malloc_r>
 80054de:	6020      	str	r0, [r4, #0]
 80054e0:	6120      	str	r0, [r4, #16]
 80054e2:	b928      	cbnz	r0, 80054f0 <_svfiprintf_r+0x30>
 80054e4:	230c      	movs	r3, #12
 80054e6:	f8c8 3000 	str.w	r3, [r8]
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	e0c8      	b.n	8005682 <_svfiprintf_r+0x1c2>
 80054f0:	2340      	movs	r3, #64	; 0x40
 80054f2:	6163      	str	r3, [r4, #20]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9309      	str	r3, [sp, #36]	; 0x24
 80054f8:	2320      	movs	r3, #32
 80054fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054fe:	2330      	movs	r3, #48	; 0x30
 8005500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005504:	9503      	str	r5, [sp, #12]
 8005506:	f04f 0b01 	mov.w	fp, #1
 800550a:	4637      	mov	r7, r6
 800550c:	463d      	mov	r5, r7
 800550e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005512:	b10b      	cbz	r3, 8005518 <_svfiprintf_r+0x58>
 8005514:	2b25      	cmp	r3, #37	; 0x25
 8005516:	d13e      	bne.n	8005596 <_svfiprintf_r+0xd6>
 8005518:	ebb7 0a06 	subs.w	sl, r7, r6
 800551c:	d00b      	beq.n	8005536 <_svfiprintf_r+0x76>
 800551e:	4653      	mov	r3, sl
 8005520:	4632      	mov	r2, r6
 8005522:	4621      	mov	r1, r4
 8005524:	4640      	mov	r0, r8
 8005526:	f7ff ff71 	bl	800540c <__ssputs_r>
 800552a:	3001      	adds	r0, #1
 800552c:	f000 80a4 	beq.w	8005678 <_svfiprintf_r+0x1b8>
 8005530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005532:	4453      	add	r3, sl
 8005534:	9309      	str	r3, [sp, #36]	; 0x24
 8005536:	783b      	ldrb	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 809d 	beq.w	8005678 <_svfiprintf_r+0x1b8>
 800553e:	2300      	movs	r3, #0
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005548:	9304      	str	r3, [sp, #16]
 800554a:	9307      	str	r3, [sp, #28]
 800554c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005550:	931a      	str	r3, [sp, #104]	; 0x68
 8005552:	462f      	mov	r7, r5
 8005554:	2205      	movs	r2, #5
 8005556:	f817 1b01 	ldrb.w	r1, [r7], #1
 800555a:	4850      	ldr	r0, [pc, #320]	; (800569c <_svfiprintf_r+0x1dc>)
 800555c:	f7fa fe40 	bl	80001e0 <memchr>
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	b9d0      	cbnz	r0, 800559a <_svfiprintf_r+0xda>
 8005564:	06d9      	lsls	r1, r3, #27
 8005566:	bf44      	itt	mi
 8005568:	2220      	movmi	r2, #32
 800556a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800556e:	071a      	lsls	r2, r3, #28
 8005570:	bf44      	itt	mi
 8005572:	222b      	movmi	r2, #43	; 0x2b
 8005574:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005578:	782a      	ldrb	r2, [r5, #0]
 800557a:	2a2a      	cmp	r2, #42	; 0x2a
 800557c:	d015      	beq.n	80055aa <_svfiprintf_r+0xea>
 800557e:	9a07      	ldr	r2, [sp, #28]
 8005580:	462f      	mov	r7, r5
 8005582:	2000      	movs	r0, #0
 8005584:	250a      	movs	r5, #10
 8005586:	4639      	mov	r1, r7
 8005588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558c:	3b30      	subs	r3, #48	; 0x30
 800558e:	2b09      	cmp	r3, #9
 8005590:	d94d      	bls.n	800562e <_svfiprintf_r+0x16e>
 8005592:	b1b8      	cbz	r0, 80055c4 <_svfiprintf_r+0x104>
 8005594:	e00f      	b.n	80055b6 <_svfiprintf_r+0xf6>
 8005596:	462f      	mov	r7, r5
 8005598:	e7b8      	b.n	800550c <_svfiprintf_r+0x4c>
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <_svfiprintf_r+0x1dc>)
 800559c:	1a80      	subs	r0, r0, r2
 800559e:	fa0b f000 	lsl.w	r0, fp, r0
 80055a2:	4318      	orrs	r0, r3
 80055a4:	9004      	str	r0, [sp, #16]
 80055a6:	463d      	mov	r5, r7
 80055a8:	e7d3      	b.n	8005552 <_svfiprintf_r+0x92>
 80055aa:	9a03      	ldr	r2, [sp, #12]
 80055ac:	1d11      	adds	r1, r2, #4
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	9103      	str	r1, [sp, #12]
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	db01      	blt.n	80055ba <_svfiprintf_r+0xfa>
 80055b6:	9207      	str	r2, [sp, #28]
 80055b8:	e004      	b.n	80055c4 <_svfiprintf_r+0x104>
 80055ba:	4252      	negs	r2, r2
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	9207      	str	r2, [sp, #28]
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	783b      	ldrb	r3, [r7, #0]
 80055c6:	2b2e      	cmp	r3, #46	; 0x2e
 80055c8:	d10c      	bne.n	80055e4 <_svfiprintf_r+0x124>
 80055ca:	787b      	ldrb	r3, [r7, #1]
 80055cc:	2b2a      	cmp	r3, #42	; 0x2a
 80055ce:	d133      	bne.n	8005638 <_svfiprintf_r+0x178>
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	9203      	str	r2, [sp, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfb8      	it	lt
 80055dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80055e0:	3702      	adds	r7, #2
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	4d2e      	ldr	r5, [pc, #184]	; (80056a0 <_svfiprintf_r+0x1e0>)
 80055e6:	7839      	ldrb	r1, [r7, #0]
 80055e8:	2203      	movs	r2, #3
 80055ea:	4628      	mov	r0, r5
 80055ec:	f7fa fdf8 	bl	80001e0 <memchr>
 80055f0:	b138      	cbz	r0, 8005602 <_svfiprintf_r+0x142>
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	1b40      	subs	r0, r0, r5
 80055f6:	fa03 f000 	lsl.w	r0, r3, r0
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	4303      	orrs	r3, r0
 80055fe:	3701      	adds	r7, #1
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	7839      	ldrb	r1, [r7, #0]
 8005604:	4827      	ldr	r0, [pc, #156]	; (80056a4 <_svfiprintf_r+0x1e4>)
 8005606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800560a:	2206      	movs	r2, #6
 800560c:	1c7e      	adds	r6, r7, #1
 800560e:	f7fa fde7 	bl	80001e0 <memchr>
 8005612:	2800      	cmp	r0, #0
 8005614:	d038      	beq.n	8005688 <_svfiprintf_r+0x1c8>
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <_svfiprintf_r+0x1e8>)
 8005618:	bb13      	cbnz	r3, 8005660 <_svfiprintf_r+0x1a0>
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	3307      	adds	r3, #7
 800561e:	f023 0307 	bic.w	r3, r3, #7
 8005622:	3308      	adds	r3, #8
 8005624:	9303      	str	r3, [sp, #12]
 8005626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005628:	444b      	add	r3, r9
 800562a:	9309      	str	r3, [sp, #36]	; 0x24
 800562c:	e76d      	b.n	800550a <_svfiprintf_r+0x4a>
 800562e:	fb05 3202 	mla	r2, r5, r2, r3
 8005632:	2001      	movs	r0, #1
 8005634:	460f      	mov	r7, r1
 8005636:	e7a6      	b.n	8005586 <_svfiprintf_r+0xc6>
 8005638:	2300      	movs	r3, #0
 800563a:	3701      	adds	r7, #1
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	4619      	mov	r1, r3
 8005640:	250a      	movs	r5, #10
 8005642:	4638      	mov	r0, r7
 8005644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005648:	3a30      	subs	r2, #48	; 0x30
 800564a:	2a09      	cmp	r2, #9
 800564c:	d903      	bls.n	8005656 <_svfiprintf_r+0x196>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0c8      	beq.n	80055e4 <_svfiprintf_r+0x124>
 8005652:	9105      	str	r1, [sp, #20]
 8005654:	e7c6      	b.n	80055e4 <_svfiprintf_r+0x124>
 8005656:	fb05 2101 	mla	r1, r5, r1, r2
 800565a:	2301      	movs	r3, #1
 800565c:	4607      	mov	r7, r0
 800565e:	e7f0      	b.n	8005642 <_svfiprintf_r+0x182>
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4622      	mov	r2, r4
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <_svfiprintf_r+0x1ec>)
 8005668:	a904      	add	r1, sp, #16
 800566a:	4640      	mov	r0, r8
 800566c:	f3af 8000 	nop.w
 8005670:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005674:	4681      	mov	r9, r0
 8005676:	d1d6      	bne.n	8005626 <_svfiprintf_r+0x166>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	065b      	lsls	r3, r3, #25
 800567c:	f53f af35 	bmi.w	80054ea <_svfiprintf_r+0x2a>
 8005680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005682:	b01d      	add	sp, #116	; 0x74
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005688:	ab03      	add	r3, sp, #12
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4622      	mov	r2, r4
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <_svfiprintf_r+0x1ec>)
 8005690:	a904      	add	r1, sp, #16
 8005692:	4640      	mov	r0, r8
 8005694:	f000 f882 	bl	800579c <_printf_i>
 8005698:	e7ea      	b.n	8005670 <_svfiprintf_r+0x1b0>
 800569a:	bf00      	nop
 800569c:	08005ce8 	.word	0x08005ce8
 80056a0:	08005cee 	.word	0x08005cee
 80056a4:	08005cf2 	.word	0x08005cf2
 80056a8:	00000000 	.word	0x00000000
 80056ac:	0800540d 	.word	0x0800540d

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4691      	mov	r9, r2
 80056b6:	461f      	mov	r7, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	f8c9 3000 	str.w	r3, [r9]
 80056ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ce:	4606      	mov	r6, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	b112      	cbz	r2, 80056da <_printf_common+0x2a>
 80056d4:	3301      	adds	r3, #1
 80056d6:	f8c9 3000 	str.w	r3, [r9]
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	0699      	lsls	r1, r3, #26
 80056de:	bf42      	ittt	mi
 80056e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80056e4:	3302      	addmi	r3, #2
 80056e6:	f8c9 3000 	strmi.w	r3, [r9]
 80056ea:	6825      	ldr	r5, [r4, #0]
 80056ec:	f015 0506 	ands.w	r5, r5, #6
 80056f0:	d107      	bne.n	8005702 <_printf_common+0x52>
 80056f2:	f104 0a19 	add.w	sl, r4, #25
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	f8d9 2000 	ldr.w	r2, [r9]
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	42ab      	cmp	r3, r5
 8005700:	dc28      	bgt.n	8005754 <_printf_common+0xa4>
 8005702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	3300      	adds	r3, #0
 800570a:	bf18      	it	ne
 800570c:	2301      	movne	r3, #1
 800570e:	0692      	lsls	r2, r2, #26
 8005710:	d42d      	bmi.n	800576e <_printf_common+0xbe>
 8005712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005716:	4639      	mov	r1, r7
 8005718:	4630      	mov	r0, r6
 800571a:	47c0      	blx	r8
 800571c:	3001      	adds	r0, #1
 800571e:	d020      	beq.n	8005762 <_printf_common+0xb2>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	68e5      	ldr	r5, [r4, #12]
 8005724:	f8d9 2000 	ldr.w	r2, [r9]
 8005728:	f003 0306 	and.w	r3, r3, #6
 800572c:	2b04      	cmp	r3, #4
 800572e:	bf08      	it	eq
 8005730:	1aad      	subeq	r5, r5, r2
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	6922      	ldr	r2, [r4, #16]
 8005736:	bf0c      	ite	eq
 8005738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800573c:	2500      	movne	r5, #0
 800573e:	4293      	cmp	r3, r2
 8005740:	bfc4      	itt	gt
 8005742:	1a9b      	subgt	r3, r3, r2
 8005744:	18ed      	addgt	r5, r5, r3
 8005746:	f04f 0900 	mov.w	r9, #0
 800574a:	341a      	adds	r4, #26
 800574c:	454d      	cmp	r5, r9
 800574e:	d11a      	bne.n	8005786 <_printf_common+0xd6>
 8005750:	2000      	movs	r0, #0
 8005752:	e008      	b.n	8005766 <_printf_common+0xb6>
 8005754:	2301      	movs	r3, #1
 8005756:	4652      	mov	r2, sl
 8005758:	4639      	mov	r1, r7
 800575a:	4630      	mov	r0, r6
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d103      	bne.n	800576a <_printf_common+0xba>
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576a:	3501      	adds	r5, #1
 800576c:	e7c3      	b.n	80056f6 <_printf_common+0x46>
 800576e:	18e1      	adds	r1, r4, r3
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	2030      	movs	r0, #48	; 0x30
 8005774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005778:	4422      	add	r2, r4
 800577a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800577e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005782:	3302      	adds	r3, #2
 8005784:	e7c5      	b.n	8005712 <_printf_common+0x62>
 8005786:	2301      	movs	r3, #1
 8005788:	4622      	mov	r2, r4
 800578a:	4639      	mov	r1, r7
 800578c:	4630      	mov	r0, r6
 800578e:	47c0      	blx	r8
 8005790:	3001      	adds	r0, #1
 8005792:	d0e6      	beq.n	8005762 <_printf_common+0xb2>
 8005794:	f109 0901 	add.w	r9, r9, #1
 8005798:	e7d8      	b.n	800574c <_printf_common+0x9c>
	...

0800579c <_printf_i>:
 800579c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80057a4:	460c      	mov	r4, r1
 80057a6:	7e09      	ldrb	r1, [r1, #24]
 80057a8:	b085      	sub	sp, #20
 80057aa:	296e      	cmp	r1, #110	; 0x6e
 80057ac:	4617      	mov	r7, r2
 80057ae:	4606      	mov	r6, r0
 80057b0:	4698      	mov	r8, r3
 80057b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057b4:	f000 80b3 	beq.w	800591e <_printf_i+0x182>
 80057b8:	d822      	bhi.n	8005800 <_printf_i+0x64>
 80057ba:	2963      	cmp	r1, #99	; 0x63
 80057bc:	d036      	beq.n	800582c <_printf_i+0x90>
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x3a>
 80057c0:	2900      	cmp	r1, #0
 80057c2:	f000 80b9 	beq.w	8005938 <_printf_i+0x19c>
 80057c6:	2958      	cmp	r1, #88	; 0x58
 80057c8:	f000 8083 	beq.w	80058d2 <_printf_i+0x136>
 80057cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80057d4:	e032      	b.n	800583c <_printf_i+0xa0>
 80057d6:	2964      	cmp	r1, #100	; 0x64
 80057d8:	d001      	beq.n	80057de <_printf_i+0x42>
 80057da:	2969      	cmp	r1, #105	; 0x69
 80057dc:	d1f6      	bne.n	80057cc <_printf_i+0x30>
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	6813      	ldr	r3, [r2, #0]
 80057e2:	0605      	lsls	r5, r0, #24
 80057e4:	f103 0104 	add.w	r1, r3, #4
 80057e8:	d52a      	bpl.n	8005840 <_printf_i+0xa4>
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da03      	bge.n	80057fa <_printf_i+0x5e>
 80057f2:	222d      	movs	r2, #45	; 0x2d
 80057f4:	425b      	negs	r3, r3
 80057f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057fa:	486f      	ldr	r0, [pc, #444]	; (80059b8 <_printf_i+0x21c>)
 80057fc:	220a      	movs	r2, #10
 80057fe:	e039      	b.n	8005874 <_printf_i+0xd8>
 8005800:	2973      	cmp	r1, #115	; 0x73
 8005802:	f000 809d 	beq.w	8005940 <_printf_i+0x1a4>
 8005806:	d808      	bhi.n	800581a <_printf_i+0x7e>
 8005808:	296f      	cmp	r1, #111	; 0x6f
 800580a:	d020      	beq.n	800584e <_printf_i+0xb2>
 800580c:	2970      	cmp	r1, #112	; 0x70
 800580e:	d1dd      	bne.n	80057cc <_printf_i+0x30>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	f043 0320 	orr.w	r3, r3, #32
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	e003      	b.n	8005822 <_printf_i+0x86>
 800581a:	2975      	cmp	r1, #117	; 0x75
 800581c:	d017      	beq.n	800584e <_printf_i+0xb2>
 800581e:	2978      	cmp	r1, #120	; 0x78
 8005820:	d1d4      	bne.n	80057cc <_printf_i+0x30>
 8005822:	2378      	movs	r3, #120	; 0x78
 8005824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005828:	4864      	ldr	r0, [pc, #400]	; (80059bc <_printf_i+0x220>)
 800582a:	e055      	b.n	80058d8 <_printf_i+0x13c>
 800582c:	6813      	ldr	r3, [r2, #0]
 800582e:	1d19      	adds	r1, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6011      	str	r1, [r2, #0]
 8005834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583c:	2301      	movs	r3, #1
 800583e:	e08c      	b.n	800595a <_printf_i+0x1be>
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6011      	str	r1, [r2, #0]
 8005844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005848:	bf18      	it	ne
 800584a:	b21b      	sxthne	r3, r3
 800584c:	e7cf      	b.n	80057ee <_printf_i+0x52>
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	6825      	ldr	r5, [r4, #0]
 8005852:	1d18      	adds	r0, r3, #4
 8005854:	6010      	str	r0, [r2, #0]
 8005856:	0628      	lsls	r0, r5, #24
 8005858:	d501      	bpl.n	800585e <_printf_i+0xc2>
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	e002      	b.n	8005864 <_printf_i+0xc8>
 800585e:	0668      	lsls	r0, r5, #25
 8005860:	d5fb      	bpl.n	800585a <_printf_i+0xbe>
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	4854      	ldr	r0, [pc, #336]	; (80059b8 <_printf_i+0x21c>)
 8005866:	296f      	cmp	r1, #111	; 0x6f
 8005868:	bf14      	ite	ne
 800586a:	220a      	movne	r2, #10
 800586c:	2208      	moveq	r2, #8
 800586e:	2100      	movs	r1, #0
 8005870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005874:	6865      	ldr	r5, [r4, #4]
 8005876:	60a5      	str	r5, [r4, #8]
 8005878:	2d00      	cmp	r5, #0
 800587a:	f2c0 8095 	blt.w	80059a8 <_printf_i+0x20c>
 800587e:	6821      	ldr	r1, [r4, #0]
 8005880:	f021 0104 	bic.w	r1, r1, #4
 8005884:	6021      	str	r1, [r4, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d13d      	bne.n	8005906 <_printf_i+0x16a>
 800588a:	2d00      	cmp	r5, #0
 800588c:	f040 808e 	bne.w	80059ac <_printf_i+0x210>
 8005890:	4665      	mov	r5, ip
 8005892:	2a08      	cmp	r2, #8
 8005894:	d10b      	bne.n	80058ae <_printf_i+0x112>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	07db      	lsls	r3, r3, #31
 800589a:	d508      	bpl.n	80058ae <_printf_i+0x112>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	6862      	ldr	r2, [r4, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	bfde      	ittt	le
 80058a4:	2330      	movle	r3, #48	; 0x30
 80058a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ae:	ebac 0305 	sub.w	r3, ip, r5
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	f8cd 8000 	str.w	r8, [sp]
 80058b8:	463b      	mov	r3, r7
 80058ba:	aa03      	add	r2, sp, #12
 80058bc:	4621      	mov	r1, r4
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff fef6 	bl	80056b0 <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d14d      	bne.n	8005964 <_printf_i+0x1c8>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b005      	add	sp, #20
 80058ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058d2:	4839      	ldr	r0, [pc, #228]	; (80059b8 <_printf_i+0x21c>)
 80058d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80058d8:	6813      	ldr	r3, [r2, #0]
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	1d1d      	adds	r5, r3, #4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6015      	str	r5, [r2, #0]
 80058e2:	060a      	lsls	r2, r1, #24
 80058e4:	d50b      	bpl.n	80058fe <_printf_i+0x162>
 80058e6:	07ca      	lsls	r2, r1, #31
 80058e8:	bf44      	itt	mi
 80058ea:	f041 0120 	orrmi.w	r1, r1, #32
 80058ee:	6021      	strmi	r1, [r4, #0]
 80058f0:	b91b      	cbnz	r3, 80058fa <_printf_i+0x15e>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	f022 0220 	bic.w	r2, r2, #32
 80058f8:	6022      	str	r2, [r4, #0]
 80058fa:	2210      	movs	r2, #16
 80058fc:	e7b7      	b.n	800586e <_printf_i+0xd2>
 80058fe:	064d      	lsls	r5, r1, #25
 8005900:	bf48      	it	mi
 8005902:	b29b      	uxthmi	r3, r3
 8005904:	e7ef      	b.n	80058e6 <_printf_i+0x14a>
 8005906:	4665      	mov	r5, ip
 8005908:	fbb3 f1f2 	udiv	r1, r3, r2
 800590c:	fb02 3311 	mls	r3, r2, r1, r3
 8005910:	5cc3      	ldrb	r3, [r0, r3]
 8005912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005916:	460b      	mov	r3, r1
 8005918:	2900      	cmp	r1, #0
 800591a:	d1f5      	bne.n	8005908 <_printf_i+0x16c>
 800591c:	e7b9      	b.n	8005892 <_printf_i+0xf6>
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	6825      	ldr	r5, [r4, #0]
 8005922:	6961      	ldr	r1, [r4, #20]
 8005924:	1d18      	adds	r0, r3, #4
 8005926:	6010      	str	r0, [r2, #0]
 8005928:	0628      	lsls	r0, r5, #24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	d501      	bpl.n	8005932 <_printf_i+0x196>
 800592e:	6019      	str	r1, [r3, #0]
 8005930:	e002      	b.n	8005938 <_printf_i+0x19c>
 8005932:	066a      	lsls	r2, r5, #25
 8005934:	d5fb      	bpl.n	800592e <_printf_i+0x192>
 8005936:	8019      	strh	r1, [r3, #0]
 8005938:	2300      	movs	r3, #0
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	4665      	mov	r5, ip
 800593e:	e7b9      	b.n	80058b4 <_printf_i+0x118>
 8005940:	6813      	ldr	r3, [r2, #0]
 8005942:	1d19      	adds	r1, r3, #4
 8005944:	6011      	str	r1, [r2, #0]
 8005946:	681d      	ldr	r5, [r3, #0]
 8005948:	6862      	ldr	r2, [r4, #4]
 800594a:	2100      	movs	r1, #0
 800594c:	4628      	mov	r0, r5
 800594e:	f7fa fc47 	bl	80001e0 <memchr>
 8005952:	b108      	cbz	r0, 8005958 <_printf_i+0x1bc>
 8005954:	1b40      	subs	r0, r0, r5
 8005956:	6060      	str	r0, [r4, #4]
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	2300      	movs	r3, #0
 800595e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005962:	e7a7      	b.n	80058b4 <_printf_i+0x118>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	462a      	mov	r2, r5
 8005968:	4639      	mov	r1, r7
 800596a:	4630      	mov	r0, r6
 800596c:	47c0      	blx	r8
 800596e:	3001      	adds	r0, #1
 8005970:	d0aa      	beq.n	80058c8 <_printf_i+0x12c>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	079b      	lsls	r3, r3, #30
 8005976:	d413      	bmi.n	80059a0 <_printf_i+0x204>
 8005978:	68e0      	ldr	r0, [r4, #12]
 800597a:	9b03      	ldr	r3, [sp, #12]
 800597c:	4298      	cmp	r0, r3
 800597e:	bfb8      	it	lt
 8005980:	4618      	movlt	r0, r3
 8005982:	e7a3      	b.n	80058cc <_printf_i+0x130>
 8005984:	2301      	movs	r3, #1
 8005986:	464a      	mov	r2, r9
 8005988:	4639      	mov	r1, r7
 800598a:	4630      	mov	r0, r6
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d09a      	beq.n	80058c8 <_printf_i+0x12c>
 8005992:	3501      	adds	r5, #1
 8005994:	68e3      	ldr	r3, [r4, #12]
 8005996:	9a03      	ldr	r2, [sp, #12]
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	42ab      	cmp	r3, r5
 800599c:	dcf2      	bgt.n	8005984 <_printf_i+0x1e8>
 800599e:	e7eb      	b.n	8005978 <_printf_i+0x1dc>
 80059a0:	2500      	movs	r5, #0
 80059a2:	f104 0919 	add.w	r9, r4, #25
 80059a6:	e7f5      	b.n	8005994 <_printf_i+0x1f8>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ac      	bne.n	8005906 <_printf_i+0x16a>
 80059ac:	7803      	ldrb	r3, [r0, #0]
 80059ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b6:	e76c      	b.n	8005892 <_printf_i+0xf6>
 80059b8:	08005cf9 	.word	0x08005cf9
 80059bc:	08005d0a 	.word	0x08005d0a

080059c0 <memcpy>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	1e43      	subs	r3, r0, #1
 80059c4:	440a      	add	r2, r1
 80059c6:	4291      	cmp	r1, r2
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	bd10      	pop	{r4, pc}
 80059cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d4:	e7f7      	b.n	80059c6 <memcpy+0x6>

080059d6 <memmove>:
 80059d6:	4288      	cmp	r0, r1
 80059d8:	b510      	push	{r4, lr}
 80059da:	eb01 0302 	add.w	r3, r1, r2
 80059de:	d807      	bhi.n	80059f0 <memmove+0x1a>
 80059e0:	1e42      	subs	r2, r0, #1
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d00a      	beq.n	80059fc <memmove+0x26>
 80059e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80059ee:	e7f8      	b.n	80059e2 <memmove+0xc>
 80059f0:	4283      	cmp	r3, r0
 80059f2:	d9f5      	bls.n	80059e0 <memmove+0xa>
 80059f4:	1881      	adds	r1, r0, r2
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	42d3      	cmn	r3, r2
 80059fa:	d100      	bne.n	80059fe <memmove+0x28>
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a06:	e7f7      	b.n	80059f8 <memmove+0x22>

08005a08 <_free_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	d045      	beq.n	8005a9c <_free_r+0x94>
 8005a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a14:	1f0c      	subs	r4, r1, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfb8      	it	lt
 8005a1a:	18e4      	addlt	r4, r4, r3
 8005a1c:	f000 f8d2 	bl	8005bc4 <__malloc_lock>
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <_free_r+0x98>)
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	4610      	mov	r0, r2
 8005a26:	b933      	cbnz	r3, 8005a36 <_free_r+0x2e>
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	6014      	str	r4, [r2, #0]
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a32:	f000 b8c8 	b.w	8005bc6 <__malloc_unlock>
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	d90c      	bls.n	8005a54 <_free_r+0x4c>
 8005a3a:	6821      	ldr	r1, [r4, #0]
 8005a3c:	1862      	adds	r2, r4, r1
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bf04      	itt	eq
 8005a42:	681a      	ldreq	r2, [r3, #0]
 8005a44:	685b      	ldreq	r3, [r3, #4]
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	bf04      	itt	eq
 8005a4a:	1852      	addeq	r2, r2, r1
 8005a4c:	6022      	streq	r2, [r4, #0]
 8005a4e:	6004      	str	r4, [r0, #0]
 8005a50:	e7ec      	b.n	8005a2c <_free_r+0x24>
 8005a52:	4613      	mov	r3, r2
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	b10a      	cbz	r2, 8005a5c <_free_r+0x54>
 8005a58:	42a2      	cmp	r2, r4
 8005a5a:	d9fa      	bls.n	8005a52 <_free_r+0x4a>
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	1858      	adds	r0, r3, r1
 8005a60:	42a0      	cmp	r0, r4
 8005a62:	d10b      	bne.n	8005a7c <_free_r+0x74>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	4401      	add	r1, r0
 8005a68:	1858      	adds	r0, r3, r1
 8005a6a:	4282      	cmp	r2, r0
 8005a6c:	6019      	str	r1, [r3, #0]
 8005a6e:	d1dd      	bne.n	8005a2c <_free_r+0x24>
 8005a70:	6810      	ldr	r0, [r2, #0]
 8005a72:	6852      	ldr	r2, [r2, #4]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	4401      	add	r1, r0
 8005a78:	6019      	str	r1, [r3, #0]
 8005a7a:	e7d7      	b.n	8005a2c <_free_r+0x24>
 8005a7c:	d902      	bls.n	8005a84 <_free_r+0x7c>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	e7d3      	b.n	8005a2c <_free_r+0x24>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	1821      	adds	r1, r4, r0
 8005a88:	428a      	cmp	r2, r1
 8005a8a:	bf04      	itt	eq
 8005a8c:	6811      	ldreq	r1, [r2, #0]
 8005a8e:	6852      	ldreq	r2, [r2, #4]
 8005a90:	6062      	str	r2, [r4, #4]
 8005a92:	bf04      	itt	eq
 8005a94:	1809      	addeq	r1, r1, r0
 8005a96:	6021      	streq	r1, [r4, #0]
 8005a98:	605c      	str	r4, [r3, #4]
 8005a9a:	e7c7      	b.n	8005a2c <_free_r+0x24>
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000110 	.word	0x20000110

08005aa4 <_malloc_r>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	1ccd      	adds	r5, r1, #3
 8005aa8:	f025 0503 	bic.w	r5, r5, #3
 8005aac:	3508      	adds	r5, #8
 8005aae:	2d0c      	cmp	r5, #12
 8005ab0:	bf38      	it	cc
 8005ab2:	250c      	movcc	r5, #12
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	db01      	blt.n	8005abe <_malloc_r+0x1a>
 8005aba:	42a9      	cmp	r1, r5
 8005abc:	d903      	bls.n	8005ac6 <_malloc_r+0x22>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	bd70      	pop	{r4, r5, r6, pc}
 8005ac6:	f000 f87d 	bl	8005bc4 <__malloc_lock>
 8005aca:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <_malloc_r+0xac>)
 8005acc:	6814      	ldr	r4, [r2, #0]
 8005ace:	4621      	mov	r1, r4
 8005ad0:	b991      	cbnz	r1, 8005af8 <_malloc_r+0x54>
 8005ad2:	4c20      	ldr	r4, [pc, #128]	; (8005b54 <_malloc_r+0xb0>)
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	b91b      	cbnz	r3, 8005ae0 <_malloc_r+0x3c>
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f000 f863 	bl	8005ba4 <_sbrk_r>
 8005ade:	6020      	str	r0, [r4, #0]
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f000 f85e 	bl	8005ba4 <_sbrk_r>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d124      	bne.n	8005b36 <_malloc_r+0x92>
 8005aec:	230c      	movs	r3, #12
 8005aee:	6033      	str	r3, [r6, #0]
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 f868 	bl	8005bc6 <__malloc_unlock>
 8005af6:	e7e4      	b.n	8005ac2 <_malloc_r+0x1e>
 8005af8:	680b      	ldr	r3, [r1, #0]
 8005afa:	1b5b      	subs	r3, r3, r5
 8005afc:	d418      	bmi.n	8005b30 <_malloc_r+0x8c>
 8005afe:	2b0b      	cmp	r3, #11
 8005b00:	d90f      	bls.n	8005b22 <_malloc_r+0x7e>
 8005b02:	600b      	str	r3, [r1, #0]
 8005b04:	50cd      	str	r5, [r1, r3]
 8005b06:	18cc      	adds	r4, r1, r3
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 f85c 	bl	8005bc6 <__malloc_unlock>
 8005b0e:	f104 000b 	add.w	r0, r4, #11
 8005b12:	1d23      	adds	r3, r4, #4
 8005b14:	f020 0007 	bic.w	r0, r0, #7
 8005b18:	1ac3      	subs	r3, r0, r3
 8005b1a:	d0d3      	beq.n	8005ac4 <_malloc_r+0x20>
 8005b1c:	425a      	negs	r2, r3
 8005b1e:	50e2      	str	r2, [r4, r3]
 8005b20:	e7d0      	b.n	8005ac4 <_malloc_r+0x20>
 8005b22:	428c      	cmp	r4, r1
 8005b24:	684b      	ldr	r3, [r1, #4]
 8005b26:	bf16      	itet	ne
 8005b28:	6063      	strne	r3, [r4, #4]
 8005b2a:	6013      	streq	r3, [r2, #0]
 8005b2c:	460c      	movne	r4, r1
 8005b2e:	e7eb      	b.n	8005b08 <_malloc_r+0x64>
 8005b30:	460c      	mov	r4, r1
 8005b32:	6849      	ldr	r1, [r1, #4]
 8005b34:	e7cc      	b.n	8005ad0 <_malloc_r+0x2c>
 8005b36:	1cc4      	adds	r4, r0, #3
 8005b38:	f024 0403 	bic.w	r4, r4, #3
 8005b3c:	42a0      	cmp	r0, r4
 8005b3e:	d005      	beq.n	8005b4c <_malloc_r+0xa8>
 8005b40:	1a21      	subs	r1, r4, r0
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 f82e 	bl	8005ba4 <_sbrk_r>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d0cf      	beq.n	8005aec <_malloc_r+0x48>
 8005b4c:	6025      	str	r5, [r4, #0]
 8005b4e:	e7db      	b.n	8005b08 <_malloc_r+0x64>
 8005b50:	20000110 	.word	0x20000110
 8005b54:	20000114 	.word	0x20000114

08005b58 <_realloc_r>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	4614      	mov	r4, r2
 8005b5e:	460e      	mov	r6, r1
 8005b60:	b921      	cbnz	r1, 8005b6c <_realloc_r+0x14>
 8005b62:	4611      	mov	r1, r2
 8005b64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b68:	f7ff bf9c 	b.w	8005aa4 <_malloc_r>
 8005b6c:	b922      	cbnz	r2, 8005b78 <_realloc_r+0x20>
 8005b6e:	f7ff ff4b 	bl	8005a08 <_free_r>
 8005b72:	4625      	mov	r5, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b78:	f000 f826 	bl	8005bc8 <_malloc_usable_size_r>
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d20f      	bcs.n	8005ba0 <_realloc_r+0x48>
 8005b80:	4621      	mov	r1, r4
 8005b82:	4638      	mov	r0, r7
 8005b84:	f7ff ff8e 	bl	8005aa4 <_malloc_r>
 8005b88:	4605      	mov	r5, r0
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d0f2      	beq.n	8005b74 <_realloc_r+0x1c>
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4622      	mov	r2, r4
 8005b92:	f7ff ff15 	bl	80059c0 <memcpy>
 8005b96:	4631      	mov	r1, r6
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f7ff ff35 	bl	8005a08 <_free_r>
 8005b9e:	e7e9      	b.n	8005b74 <_realloc_r+0x1c>
 8005ba0:	4635      	mov	r5, r6
 8005ba2:	e7e7      	b.n	8005b74 <_realloc_r+0x1c>

08005ba4 <_sbrk_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4c06      	ldr	r4, [pc, #24]	; (8005bc0 <_sbrk_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4605      	mov	r5, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	f7fb fd8e 	bl	80016d0 <_sbrk>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_sbrk_r+0x1a>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_sbrk_r+0x1a>
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20000258 	.word	0x20000258

08005bc4 <__malloc_lock>:
 8005bc4:	4770      	bx	lr

08005bc6 <__malloc_unlock>:
 8005bc6:	4770      	bx	lr

08005bc8 <_malloc_usable_size_r>:
 8005bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bcc:	1f18      	subs	r0, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfbc      	itt	lt
 8005bd2:	580b      	ldrlt	r3, [r1, r0]
 8005bd4:	18c0      	addlt	r0, r0, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
