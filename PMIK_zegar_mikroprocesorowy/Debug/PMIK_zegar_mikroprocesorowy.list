
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200000ec  08005fd4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005fd4  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001132c  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a8  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  00034a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ddf  00000000  00000000  00035640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d846  00000000  00000000  0004d41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d828  00000000  00000000  0005ac65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e848d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  000e8508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d80 	.word	0x08005d80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08005d80 	.word	0x08005d80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <rtc_set_time>:
/*	alarm	*/

uint8_t uart_rx_data;

void rtc_set_time ()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	  /**Initialize RTC and set the Time and Date
	  */

	get_Time();
 8000596:	f001 fa49 	bl	8001a2c <get_Time>

	uint8_t hour = time.hour;
 800059a:	4b61      	ldr	r3, [pc, #388]	; (8000720 <rtc_set_time+0x190>)
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	77fb      	strb	r3, [r7, #31]
	uint8_t min = time.minutes;
 80005a0:	4b5f      	ldr	r3, [pc, #380]	; (8000720 <rtc_set_time+0x190>)
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	77bb      	strb	r3, [r7, #30]
	uint8_t sec = time.seconds;
 80005a6:	4b5e      	ldr	r3, [pc, #376]	; (8000720 <rtc_set_time+0x190>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	777b      	strb	r3, [r7, #29]

	uint8_t day = time.dayofmonth;
 80005ac:	4b5c      	ldr	r3, [pc, #368]	; (8000720 <rtc_set_time+0x190>)
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	773b      	strb	r3, [r7, #28]
	uint8_t year = time.year;
 80005b2:	4b5b      	ldr	r3, [pc, #364]	; (8000720 <rtc_set_time+0x190>)
 80005b4:	799b      	ldrb	r3, [r3, #6]
 80005b6:	76fb      	strb	r3, [r7, #27]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 80005b8:	7ffb      	ldrb	r3, [r7, #31]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f9a8 	bl	8001910 <decToBcd>
 80005c0:	4603      	mov	r3, r0
 80005c2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = decToBcd(min);
 80005c4:	7fbb      	ldrb	r3, [r7, #30]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f9a2 	bl	8001910 <decToBcd>
 80005cc:	4603      	mov	r3, r0
 80005ce:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = decToBcd(sec);
 80005d0:	7f7b      	ldrb	r3, [r7, #29]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f99c 	bl	8001910 <decToBcd>
 80005d8:	4603      	mov	r3, r0
 80005da:	71bb      	strb	r3, [r7, #6]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	484e      	ldr	r0, [pc, #312]	; (8000724 <rtc_set_time+0x194>)
 80005ec:	f003 fd7d 	bl	80040ea <HAL_RTC_SetTime>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <rtc_set_time+0x6a>
	{
	  Error_Handler();
 80005f6:	f001 f81d 	bl	8001634 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 80005fa:	4b49      	ldr	r3, [pc, #292]	; (8000720 <rtc_set_time+0x190>)
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	3b01      	subs	r3, #1
 8000600:	2b06      	cmp	r3, #6
 8000602:	d826      	bhi.n	8000652 <rtc_set_time+0xc2>
 8000604:	a201      	add	r2, pc, #4	; (adr r2, 800060c <rtc_set_time+0x7c>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	08000629 	.word	0x08000629
 8000610:	0800062f 	.word	0x0800062f
 8000614:	08000635 	.word	0x08000635
 8000618:	0800063b 	.word	0x0800063b
 800061c:	08000641 	.word	0x08000641
 8000620:	08000647 	.word	0x08000647
 8000624:	0800064d 	.word	0x0800064d

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000628:	2301      	movs	r3, #1
 800062a:	703b      	strb	r3, [r7, #0]
		break;
 800062c:	e011      	b.n	8000652 <rtc_set_time+0xc2>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800062e:	2302      	movs	r3, #2
 8000630:	703b      	strb	r3, [r7, #0]
		break;
 8000632:	e00e      	b.n	8000652 <rtc_set_time+0xc2>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000634:	2303      	movs	r3, #3
 8000636:	703b      	strb	r3, [r7, #0]
		break;
 8000638:	e00b      	b.n	8000652 <rtc_set_time+0xc2>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800063a:	2304      	movs	r3, #4
 800063c:	703b      	strb	r3, [r7, #0]
		break;
 800063e:	e008      	b.n	8000652 <rtc_set_time+0xc2>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000640:	2305      	movs	r3, #5
 8000642:	703b      	strb	r3, [r7, #0]
		break;
 8000644:	e005      	b.n	8000652 <rtc_set_time+0xc2>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000646:	2306      	movs	r3, #6
 8000648:	703b      	strb	r3, [r7, #0]
		break;
 800064a:	e002      	b.n	8000652 <rtc_set_time+0xc2>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800064c:	2307      	movs	r3, #7
 800064e:	703b      	strb	r3, [r7, #0]
		break;
 8000650:	bf00      	nop

	}


	switch( (int) time.month) {
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <rtc_set_time+0x190>)
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	3b01      	subs	r3, #1
 8000658:	2b0b      	cmp	r3, #11
 800065a:	d83f      	bhi.n	80006dc <rtc_set_time+0x14c>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <rtc_set_time+0xd4>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000695 	.word	0x08000695
 8000668:	0800069b 	.word	0x0800069b
 800066c:	080006a1 	.word	0x080006a1
 8000670:	080006a7 	.word	0x080006a7
 8000674:	080006ad 	.word	0x080006ad
 8000678:	080006b3 	.word	0x080006b3
 800067c:	080006b9 	.word	0x080006b9
 8000680:	080006bf 	.word	0x080006bf
 8000684:	080006c5 	.word	0x080006c5
 8000688:	080006cb 	.word	0x080006cb
 800068c:	080006d1 	.word	0x080006d1
 8000690:	080006d7 	.word	0x080006d7

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 8000694:	2301      	movs	r3, #1
 8000696:	707b      	strb	r3, [r7, #1]
		  break;
 8000698:	e020      	b.n	80006dc <rtc_set_time+0x14c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 800069a:	2302      	movs	r3, #2
 800069c:	707b      	strb	r3, [r7, #1]
		  break;
 800069e:	e01d      	b.n	80006dc <rtc_set_time+0x14c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	707b      	strb	r3, [r7, #1]
		  break;
 80006a4:	e01a      	b.n	80006dc <rtc_set_time+0x14c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 80006a6:	2304      	movs	r3, #4
 80006a8:	707b      	strb	r3, [r7, #1]
		  break;
 80006aa:	e017      	b.n	80006dc <rtc_set_time+0x14c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 80006ac:	2305      	movs	r3, #5
 80006ae:	707b      	strb	r3, [r7, #1]
		  break;
 80006b0:	e014      	b.n	80006dc <rtc_set_time+0x14c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80006b2:	2306      	movs	r3, #6
 80006b4:	707b      	strb	r3, [r7, #1]
		  break;
 80006b6:	e011      	b.n	80006dc <rtc_set_time+0x14c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80006b8:	2307      	movs	r3, #7
 80006ba:	707b      	strb	r3, [r7, #1]
		  break;
 80006bc:	e00e      	b.n	80006dc <rtc_set_time+0x14c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80006be:	2308      	movs	r3, #8
 80006c0:	707b      	strb	r3, [r7, #1]
		  break;
 80006c2:	e00b      	b.n	80006dc <rtc_set_time+0x14c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 80006c4:	2309      	movs	r3, #9
 80006c6:	707b      	strb	r3, [r7, #1]
		  break;
 80006c8:	e008      	b.n	80006dc <rtc_set_time+0x14c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 80006ca:	2310      	movs	r3, #16
 80006cc:	707b      	strb	r3, [r7, #1]
		  break;
 80006ce:	e005      	b.n	80006dc <rtc_set_time+0x14c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 80006d0:	2311      	movs	r3, #17
 80006d2:	707b      	strb	r3, [r7, #1]
		  break;
 80006d4:	e002      	b.n	80006dc <rtc_set_time+0x14c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 80006d6:	2312      	movs	r3, #18
 80006d8:	707b      	strb	r3, [r7, #1]
		  break;
 80006da:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 80006dc:	7f3b      	ldrb	r3, [r7, #28]
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f916 	bl	8001910 <decToBcd>
 80006e4:	4603      	mov	r3, r0
 80006e6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = decToBcd(year);
 80006e8:	7efb      	ldrb	r3, [r7, #27]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f910 	bl	8001910 <decToBcd>
 80006f0:	4603      	mov	r3, r0
 80006f2:	70fb      	strb	r3, [r7, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	480a      	ldr	r0, [pc, #40]	; (8000724 <rtc_set_time+0x194>)
 80006fc:	f003 fdb2 	bl	8004264 <HAL_RTC_SetDate>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <rtc_set_time+0x17a>
	{
		Error_Handler();
 8000706:	f000 ff95 	bl	8001634 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800070a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800070e:	2101      	movs	r1, #1
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <rtc_set_time+0x194>)
 8000712:	f004 f83f 	bl	8004794 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000128 	.word	0x20000128
 8000724:	200001ec 	.word	0x200001ec

08000728 <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość godzin, minut, sekund oraz dni, pozostałych do włączenia alarmu
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b08f      	sub	sp, #60	; 0x3c
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	4603      	mov	r3, r0
 800073c:	71bb      	strb	r3, [r7, #6]
 800073e:	460b      	mov	r3, r1
 8000740:	717b      	strb	r3, [r7, #5]
 8000742:	4613      	mov	r3, r2
 8000744:	713b      	strb	r3, [r7, #4]
	get_Time();
 8000746:	f001 f971 	bl	8001a2c <get_Time>

	uint8_t alarm_day = time.dayofmonth + day;
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <rtc_set_alarm+0xe4>)
 800074c:	791a      	ldrb	r2, [r3, #4]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4413      	add	r3, r2
 8000752:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t alarm_hour = time.hour + hour;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <rtc_set_alarm+0xe4>)
 8000758:	789a      	ldrb	r2, [r3, #2]
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	4413      	add	r3, r2
 800075e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarm_min = time.minutes + min;
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <rtc_set_alarm+0xe4>)
 8000764:	785a      	ldrb	r2, [r3, #1]
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	4413      	add	r3, r2
 800076a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// włączamy alarm 2 sekundy wcześniej niż zaplanowany, ponieważ transmisja uartem trwa 2s
	uint8_t alarm_sec = time.seconds + sec - 2;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <rtc_set_alarm+0xe4>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	3b02      	subs	r3, #2
 800077a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
	sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800077e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f8c4 	bl	8001910 <decToBcd>
 8000788:	4603      	mov	r3, r0
 800078a:	733b      	strb	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800078c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f8bd 	bl	8001910 <decToBcd>
 8000796:	4603      	mov	r3, r0
 8000798:	737b      	strb	r3, [r7, #13]
	sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 800079a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f8b6 	bl	8001910 <decToBcd>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73bb      	strb	r3, [r7, #14]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80007c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 f8a3 	bl	8001910 <decToBcd>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <rtc_set_alarm+0xe8>)
 80007e0:	f003 fde8 	bl	80043b4 <HAL_RTC_SetAlarm_IT>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <rtc_set_alarm+0xc6>
	{
		Error_Handler();
 80007ea:	f000 ff23 	bl	8001634 <Error_Handler>
	}

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_set_msg, strlen(alarm_set_msg));
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <rtc_set_alarm+0xec>)
 80007f0:	f7ff fcf6 	bl	80001e0 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	4906      	ldr	r1, [pc, #24]	; (8000814 <rtc_set_alarm+0xec>)
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <rtc_set_alarm+0xf0>)
 80007fe:	f004 f83a 	bl	8004876 <HAL_UART_Transmit_IT>
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 8000802:	bf00      	nop
 8000804:	373c      	adds	r7, #60	; 0x3c
 8000806:	46bd      	mov	sp, r7
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	bf00      	nop
 800080c:	20000128 	.word	0x20000128
 8000810:	200001ec 	.word	0x200001ec
 8000814:	20000028 	.word	0x20000028
 8000818:	2000020c 	.word	0x2000020c

0800081c <activate_time>:

// Funkcja sygnalizująca, że użytkownik ustawia nową godzinę na zegarku
void activate_time () {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	if(uart_rx_data == 't') {
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <activate_time+0x64>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b74      	cmp	r3, #116	; 0x74
 8000826:	d10b      	bne.n	8000840 <activate_time+0x24>

		date_activated_flag = 0;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <activate_time+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <activate_time+0x6c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <activate_time+0x70>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
		time_activated_flag = 1;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <activate_time+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
	}

	if(time_activated_flag) {
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <activate_time+0x74>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d013      	beq.n	8000870 <activate_time+0x54>

		global_buffer[global_counter] = uart_rx_data;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <activate_time+0x70>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <activate_time+0x64>)
 8000850:	7819      	ldrb	r1, [r3, #0]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <activate_time+0x78>)
 8000854:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <activate_time+0x70>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <activate_time+0x70>)
 8000860:	701a      	strb	r2, [r3, #0]

		if(global_counter == 3) {
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <activate_time+0x70>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d102      	bne.n	8000870 <activate_time+0x54>
			time_set_flag = 1;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <activate_time+0x7c>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <activate_time+0x64>)
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <activate_time+0x80>)
 8000876:	f004 f843 	bl	8004900 <HAL_UART_Receive_IT>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000130 	.word	0x20000130
 8000884:	20000119 	.word	0x20000119
 8000888:	20000118 	.word	0x20000118
 800088c:	20000108 	.word	0x20000108
 8000890:	20000121 	.word	0x20000121
 8000894:	2000011c 	.word	0x2000011c
 8000898:	20000123 	.word	0x20000123
 800089c:	2000020c 	.word	0x2000020c

080008a0 <activate_date>:

// Funkcja sygnalizująca, że użytkownik ustawia nową datę na zegarku
void activate_date () {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'd') {
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <activate_date+0x64>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b64      	cmp	r3, #100	; 0x64
 80008aa:	d10b      	bne.n	80008c4 <activate_date+0x24>

		time_activated_flag = 0;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <activate_date+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <activate_date+0x6c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <activate_date+0x70>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 1;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <activate_date+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
	}

	if(date_activated_flag) {
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <activate_date+0x74>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d013      	beq.n	80008f4 <activate_date+0x54>

		global_buffer[global_counter] = uart_rx_data;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <activate_date+0x70>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <activate_date+0x64>)
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <activate_date+0x78>)
 80008d8:	5499      	strb	r1, [r3, r2]

		++global_counter;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <activate_date+0x70>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <activate_date+0x70>)
 80008e4:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <activate_date+0x70>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d102      	bne.n	80008f4 <activate_date+0x54>
			date_set_flag = 1;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <activate_date+0x7c>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	4903      	ldr	r1, [pc, #12]	; (8000904 <activate_date+0x64>)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <activate_date+0x80>)
 80008fa:	f004 f801 	bl	8004900 <HAL_UART_Receive_IT>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000130 	.word	0x20000130
 8000908:	20000121 	.word	0x20000121
 800090c:	20000118 	.word	0x20000118
 8000910:	20000108 	.word	0x20000108
 8000914:	20000119 	.word	0x20000119
 8000918:	2000011c 	.word	0x2000011c
 800091c:	20000122 	.word	0x20000122
 8000920:	2000020c 	.word	0x2000020c

08000924 <activate_alarm>:

// Funkcja sygnalizująca, że użytkownik ustawia nowy alarm
void activate_alarm () {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'a') {
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <activate_alarm+0x64>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b61      	cmp	r3, #97	; 0x61
 800092e:	d10b      	bne.n	8000948 <activate_alarm+0x24>

		time_activated_flag = 0;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <activate_alarm+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 0;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <activate_alarm+0x6c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <activate_alarm+0x70>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 1;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <activate_alarm+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <activate_alarm+0x74>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d013      	beq.n	8000978 <activate_alarm+0x54>

		global_buffer[global_counter] = uart_rx_data;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <activate_alarm+0x70>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <activate_alarm+0x64>)
 8000958:	7819      	ldrb	r1, [r3, #0]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <activate_alarm+0x78>)
 800095c:	5499      	strb	r1, [r3, r2]

		++global_counter;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <activate_alarm+0x70>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <activate_alarm+0x70>)
 8000968:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <activate_alarm+0x70>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b05      	cmp	r3, #5
 8000970:	d102      	bne.n	8000978 <activate_alarm+0x54>
			alarm_set_flag = 1;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <activate_alarm+0x7c>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	4903      	ldr	r1, [pc, #12]	; (8000988 <activate_alarm+0x64>)
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <activate_alarm+0x80>)
 800097e:	f003 ffbf 	bl	8004900 <HAL_UART_Receive_IT>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000130 	.word	0x20000130
 800098c:	20000121 	.word	0x20000121
 8000990:	20000119 	.word	0x20000119
 8000994:	20000108 	.word	0x20000108
 8000998:	20000118 	.word	0x20000118
 800099c:	2000011c 	.word	0x2000011c
 80009a0:	2000012f 	.word	0x2000012f
 80009a4:	2000020c 	.word	0x2000020c

080009a8 <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000124 	.word	0x20000124

080009c8 <to_do_on_alarm>:

void to_do_on_alarm() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

	lcd_clear();
 80009cc:	f000 fa14 	bl	8000df8 <lcd_clear>
	//lcd_back_light_on();

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <to_do_on_alarm+0x38>)
 80009d8:	f001 fc66 	bl	80022a8 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_on_msg, strlen(alarm_on_msg));
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <to_do_on_alarm+0x3c>)
 80009de:	f7ff fbff 	bl	80001e0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4906      	ldr	r1, [pc, #24]	; (8000a04 <to_do_on_alarm+0x3c>)
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <to_do_on_alarm+0x40>)
 80009ec:	f003 ff43 	bl	8004876 <HAL_UART_Transmit_IT>
	lcd_send_alarm_on_msg();
 80009f0:	f000 fb14 	bl	800101c <lcd_send_alarm_on_msg>

	HAL_Delay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f001 f97e 	bl	8001cf8 <HAL_Delay>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40020000 	.word	0x40020000
 8000a04:	20000000 	.word	0x20000000
 8000a08:	2000020c 	.word	0x2000020c

08000a0c <to_do_on_alarm_off>:

void to_do_on_alarm_off() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

	lcd_clear();
 8000a10:	f000 f9f2 	bl	8000df8 <lcd_clear>
	//lcd_back_light_on();

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_off_msg, strlen(alarm_off_msg));
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <to_do_on_alarm_off+0x30>)
 8000a16:	f7ff fbe3 	bl	80001e0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4906      	ldr	r1, [pc, #24]	; (8000a3c <to_do_on_alarm_off+0x30>)
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <to_do_on_alarm_off+0x34>)
 8000a24:	f003 ff27 	bl	8004876 <HAL_UART_Transmit_IT>
	lcd_send_alarm_off_msg();
 8000a28:	f000 fb10 	bl	800104c <lcd_send_alarm_off_msg>
	HAL_Delay(3000);
 8000a2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a30:	f001 f962 	bl	8001cf8 <HAL_Delay>

	lcd_clear();
 8000a34:	f000 f9e0 	bl	8000df8 <lcd_clear>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000014 	.word	0x20000014
 8000a40:	2000020c 	.word	0x2000020c

08000a44 <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a54:	d108      	bne.n	8000a68 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a5e:	f001 fc23 	bl	80022a8 <HAL_GPIO_WritePin>
		alarm_flag = 0;
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	}
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40020000 	.word	0x40020000
 8000a74:	20000124 	.word	0x20000124

08000a78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000ae8:	4816      	ldr	r0, [pc, #88]	; (8000b44 <MX_GPIO_Init+0xcc>)
 8000aea:	f001 fbdd 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_GPIO_Init+0xd4>)
 8000b04:	f001 fa4e 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin;
 8000b08:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_GPIO_Init+0xcc>)
 8000b22:	f001 fa3f 	bl	8001fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2028      	movs	r0, #40	; 0x28
 8000b2c:	f001 f9e1 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b30:	2028      	movs	r0, #40	; 0x28
 8000b32:	f001 f9fa 	bl	8001f2a <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	10210000 	.word	0x10210000
 8000b4c:	40020800 	.word	0x40020800

08000b50 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f001 fbbd 	bl	800230c <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 fd4c 	bl	8001634 <Error_Handler>
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000134 	.word	0x20000134
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <MX_I2C2_Init+0x54>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_I2C2_Init+0x58>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_I2C2_Init+0x50>)
 8000bea:	f001 fb8f 	bl	800230c <HAL_I2C_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f000 fd1e 	bl	8001634 <Error_Handler>
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000188 	.word	0x20000188
 8000c00:	40005800 	.word	0x40005800
 8000c04:	000186a0 	.word	0x000186a0

08000c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a3b      	ldr	r2, [pc, #236]	; (8000d14 <HAL_I2C_MspInit+0x10c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12d      	bne.n	8000c86 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	482e      	ldr	r0, [pc, #184]	; (8000d1c <HAL_I2C_MspInit+0x114>)
 8000c64:	f001 f99e 	bl	8001fa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c84:	e041      	b.n	8000d0a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <HAL_I2C_MspInit+0x118>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d13c      	bne.n	8000d0a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <HAL_I2C_MspInit+0x114>)
 8000cca:	f001 f96b 	bl	8001fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd2:	2312      	movs	r3, #18
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000cde:	2309      	movs	r3, #9
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <HAL_I2C_MspInit+0x114>)
 8000cea:	f001 f95b 	bl	8001fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_I2C_MspInit+0x110>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	; 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40005800 	.word	0x40005800

08000d24 <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	/* sekwencja z dokumentacji inicjalizująca wyświetlacz*/
	HAL_Delay(40);
 8000d28:	2028      	movs	r0, #40	; 0x28
 8000d2a:	f000 ffe5 	bl	8001cf8 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000d2e:	2030      	movs	r0, #48	; 0x30
 8000d30:	f000 f8b8 	bl	8000ea4 <lcd_write_command>
	HAL_Delay(5);
 8000d34:	2005      	movs	r0, #5
 8000d36:	f000 ffdf 	bl	8001cf8 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000d3a:	2030      	movs	r0, #48	; 0x30
 8000d3c:	f000 f8b2 	bl	8000ea4 <lcd_write_command>
	HAL_Delay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 ffd9 	bl	8001cf8 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000d46:	2030      	movs	r0, #48	; 0x30
 8000d48:	f000 f8ac 	bl	8000ea4 <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f000 f8a9 	bl	8000ea4 <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8000d52:	200c      	movs	r0, #12
 8000d54:	f000 f8a6 	bl	8000ea4 <lcd_write_command>

	HAL_Delay(5);
 8000d58:	2005      	movs	r0, #5
 8000d5a:	f000 ffcd 	bl	8001cf8 <HAL_Delay>

	lcd_generate_own_chars();
 8000d5e:	f000 f98d 	bl	800107c <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8000d62:	f000 f849 	bl	8000df8 <lcd_clear>

	/* wyłączenie podświetlenia */
	//lcd_back_light_off();
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <lcd_display_refresh>:

// Funkcja odpowiedzialna za aktualizowanie i wyświetlanie na bieżąco wszystkich danych na wyświetlaczu LCD
void lcd_display_refresh() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af02      	add	r7, sp, #8

	get_Time();
 8000d72:	f000 fe5b 	bl	8001a2c <get_Time>

	// wyświetlanie godziny na LCD
	lcd_first_line();
 8000d76:	f000 f880 	bl	8000e7a <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <lcd_display_refresh+0x78>)
 8000d7c:	789b      	ldrb	r3, [r3, #2]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <lcd_display_refresh+0x78>)
 8000d82:	785b      	ldrb	r3, [r3, #1]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <lcd_display_refresh+0x78>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4916      	ldr	r1, [pc, #88]	; (8000de8 <lcd_display_refresh+0x7c>)
 8000d90:	4816      	ldr	r0, [pc, #88]	; (8000dec <lcd_display_refresh+0x80>)
 8000d92:	f004 fbef 	bl	8005574 <siprintf>
	lcd_send_string(time_date_buffer);
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <lcd_display_refresh+0x80>)
 8000d98:	f000 f928 	bl	8000fec <lcd_send_string>

	//wyświetlenie poziomu baterii
	battery_level = 100;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <lcd_display_refresh+0x84>)
 8000d9e:	2264      	movs	r2, #100	; 0x64
 8000da0:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <lcd_display_refresh+0x84>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fa2c 	bl	8001204 <lcd_show_battery_level>

	// wyświetlanie daty na LCD
	lcd_second_line();
 8000dac:	f000 f86f 	bl	8000e8e <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <lcd_display_refresh+0x78>)
 8000db2:	791b      	ldrb	r3, [r3, #4]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <lcd_display_refresh+0x78>)
 8000db8:	795b      	ldrb	r3, [r3, #5]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <lcd_display_refresh+0x78>)
 8000dbe:	799b      	ldrb	r3, [r3, #6]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	490b      	ldr	r1, [pc, #44]	; (8000df4 <lcd_display_refresh+0x88>)
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <lcd_display_refresh+0x80>)
 8000dc8:	f004 fbd4 	bl	8005574 <siprintf>
	lcd_send_string(time_date_buffer);
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <lcd_display_refresh+0x80>)
 8000dce:	f000 f90d 	bl	8000fec <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_show_week_day_name(time.dayofweek);
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <lcd_display_refresh+0x78>)
 8000dd4:	78db      	ldrb	r3, [r3, #3]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f9c8 	bl	800116c <lcd_show_week_day_name>
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000128 	.word	0x20000128
 8000de8:	08005d98 	.word	0x08005d98
 8000dec:	200001dc 	.word	0x200001dc
 8000df0:	200001e9 	.word	0x200001e9
 8000df4:	08005da8 	.word	0x08005da8

08000df8 <lcd_clear>:

void lcd_clear(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 f851 	bl	8000ea4 <lcd_write_command>
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f000 ff78 	bl	8001cf8 <HAL_Delay>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <lcd_back_light_on>:

// Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD
void lcd_back_light_on(void) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	BL = 0x08;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <lcd_back_light_on+0x14>)
 8000e12:	2208      	movs	r2, #8
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	200001ea 	.word	0x200001ea

08000e24 <lcd_set_cursor>:
void lcd_back_light_off(void) {
	BL = 0x00;
}

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <lcd_set_cursor+0x24>
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d009      	beq.n	8000e5a <lcd_set_cursor+0x36>
 8000e46:	e011      	b.n	8000e6c <lcd_set_cursor+0x48>

		case 0:
			col_number |= (0x80);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e4e:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f826 	bl	8000ea4 <lcd_write_command>
			break;
 8000e58:	e008      	b.n	8000e6c <lcd_set_cursor+0x48>

		case 1:
			col_number |= (0xc0);
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e60:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f81d 	bl	8000ea4 <lcd_write_command>
			break;
 8000e6a:	bf00      	nop
	}

	HAL_Delay(5);
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f000 ff43 	bl	8001cf8 <HAL_Delay>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 8000e7e:	2080      	movs	r0, #128	; 0x80
 8000e80:	f000 f810 	bl	8000ea4 <lcd_write_command>
	HAL_Delay(5);
 8000e84:	2005      	movs	r0, #5
 8000e86:	f000 ff37 	bl	8001cf8 <HAL_Delay>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 8000e92:	20c0      	movs	r0, #192	; 0xc0
 8000e94:	f000 f806 	bl	8000ea4 <lcd_write_command>
	HAL_Delay(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f000 ff2d 	bl	8001cf8 <HAL_Delay>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000eae:	234e      	movs	r3, #78	; 0x4e
 8000eb0:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		// EN = 1, RS = 0
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <lcd_write_command+0x8c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	f023 030f 	bic.w	r3, r3, #15
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <lcd_write_command+0x8c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		// EN = 1, RS = 0
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <lcd_write_command+0x8c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	b25a      	sxtb	r2, r3
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <lcd_write_command+0x8c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	f107 0208 	add.w	r2, r7, #8
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2304      	movs	r3, #4
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <lcd_write_command+0x90>)
 8000f1c:	f001 fb2e 	bl	800257c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000f20:	2005      	movs	r0, #5
 8000f22:	f000 fee9 	bl	8001cf8 <HAL_Delay>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200001ea 	.word	0x200001ea
 8000f34:	20000134 	.word	0x20000134

08000f38 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000f42:	234e      	movs	r3, #78	; 0x4e
 8000f44:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <lcd_write_data+0xac>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <lcd_write_data+0xac>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <lcd_write_data+0xac>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	b25a      	sxtb	r2, r3
 8000faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <lcd_write_data+0xac>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	f107 0208 	add.w	r2, r7, #8
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2304      	movs	r3, #4
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <lcd_write_data+0xb0>)
 8000fd0:	f001 fad4 	bl	800257c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000fd4:	2005      	movs	r0, #5
 8000fd6:	f000 fe8f 	bl	8001cf8 <HAL_Delay>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001ea 	.word	0x200001ea
 8000fe8:	20000134 	.word	0x20000134

08000fec <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	while(*string)
 8000ff4:	e006      	b.n	8001004 <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff9a 	bl	8000f38 <lcd_write_data>
	while(*string)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f4      	bne.n	8000ff6 <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 800100c:	2005      	movs	r0, #5
 800100e:	f000 fe73 	bl	8001cf8 <HAL_Delay>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

	lcd_send_string("Wy");
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <lcd_send_alarm_on_msg+0x28>)
 8001022:	f7ff ffe3 	bl	8000fec <lcd_send_string>
	lcd_send_own_char(3);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f850 	bl	80010cc <lcd_send_own_char>
	lcd_send_own_char(8);
 800102c:	2008      	movs	r0, #8
 800102e:	f000 f84d 	bl	80010cc <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <lcd_send_alarm_on_msg+0x2c>)
 8001034:	f7ff ffda 	bl	8000fec <lcd_send_string>

	HAL_Delay(5);
 8001038:	2005      	movs	r0, #5
 800103a:	f000 fe5d 	bl	8001cf8 <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	08005dbc 	.word	0x08005dbc
 8001048:	08005dc0 	.word	0x08005dc0

0800104c <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

	lcd_send_string("Alarm wy");
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <lcd_send_alarm_off_msg+0x28>)
 8001052:	f7ff ffcb 	bl	8000fec <lcd_send_string>
	lcd_send_own_char(3);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 f838 	bl	80010cc <lcd_send_own_char>
	lcd_send_own_char(8);
 800105c:	2008      	movs	r0, #8
 800105e:	f000 f835 	bl	80010cc <lcd_send_own_char>
	lcd_send_string("czony");
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <lcd_send_alarm_off_msg+0x2c>)
 8001064:	f7ff ffc2 	bl	8000fec <lcd_send_string>

	HAL_Delay(5);
 8001068:	2005      	movs	r0, #5
 800106a:	f000 fe45 	bl	8001cf8 <HAL_Delay>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	08005dd0 	.word	0x08005dd0
 8001078:	08005ddc 	.word	0x08005ddc

0800107c <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 8001082:	2040      	movs	r0, #64	; 0x40
 8001084:	f7ff ff0e 	bl	8000ea4 <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e015      	b.n	80010ba <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 800108e:	2300      	movs	r3, #0
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	e00c      	b.n	80010ae <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	490b      	ldr	r1, [pc, #44]	; (80010c8 <lcd_generate_own_chars+0x4c>)
 800109a:	00d2      	lsls	r2, r2, #3
 800109c:	440a      	add	r2, r1
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff48 	bl	8000f38 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	3301      	adds	r3, #1
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d9ef      	bls.n	8001094 <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	3301      	adds	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	d9e6      	bls.n	800108e <lcd_generate_own_chars+0x12>
		}
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000003c 	.word	0x2000003c

080010cc <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3b01      	subs	r3, #1
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d832      	bhi.n	8001144 <lcd_send_own_char+0x78>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <lcd_send_own_char+0x18>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	08001105 	.word	0x08001105
 80010e8:	0800110d 	.word	0x0800110d
 80010ec:	08001115 	.word	0x08001115
 80010f0:	0800111d 	.word	0x0800111d
 80010f4:	08001125 	.word	0x08001125
 80010f8:	0800112d 	.word	0x0800112d
 80010fc:	08001135 	.word	0x08001135
 8001100:	0800113d 	.word	0x0800113d

		case 1:
			lcd_send_string("\x1");
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <lcd_send_own_char+0x80>)
 8001106:	f7ff ff71 	bl	8000fec <lcd_send_string>
			break;
 800110a:	e01b      	b.n	8001144 <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 800110c:	4810      	ldr	r0, [pc, #64]	; (8001150 <lcd_send_own_char+0x84>)
 800110e:	f7ff ff6d 	bl	8000fec <lcd_send_string>
			break;
 8001112:	e017      	b.n	8001144 <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <lcd_send_own_char+0x88>)
 8001116:	f7ff ff69 	bl	8000fec <lcd_send_string>
			break;
 800111a:	e013      	b.n	8001144 <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <lcd_send_own_char+0x8c>)
 800111e:	f7ff ff65 	bl	8000fec <lcd_send_string>
			break;
 8001122:	e00f      	b.n	8001144 <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <lcd_send_own_char+0x90>)
 8001126:	f7ff ff61 	bl	8000fec <lcd_send_string>
			break;
 800112a:	e00b      	b.n	8001144 <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <lcd_send_own_char+0x94>)
 800112e:	f7ff ff5d 	bl	8000fec <lcd_send_string>
			break;
 8001132:	e007      	b.n	8001144 <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <lcd_send_own_char+0x98>)
 8001136:	f7ff ff59 	bl	8000fec <lcd_send_string>
			break;
 800113a:	e003      	b.n	8001144 <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <lcd_send_own_char+0x9c>)
 800113e:	f7ff ff55 	bl	8000fec <lcd_send_string>
			break;
 8001142:	bf00      	nop
	}
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08005de4 	.word	0x08005de4
 8001150:	08005de8 	.word	0x08005de8
 8001154:	08005dec 	.word	0x08005dec
 8001158:	08005df0 	.word	0x08005df0
 800115c:	08005df4 	.word	0x08005df4
 8001160:	08005df8 	.word	0x08005df8
 8001164:	08005dfc 	.word	0x08005dfc
 8001168:	08005e00 	.word	0x08005e00

0800116c <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 8001176:	210c      	movs	r1, #12
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fe53 	bl	8000e24 <lcd_set_cursor>

	switch(day_number) {
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	3b01      	subs	r3, #1
 8001182:	2b06      	cmp	r3, #6
 8001184:	d82c      	bhi.n	80011e0 <lcd_show_week_day_name+0x74>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <lcd_show_week_day_name+0x20>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011a9 	.word	0x080011a9
 8001190:	080011b1 	.word	0x080011b1
 8001194:	080011b9 	.word	0x080011b9
 8001198:	080011c1 	.word	0x080011c1
 800119c:	080011c9 	.word	0x080011c9
 80011a0:	080011d1 	.word	0x080011d1
 80011a4:	080011d9 	.word	0x080011d9

		case 1:
			lcd_send_string("pon.");
 80011a8:	480f      	ldr	r0, [pc, #60]	; (80011e8 <lcd_show_week_day_name+0x7c>)
 80011aa:	f7ff ff1f 	bl	8000fec <lcd_send_string>
			break;
 80011ae:	e017      	b.n	80011e0 <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <lcd_show_week_day_name+0x80>)
 80011b2:	f7ff ff1b 	bl	8000fec <lcd_send_string>
			break;
 80011b6:	e013      	b.n	80011e0 <lcd_show_week_day_name+0x74>

		case 3:
			//lcd_send_own_char(6);
			lcd_send_string("sr.");
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <lcd_show_week_day_name+0x84>)
 80011ba:	f7ff ff17 	bl	8000fec <lcd_send_string>
			break;
 80011be:	e00f      	b.n	80011e0 <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <lcd_show_week_day_name+0x88>)
 80011c2:	f7ff ff13 	bl	8000fec <lcd_send_string>
			break;
 80011c6:	e00b      	b.n	80011e0 <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <lcd_show_week_day_name+0x8c>)
 80011ca:	f7ff ff0f 	bl	8000fec <lcd_send_string>
			break;
 80011ce:	e007      	b.n	80011e0 <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <lcd_show_week_day_name+0x90>)
 80011d2:	f7ff ff0b 	bl	8000fec <lcd_send_string>
			break;
 80011d6:	e003      	b.n	80011e0 <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <lcd_show_week_day_name+0x94>)
 80011da:	f7ff ff07 	bl	8000fec <lcd_send_string>
			break;
 80011de:	bf00      	nop
	}
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08005e04 	.word	0x08005e04
 80011ec:	08005e0c 	.word	0x08005e0c
 80011f0:	08005e10 	.word	0x08005e10
 80011f4:	08005e14 	.word	0x08005e14
 80011f8:	08005e1c 	.word	0x08005e1c
 80011fc:	08005e20 	.word	0x08005e20
 8001200:	08005e28 	.word	0x08005e28

08001204 <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 800120e:	210b      	movs	r1, #11
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fe07 	bl	8000e24 <lcd_set_cursor>
	lcd_send_own_char(6);
 8001216:	2006      	movs	r0, #6
 8001218:	f7ff ff58 	bl	80010cc <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <lcd_show_battery_level+0x40>)
 8001224:	4618      	mov	r0, r3
 8001226:	f004 f9a5 	bl	8005574 <siprintf>

	lcd_send_string(battery_level);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fedc 	bl	8000fec <lcd_send_string>
	lcd_send_string("%");
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <lcd_show_battery_level+0x44>)
 8001236:	f7ff fed9 	bl	8000fec <lcd_send_string>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08005e30 	.word	0x08005e30
 8001248:	08005e34 	.word	0x08005e34

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b093      	sub	sp, #76	; 0x4c
 8001250:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f000 fcdf 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f94b 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f7ff fc0d 	bl	8000a78 <MX_GPIO_Init>
  MX_I2C1_Init();
 800125e:	f7ff fc77 	bl	8000b50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001262:	f7ff fca3 	bl	8000bac <MX_I2C2_Init>
  MX_RTC_Init();
 8001266:	f000 f9ed 	bl	8001644 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800126a:	f000 fc2f 	bl	8001acc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	4890      	ldr	r0, [pc, #576]	; (80014b8 <main+0x26c>)
 8001276:	f001 f817 	bl	80022a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	488e      	ldr	r0, [pc, #568]	; (80014b8 <main+0x26c>)
 8001280:	f001 f812 	bl	80022a8 <HAL_GPIO_WritePin>

  /****************** LCD BEGIN ******************/
  lcd_init();
 8001284:	f7ff fd4e 	bl	8000d24 <lcd_init>
  lcd_back_light_on();
 8001288:	f7ff fdc0 	bl	8000e0c <lcd_back_light_on>
  /****************** LCD END ******************/

  rtc_set_time();	// Wpisanie do rejestru RTC, czasu i daty pobranych z DS3231, aby czas w RTC był aktualny
 800128c:	f7ff f980 	bl	8000590 <rtc_set_time>

  /****************** UART BEGIN ******************/
  // Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
  // Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback HAL_UART_RxCpltCallback.
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	498a      	ldr	r1, [pc, #552]	; (80014bc <main+0x270>)
 8001294:	488a      	ldr	r0, [pc, #552]	; (80014c0 <main+0x274>)
 8001296:	f003 fb33 	bl	8004900 <HAL_UART_Receive_IT>

  // wystąpienie przerwania po ukończeniu odbioru informacji (RXNE - Register Not Empty)
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  // wystąpienie przerwania po ukończeniu transmisji danych (TC - Transmition Complete)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <main+0x274>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4b87      	ldr	r3, [pc, #540]	; (80014c0 <main+0x274>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012a8:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	lcd_display_refresh();
 80012aa:	f7ff fd5f 	bl	8000d6c <lcd_display_refresh>

	// wykonaj jeśli użytkownik ustawił nową godzinę
	if(time_set_flag) {
 80012ae:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <main+0x278>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d051      	beq.n	800135a <main+0x10e>

		uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
		char new_time_details_msg[12];

		new_sec = time.seconds;
 80012b6:	4b84      	ldr	r3, [pc, #528]	; (80014c8 <main+0x27c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		new_min = global_buffer[2];
 80012be:	4b83      	ldr	r3, [pc, #524]	; (80014cc <main+0x280>)
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		new_hour = global_buffer[1];
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <main+0x280>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		new_dow = time.dayofweek;
 80012ce:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <main+0x27c>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		new_dom = time.dayofmonth;
 80012d6:	4b7c      	ldr	r3, [pc, #496]	; (80014c8 <main+0x27c>)
 80012d8:	791b      	ldrb	r3, [r3, #4]
 80012da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		new_month = time.month;
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <main+0x27c>)
 80012e0:	795b      	ldrb	r3, [r3, #5]
 80012e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		new_year = time.year;
 80012e6:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <main+0x27c>)
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 80012ee:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 80012f2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80012f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80012fa:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80012fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4623      	mov	r3, r4
 8001312:	f000 fb3b 	bl	800198c <set_Time>

		lcd_clear();
 8001316:	f7ff fd6f 	bl	8000df8 <lcd_clear>
		sprintf(new_time_details_msg, "%02d:%02d:%02d", new_hour, new_min, new_sec);
 800131a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800131e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001326:	f107 0018 	add.w	r0, r7, #24
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	460b      	mov	r3, r1
 800132e:	4968      	ldr	r1, [pc, #416]	; (80014d0 <main+0x284>)
 8001330:	f004 f920 	bl	8005574 <siprintf>
		lcd_send_string("Ustawiony czas:");
 8001334:	4867      	ldr	r0, [pc, #412]	; (80014d4 <main+0x288>)
 8001336:	f7ff fe59 	bl	8000fec <lcd_send_string>
		lcd_second_line();
 800133a:	f7ff fda8 	bl	8000e8e <lcd_second_line>
		lcd_send_string(new_time_details_msg);
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe52 	bl	8000fec <lcd_send_string>
		HAL_Delay(3000);
 8001348:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800134c:	f000 fcd4 	bl	8001cf8 <HAL_Delay>
		lcd_clear();
 8001350:	f7ff fd52 	bl	8000df8 <lcd_clear>

		time_set_flag = 0;
 8001354:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <main+0x278>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
	}

	// wykonaj jeśli użytkownik ustawił nową datę
	if(date_set_flag) {
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <main+0x28c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d051      	beq.n	8001406 <main+0x1ba>

		uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
		char new_date_details_msg[12];

		new_sec = time.seconds;
 8001362:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <main+0x27c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		new_min = time.minutes;
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <main+0x27c>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		new_hour = time.hour;
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <main+0x27c>)
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		new_dow = global_buffer[1];
 800137a:	4b54      	ldr	r3, [pc, #336]	; (80014cc <main+0x280>)
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		new_dom = global_buffer[2];
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <main+0x280>)
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		new_month = global_buffer[3];
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <main+0x280>)
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		new_year = global_buffer[4];
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <main+0x280>)
 8001394:	791b      	ldrb	r3, [r3, #4]
 8001396:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 800139a:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 800139e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80013a2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80013a6:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 80013aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4623      	mov	r3, r4
 80013be:	f000 fae5 	bl	800198c <set_Time>

		lcd_clear();
 80013c2:	f7ff fd19 	bl	8000df8 <lcd_clear>
		sprintf(new_date_details_msg, "%02d-%02d-20%02d", new_dom, new_month, new_year);
 80013c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80013ca:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80013ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013d2:	f107 000c 	add.w	r0, r7, #12
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	460b      	mov	r3, r1
 80013da:	4940      	ldr	r1, [pc, #256]	; (80014dc <main+0x290>)
 80013dc:	f004 f8ca 	bl	8005574 <siprintf>
		lcd_send_string("Ustawiona data:");
 80013e0:	483f      	ldr	r0, [pc, #252]	; (80014e0 <main+0x294>)
 80013e2:	f7ff fe03 	bl	8000fec <lcd_send_string>
		lcd_second_line();
 80013e6:	f7ff fd52 	bl	8000e8e <lcd_second_line>
		lcd_send_string(new_date_details_msg);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fdfc 	bl	8000fec <lcd_send_string>
		HAL_Delay(3000);
 80013f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013f8:	f000 fc7e 	bl	8001cf8 <HAL_Delay>
		lcd_clear();
 80013fc:	f7ff fcfc 	bl	8000df8 <lcd_clear>

		date_set_flag = 0;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <main+0x28c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
	}

	// wykonaj jeśli użytkownik ustawił nowy czas alarmu
	if(alarm_set_flag) {
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <main+0x298>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d045      	beq.n	800149a <main+0x24e>

		uint8_t days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm;
		char alarm_details_msg[9];

		days_to_alarm = global_buffer[1];	// dni to drugi element, ponieważ pierwszy to literka a
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <main+0x280>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											// mówiąca o tym, że ustawiamy alarm.
		hours_to_alarm = global_buffer[2];
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <main+0x280>)
 8001418:	789b      	ldrb	r3, [r3, #2]
 800141a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		minutes_to_alarm = global_buffer[3];
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <main+0x280>)
 8001420:	78db      	ldrb	r3, [r3, #3]
 8001422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		seconds_to_alarm = global_buffer[4];
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <main+0x280>)
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		rtc_set_alarm(days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm);
 800142e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001432:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001436:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800143a:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800143e:	f7ff f973 	bl	8000728 <rtc_set_alarm>

		lcd_clear();
 8001442:	f7ff fcd9 	bl	8000df8 <lcd_clear>

		sprintf(alarm_details_msg, "%02d:%02d:%02d", time.hour + hours_to_alarm, time.minutes + minutes_to_alarm, time.seconds + seconds_to_alarm);
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <main+0x27c>)
 8001448:	789b      	ldrb	r3, [r3, #2]
 800144a:	461a      	mov	r2, r3
 800144c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001450:	441a      	add	r2, r3
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <main+0x27c>)
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	4619      	mov	r1, r3
 8001458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800145c:	4419      	add	r1, r3
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <main+0x27c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001468:	4403      	add	r3, r0
 800146a:	4638      	mov	r0, r7
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	460b      	mov	r3, r1
 8001470:	4917      	ldr	r1, [pc, #92]	; (80014d0 <main+0x284>)
 8001472:	f004 f87f 	bl	8005574 <siprintf>
		lcd_send_string("Alarm na godz.:");
 8001476:	481c      	ldr	r0, [pc, #112]	; (80014e8 <main+0x29c>)
 8001478:	f7ff fdb8 	bl	8000fec <lcd_send_string>
		lcd_second_line();
 800147c:	f7ff fd07 	bl	8000e8e <lcd_second_line>
		lcd_send_string(alarm_details_msg);
 8001480:	463b      	mov	r3, r7
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fdb2 	bl	8000fec <lcd_send_string>
		HAL_Delay(3000);
 8001488:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800148c:	f000 fc34 	bl	8001cf8 <HAL_Delay>
		lcd_clear();
 8001490:	f7ff fcb2 	bl	8000df8 <lcd_clear>

		alarm_set_flag = 0;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <main+0x298>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
	}

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <main+0x2a0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f43f af03 	beq.w	80012aa <main+0x5e>

		while (alarm_flag) {
 80014a4:	e001      	b.n	80014aa <main+0x25e>
			to_do_on_alarm();
 80014a6:	f7ff fa8f 	bl	80009c8 <to_do_on_alarm>
		while (alarm_flag) {
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <main+0x2a0>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f9      	bne.n	80014a6 <main+0x25a>
		}

		to_do_on_alarm_off();
 80014b2:	f7ff faab 	bl	8000a0c <to_do_on_alarm_off>
	lcd_display_refresh();
 80014b6:	e6f8      	b.n	80012aa <main+0x5e>
 80014b8:	40020000 	.word	0x40020000
 80014bc:	20000130 	.word	0x20000130
 80014c0:	2000020c 	.word	0x2000020c
 80014c4:	20000123 	.word	0x20000123
 80014c8:	20000128 	.word	0x20000128
 80014cc:	2000011c 	.word	0x2000011c
 80014d0:	08005e38 	.word	0x08005e38
 80014d4:	08005e48 	.word	0x08005e48
 80014d8:	20000122 	.word	0x20000122
 80014dc:	08005e58 	.word	0x08005e58
 80014e0:	08005e6c 	.word	0x08005e6c
 80014e4:	2000012f 	.word	0x2000012f
 80014e8:	08005e7c 	.word	0x08005e7c
 80014ec:	20000124 	.word	0x20000124

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b098      	sub	sp, #96	; 0x60
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 f830 	bl	8005564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <SystemClock_Config+0x100>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <SystemClock_Config+0x100>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <SystemClock_Config+0x100>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <SystemClock_Config+0x104>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800154c:	4a29      	ldr	r2, [pc, #164]	; (80015f4 <SystemClock_Config+0x104>)
 800154e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <SystemClock_Config+0x104>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001560:	230a      	movs	r3, #10
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001564:	2301      	movs	r3, #1
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001568:	2310      	movs	r3, #16
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001570:	2302      	movs	r3, #2
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001574:	2300      	movs	r3, #0
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fff1 	bl	8003574 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001598:	f000 f84c 	bl	8001634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80015a4:	23a0      	movs	r3, #160	; 0xa0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fa4b 	bl	8003a54 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80015c4:	f000 f836 	bl	8001634 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fc08 	bl	8003dec <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015e2:	f000 f827 	bl	8001634 <Error_Handler>
  }
}
 80015e6:	bf00      	nop
 80015e8:	3760      	adds	r7, #96	; 0x60
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000

080015f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart1, a nie coś innego
	if(huart->Instance==USART2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_UART_RxCpltCallback+0x30>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10a      	bne.n	8001620 <HAL_UART_RxCpltCallback+0x28>
	{
		activate_time();
 800160a:	f7ff f907 	bl	800081c <activate_time>
		activate_date();
 800160e:	f7ff f947 	bl	80008a0 <activate_date>
		activate_alarm();
 8001612:	f7ff f987 	bl	8000924 <activate_alarm>

		// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	4904      	ldr	r1, [pc, #16]	; (800162c <HAL_UART_RxCpltCallback+0x34>)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_UART_RxCpltCallback+0x38>)
 800161c:	f003 f970 	bl	8004900 <HAL_UART_Receive_IT>
	}

}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40004400 	.word	0x40004400
 800162c:	20000130 	.word	0x20000130
 8001630:	2000020c 	.word	0x2000020c

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b090      	sub	sp, #64	; 0x40
 8001648:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800164a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	2228      	movs	r2, #40	; 0x28
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f003 ff7d 	bl	8005564 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <MX_RTC_Init+0x110>)
 800166c:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <MX_RTC_Init+0x114>)
 800166e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <MX_RTC_Init+0x110>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <MX_RTC_Init+0x110>)
 8001678:	227f      	movs	r2, #127	; 0x7f
 800167a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <MX_RTC_Init+0x110>)
 800167e:	22ff      	movs	r2, #255	; 0xff
 8001680:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <MX_RTC_Init+0x110>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <MX_RTC_Init+0x110>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <MX_RTC_Init+0x110>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001694:	482f      	ldr	r0, [pc, #188]	; (8001754 <MX_RTC_Init+0x110>)
 8001696:	f002 fc97 	bl	8003fc8 <HAL_RTC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80016a0:	f7ff ffc8 	bl	8001634 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80016a4:	2318      	movs	r3, #24
 80016a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x33;
 80016aa:	2333      	movs	r3, #51	; 0x33
 80016ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c2:	2201      	movs	r2, #1
 80016c4:	4619      	mov	r1, r3
 80016c6:	4823      	ldr	r0, [pc, #140]	; (8001754 <MX_RTC_Init+0x110>)
 80016c8:	f002 fd0f 	bl	80040ea <HAL_RTC_SetTime>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80016d2:	f7ff ffaf 	bl	8001634 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80016d6:	2307      	movs	r3, #7
 80016d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 80016dc:	2310      	movs	r3, #16
 80016de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x25;
 80016e2:	2325      	movs	r3, #37	; 0x25
 80016e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 80016e8:	2320      	movs	r3, #32
 80016ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f2:	2201      	movs	r2, #1
 80016f4:	4619      	mov	r1, r3
 80016f6:	4817      	ldr	r0, [pc, #92]	; (8001754 <MX_RTC_Init+0x110>)
 80016f8:	f002 fdb4 	bl	8004264 <HAL_RTC_SetDate>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001702:	f7ff ff97 	bl	8001634 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8001706:	2319      	movs	r3, #25
 8001708:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 800170a:	2323      	movs	r3, #35	; 0x23
 800170c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800170e:	2310      	movs	r3, #16
 8001710:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 800172a:	2312      	movs	r3, #18
 800172c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	2201      	movs	r2, #1
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_RTC_Init+0x110>)
 800173e:	f002 fe39 	bl	80043b4 <HAL_RTC_SetAlarm_IT>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001748:	f7ff ff74 	bl	8001634 <Error_Handler>
  }

}
 800174c:	bf00      	nop
 800174e:	3740      	adds	r7, #64	; 0x40
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001ec 	.word	0x200001ec
 8001758:	40002800 	.word	0x40002800

0800175c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_RTC_MspInit+0x30>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10a      	bne.n	8001784 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_RTC_MspInit+0x34>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2029      	movs	r0, #41	; 0x29
 800177a:	f000 fbba 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800177e:	2029      	movs	r0, #41	; 0x29
 8001780:	f000 fbd3 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40002800 	.word	0x40002800
 8001790:	42470e3c 	.word	0x42470e3c

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 fa3e 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <USART2_IRQHandler+0x10>)
 8001846:	f003 f8b1 	bl	80049ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000020c 	.word	0x2000020c

08001854 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001858:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800185c:	f000 fd3e 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <RTC_Alarm_IRQHandler+0x10>)
 800186a:	f002 fedb 	bl	8004624 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001ec 	.word	0x200001ec

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f003 fe32 	bl	8005510 <__errno>
 80018ac:	4602      	mov	r2, r0
 80018ae:	230c      	movs	r3, #12
 80018b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20018000 	.word	0x20018000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	2000010c 	.word	0x2000010c
 80018e0:	20000258 	.word	0x20000258

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <SystemInit+0x28>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <SystemInit+0x28>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <SystemInit+0x28>)
 80018fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <decToBcd>:
#define DS3231_ADDRESS 0xD0

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <decToBcd+0x48>)
 800191c:	fb82 1203 	smull	r1, r2, r2, r3
 8001920:	1092      	asrs	r2, r2, #2
 8001922:	17db      	asrs	r3, r3, #31
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	b2d8      	uxtb	r0, r3
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <decToBcd+0x48>)
 8001930:	fb83 1302 	smull	r1, r3, r3, r2
 8001934:	1099      	asrs	r1, r3, #2
 8001936:	17d3      	asrs	r3, r2, #31
 8001938:	1ac9      	subs	r1, r1, r3
 800193a:	460b      	mov	r3, r1
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	1ad1      	subs	r1, r2, r3
 8001944:	b2cb      	uxtb	r3, r1
 8001946:	4403      	add	r3, r0
 8001948:	b2db      	uxtb	r3, r3
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	66666667 	.word	0x66666667

0800195c <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	461a      	mov	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	4413      	add	r3, r2
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <set_Time>:
TIME time;

// Metoda odpowiedzialna za ustawienie czasu i daty
// set_Time(sec, min, hour, dow, dom, month, year)
void set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af04      	add	r7, sp, #16
 8001992:	4604      	mov	r4, r0
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	4603      	mov	r3, r0
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	460b      	mov	r3, r1
 80019a4:	717b      	strb	r3, [r7, #5]
 80019a6:	4613      	mov	r3, r2
 80019a8:	713b      	strb	r3, [r7, #4]
	uint8_t time_to_write[7];

	time_to_write[0] = decToBcd(sec);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ffaf 	bl	8001910 <decToBcd>
 80019b2:	4603      	mov	r3, r0
 80019b4:	723b      	strb	r3, [r7, #8]
	time_to_write[1] = decToBcd(min);
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ffa9 	bl	8001910 <decToBcd>
 80019be:	4603      	mov	r3, r0
 80019c0:	727b      	strb	r3, [r7, #9]
	time_to_write[2] = decToBcd(hour);
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffa3 	bl	8001910 <decToBcd>
 80019ca:	4603      	mov	r3, r0
 80019cc:	72bb      	strb	r3, [r7, #10]
	time_to_write[3] = decToBcd(dow);
 80019ce:	793b      	ldrb	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff9d 	bl	8001910 <decToBcd>
 80019d6:	4603      	mov	r3, r0
 80019d8:	72fb      	strb	r3, [r7, #11]
	time_to_write[4] = decToBcd(dom);
 80019da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff96 	bl	8001910 <decToBcd>
 80019e4:	4603      	mov	r3, r0
 80019e6:	733b      	strb	r3, [r7, #12]
	time_to_write[5] = decToBcd(month);
 80019e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff8f 	bl	8001910 <decToBcd>
 80019f2:	4603      	mov	r3, r0
 80019f4:	737b      	strb	r3, [r7, #13]
	time_to_write[6] = decToBcd(year);
 80019f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff88 	bl	8001910 <decToBcd>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
 8001a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	2200      	movs	r2, #0
 8001a18:	21d0      	movs	r1, #208	; 0xd0
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <set_Time+0x9c>)
 8001a1c:	f000 feac 	bl	8002778 <HAL_I2C_Mem_Write>
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	20000188 	.word	0x20000188

08001a2c <get_Time>:

void get_Time (void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af04      	add	r7, sp, #16
	uint8_t time_to_red[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_red, 7, 1000);
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2307      	movs	r3, #7
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	2200      	movs	r2, #0
 8001a44:	21d0      	movs	r1, #208	; 0xd0
 8001a46:	481f      	ldr	r0, [pc, #124]	; (8001ac4 <get_Time+0x98>)
 8001a48:	f000 ff90 	bl	800296c <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_red[0]);
 8001a4c:	783b      	ldrb	r3, [r7, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff84 	bl	800195c <bcdToDec>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <get_Time+0x9c>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_red[1]);
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff7c 	bl	800195c <bcdToDec>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <get_Time+0x9c>)
 8001a6a:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_red[2]);
 8001a6c:	78bb      	ldrb	r3, [r7, #2]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff74 	bl	800195c <bcdToDec>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <get_Time+0x9c>)
 8001a7a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_red[3]);
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff6c 	bl	800195c <bcdToDec>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <get_Time+0x9c>)
 8001a8a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_red[4]);
 8001a8c:	793b      	ldrb	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff64 	bl	800195c <bcdToDec>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <get_Time+0x9c>)
 8001a9a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_red[5]);
 8001a9c:	797b      	ldrb	r3, [r7, #5]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff5c 	bl	800195c <bcdToDec>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <get_Time+0x9c>)
 8001aaa:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_red[6]);
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff54 	bl	800195c <bcdToDec>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <get_Time+0x9c>)
 8001aba:	719a      	strb	r2, [r3, #6]
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000188 	.word	0x20000188
 8001ac8:	20000128 	.word	0x20000128

08001acc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_USART2_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001b04:	f002 fe6a 	bl	80047dc <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f7ff fd91 	bl	8001634 <Error_Handler>
  }

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000020c 	.word	0x2000020c
 8001b1c:	40004400 	.word	0x40004400

08001b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_UART_MspInit+0x94>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d133      	bne.n	8001baa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_UART_MspInit+0x9c>)
 8001b96:	f000 fa05 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2026      	movs	r0, #38	; 0x26
 8001ba0:	f000 f9a7 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba4:	2026      	movs	r0, #38	; 0x26
 8001ba6:	f000 f9c0 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bc6:	e003      	b.n	8001bd0 <LoopCopyDataInit>

08001bc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bce:	3104      	adds	r1, #4

08001bd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bd8:	d3f6      	bcc.n	8001bc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bdc:	e002      	b.n	8001be4 <LoopFillZerobss>

08001bde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001be0:	f842 3b04 	str.w	r3, [r2], #4

08001be4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001be6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001be8:	d3f9      	bcc.n	8001bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bea:	f7ff fe7b 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f003 fc95 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7ff fb2b 	bl	800124c <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001bfc:	08005ee8 	.word	0x08005ee8
  ldr  r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c04:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001c08:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001c0c:	20000254 	.word	0x20000254

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f94d 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fda4 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f965 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f92d 	bl	8001ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000007c 	.word	0x2000007c
 8001cb0:	20000084 	.word	0x20000084
 8001cb4:	20000080 	.word	0x20000080

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000084 	.word	0x20000084
 8001cdc:	2000024c 	.word	0x2000024c

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000024c 	.word	0x2000024c

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_Delay+0x40>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000084 	.word	0x20000084

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff8e 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff29 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff3e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff8e 	bl	8001e30 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff31 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa2 	bl	8001e98 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e00c      	b.n	8001f96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2205      	movs	r2, #5
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e159      	b.n	8002274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8148 	bne.w	800226e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00b      	beq.n	8001ffe <HAL_GPIO_Init+0x5a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff2:	2b11      	cmp	r3, #17
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d130      	bne.n	8002060 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0xfc>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b12      	cmp	r3, #18
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a2 	beq.w	800226e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b56      	ldr	r3, [pc, #344]	; (8002288 <HAL_GPIO_Init+0x2e4>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a55      	ldr	r2, [pc, #340]	; (8002288 <HAL_GPIO_Init+0x2e4>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_GPIO_Init+0x2e4>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a51      	ldr	r2, [pc, #324]	; (800228c <HAL_GPIO_Init+0x2e8>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a48      	ldr	r2, [pc, #288]	; (8002290 <HAL_GPIO_Init+0x2ec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x202>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a47      	ldr	r2, [pc, #284]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x1fe>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_GPIO_Init+0x2f4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x1fa>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a45      	ldr	r2, [pc, #276]	; (800229c <HAL_GPIO_Init+0x2f8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x1f6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <HAL_GPIO_Init+0x2fc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x1f2>
 8002192:	2304      	movs	r3, #4
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 8002196:	2307      	movs	r3, #7
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b8:	4934      	ldr	r1, [pc, #208]	; (800228c <HAL_GPIO_Init+0x2e8>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_GPIO_Init+0x300>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ea:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <HAL_GPIO_Init+0x300>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_GPIO_Init+0x300>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_GPIO_Init+0x300>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <HAL_GPIO_Init+0x300>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f aea2 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	3724      	adds	r7, #36	; 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40023800 	.word	0x40023800
 800228c:	40013800 	.word	0x40013800
 8002290:	40020000 	.word	0x40020000
 8002294:	40020400 	.word	0x40020400
 8002298:	40020800 	.word	0x40020800
 800229c:	40020c00 	.word	0x40020c00
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40013c00 	.word	0x40013c00

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fba2 	bl	8000a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e11f      	b.n	800255e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fc68 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002370:	f001 fd14 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a7b      	ldr	r2, [pc, #492]	; (8002568 <HAL_I2C_Init+0x25c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d807      	bhi.n	8002390 <HAL_I2C_Init+0x84>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_I2C_Init+0x260>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e006      	b.n	800239e <HAL_I2C_Init+0x92>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_I2C_Init+0x264>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0db      	b.n	800255e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a72      	ldr	r2, [pc, #456]	; (8002574 <HAL_I2C_Init+0x268>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_I2C_Init+0x25c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d802      	bhi.n	80023e0 <HAL_I2C_Init+0xd4>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	e009      	b.n	80023f4 <HAL_I2C_Init+0xe8>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a63      	ldr	r2, [pc, #396]	; (8002578 <HAL_I2C_Init+0x26c>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	3301      	adds	r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4956      	ldr	r1, [pc, #344]	; (8002568 <HAL_I2C_Init+0x25c>)
 8002410:	428b      	cmp	r3, r1
 8002412:	d80d      	bhi.n	8002430 <HAL_I2C_Init+0x124>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e59      	subs	r1, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	bf38      	it	cc
 800242c:	2304      	movcc	r3, #4
 800242e:	e04f      	b.n	80024d0 <HAL_I2C_Init+0x1c4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_I2C_Init+0x150>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e012      	b.n	8002482 <HAL_I2C_Init+0x176>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x17e>
 8002486:	2301      	movs	r3, #1
 8002488:	e022      	b.n	80024d0 <HAL_I2C_Init+0x1c4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10e      	bne.n	80024b0 <HAL_I2C_Init+0x1a4>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e58      	subs	r0, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	440b      	add	r3, r1
 80024a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Init+0x1c4>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6911      	ldr	r1, [r2, #16]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	000186a0 	.word	0x000186a0
 800256c:	001e847f 	.word	0x001e847f
 8002570:	003d08ff 	.word	0x003d08ff
 8002574:	431bde83 	.word	0x431bde83
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	4613      	mov	r3, r2
 800258e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fba6 	bl	8001ce0 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80e0 	bne.w	8002764 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2319      	movs	r3, #25
 80025aa:	2201      	movs	r2, #1
 80025ac:	4970      	ldr	r1, [pc, #448]	; (8002770 <HAL_I2C_Master_Transmit+0x1f4>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fe02 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0d3      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x50>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0cc      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d007      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	; 0x21
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2210      	movs	r2, #16
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a50      	ldr	r2, [pc, #320]	; (8002774 <HAL_I2C_Master_Transmit+0x1f8>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fbbc 	bl	8002db8 <I2C_MasterRequestWrite>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e08d      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002660:	e066      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fe7c 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b04      	cmp	r3, #4
 8002678:	d107      	bne.n	800268a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x188>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fe6c 	bl	80033e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e01a      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d194      	bne.n	8002662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	00100002 	.word	0x00100002
 8002774:	ffff0000 	.word	0xffff0000

08002778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff faa5 	bl	8001ce0 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 80d9 	bne.w	8002958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2319      	movs	r3, #25
 80027ac:	2201      	movs	r2, #1
 80027ae:	496d      	ldr	r1, [pc, #436]	; (8002964 <HAL_I2C_Mem_Write+0x1ec>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fd01 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	e0cc      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Mem_Write+0x56>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0c5      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d007      	beq.n	80027f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2221      	movs	r2, #33	; 0x21
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a4d      	ldr	r2, [pc, #308]	; (8002968 <HAL_I2C_Mem_Write+0x1f0>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4603      	mov	r3, r0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb38 	bl	8002ebc <I2C_RequestMemoryWrite>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d052      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e081      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fd82 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x180>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1aa      	bne.n	8002856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fd6e 	bl	80033e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e016      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000

0800296c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	817b      	strh	r3, [r7, #10]
 800297e:	460b      	mov	r3, r1
 8002980:	813b      	strh	r3, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002986:	f7ff f9ab 	bl	8001ce0 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	f040 8208 	bne.w	8002daa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2319      	movs	r3, #25
 80029a0:	2201      	movs	r2, #1
 80029a2:	497b      	ldr	r1, [pc, #492]	; (8002b90 <HAL_I2C_Mem_Read+0x224>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fc07 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
 80029b2:	e1fb      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Mem_Read+0x56>
 80029be:	2302      	movs	r3, #2
 80029c0:	e1f4      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d007      	beq.n	80029e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2222      	movs	r2, #34	; 0x22
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a5b      	ldr	r2, [pc, #364]	; (8002b94 <HAL_I2C_Mem_Read+0x228>)
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a2a:	88f8      	ldrh	r0, [r7, #6]
 8002a2c:	893a      	ldrh	r2, [r7, #8]
 8002a2e:	8979      	ldrh	r1, [r7, #10]
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4603      	mov	r3, r0
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fad4 	bl	8002fe8 <I2C_RequestMemoryRead>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1b0      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e184      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d11b      	bne.n	8002aba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e164      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d11b      	bne.n	8002afa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	e144      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b10:	e138      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	f200 80f1 	bhi.w	8002cfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d123      	bne.n	8002b6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fc9d 	bl	8003468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e139      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6a:	e10b      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d14e      	bne.n	8002c12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <HAL_I2C_Mem_Read+0x22c>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fb1a 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e10e      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
 8002b8e:	bf00      	nop
 8002b90:	00100002 	.word	0x00100002
 8002b94:	ffff0000 	.word	0xffff0000
 8002b98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c10:	e0b8      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4966      	ldr	r1, [pc, #408]	; (8002db4 <HAL_I2C_Mem_Read+0x448>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 facb 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0bf      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	2200      	movs	r2, #0
 8002c76:	494f      	ldr	r1, [pc, #316]	; (8002db4 <HAL_I2C_Mem_Read+0x448>)
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fa9d 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e091      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cfc:	e042      	b.n	8002d84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fbb0 	bl	8003468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e04c      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d118      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f aec2 	bne.w	8002b12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3728      	adds	r7, #40	; 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	00010004 	.word	0x00010004

08002db8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d006      	beq.n	8002de2 <I2C_MasterRequestWrite+0x2a>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d003      	beq.n	8002de2 <I2C_MasterRequestWrite+0x2a>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de0:	d108      	bne.n	8002df4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e00b      	b.n	8002e0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	2b12      	cmp	r3, #18
 8002dfa:	d107      	bne.n	8002e0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f9cd 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d103      	bne.n	8002e3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e035      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e48:	d108      	bne.n	8002e5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e58:	611a      	str	r2, [r3, #16]
 8002e5a:	e01b      	b.n	8002e94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e5c:	897b      	ldrh	r3, [r7, #10]
 8002e5e:	11db      	asrs	r3, r3, #7
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 0306 	and.w	r3, r3, #6
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f063 030f 	orn	r3, r3, #15
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <I2C_MasterRequestWrite+0xfc>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f9f3 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e010      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <I2C_MasterRequestWrite+0x100>)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f9e3 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00010008 	.word	0x00010008
 8002eb8:	00010002 	.word	0x00010002

08002ebc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f960 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0c:	d103      	bne.n	8002f16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e05f      	b.n	8002fda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	492d      	ldr	r1, [pc, #180]	; (8002fe4 <I2C_RequestMemoryWrite+0x128>)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f998 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e04c      	b.n	8002fda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fa02 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e02b      	b.n	8002fda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f88:	893b      	ldrh	r3, [r7, #8]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	611a      	str	r2, [r3, #16]
 8002f92:	e021      	b.n	8002fd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f94:	893b      	ldrh	r3, [r7, #8]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	6a39      	ldr	r1, [r7, #32]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f9dc 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d107      	bne.n	8002fca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e005      	b.n	8002fda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fce:	893b      	ldrh	r3, [r7, #8]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	00010002 	.word	0x00010002

08002fe8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	817b      	strh	r3, [r7, #10]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	813b      	strh	r3, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003010:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003020:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	2200      	movs	r2, #0
 800302a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8c2 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d103      	bne.n	8003052 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0aa      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003056:	897b      	ldrh	r3, [r7, #10]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003064:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	4952      	ldr	r1, [pc, #328]	; (80031b4 <I2C_RequestMemoryRead+0x1cc>)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f8fa 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e097      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f964 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e076      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c4:	893b      	ldrh	r3, [r7, #8]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	e021      	b.n	8003114 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	6a39      	ldr	r1, [r7, #32]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f93e 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d107      	bne.n	8003106 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e050      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800310a:	893b      	ldrh	r3, [r7, #8]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f923 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00d      	beq.n	8003140 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b04      	cmp	r3, #4
 800312a:	d107      	bne.n	800313c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e035      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2200      	movs	r2, #0
 8003158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f82b 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00d      	beq.n	8003184 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003176:	d103      	bne.n	8003180 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e013      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003184:	897b      	ldrh	r3, [r7, #10]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	6a3a      	ldr	r2, [r7, #32]
 8003198:	4906      	ldr	r1, [pc, #24]	; (80031b4 <I2C_RequestMemoryRead+0x1cc>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f863 	bl	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	00010002 	.word	0x00010002

080031b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	e025      	b.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d021      	beq.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fd85 	bl	8001ce0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e023      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10d      	bne.n	800323c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	e00c      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	429a      	cmp	r2, r3
 800325a:	d0b6      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003274:	e051      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d123      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800329e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e046      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d021      	beq.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fe fd03 	bl	8001ce0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e020      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10c      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e00b      	b.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	43da      	mvns	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d18d      	bne.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003370:	e02d      	b.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f8ce 	bl	8003514 <I2C_IsAcknowledgeFailed>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02d      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d021      	beq.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe fca9 	bl	8001ce0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d116      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e007      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d1ca      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f2:	e02d      	b.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f88d 	bl	8003514 <I2C_IsAcknowledgeFailed>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e02d      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d021      	beq.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340c:	f7fe fc68 	bl	8001ce0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d1ca      	bne.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003474:	e042      	b.n	80034fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d119      	bne.n	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0210 	mvn.w	r2, #16
 800348c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e029      	b.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fc12 	bl	8001ce0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d1b5      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d11b      	bne.n	8003564 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003534:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e25b      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d075      	beq.n	800367e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003592:	4ba3      	ldr	r3, [pc, #652]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b04      	cmp	r3, #4
 800359c:	d00c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4ba0      	ldr	r3, [pc, #640]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d112      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b9d      	ldr	r3, [pc, #628]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	4b99      	ldr	r3, [pc, #612]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d05b      	beq.n	800367c <HAL_RCC_OscConfig+0x108>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d157      	bne.n	800367c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e236      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_OscConfig+0x74>
 80035da:	4b91      	ldr	r3, [pc, #580]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a90      	ldr	r2, [pc, #576]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e01d      	b.n	8003624 <HAL_RCC_OscConfig+0xb0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x98>
 80035f2:	4b8b      	ldr	r3, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a8a      	ldr	r2, [pc, #552]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b88      	ldr	r3, [pc, #544]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a87      	ldr	r2, [pc, #540]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0xb0>
 800360c:	4b84      	ldr	r3, [pc, #528]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a80      	ldr	r2, [pc, #512]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fb58 	bl	8001ce0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fb54 	bl	8001ce0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1fb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0xc0>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fb44 	bl	8001ce0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fb40 	bl	8001ce0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1e7      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0xe8>
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b62      	ldr	r3, [pc, #392]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b5c      	ldr	r3, [pc, #368]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x152>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1bb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4952      	ldr	r1, [pc, #328]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e03a      	b.n	8003752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCC_OscConfig+0x2b0>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe faf9 	bl	8001ce0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe faf5 	bl	8001ce0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e19c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4940      	ldr	r1, [pc, #256]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
 8003724:	e015      	b.n	8003752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003726:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_OscConfig+0x2b0>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fad8 	bl	8001ce0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003734:	f7fe fad4 	bl	8001ce0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e17b      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d030      	beq.n	80037c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x2b4>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe fab8 	bl	8001ce0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003774:	f7fe fab4 	bl	8001ce0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e15b      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x200>
 8003792:	e015      	b.n	80037c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x2b4>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fe faa1 	bl	8001ce0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fe fa9d 	bl	8001ce0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e144      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a0 	beq.w	800390e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_OscConfig+0x2b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d121      	bne.n	800384e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_RCC_OscConfig+0x2b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <HAL_RCC_OscConfig+0x2b8>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fe fa63 	bl	8001ce0 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	e011      	b.n	8003842 <HAL_RCC_OscConfig+0x2ce>
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	42470000 	.word	0x42470000
 8003828:	42470e80 	.word	0x42470e80
 800382c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fe fa56 	bl	8001ce0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0fd      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003842:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <HAL_RCC_OscConfig+0x4d4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x2f0>
 8003856:	4b7d      	ldr	r3, [pc, #500]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a7c      	ldr	r2, [pc, #496]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x32a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x312>
 800386c:	4b77      	ldr	r3, [pc, #476]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a76      	ldr	r2, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	4b74      	ldr	r3, [pc, #464]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a73      	ldr	r2, [pc, #460]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x32a>
 8003886:	4b71      	ldr	r3, [pc, #452]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a70      	ldr	r2, [pc, #448]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	4b6e      	ldr	r3, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a6d      	ldr	r2, [pc, #436]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe fa1b 	bl	8001ce0 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe fa17 	bl	8001ce0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0bc      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x33a>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fe fa05 	bl	8001ce0 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe fa01 	bl	8001ce0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0a6      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8092 	beq.w	8003a3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d05c      	beq.n	80039de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d141      	bne.n	80039b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <HAL_RCC_OscConfig+0x4dc>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe f9d5 	bl	8001ce0 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe f9d1 	bl	8001ce0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e078      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394c:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	3b01      	subs	r3, #1
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	4933      	ldr	r1, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_RCC_OscConfig+0x4dc>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe f9aa 	bl	8001ce0 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe f9a6 	bl	8001ce0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e04d      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x41c>
 80039ae:	e045      	b.n	8003a3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x4dc>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fe f993 	bl	8001ce0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fe f98f 	bl	8001ce0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e036      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d0:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x44a>
 80039dc:	e02e      	b.n	8003a3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e029      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <HAL_RCC_OscConfig+0x4d8>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d11c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d115      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a12:	4013      	ands	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470060 	.word	0x42470060

08003a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0cc      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b68      	ldr	r3, [pc, #416]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d90c      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b8      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	494d      	ldr	r1, [pc, #308]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d044      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d119      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b3f      	ldr	r3, [pc, #252]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e067      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4934      	ldr	r1, [pc, #208]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fe f8cc 	bl	8001ce0 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe f8c8 	bl	8001ce0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d20c      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e032      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4916      	ldr	r1, [pc, #88]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490e      	ldr	r1, [pc, #56]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bda:	f000 f821 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8003bde:	4601      	mov	r1, r0
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	5cd3      	ldrb	r3, [r2, r3]
 8003bee:	fa21 f303 	lsr.w	r3, r1, r3
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f82c 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023c00 	.word	0x40023c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	08005e8c 	.word	0x08005e8c
 8003c18:	2000007c 	.word	0x2000007c
 8003c1c:	20000080 	.word	0x20000080

08003c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c36:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d007      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x32>
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d008      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x38>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 808d 	bne.w	8003d66 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c4e:	60bb      	str	r3, [r7, #8]
       break;
 8003c50:	e08c      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c54:	60bb      	str	r3, [r7, #8]
      break;
 8003c56:	e089      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b45      	ldr	r3, [pc, #276]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d023      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	ea03 0501 	and.w	r5, r3, r1
 8003c84:	ea04 0602 	and.w	r6, r4, r2
 8003c88:	4a3d      	ldr	r2, [pc, #244]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c8a:	fb02 f106 	mul.w	r1, r2, r6
 8003c8e:	2200      	movs	r2, #0
 8003c90:	fb02 f205 	mul.w	r2, r2, r5
 8003c94:	440a      	add	r2, r1
 8003c96:	493a      	ldr	r1, [pc, #232]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c98:	fba5 0101 	umull	r0, r1, r5, r1
 8003c9c:	1853      	adds	r3, r2, r1
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4623      	mov	r3, r4
 8003caa:	f7fc faf1 	bl	8000290 <__aeabi_uldivmod>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e049      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	f04f 0400 	mov.w	r4, #0
 8003cc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	ea03 0501 	and.w	r5, r3, r1
 8003ccc:	ea04 0602 	and.w	r6, r4, r2
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	0154      	lsls	r4, r2, #5
 8003cde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ce2:	014b      	lsls	r3, r1, #5
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	1b49      	subs	r1, r1, r5
 8003cea:	eb62 0206 	sbc.w	r2, r2, r6
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	0194      	lsls	r4, r2, #6
 8003cf8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cfc:	018b      	lsls	r3, r1, #6
 8003cfe:	1a5b      	subs	r3, r3, r1
 8003d00:	eb64 0402 	sbc.w	r4, r4, r2
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	00e2      	lsls	r2, r4, #3
 8003d0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d12:	00d9      	lsls	r1, r3, #3
 8003d14:	460b      	mov	r3, r1
 8003d16:	4614      	mov	r4, r2
 8003d18:	195b      	adds	r3, r3, r5
 8003d1a:	eb44 0406 	adc.w	r4, r4, r6
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	02a2      	lsls	r2, r4, #10
 8003d28:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d2c:	0299      	lsls	r1, r3, #10
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	4621      	mov	r1, r4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	f7fc faa6 	bl	8000290 <__aeabi_uldivmod>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	3301      	adds	r3, #1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	60bb      	str	r3, [r7, #8]
      break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d68:	60bb      	str	r3, [r7, #8]
      break;
 8003d6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400
 8003d80:	017d7840 	.word	0x017d7840

08003d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	2000007c 	.word	0x2000007c

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da4:	4601      	mov	r1, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	08005e9c 	.word	0x08005e9c

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc8:	f7ff ffdc 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	08005e9c 	.word	0x08005e9c

08003dec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d035      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1a:	f7fd ff61 	bl	8001ce0 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e22:	f7fd ff5d 	bl	8001ce0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0ba      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e34:	4b60      	ldr	r3, [pc, #384]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	019a      	lsls	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	071b      	lsls	r3, r3, #28
 8003e4c:	495a      	ldr	r1, [pc, #360]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e54:	4b57      	ldr	r3, [pc, #348]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd ff41 	bl	8001ce0 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e62:	f7fd ff3d 	bl	8001ce0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e09a      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e74:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8083 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b49      	ldr	r3, [pc, #292]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a48      	ldr	r2, [pc, #288]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a43      	ldr	r2, [pc, #268]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eb6:	f7fd ff13 	bl	8001ce0 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fd ff0f 	bl	8001ce0 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e06c      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003edc:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02f      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f04:	4b2e      	ldr	r3, [pc, #184]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f16:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d114      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fd fedd 	bl	8001ce0 <HAL_GetTick>
 8003f26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd fed9 	bl	8001ce0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e034      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ee      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d10d      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	4912      	ldr	r1, [pc, #72]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]
 8003f74:	e005      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f80:	6093      	str	r3, [r2, #8]
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	490a      	ldr	r1, [pc, #40]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7c1a      	ldrb	r2, [r3, #16]
 8003fa4:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fa6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	42470068 	.word	0x42470068
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	42470e40 	.word	0x42470e40
 8003fc4:	424711e0 	.word	0x424711e0

08003fc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e083      	b.n	80040e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7f5b      	ldrb	r3, [r3, #29]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fbb6 	bl	800175c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	22ca      	movs	r2, #202	; 0xca
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2253      	movs	r2, #83	; 0x53
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fb7a 	bl	8004700 <RTC_EnterInitMode>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e05e      	b.n	80040e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6919      	ldr	r1, [r3, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	041a      	lsls	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004082:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10e      	bne.n	80040b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fb0c 	bl	80046b0 <HAL_RTC_WaitForSynchro>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	22ff      	movs	r2, #255	; 0xff
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2204      	movs	r2, #4
 80040aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e018      	b.n	80040e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	22ff      	movs	r2, #255	; 0xff
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040ea:	b590      	push	{r4, r7, lr}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	7f1b      	ldrb	r3, [r3, #28]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_RTC_SetTime+0x1c>
 8004102:	2302      	movs	r3, #2
 8004104:	e0aa      	b.n	800425c <HAL_RTC_SetTime+0x172>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2202      	movs	r2, #2
 8004110:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d126      	bne.n	8004166 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fb11 	bl	8004758 <RTC_ByteToBcd2>
 8004136:	4603      	mov	r3, r0
 8004138:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb0a 	bl	8004758 <RTC_ByteToBcd2>
 8004144:	4603      	mov	r3, r0
 8004146:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004148:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	789b      	ldrb	r3, [r3, #2]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fb02 	bl	8004758 <RTC_ByteToBcd2>
 8004154:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004156:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	78db      	ldrb	r3, [r3, #3]
 800415e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e018      	b.n	8004198 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004186:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800418c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	78db      	ldrb	r3, [r3, #3]
 8004192:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	22ca      	movs	r2, #202	; 0xca
 800419e:	625a      	str	r2, [r3, #36]	; 0x24
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2253      	movs	r2, #83	; 0x53
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 faa9 	bl	8004700 <RTC_EnterInitMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00b      	beq.n	80041cc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	22ff      	movs	r2, #255	; 0xff
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2204      	movs	r2, #4
 80041c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e047      	b.n	800425c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041da:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6899      	ldr	r1, [r3, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004212:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d111      	bne.n	8004246 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa44 	bl	80046b0 <HAL_RTC_WaitForSynchro>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2204      	movs	r2, #4
 800423a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e00a      	b.n	800425c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	22ff      	movs	r2, #255	; 0xff
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800425a:	2300      	movs	r3, #0
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd90      	pop	{r4, r7, pc}

08004264 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	7f1b      	ldrb	r3, [r3, #28]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_RTC_SetDate+0x1c>
 800427c:	2302      	movs	r3, #2
 800427e:	e094      	b.n	80043aa <HAL_RTC_SetDate+0x146>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2202      	movs	r2, #2
 800428a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <HAL_RTC_SetDate+0x4c>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	330a      	adds	r3, #10
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d11c      	bne.n	80042f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	78db      	ldrb	r3, [r3, #3]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa4c 	bl	8004758 <RTC_ByteToBcd2>
 80042c0:	4603      	mov	r3, r0
 80042c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fa45 	bl	8004758 <RTC_ByteToBcd2>
 80042ce:	4603      	mov	r3, r0
 80042d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	789b      	ldrb	r3, [r3, #2]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa3d 	bl	8004758 <RTC_ByteToBcd2>
 80042de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e00e      	b.n	800430e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	78db      	ldrb	r3, [r3, #3]
 80042f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004302:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	22ca      	movs	r2, #202	; 0xca
 8004314:	625a      	str	r2, [r3, #36]	; 0x24
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2253      	movs	r2, #83	; 0x53
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f9ee 	bl	8004700 <RTC_EnterInitMode>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2204      	movs	r2, #4
 8004336:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e033      	b.n	80043aa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800434c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004350:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004360:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d111      	bne.n	8004394 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f99d 	bl	80046b0 <HAL_RTC_WaitForSynchro>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2204      	movs	r2, #4
 8004388:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00a      	b.n	80043aa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	22ff      	movs	r2, #255	; 0xff
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
  }
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}
	...

080043b4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80043c8:	4b93      	ldr	r3, [pc, #588]	; (8004618 <HAL_RTC_SetAlarm_IT+0x264>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a93      	ldr	r2, [pc, #588]	; (800461c <HAL_RTC_SetAlarm_IT+0x268>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0adb      	lsrs	r3, r3, #11
 80043d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	7f1b      	ldrb	r3, [r3, #28]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_RTC_SetAlarm_IT+0x36>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e111      	b.n	800460e <HAL_RTC_SetAlarm_IT+0x25a>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2202      	movs	r2, #2
 80043f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d137      	bne.n	800446c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2200      	movs	r2, #0
 800440e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f99f 	bl	8004758 <RTC_ByteToBcd2>
 800441a:	4603      	mov	r3, r0
 800441c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f998 	bl	8004758 <RTC_ByteToBcd2>
 8004428:	4603      	mov	r3, r0
 800442a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800442c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	789b      	ldrb	r3, [r3, #2]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f990 	bl	8004758 <RTC_ByteToBcd2>
 8004438:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800443a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004444:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f982 	bl	8004758 <RTC_ByteToBcd2>
 8004454:	4603      	mov	r3, r0
 8004456:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004458:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004460:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004466:	4313      	orrs	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e023      	b.n	80044b4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800448c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004492:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800449a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80044a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80044aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	22ca      	movs	r2, #202	; 0xca
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2253      	movs	r2, #83	; 0x53
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d8:	d141      	bne.n	800455e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80044fa:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	617a      	str	r2, [r7, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2203      	movs	r2, #3
 8004512:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e077      	b.n	800460e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0e7      	beq.n	80044fc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e040      	b.n	80045e0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800456c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800457e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1e5a      	subs	r2, r3, #1
 8004584:	617a      	str	r2, [r7, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	22ff      	movs	r2, #255	; 0xff
 8004590:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2203      	movs	r2, #3
 8004596:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e035      	b.n	800460e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0e7      	beq.n	8004580 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045de:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RTC_SetAlarm_IT+0x26c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_RTC_SetAlarm_IT+0x26c>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RTC_SetAlarm_IT+0x26c>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <HAL_RTC_SetAlarm_IT+0x26c>)
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3724      	adds	r7, #36	; 0x24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd90      	pop	{r4, r7, pc}
 8004616:	bf00      	nop
 8004618:	2000007c 	.word	0x2000007c
 800461c:	10624dd3 	.word	0x10624dd3
 8004620:	40013c00 	.word	0x40013c00

08004624 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d012      	beq.n	8004660 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fc f9ad 	bl	80009a8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800465e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d012      	beq.n	8004694 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f8a3 	bl	80047c8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004692:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RTC_AlarmIRQHandler+0x88>)
 8004696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800469a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	775a      	strb	r2, [r3, #29]
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40013c00 	.word	0x40013c00

080046b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046cc:	f7fd fb08 	bl	8001ce0 <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80046d2:	e009      	b.n	80046e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80046d4:	f7fd fb04 	bl	8001ce0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e2:	d901      	bls.n	80046e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e007      	b.n	80046f8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ee      	beq.n	80046d4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f04f 32ff 	mov.w	r2, #4294967295
 8004722:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004724:	f7fd fadc 	bl	8001ce0 <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800472a:	e009      	b.n	8004740 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800472c:	f7fd fad8 	bl	8001ce0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473a:	d901      	bls.n	8004740 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e007      	b.n	8004750 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ee      	beq.n	800472c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004766:	e005      	b.n	8004774 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	3b0a      	subs	r3, #10
 8004772:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2b09      	cmp	r3, #9
 8004778:	d8f6      	bhi.n	8004768 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	b2da      	uxtb	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	4313      	orrs	r3, r2
 8004786:	b2db      	uxtb	r3, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3350      	adds	r3, #80	; 0x50
 80047aa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4413      	add	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e03f      	b.n	800486e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd f98c 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 faf9 	bl	8004e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	4613      	mov	r3, r2
 8004882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d130      	bne.n	80048f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Transmit_IT+0x26>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e029      	b.n	80048f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Transmit_IT+0x38>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e022      	b.n	80048f4 <HAL_UART_Transmit_IT+0x7e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	; 0x21
 80048d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d140      	bne.n	800499c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_UART_Receive_IT+0x26>
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e039      	b.n	800499e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_UART_Receive_IT+0x38>
 8004934:	2302      	movs	r3, #2
 8004936:	e032      	b.n	800499e <HAL_UART_Receive_IT+0x9e>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2222      	movs	r2, #34	; 0x22
 800495c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004976:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0220 	orr.w	r2, r2, #32
 8004996:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_UART_IRQHandler+0x52>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f98c 	bl	8004d14 <UART_Receive_IT>
      return;
 80049fc:	e0d1      	b.n	8004ba2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80b0 	beq.w	8004b66 <HAL_UART_IRQHandler+0x1ba>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <HAL_UART_IRQHandler+0x70>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80a5 	beq.w	8004b66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_UART_IRQHandler+0x90>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	f043 0201 	orr.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_UART_IRQHandler+0xb0>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	f043 0202 	orr.w	r2, r3, #2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_UART_IRQHandler+0xd0>
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0xfa>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_UART_IRQHandler+0xee>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	f043 0208 	orr.w	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d078      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x11c>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f926 	bl	8004d14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	bf0c      	ite	eq
 8004ad6:	2301      	moveq	r3, #1
 8004ad8:	2300      	movne	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_UART_IRQHandler+0x144>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d031      	beq.n	8004b54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f86f 	bl	8004bd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d123      	bne.n	8004b4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d013      	beq.n	8004b44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <HAL_UART_IRQHandler+0x1fc>)
 8004b22:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fa18 	bl	8001f5e <HAL_DMA_Abort_IT>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d016      	beq.n	8004b62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b42:	e00e      	b.n	8004b62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f83b 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4a:	e00a      	b.n	8004b62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f837 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b52:	e006      	b.n	8004b62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f833 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b60:	e01e      	b.n	8004ba0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b62:	bf00      	nop
    return;
 8004b64:	e01c      	b.n	8004ba0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1d6>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f85c 	bl	8004c38 <UART_Transmit_IT>
    return;
 8004b80:	e00f      	b.n	8004ba2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1f6>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8a4 	bl	8004ce4 <UART_EndTransmit_IT>
    return;
 8004b9c:	bf00      	nop
 8004b9e:	e000      	b.n	8004ba2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004ba0:	bf00      	nop
  }
}
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	08004c11 	.word	0x08004c11

08004bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff ffc8 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b21      	cmp	r3, #33	; 0x21
 8004c4a:	d144      	bne.n	8004cd6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c54:	d11a      	bne.n	8004c8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]
 8004c7e:	e00e      	b.n	8004c9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	621a      	str	r2, [r3, #32]
 8004c8a:	e008      	b.n	8004c9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	1c59      	adds	r1, r3, #1
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6211      	str	r1, [r2, #32]
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	4619      	mov	r1, r3
 8004cac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff51 	bl	8004bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b22      	cmp	r3, #34	; 0x22
 8004d26:	d171      	bne.n	8004e0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d123      	bne.n	8004d7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10e      	bne.n	8004d5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e029      	b.n	8004db2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28
 8004d78:	e01b      	b.n	8004db2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6858      	ldr	r0, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6291      	str	r1, [r2, #40]	; 0x28
 8004d92:	b2c2      	uxtb	r2, r0
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e00c      	b.n	8004db2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	1c58      	adds	r0, r3, #1
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	6288      	str	r0, [r1, #40]	; 0x28
 8004daa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d120      	bne.n	8004e08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0220 	bic.w	r2, r2, #32
 8004dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fbfa 	bl	80015f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e002      	b.n	8004e0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e5a:	f023 030c 	bic.w	r3, r3, #12
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e86:	f040 818b 	bne.w	80051a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4ac1      	ldr	r2, [pc, #772]	; (8005194 <UART_SetConfig+0x37c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d005      	beq.n	8004ea0 <UART_SetConfig+0x88>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4abf      	ldr	r2, [pc, #764]	; (8005198 <UART_SetConfig+0x380>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	f040 80bd 	bne.w	800501a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7fe ff90 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	461d      	mov	r5, r3
 8004eaa:	f04f 0600 	mov.w	r6, #0
 8004eae:	46a8      	mov	r8, r5
 8004eb0:	46b1      	mov	r9, r6
 8004eb2:	eb18 0308 	adds.w	r3, r8, r8
 8004eb6:	eb49 0409 	adc.w	r4, r9, r9
 8004eba:	4698      	mov	r8, r3
 8004ebc:	46a1      	mov	r9, r4
 8004ebe:	eb18 0805 	adds.w	r8, r8, r5
 8004ec2:	eb49 0906 	adc.w	r9, r9, r6
 8004ec6:	f04f 0100 	mov.w	r1, #0
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ed2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ed6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004eda:	4688      	mov	r8, r1
 8004edc:	4691      	mov	r9, r2
 8004ede:	eb18 0005 	adds.w	r0, r8, r5
 8004ee2:	eb49 0106 	adc.w	r1, r9, r6
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	461d      	mov	r5, r3
 8004eec:	f04f 0600 	mov.w	r6, #0
 8004ef0:	196b      	adds	r3, r5, r5
 8004ef2:	eb46 0406 	adc.w	r4, r6, r6
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4623      	mov	r3, r4
 8004efa:	f7fb f9c9 	bl	8000290 <__aeabi_uldivmod>
 8004efe:	4603      	mov	r3, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	461a      	mov	r2, r3
 8004f04:	4ba5      	ldr	r3, [pc, #660]	; (800519c <UART_SetConfig+0x384>)
 8004f06:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	461d      	mov	r5, r3
 8004f14:	f04f 0600 	mov.w	r6, #0
 8004f18:	46a9      	mov	r9, r5
 8004f1a:	46b2      	mov	sl, r6
 8004f1c:	eb19 0309 	adds.w	r3, r9, r9
 8004f20:	eb4a 040a 	adc.w	r4, sl, sl
 8004f24:	4699      	mov	r9, r3
 8004f26:	46a2      	mov	sl, r4
 8004f28:	eb19 0905 	adds.w	r9, r9, r5
 8004f2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f30:	f04f 0100 	mov.w	r1, #0
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f44:	4689      	mov	r9, r1
 8004f46:	4692      	mov	sl, r2
 8004f48:	eb19 0005 	adds.w	r0, r9, r5
 8004f4c:	eb4a 0106 	adc.w	r1, sl, r6
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	461d      	mov	r5, r3
 8004f56:	f04f 0600 	mov.w	r6, #0
 8004f5a:	196b      	adds	r3, r5, r5
 8004f5c:	eb46 0406 	adc.w	r4, r6, r6
 8004f60:	461a      	mov	r2, r3
 8004f62:	4623      	mov	r3, r4
 8004f64:	f7fb f994 	bl	8000290 <__aeabi_uldivmod>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4b8b      	ldr	r3, [pc, #556]	; (800519c <UART_SetConfig+0x384>)
 8004f70:	fba3 1302 	umull	r1, r3, r3, r2
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	2164      	movs	r1, #100	; 0x64
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	3332      	adds	r3, #50	; 0x32
 8004f82:	4a86      	ldr	r2, [pc, #536]	; (800519c <UART_SetConfig+0x384>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f90:	4498      	add	r8, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	461d      	mov	r5, r3
 8004f96:	f04f 0600 	mov.w	r6, #0
 8004f9a:	46a9      	mov	r9, r5
 8004f9c:	46b2      	mov	sl, r6
 8004f9e:	eb19 0309 	adds.w	r3, r9, r9
 8004fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8004fa6:	4699      	mov	r9, r3
 8004fa8:	46a2      	mov	sl, r4
 8004faa:	eb19 0905 	adds.w	r9, r9, r5
 8004fae:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	4692      	mov	sl, r2
 8004fca:	eb19 0005 	adds.w	r0, r9, r5
 8004fce:	eb4a 0106 	adc.w	r1, sl, r6
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	f04f 0600 	mov.w	r6, #0
 8004fdc:	196b      	adds	r3, r5, r5
 8004fde:	eb46 0406 	adc.w	r4, r6, r6
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	f7fb f953 	bl	8000290 <__aeabi_uldivmod>
 8004fea:	4603      	mov	r3, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b6a      	ldr	r3, [pc, #424]	; (800519c <UART_SetConfig+0x384>)
 8004ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2164      	movs	r1, #100	; 0x64
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	3332      	adds	r3, #50	; 0x32
 8005004:	4a65      	ldr	r2, [pc, #404]	; (800519c <UART_SetConfig+0x384>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 0207 	and.w	r2, r3, #7
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4442      	add	r2, r8
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	e26f      	b.n	80054fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501a:	f7fe febf 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 800501e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	461d      	mov	r5, r3
 8005024:	f04f 0600 	mov.w	r6, #0
 8005028:	46a8      	mov	r8, r5
 800502a:	46b1      	mov	r9, r6
 800502c:	eb18 0308 	adds.w	r3, r8, r8
 8005030:	eb49 0409 	adc.w	r4, r9, r9
 8005034:	4698      	mov	r8, r3
 8005036:	46a1      	mov	r9, r4
 8005038:	eb18 0805 	adds.w	r8, r8, r5
 800503c:	eb49 0906 	adc.w	r9, r9, r6
 8005040:	f04f 0100 	mov.w	r1, #0
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800504c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005050:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005054:	4688      	mov	r8, r1
 8005056:	4691      	mov	r9, r2
 8005058:	eb18 0005 	adds.w	r0, r8, r5
 800505c:	eb49 0106 	adc.w	r1, r9, r6
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	461d      	mov	r5, r3
 8005066:	f04f 0600 	mov.w	r6, #0
 800506a:	196b      	adds	r3, r5, r5
 800506c:	eb46 0406 	adc.w	r4, r6, r6
 8005070:	461a      	mov	r2, r3
 8005072:	4623      	mov	r3, r4
 8005074:	f7fb f90c 	bl	8000290 <__aeabi_uldivmod>
 8005078:	4603      	mov	r3, r0
 800507a:	460c      	mov	r4, r1
 800507c:	461a      	mov	r2, r3
 800507e:	4b47      	ldr	r3, [pc, #284]	; (800519c <UART_SetConfig+0x384>)
 8005080:	fba3 2302 	umull	r2, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	461d      	mov	r5, r3
 800508e:	f04f 0600 	mov.w	r6, #0
 8005092:	46a9      	mov	r9, r5
 8005094:	46b2      	mov	sl, r6
 8005096:	eb19 0309 	adds.w	r3, r9, r9
 800509a:	eb4a 040a 	adc.w	r4, sl, sl
 800509e:	4699      	mov	r9, r3
 80050a0:	46a2      	mov	sl, r4
 80050a2:	eb19 0905 	adds.w	r9, r9, r5
 80050a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050be:	4689      	mov	r9, r1
 80050c0:	4692      	mov	sl, r2
 80050c2:	eb19 0005 	adds.w	r0, r9, r5
 80050c6:	eb4a 0106 	adc.w	r1, sl, r6
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	461d      	mov	r5, r3
 80050d0:	f04f 0600 	mov.w	r6, #0
 80050d4:	196b      	adds	r3, r5, r5
 80050d6:	eb46 0406 	adc.w	r4, r6, r6
 80050da:	461a      	mov	r2, r3
 80050dc:	4623      	mov	r3, r4
 80050de:	f7fb f8d7 	bl	8000290 <__aeabi_uldivmod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b2c      	ldr	r3, [pc, #176]	; (800519c <UART_SetConfig+0x384>)
 80050ea:	fba3 1302 	umull	r1, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2164      	movs	r1, #100	; 0x64
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <UART_SetConfig+0x384>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800510a:	4498      	add	r8, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	461d      	mov	r5, r3
 8005110:	f04f 0600 	mov.w	r6, #0
 8005114:	46a9      	mov	r9, r5
 8005116:	46b2      	mov	sl, r6
 8005118:	eb19 0309 	adds.w	r3, r9, r9
 800511c:	eb4a 040a 	adc.w	r4, sl, sl
 8005120:	4699      	mov	r9, r3
 8005122:	46a2      	mov	sl, r4
 8005124:	eb19 0905 	adds.w	r9, r9, r5
 8005128:	eb4a 0a06 	adc.w	sl, sl, r6
 800512c:	f04f 0100 	mov.w	r1, #0
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005138:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800513c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005140:	4689      	mov	r9, r1
 8005142:	4692      	mov	sl, r2
 8005144:	eb19 0005 	adds.w	r0, r9, r5
 8005148:	eb4a 0106 	adc.w	r1, sl, r6
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	461d      	mov	r5, r3
 8005152:	f04f 0600 	mov.w	r6, #0
 8005156:	196b      	adds	r3, r5, r5
 8005158:	eb46 0406 	adc.w	r4, r6, r6
 800515c:	461a      	mov	r2, r3
 800515e:	4623      	mov	r3, r4
 8005160:	f7fb f896 	bl	8000290 <__aeabi_uldivmod>
 8005164:	4603      	mov	r3, r0
 8005166:	460c      	mov	r4, r1
 8005168:	461a      	mov	r2, r3
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <UART_SetConfig+0x384>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	; 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	3332      	adds	r3, #50	; 0x32
 800517e:	4a07      	ldr	r2, [pc, #28]	; (800519c <UART_SetConfig+0x384>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4442      	add	r2, r8
 8005190:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005192:	e1b2      	b.n	80054fa <UART_SetConfig+0x6e2>
 8005194:	40011000 	.word	0x40011000
 8005198:	40011400 	.word	0x40011400
 800519c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4ad7      	ldr	r2, [pc, #860]	; (8005504 <UART_SetConfig+0x6ec>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d005      	beq.n	80051b6 <UART_SetConfig+0x39e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4ad6      	ldr	r2, [pc, #856]	; (8005508 <UART_SetConfig+0x6f0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	f040 80d1 	bne.w	8005358 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80051b6:	f7fe fe05 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 80051ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	469a      	mov	sl, r3
 80051c0:	f04f 0b00 	mov.w	fp, #0
 80051c4:	46d0      	mov	r8, sl
 80051c6:	46d9      	mov	r9, fp
 80051c8:	eb18 0308 	adds.w	r3, r8, r8
 80051cc:	eb49 0409 	adc.w	r4, r9, r9
 80051d0:	4698      	mov	r8, r3
 80051d2:	46a1      	mov	r9, r4
 80051d4:	eb18 080a 	adds.w	r8, r8, sl
 80051d8:	eb49 090b 	adc.w	r9, r9, fp
 80051dc:	f04f 0100 	mov.w	r1, #0
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051f0:	4688      	mov	r8, r1
 80051f2:	4691      	mov	r9, r2
 80051f4:	eb1a 0508 	adds.w	r5, sl, r8
 80051f8:	eb4b 0609 	adc.w	r6, fp, r9
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4619      	mov	r1, r3
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	0094      	lsls	r4, r2, #2
 8005210:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005214:	008b      	lsls	r3, r1, #2
 8005216:	461a      	mov	r2, r3
 8005218:	4623      	mov	r3, r4
 800521a:	4628      	mov	r0, r5
 800521c:	4631      	mov	r1, r6
 800521e:	f7fb f837 	bl	8000290 <__aeabi_uldivmod>
 8005222:	4603      	mov	r3, r0
 8005224:	460c      	mov	r4, r1
 8005226:	461a      	mov	r2, r3
 8005228:	4bb8      	ldr	r3, [pc, #736]	; (800550c <UART_SetConfig+0x6f4>)
 800522a:	fba3 2302 	umull	r2, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	469b      	mov	fp, r3
 8005238:	f04f 0c00 	mov.w	ip, #0
 800523c:	46d9      	mov	r9, fp
 800523e:	46e2      	mov	sl, ip
 8005240:	eb19 0309 	adds.w	r3, r9, r9
 8005244:	eb4a 040a 	adc.w	r4, sl, sl
 8005248:	4699      	mov	r9, r3
 800524a:	46a2      	mov	sl, r4
 800524c:	eb19 090b 	adds.w	r9, r9, fp
 8005250:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005260:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005264:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005268:	4689      	mov	r9, r1
 800526a:	4692      	mov	sl, r2
 800526c:	eb1b 0509 	adds.w	r5, fp, r9
 8005270:	eb4c 060a 	adc.w	r6, ip, sl
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4619      	mov	r1, r3
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f04f 0400 	mov.w	r4, #0
 8005286:	0094      	lsls	r4, r2, #2
 8005288:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800528c:	008b      	lsls	r3, r1, #2
 800528e:	461a      	mov	r2, r3
 8005290:	4623      	mov	r3, r4
 8005292:	4628      	mov	r0, r5
 8005294:	4631      	mov	r1, r6
 8005296:	f7fa fffb 	bl	8000290 <__aeabi_uldivmod>
 800529a:	4603      	mov	r3, r0
 800529c:	460c      	mov	r4, r1
 800529e:	461a      	mov	r2, r3
 80052a0:	4b9a      	ldr	r3, [pc, #616]	; (800550c <UART_SetConfig+0x6f4>)
 80052a2:	fba3 1302 	umull	r1, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2164      	movs	r1, #100	; 0x64
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	3332      	adds	r3, #50	; 0x32
 80052b4:	4a95      	ldr	r2, [pc, #596]	; (800550c <UART_SetConfig+0x6f4>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c0:	4498      	add	r8, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	469b      	mov	fp, r3
 80052c6:	f04f 0c00 	mov.w	ip, #0
 80052ca:	46d9      	mov	r9, fp
 80052cc:	46e2      	mov	sl, ip
 80052ce:	eb19 0309 	adds.w	r3, r9, r9
 80052d2:	eb4a 040a 	adc.w	r4, sl, sl
 80052d6:	4699      	mov	r9, r3
 80052d8:	46a2      	mov	sl, r4
 80052da:	eb19 090b 	adds.w	r9, r9, fp
 80052de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052f6:	4689      	mov	r9, r1
 80052f8:	4692      	mov	sl, r2
 80052fa:	eb1b 0509 	adds.w	r5, fp, r9
 80052fe:	eb4c 060a 	adc.w	r6, ip, sl
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4619      	mov	r1, r3
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	f04f 0400 	mov.w	r4, #0
 8005314:	0094      	lsls	r4, r2, #2
 8005316:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800531a:	008b      	lsls	r3, r1, #2
 800531c:	461a      	mov	r2, r3
 800531e:	4623      	mov	r3, r4
 8005320:	4628      	mov	r0, r5
 8005322:	4631      	mov	r1, r6
 8005324:	f7fa ffb4 	bl	8000290 <__aeabi_uldivmod>
 8005328:	4603      	mov	r3, r0
 800532a:	460c      	mov	r4, r1
 800532c:	461a      	mov	r2, r3
 800532e:	4b77      	ldr	r3, [pc, #476]	; (800550c <UART_SetConfig+0x6f4>)
 8005330:	fba3 1302 	umull	r1, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	2164      	movs	r1, #100	; 0x64
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	3332      	adds	r3, #50	; 0x32
 8005342:	4a72      	ldr	r2, [pc, #456]	; (800550c <UART_SetConfig+0x6f4>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f003 020f 	and.w	r2, r3, #15
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4442      	add	r2, r8
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	e0d0      	b.n	80054fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fe fd20 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 800535c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	469a      	mov	sl, r3
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	46d0      	mov	r8, sl
 8005368:	46d9      	mov	r9, fp
 800536a:	eb18 0308 	adds.w	r3, r8, r8
 800536e:	eb49 0409 	adc.w	r4, r9, r9
 8005372:	4698      	mov	r8, r3
 8005374:	46a1      	mov	r9, r4
 8005376:	eb18 080a 	adds.w	r8, r8, sl
 800537a:	eb49 090b 	adc.w	r9, r9, fp
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800538a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800538e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005392:	4688      	mov	r8, r1
 8005394:	4691      	mov	r9, r2
 8005396:	eb1a 0508 	adds.w	r5, sl, r8
 800539a:	eb4b 0609 	adc.w	r6, fp, r9
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4619      	mov	r1, r3
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	0094      	lsls	r4, r2, #2
 80053b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053b6:	008b      	lsls	r3, r1, #2
 80053b8:	461a      	mov	r2, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	4631      	mov	r1, r6
 80053c0:	f7fa ff66 	bl	8000290 <__aeabi_uldivmod>
 80053c4:	4603      	mov	r3, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b50      	ldr	r3, [pc, #320]	; (800550c <UART_SetConfig+0x6f4>)
 80053cc:	fba3 2302 	umull	r2, r3, r3, r2
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	469b      	mov	fp, r3
 80053da:	f04f 0c00 	mov.w	ip, #0
 80053de:	46d9      	mov	r9, fp
 80053e0:	46e2      	mov	sl, ip
 80053e2:	eb19 0309 	adds.w	r3, r9, r9
 80053e6:	eb4a 040a 	adc.w	r4, sl, sl
 80053ea:	4699      	mov	r9, r3
 80053ec:	46a2      	mov	sl, r4
 80053ee:	eb19 090b 	adds.w	r9, r9, fp
 80053f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005402:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005406:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800540a:	4689      	mov	r9, r1
 800540c:	4692      	mov	sl, r2
 800540e:	eb1b 0509 	adds.w	r5, fp, r9
 8005412:	eb4c 060a 	adc.w	r6, ip, sl
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	0094      	lsls	r4, r2, #2
 800542a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	461a      	mov	r2, r3
 8005432:	4623      	mov	r3, r4
 8005434:	4628      	mov	r0, r5
 8005436:	4631      	mov	r1, r6
 8005438:	f7fa ff2a 	bl	8000290 <__aeabi_uldivmod>
 800543c:	4603      	mov	r3, r0
 800543e:	460c      	mov	r4, r1
 8005440:	461a      	mov	r2, r3
 8005442:	4b32      	ldr	r3, [pc, #200]	; (800550c <UART_SetConfig+0x6f4>)
 8005444:	fba3 1302 	umull	r1, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2164      	movs	r1, #100	; 0x64
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	3332      	adds	r3, #50	; 0x32
 8005456:	4a2d      	ldr	r2, [pc, #180]	; (800550c <UART_SetConfig+0x6f4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005462:	4498      	add	r8, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	469b      	mov	fp, r3
 8005468:	f04f 0c00 	mov.w	ip, #0
 800546c:	46d9      	mov	r9, fp
 800546e:	46e2      	mov	sl, ip
 8005470:	eb19 0309 	adds.w	r3, r9, r9
 8005474:	eb4a 040a 	adc.w	r4, sl, sl
 8005478:	4699      	mov	r9, r3
 800547a:	46a2      	mov	sl, r4
 800547c:	eb19 090b 	adds.w	r9, r9, fp
 8005480:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005498:	4689      	mov	r9, r1
 800549a:	4692      	mov	sl, r2
 800549c:	eb1b 0509 	adds.w	r5, fp, r9
 80054a0:	eb4c 060a 	adc.w	r6, ip, sl
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	f04f 0400 	mov.w	r4, #0
 80054b6:	0094      	lsls	r4, r2, #2
 80054b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054bc:	008b      	lsls	r3, r1, #2
 80054be:	461a      	mov	r2, r3
 80054c0:	4623      	mov	r3, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	4631      	mov	r1, r6
 80054c6:	f7fa fee3 	bl	8000290 <__aeabi_uldivmod>
 80054ca:	4603      	mov	r3, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	461a      	mov	r2, r3
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <UART_SetConfig+0x6f4>)
 80054d2:	fba3 1302 	umull	r1, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2164      	movs	r1, #100	; 0x64
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	3332      	adds	r3, #50	; 0x32
 80054e4:	4a09      	ldr	r2, [pc, #36]	; (800550c <UART_SetConfig+0x6f4>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4442      	add	r2, r8
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	e7ff      	b.n	80054fa <UART_SetConfig+0x6e2>
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	40011000 	.word	0x40011000
 8005508:	40011400 	.word	0x40011400
 800550c:	51eb851f 	.word	0x51eb851f

08005510 <__errno>:
 8005510:	4b01      	ldr	r3, [pc, #4]	; (8005518 <__errno+0x8>)
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000088 	.word	0x20000088

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4e0d      	ldr	r6, [pc, #52]	; (8005554 <__libc_init_array+0x38>)
 8005520:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005522:	1ba4      	subs	r4, r4, r6
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	2500      	movs	r5, #0
 8005528:	42a5      	cmp	r5, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	4e0b      	ldr	r6, [pc, #44]	; (800555c <__libc_init_array+0x40>)
 800552e:	4c0c      	ldr	r4, [pc, #48]	; (8005560 <__libc_init_array+0x44>)
 8005530:	f000 fc26 	bl	8005d80 <_init>
 8005534:	1ba4      	subs	r4, r4, r6
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	2500      	movs	r5, #0
 800553a:	42a5      	cmp	r5, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005544:	4798      	blx	r3
 8005546:	3501      	adds	r5, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800554e:	4798      	blx	r3
 8005550:	3501      	adds	r5, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	08005ee0 	.word	0x08005ee0
 8005558:	08005ee0 	.word	0x08005ee0
 800555c:	08005ee0 	.word	0x08005ee0
 8005560:	08005ee4 	.word	0x08005ee4

08005564 <memset>:
 8005564:	4402      	add	r2, r0
 8005566:	4603      	mov	r3, r0
 8005568:	4293      	cmp	r3, r2
 800556a:	d100      	bne.n	800556e <memset+0xa>
 800556c:	4770      	bx	lr
 800556e:	f803 1b01 	strb.w	r1, [r3], #1
 8005572:	e7f9      	b.n	8005568 <memset+0x4>

08005574 <siprintf>:
 8005574:	b40e      	push	{r1, r2, r3}
 8005576:	b500      	push	{lr}
 8005578:	b09c      	sub	sp, #112	; 0x70
 800557a:	ab1d      	add	r3, sp, #116	; 0x74
 800557c:	9002      	str	r0, [sp, #8]
 800557e:	9006      	str	r0, [sp, #24]
 8005580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005584:	4809      	ldr	r0, [pc, #36]	; (80055ac <siprintf+0x38>)
 8005586:	9107      	str	r1, [sp, #28]
 8005588:	9104      	str	r1, [sp, #16]
 800558a:	4909      	ldr	r1, [pc, #36]	; (80055b0 <siprintf+0x3c>)
 800558c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005590:	9105      	str	r1, [sp, #20]
 8005592:	6800      	ldr	r0, [r0, #0]
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	a902      	add	r1, sp, #8
 8005598:	f000 f866 	bl	8005668 <_svfiprintf_r>
 800559c:	9b02      	ldr	r3, [sp, #8]
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	b01c      	add	sp, #112	; 0x70
 80055a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a8:	b003      	add	sp, #12
 80055aa:	4770      	bx	lr
 80055ac:	20000088 	.word	0x20000088
 80055b0:	ffff0208 	.word	0xffff0208

080055b4 <__ssputs_r>:
 80055b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	688e      	ldr	r6, [r1, #8]
 80055ba:	429e      	cmp	r6, r3
 80055bc:	4682      	mov	sl, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	4690      	mov	r8, r2
 80055c2:	4699      	mov	r9, r3
 80055c4:	d837      	bhi.n	8005636 <__ssputs_r+0x82>
 80055c6:	898a      	ldrh	r2, [r1, #12]
 80055c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055cc:	d031      	beq.n	8005632 <__ssputs_r+0x7e>
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	6909      	ldr	r1, [r1, #16]
 80055d2:	1a6f      	subs	r7, r5, r1
 80055d4:	6965      	ldr	r5, [r4, #20]
 80055d6:	2302      	movs	r3, #2
 80055d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80055e0:	f109 0301 	add.w	r3, r9, #1
 80055e4:	443b      	add	r3, r7
 80055e6:	429d      	cmp	r5, r3
 80055e8:	bf38      	it	cc
 80055ea:	461d      	movcc	r5, r3
 80055ec:	0553      	lsls	r3, r2, #21
 80055ee:	d530      	bpl.n	8005652 <__ssputs_r+0x9e>
 80055f0:	4629      	mov	r1, r5
 80055f2:	f000 fb2b 	bl	8005c4c <_malloc_r>
 80055f6:	4606      	mov	r6, r0
 80055f8:	b950      	cbnz	r0, 8005610 <__ssputs_r+0x5c>
 80055fa:	230c      	movs	r3, #12
 80055fc:	f8ca 3000 	str.w	r3, [sl]
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005606:	81a3      	strh	r3, [r4, #12]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005610:	463a      	mov	r2, r7
 8005612:	6921      	ldr	r1, [r4, #16]
 8005614:	f000 faa8 	bl	8005b68 <memcpy>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800561e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	6126      	str	r6, [r4, #16]
 8005626:	6165      	str	r5, [r4, #20]
 8005628:	443e      	add	r6, r7
 800562a:	1bed      	subs	r5, r5, r7
 800562c:	6026      	str	r6, [r4, #0]
 800562e:	60a5      	str	r5, [r4, #8]
 8005630:	464e      	mov	r6, r9
 8005632:	454e      	cmp	r6, r9
 8005634:	d900      	bls.n	8005638 <__ssputs_r+0x84>
 8005636:	464e      	mov	r6, r9
 8005638:	4632      	mov	r2, r6
 800563a:	4641      	mov	r1, r8
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	f000 fa9e 	bl	8005b7e <memmove>
 8005642:	68a3      	ldr	r3, [r4, #8]
 8005644:	1b9b      	subs	r3, r3, r6
 8005646:	60a3      	str	r3, [r4, #8]
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	441e      	add	r6, r3
 800564c:	6026      	str	r6, [r4, #0]
 800564e:	2000      	movs	r0, #0
 8005650:	e7dc      	b.n	800560c <__ssputs_r+0x58>
 8005652:	462a      	mov	r2, r5
 8005654:	f000 fb54 	bl	8005d00 <_realloc_r>
 8005658:	4606      	mov	r6, r0
 800565a:	2800      	cmp	r0, #0
 800565c:	d1e2      	bne.n	8005624 <__ssputs_r+0x70>
 800565e:	6921      	ldr	r1, [r4, #16]
 8005660:	4650      	mov	r0, sl
 8005662:	f000 faa5 	bl	8005bb0 <_free_r>
 8005666:	e7c8      	b.n	80055fa <__ssputs_r+0x46>

08005668 <_svfiprintf_r>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	461d      	mov	r5, r3
 800566e:	898b      	ldrh	r3, [r1, #12]
 8005670:	061f      	lsls	r7, r3, #24
 8005672:	b09d      	sub	sp, #116	; 0x74
 8005674:	4680      	mov	r8, r0
 8005676:	460c      	mov	r4, r1
 8005678:	4616      	mov	r6, r2
 800567a:	d50f      	bpl.n	800569c <_svfiprintf_r+0x34>
 800567c:	690b      	ldr	r3, [r1, #16]
 800567e:	b96b      	cbnz	r3, 800569c <_svfiprintf_r+0x34>
 8005680:	2140      	movs	r1, #64	; 0x40
 8005682:	f000 fae3 	bl	8005c4c <_malloc_r>
 8005686:	6020      	str	r0, [r4, #0]
 8005688:	6120      	str	r0, [r4, #16]
 800568a:	b928      	cbnz	r0, 8005698 <_svfiprintf_r+0x30>
 800568c:	230c      	movs	r3, #12
 800568e:	f8c8 3000 	str.w	r3, [r8]
 8005692:	f04f 30ff 	mov.w	r0, #4294967295
 8005696:	e0c8      	b.n	800582a <_svfiprintf_r+0x1c2>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	6163      	str	r3, [r4, #20]
 800569c:	2300      	movs	r3, #0
 800569e:	9309      	str	r3, [sp, #36]	; 0x24
 80056a0:	2320      	movs	r3, #32
 80056a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a6:	2330      	movs	r3, #48	; 0x30
 80056a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056ac:	9503      	str	r5, [sp, #12]
 80056ae:	f04f 0b01 	mov.w	fp, #1
 80056b2:	4637      	mov	r7, r6
 80056b4:	463d      	mov	r5, r7
 80056b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056ba:	b10b      	cbz	r3, 80056c0 <_svfiprintf_r+0x58>
 80056bc:	2b25      	cmp	r3, #37	; 0x25
 80056be:	d13e      	bne.n	800573e <_svfiprintf_r+0xd6>
 80056c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80056c4:	d00b      	beq.n	80056de <_svfiprintf_r+0x76>
 80056c6:	4653      	mov	r3, sl
 80056c8:	4632      	mov	r2, r6
 80056ca:	4621      	mov	r1, r4
 80056cc:	4640      	mov	r0, r8
 80056ce:	f7ff ff71 	bl	80055b4 <__ssputs_r>
 80056d2:	3001      	adds	r0, #1
 80056d4:	f000 80a4 	beq.w	8005820 <_svfiprintf_r+0x1b8>
 80056d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056da:	4453      	add	r3, sl
 80056dc:	9309      	str	r3, [sp, #36]	; 0x24
 80056de:	783b      	ldrb	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 809d 	beq.w	8005820 <_svfiprintf_r+0x1b8>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	9307      	str	r3, [sp, #28]
 80056f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056f8:	931a      	str	r3, [sp, #104]	; 0x68
 80056fa:	462f      	mov	r7, r5
 80056fc:	2205      	movs	r2, #5
 80056fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005702:	4850      	ldr	r0, [pc, #320]	; (8005844 <_svfiprintf_r+0x1dc>)
 8005704:	f7fa fd74 	bl	80001f0 <memchr>
 8005708:	9b04      	ldr	r3, [sp, #16]
 800570a:	b9d0      	cbnz	r0, 8005742 <_svfiprintf_r+0xda>
 800570c:	06d9      	lsls	r1, r3, #27
 800570e:	bf44      	itt	mi
 8005710:	2220      	movmi	r2, #32
 8005712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005716:	071a      	lsls	r2, r3, #28
 8005718:	bf44      	itt	mi
 800571a:	222b      	movmi	r2, #43	; 0x2b
 800571c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005720:	782a      	ldrb	r2, [r5, #0]
 8005722:	2a2a      	cmp	r2, #42	; 0x2a
 8005724:	d015      	beq.n	8005752 <_svfiprintf_r+0xea>
 8005726:	9a07      	ldr	r2, [sp, #28]
 8005728:	462f      	mov	r7, r5
 800572a:	2000      	movs	r0, #0
 800572c:	250a      	movs	r5, #10
 800572e:	4639      	mov	r1, r7
 8005730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005734:	3b30      	subs	r3, #48	; 0x30
 8005736:	2b09      	cmp	r3, #9
 8005738:	d94d      	bls.n	80057d6 <_svfiprintf_r+0x16e>
 800573a:	b1b8      	cbz	r0, 800576c <_svfiprintf_r+0x104>
 800573c:	e00f      	b.n	800575e <_svfiprintf_r+0xf6>
 800573e:	462f      	mov	r7, r5
 8005740:	e7b8      	b.n	80056b4 <_svfiprintf_r+0x4c>
 8005742:	4a40      	ldr	r2, [pc, #256]	; (8005844 <_svfiprintf_r+0x1dc>)
 8005744:	1a80      	subs	r0, r0, r2
 8005746:	fa0b f000 	lsl.w	r0, fp, r0
 800574a:	4318      	orrs	r0, r3
 800574c:	9004      	str	r0, [sp, #16]
 800574e:	463d      	mov	r5, r7
 8005750:	e7d3      	b.n	80056fa <_svfiprintf_r+0x92>
 8005752:	9a03      	ldr	r2, [sp, #12]
 8005754:	1d11      	adds	r1, r2, #4
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	9103      	str	r1, [sp, #12]
 800575a:	2a00      	cmp	r2, #0
 800575c:	db01      	blt.n	8005762 <_svfiprintf_r+0xfa>
 800575e:	9207      	str	r2, [sp, #28]
 8005760:	e004      	b.n	800576c <_svfiprintf_r+0x104>
 8005762:	4252      	negs	r2, r2
 8005764:	f043 0302 	orr.w	r3, r3, #2
 8005768:	9207      	str	r2, [sp, #28]
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	783b      	ldrb	r3, [r7, #0]
 800576e:	2b2e      	cmp	r3, #46	; 0x2e
 8005770:	d10c      	bne.n	800578c <_svfiprintf_r+0x124>
 8005772:	787b      	ldrb	r3, [r7, #1]
 8005774:	2b2a      	cmp	r3, #42	; 0x2a
 8005776:	d133      	bne.n	80057e0 <_svfiprintf_r+0x178>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	9203      	str	r2, [sp, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	bfb8      	it	lt
 8005784:	f04f 33ff 	movlt.w	r3, #4294967295
 8005788:	3702      	adds	r7, #2
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	4d2e      	ldr	r5, [pc, #184]	; (8005848 <_svfiprintf_r+0x1e0>)
 800578e:	7839      	ldrb	r1, [r7, #0]
 8005790:	2203      	movs	r2, #3
 8005792:	4628      	mov	r0, r5
 8005794:	f7fa fd2c 	bl	80001f0 <memchr>
 8005798:	b138      	cbz	r0, 80057aa <_svfiprintf_r+0x142>
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	1b40      	subs	r0, r0, r5
 800579e:	fa03 f000 	lsl.w	r0, r3, r0
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	4303      	orrs	r3, r0
 80057a6:	3701      	adds	r7, #1
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	7839      	ldrb	r1, [r7, #0]
 80057ac:	4827      	ldr	r0, [pc, #156]	; (800584c <_svfiprintf_r+0x1e4>)
 80057ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057b2:	2206      	movs	r2, #6
 80057b4:	1c7e      	adds	r6, r7, #1
 80057b6:	f7fa fd1b 	bl	80001f0 <memchr>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d038      	beq.n	8005830 <_svfiprintf_r+0x1c8>
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <_svfiprintf_r+0x1e8>)
 80057c0:	bb13      	cbnz	r3, 8005808 <_svfiprintf_r+0x1a0>
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	3307      	adds	r3, #7
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	3308      	adds	r3, #8
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d0:	444b      	add	r3, r9
 80057d2:	9309      	str	r3, [sp, #36]	; 0x24
 80057d4:	e76d      	b.n	80056b2 <_svfiprintf_r+0x4a>
 80057d6:	fb05 3202 	mla	r2, r5, r2, r3
 80057da:	2001      	movs	r0, #1
 80057dc:	460f      	mov	r7, r1
 80057de:	e7a6      	b.n	800572e <_svfiprintf_r+0xc6>
 80057e0:	2300      	movs	r3, #0
 80057e2:	3701      	adds	r7, #1
 80057e4:	9305      	str	r3, [sp, #20]
 80057e6:	4619      	mov	r1, r3
 80057e8:	250a      	movs	r5, #10
 80057ea:	4638      	mov	r0, r7
 80057ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057f0:	3a30      	subs	r2, #48	; 0x30
 80057f2:	2a09      	cmp	r2, #9
 80057f4:	d903      	bls.n	80057fe <_svfiprintf_r+0x196>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0c8      	beq.n	800578c <_svfiprintf_r+0x124>
 80057fa:	9105      	str	r1, [sp, #20]
 80057fc:	e7c6      	b.n	800578c <_svfiprintf_r+0x124>
 80057fe:	fb05 2101 	mla	r1, r5, r1, r2
 8005802:	2301      	movs	r3, #1
 8005804:	4607      	mov	r7, r0
 8005806:	e7f0      	b.n	80057ea <_svfiprintf_r+0x182>
 8005808:	ab03      	add	r3, sp, #12
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	4622      	mov	r2, r4
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <_svfiprintf_r+0x1ec>)
 8005810:	a904      	add	r1, sp, #16
 8005812:	4640      	mov	r0, r8
 8005814:	f3af 8000 	nop.w
 8005818:	f1b0 3fff 	cmp.w	r0, #4294967295
 800581c:	4681      	mov	r9, r0
 800581e:	d1d6      	bne.n	80057ce <_svfiprintf_r+0x166>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	065b      	lsls	r3, r3, #25
 8005824:	f53f af35 	bmi.w	8005692 <_svfiprintf_r+0x2a>
 8005828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800582a:	b01d      	add	sp, #116	; 0x74
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	ab03      	add	r3, sp, #12
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	4622      	mov	r2, r4
 8005836:	4b07      	ldr	r3, [pc, #28]	; (8005854 <_svfiprintf_r+0x1ec>)
 8005838:	a904      	add	r1, sp, #16
 800583a:	4640      	mov	r0, r8
 800583c:	f000 f882 	bl	8005944 <_printf_i>
 8005840:	e7ea      	b.n	8005818 <_svfiprintf_r+0x1b0>
 8005842:	bf00      	nop
 8005844:	08005ea4 	.word	0x08005ea4
 8005848:	08005eaa 	.word	0x08005eaa
 800584c:	08005eae 	.word	0x08005eae
 8005850:	00000000 	.word	0x00000000
 8005854:	080055b5 	.word	0x080055b5

08005858 <_printf_common>:
 8005858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	4691      	mov	r9, r2
 800585e:	461f      	mov	r7, r3
 8005860:	688a      	ldr	r2, [r1, #8]
 8005862:	690b      	ldr	r3, [r1, #16]
 8005864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005868:	4293      	cmp	r3, r2
 800586a:	bfb8      	it	lt
 800586c:	4613      	movlt	r3, r2
 800586e:	f8c9 3000 	str.w	r3, [r9]
 8005872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	b112      	cbz	r2, 8005882 <_printf_common+0x2a>
 800587c:	3301      	adds	r3, #1
 800587e:	f8c9 3000 	str.w	r3, [r9]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800588c:	3302      	addmi	r3, #2
 800588e:	f8c9 3000 	strmi.w	r3, [r9]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d107      	bne.n	80058aa <_printf_common+0x52>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	f8d9 2000 	ldr.w	r2, [r9]
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	42ab      	cmp	r3, r5
 80058a8:	dc28      	bgt.n	80058fc <_printf_common+0xa4>
 80058aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	3300      	adds	r3, #0
 80058b2:	bf18      	it	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	0692      	lsls	r2, r2, #26
 80058b8:	d42d      	bmi.n	8005916 <_printf_common+0xbe>
 80058ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058be:	4639      	mov	r1, r7
 80058c0:	4630      	mov	r0, r6
 80058c2:	47c0      	blx	r8
 80058c4:	3001      	adds	r0, #1
 80058c6:	d020      	beq.n	800590a <_printf_common+0xb2>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	68e5      	ldr	r5, [r4, #12]
 80058cc:	f8d9 2000 	ldr.w	r2, [r9]
 80058d0:	f003 0306 	and.w	r3, r3, #6
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	bf08      	it	eq
 80058d8:	1aad      	subeq	r5, r5, r2
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	6922      	ldr	r2, [r4, #16]
 80058de:	bf0c      	ite	eq
 80058e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e4:	2500      	movne	r5, #0
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bfc4      	itt	gt
 80058ea:	1a9b      	subgt	r3, r3, r2
 80058ec:	18ed      	addgt	r5, r5, r3
 80058ee:	f04f 0900 	mov.w	r9, #0
 80058f2:	341a      	adds	r4, #26
 80058f4:	454d      	cmp	r5, r9
 80058f6:	d11a      	bne.n	800592e <_printf_common+0xd6>
 80058f8:	2000      	movs	r0, #0
 80058fa:	e008      	b.n	800590e <_printf_common+0xb6>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4652      	mov	r2, sl
 8005900:	4639      	mov	r1, r7
 8005902:	4630      	mov	r0, r6
 8005904:	47c0      	blx	r8
 8005906:	3001      	adds	r0, #1
 8005908:	d103      	bne.n	8005912 <_printf_common+0xba>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	3501      	adds	r5, #1
 8005914:	e7c3      	b.n	800589e <_printf_common+0x46>
 8005916:	18e1      	adds	r1, r4, r3
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	2030      	movs	r0, #48	; 0x30
 800591c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005920:	4422      	add	r2, r4
 8005922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592a:	3302      	adds	r3, #2
 800592c:	e7c5      	b.n	80058ba <_printf_common+0x62>
 800592e:	2301      	movs	r3, #1
 8005930:	4622      	mov	r2, r4
 8005932:	4639      	mov	r1, r7
 8005934:	4630      	mov	r0, r6
 8005936:	47c0      	blx	r8
 8005938:	3001      	adds	r0, #1
 800593a:	d0e6      	beq.n	800590a <_printf_common+0xb2>
 800593c:	f109 0901 	add.w	r9, r9, #1
 8005940:	e7d8      	b.n	80058f4 <_printf_common+0x9c>
	...

08005944 <_printf_i>:
 8005944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800594c:	460c      	mov	r4, r1
 800594e:	7e09      	ldrb	r1, [r1, #24]
 8005950:	b085      	sub	sp, #20
 8005952:	296e      	cmp	r1, #110	; 0x6e
 8005954:	4617      	mov	r7, r2
 8005956:	4606      	mov	r6, r0
 8005958:	4698      	mov	r8, r3
 800595a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800595c:	f000 80b3 	beq.w	8005ac6 <_printf_i+0x182>
 8005960:	d822      	bhi.n	80059a8 <_printf_i+0x64>
 8005962:	2963      	cmp	r1, #99	; 0x63
 8005964:	d036      	beq.n	80059d4 <_printf_i+0x90>
 8005966:	d80a      	bhi.n	800597e <_printf_i+0x3a>
 8005968:	2900      	cmp	r1, #0
 800596a:	f000 80b9 	beq.w	8005ae0 <_printf_i+0x19c>
 800596e:	2958      	cmp	r1, #88	; 0x58
 8005970:	f000 8083 	beq.w	8005a7a <_printf_i+0x136>
 8005974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800597c:	e032      	b.n	80059e4 <_printf_i+0xa0>
 800597e:	2964      	cmp	r1, #100	; 0x64
 8005980:	d001      	beq.n	8005986 <_printf_i+0x42>
 8005982:	2969      	cmp	r1, #105	; 0x69
 8005984:	d1f6      	bne.n	8005974 <_printf_i+0x30>
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	0605      	lsls	r5, r0, #24
 800598c:	f103 0104 	add.w	r1, r3, #4
 8005990:	d52a      	bpl.n	80059e8 <_printf_i+0xa4>
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da03      	bge.n	80059a2 <_printf_i+0x5e>
 800599a:	222d      	movs	r2, #45	; 0x2d
 800599c:	425b      	negs	r3, r3
 800599e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80059a2:	486f      	ldr	r0, [pc, #444]	; (8005b60 <_printf_i+0x21c>)
 80059a4:	220a      	movs	r2, #10
 80059a6:	e039      	b.n	8005a1c <_printf_i+0xd8>
 80059a8:	2973      	cmp	r1, #115	; 0x73
 80059aa:	f000 809d 	beq.w	8005ae8 <_printf_i+0x1a4>
 80059ae:	d808      	bhi.n	80059c2 <_printf_i+0x7e>
 80059b0:	296f      	cmp	r1, #111	; 0x6f
 80059b2:	d020      	beq.n	80059f6 <_printf_i+0xb2>
 80059b4:	2970      	cmp	r1, #112	; 0x70
 80059b6:	d1dd      	bne.n	8005974 <_printf_i+0x30>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	f043 0320 	orr.w	r3, r3, #32
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	e003      	b.n	80059ca <_printf_i+0x86>
 80059c2:	2975      	cmp	r1, #117	; 0x75
 80059c4:	d017      	beq.n	80059f6 <_printf_i+0xb2>
 80059c6:	2978      	cmp	r1, #120	; 0x78
 80059c8:	d1d4      	bne.n	8005974 <_printf_i+0x30>
 80059ca:	2378      	movs	r3, #120	; 0x78
 80059cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059d0:	4864      	ldr	r0, [pc, #400]	; (8005b64 <_printf_i+0x220>)
 80059d2:	e055      	b.n	8005a80 <_printf_i+0x13c>
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	1d19      	adds	r1, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6011      	str	r1, [r2, #0]
 80059dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e4:	2301      	movs	r3, #1
 80059e6:	e08c      	b.n	8005b02 <_printf_i+0x1be>
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6011      	str	r1, [r2, #0]
 80059ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059f0:	bf18      	it	ne
 80059f2:	b21b      	sxthne	r3, r3
 80059f4:	e7cf      	b.n	8005996 <_printf_i+0x52>
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	1d18      	adds	r0, r3, #4
 80059fc:	6010      	str	r0, [r2, #0]
 80059fe:	0628      	lsls	r0, r5, #24
 8005a00:	d501      	bpl.n	8005a06 <_printf_i+0xc2>
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <_printf_i+0xc8>
 8005a06:	0668      	lsls	r0, r5, #25
 8005a08:	d5fb      	bpl.n	8005a02 <_printf_i+0xbe>
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	4854      	ldr	r0, [pc, #336]	; (8005b60 <_printf_i+0x21c>)
 8005a0e:	296f      	cmp	r1, #111	; 0x6f
 8005a10:	bf14      	ite	ne
 8005a12:	220a      	movne	r2, #10
 8005a14:	2208      	moveq	r2, #8
 8005a16:	2100      	movs	r1, #0
 8005a18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a1c:	6865      	ldr	r5, [r4, #4]
 8005a1e:	60a5      	str	r5, [r4, #8]
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	f2c0 8095 	blt.w	8005b50 <_printf_i+0x20c>
 8005a26:	6821      	ldr	r1, [r4, #0]
 8005a28:	f021 0104 	bic.w	r1, r1, #4
 8005a2c:	6021      	str	r1, [r4, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d13d      	bne.n	8005aae <_printf_i+0x16a>
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	f040 808e 	bne.w	8005b54 <_printf_i+0x210>
 8005a38:	4665      	mov	r5, ip
 8005a3a:	2a08      	cmp	r2, #8
 8005a3c:	d10b      	bne.n	8005a56 <_printf_i+0x112>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07db      	lsls	r3, r3, #31
 8005a42:	d508      	bpl.n	8005a56 <_printf_i+0x112>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	6862      	ldr	r2, [r4, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	bfde      	ittt	le
 8005a4c:	2330      	movle	r3, #48	; 0x30
 8005a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a56:	ebac 0305 	sub.w	r3, ip, r5
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	f8cd 8000 	str.w	r8, [sp]
 8005a60:	463b      	mov	r3, r7
 8005a62:	aa03      	add	r2, sp, #12
 8005a64:	4621      	mov	r1, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff fef6 	bl	8005858 <_printf_common>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d14d      	bne.n	8005b0c <_printf_i+0x1c8>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	b005      	add	sp, #20
 8005a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	4839      	ldr	r0, [pc, #228]	; (8005b60 <_printf_i+0x21c>)
 8005a7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a80:	6813      	ldr	r3, [r2, #0]
 8005a82:	6821      	ldr	r1, [r4, #0]
 8005a84:	1d1d      	adds	r5, r3, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6015      	str	r5, [r2, #0]
 8005a8a:	060a      	lsls	r2, r1, #24
 8005a8c:	d50b      	bpl.n	8005aa6 <_printf_i+0x162>
 8005a8e:	07ca      	lsls	r2, r1, #31
 8005a90:	bf44      	itt	mi
 8005a92:	f041 0120 	orrmi.w	r1, r1, #32
 8005a96:	6021      	strmi	r1, [r4, #0]
 8005a98:	b91b      	cbnz	r3, 8005aa2 <_printf_i+0x15e>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	f022 0220 	bic.w	r2, r2, #32
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	e7b7      	b.n	8005a16 <_printf_i+0xd2>
 8005aa6:	064d      	lsls	r5, r1, #25
 8005aa8:	bf48      	it	mi
 8005aaa:	b29b      	uxthmi	r3, r3
 8005aac:	e7ef      	b.n	8005a8e <_printf_i+0x14a>
 8005aae:	4665      	mov	r5, ip
 8005ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ab4:	fb02 3311 	mls	r3, r2, r1, r3
 8005ab8:	5cc3      	ldrb	r3, [r0, r3]
 8005aba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005abe:	460b      	mov	r3, r1
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d1f5      	bne.n	8005ab0 <_printf_i+0x16c>
 8005ac4:	e7b9      	b.n	8005a3a <_printf_i+0xf6>
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	6961      	ldr	r1, [r4, #20]
 8005acc:	1d18      	adds	r0, r3, #4
 8005ace:	6010      	str	r0, [r2, #0]
 8005ad0:	0628      	lsls	r0, r5, #24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	d501      	bpl.n	8005ada <_printf_i+0x196>
 8005ad6:	6019      	str	r1, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <_printf_i+0x19c>
 8005ada:	066a      	lsls	r2, r5, #25
 8005adc:	d5fb      	bpl.n	8005ad6 <_printf_i+0x192>
 8005ade:	8019      	strh	r1, [r3, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	4665      	mov	r5, ip
 8005ae6:	e7b9      	b.n	8005a5c <_printf_i+0x118>
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	1d19      	adds	r1, r3, #4
 8005aec:	6011      	str	r1, [r2, #0]
 8005aee:	681d      	ldr	r5, [r3, #0]
 8005af0:	6862      	ldr	r2, [r4, #4]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4628      	mov	r0, r5
 8005af6:	f7fa fb7b 	bl	80001f0 <memchr>
 8005afa:	b108      	cbz	r0, 8005b00 <_printf_i+0x1bc>
 8005afc:	1b40      	subs	r0, r0, r5
 8005afe:	6060      	str	r0, [r4, #4]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0a:	e7a7      	b.n	8005a5c <_printf_i+0x118>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4639      	mov	r1, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0aa      	beq.n	8005a70 <_printf_i+0x12c>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	d413      	bmi.n	8005b48 <_printf_i+0x204>
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bfb8      	it	lt
 8005b28:	4618      	movlt	r0, r3
 8005b2a:	e7a3      	b.n	8005a74 <_printf_i+0x130>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	464a      	mov	r2, r9
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d09a      	beq.n	8005a70 <_printf_i+0x12c>
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	9a03      	ldr	r2, [sp, #12]
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dcf2      	bgt.n	8005b2c <_printf_i+0x1e8>
 8005b46:	e7eb      	b.n	8005b20 <_printf_i+0x1dc>
 8005b48:	2500      	movs	r5, #0
 8005b4a:	f104 0919 	add.w	r9, r4, #25
 8005b4e:	e7f5      	b.n	8005b3c <_printf_i+0x1f8>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ac      	bne.n	8005aae <_printf_i+0x16a>
 8005b54:	7803      	ldrb	r3, [r0, #0]
 8005b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b5e:	e76c      	b.n	8005a3a <_printf_i+0xf6>
 8005b60:	08005eb5 	.word	0x08005eb5
 8005b64:	08005ec6 	.word	0x08005ec6

08005b68 <memcpy>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	1e43      	subs	r3, r0, #1
 8005b6c:	440a      	add	r2, r1
 8005b6e:	4291      	cmp	r1, r2
 8005b70:	d100      	bne.n	8005b74 <memcpy+0xc>
 8005b72:	bd10      	pop	{r4, pc}
 8005b74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b7c:	e7f7      	b.n	8005b6e <memcpy+0x6>

08005b7e <memmove>:
 8005b7e:	4288      	cmp	r0, r1
 8005b80:	b510      	push	{r4, lr}
 8005b82:	eb01 0302 	add.w	r3, r1, r2
 8005b86:	d807      	bhi.n	8005b98 <memmove+0x1a>
 8005b88:	1e42      	subs	r2, r0, #1
 8005b8a:	4299      	cmp	r1, r3
 8005b8c:	d00a      	beq.n	8005ba4 <memmove+0x26>
 8005b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b96:	e7f8      	b.n	8005b8a <memmove+0xc>
 8005b98:	4283      	cmp	r3, r0
 8005b9a:	d9f5      	bls.n	8005b88 <memmove+0xa>
 8005b9c:	1881      	adds	r1, r0, r2
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	42d3      	cmn	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <memmove+0x28>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005baa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005bae:	e7f7      	b.n	8005ba0 <memmove+0x22>

08005bb0 <_free_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d045      	beq.n	8005c44 <_free_r+0x94>
 8005bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bbc:	1f0c      	subs	r4, r1, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfb8      	it	lt
 8005bc2:	18e4      	addlt	r4, r4, r3
 8005bc4:	f000 f8d2 	bl	8005d6c <__malloc_lock>
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <_free_r+0x98>)
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	4610      	mov	r0, r2
 8005bce:	b933      	cbnz	r3, 8005bde <_free_r+0x2e>
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	6014      	str	r4, [r2, #0]
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bda:	f000 b8c8 	b.w	8005d6e <__malloc_unlock>
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	d90c      	bls.n	8005bfc <_free_r+0x4c>
 8005be2:	6821      	ldr	r1, [r4, #0]
 8005be4:	1862      	adds	r2, r4, r1
 8005be6:	4293      	cmp	r3, r2
 8005be8:	bf04      	itt	eq
 8005bea:	681a      	ldreq	r2, [r3, #0]
 8005bec:	685b      	ldreq	r3, [r3, #4]
 8005bee:	6063      	str	r3, [r4, #4]
 8005bf0:	bf04      	itt	eq
 8005bf2:	1852      	addeq	r2, r2, r1
 8005bf4:	6022      	streq	r2, [r4, #0]
 8005bf6:	6004      	str	r4, [r0, #0]
 8005bf8:	e7ec      	b.n	8005bd4 <_free_r+0x24>
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	b10a      	cbz	r2, 8005c04 <_free_r+0x54>
 8005c00:	42a2      	cmp	r2, r4
 8005c02:	d9fa      	bls.n	8005bfa <_free_r+0x4a>
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	1858      	adds	r0, r3, r1
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d10b      	bne.n	8005c24 <_free_r+0x74>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	4401      	add	r1, r0
 8005c10:	1858      	adds	r0, r3, r1
 8005c12:	4282      	cmp	r2, r0
 8005c14:	6019      	str	r1, [r3, #0]
 8005c16:	d1dd      	bne.n	8005bd4 <_free_r+0x24>
 8005c18:	6810      	ldr	r0, [r2, #0]
 8005c1a:	6852      	ldr	r2, [r2, #4]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	4401      	add	r1, r0
 8005c20:	6019      	str	r1, [r3, #0]
 8005c22:	e7d7      	b.n	8005bd4 <_free_r+0x24>
 8005c24:	d902      	bls.n	8005c2c <_free_r+0x7c>
 8005c26:	230c      	movs	r3, #12
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	e7d3      	b.n	8005bd4 <_free_r+0x24>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	1821      	adds	r1, r4, r0
 8005c30:	428a      	cmp	r2, r1
 8005c32:	bf04      	itt	eq
 8005c34:	6811      	ldreq	r1, [r2, #0]
 8005c36:	6852      	ldreq	r2, [r2, #4]
 8005c38:	6062      	str	r2, [r4, #4]
 8005c3a:	bf04      	itt	eq
 8005c3c:	1809      	addeq	r1, r1, r0
 8005c3e:	6021      	streq	r1, [r4, #0]
 8005c40:	605c      	str	r4, [r3, #4]
 8005c42:	e7c7      	b.n	8005bd4 <_free_r+0x24>
 8005c44:	bd38      	pop	{r3, r4, r5, pc}
 8005c46:	bf00      	nop
 8005c48:	20000110 	.word	0x20000110

08005c4c <_malloc_r>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	1ccd      	adds	r5, r1, #3
 8005c50:	f025 0503 	bic.w	r5, r5, #3
 8005c54:	3508      	adds	r5, #8
 8005c56:	2d0c      	cmp	r5, #12
 8005c58:	bf38      	it	cc
 8005c5a:	250c      	movcc	r5, #12
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	4606      	mov	r6, r0
 8005c60:	db01      	blt.n	8005c66 <_malloc_r+0x1a>
 8005c62:	42a9      	cmp	r1, r5
 8005c64:	d903      	bls.n	8005c6e <_malloc_r+0x22>
 8005c66:	230c      	movs	r3, #12
 8005c68:	6033      	str	r3, [r6, #0]
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	f000 f87d 	bl	8005d6c <__malloc_lock>
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <_malloc_r+0xac>)
 8005c74:	6814      	ldr	r4, [r2, #0]
 8005c76:	4621      	mov	r1, r4
 8005c78:	b991      	cbnz	r1, 8005ca0 <_malloc_r+0x54>
 8005c7a:	4c20      	ldr	r4, [pc, #128]	; (8005cfc <_malloc_r+0xb0>)
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	b91b      	cbnz	r3, 8005c88 <_malloc_r+0x3c>
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f863 	bl	8005d4c <_sbrk_r>
 8005c86:	6020      	str	r0, [r4, #0]
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 f85e 	bl	8005d4c <_sbrk_r>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d124      	bne.n	8005cde <_malloc_r+0x92>
 8005c94:	230c      	movs	r3, #12
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f868 	bl	8005d6e <__malloc_unlock>
 8005c9e:	e7e4      	b.n	8005c6a <_malloc_r+0x1e>
 8005ca0:	680b      	ldr	r3, [r1, #0]
 8005ca2:	1b5b      	subs	r3, r3, r5
 8005ca4:	d418      	bmi.n	8005cd8 <_malloc_r+0x8c>
 8005ca6:	2b0b      	cmp	r3, #11
 8005ca8:	d90f      	bls.n	8005cca <_malloc_r+0x7e>
 8005caa:	600b      	str	r3, [r1, #0]
 8005cac:	50cd      	str	r5, [r1, r3]
 8005cae:	18cc      	adds	r4, r1, r3
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 f85c 	bl	8005d6e <__malloc_unlock>
 8005cb6:	f104 000b 	add.w	r0, r4, #11
 8005cba:	1d23      	adds	r3, r4, #4
 8005cbc:	f020 0007 	bic.w	r0, r0, #7
 8005cc0:	1ac3      	subs	r3, r0, r3
 8005cc2:	d0d3      	beq.n	8005c6c <_malloc_r+0x20>
 8005cc4:	425a      	negs	r2, r3
 8005cc6:	50e2      	str	r2, [r4, r3]
 8005cc8:	e7d0      	b.n	8005c6c <_malloc_r+0x20>
 8005cca:	428c      	cmp	r4, r1
 8005ccc:	684b      	ldr	r3, [r1, #4]
 8005cce:	bf16      	itet	ne
 8005cd0:	6063      	strne	r3, [r4, #4]
 8005cd2:	6013      	streq	r3, [r2, #0]
 8005cd4:	460c      	movne	r4, r1
 8005cd6:	e7eb      	b.n	8005cb0 <_malloc_r+0x64>
 8005cd8:	460c      	mov	r4, r1
 8005cda:	6849      	ldr	r1, [r1, #4]
 8005cdc:	e7cc      	b.n	8005c78 <_malloc_r+0x2c>
 8005cde:	1cc4      	adds	r4, r0, #3
 8005ce0:	f024 0403 	bic.w	r4, r4, #3
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d005      	beq.n	8005cf4 <_malloc_r+0xa8>
 8005ce8:	1a21      	subs	r1, r4, r0
 8005cea:	4630      	mov	r0, r6
 8005cec:	f000 f82e 	bl	8005d4c <_sbrk_r>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d0cf      	beq.n	8005c94 <_malloc_r+0x48>
 8005cf4:	6025      	str	r5, [r4, #0]
 8005cf6:	e7db      	b.n	8005cb0 <_malloc_r+0x64>
 8005cf8:	20000110 	.word	0x20000110
 8005cfc:	20000114 	.word	0x20000114

08005d00 <_realloc_r>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	4607      	mov	r7, r0
 8005d04:	4614      	mov	r4, r2
 8005d06:	460e      	mov	r6, r1
 8005d08:	b921      	cbnz	r1, 8005d14 <_realloc_r+0x14>
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d10:	f7ff bf9c 	b.w	8005c4c <_malloc_r>
 8005d14:	b922      	cbnz	r2, 8005d20 <_realloc_r+0x20>
 8005d16:	f7ff ff4b 	bl	8005bb0 <_free_r>
 8005d1a:	4625      	mov	r5, r4
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d20:	f000 f826 	bl	8005d70 <_malloc_usable_size_r>
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d20f      	bcs.n	8005d48 <_realloc_r+0x48>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f7ff ff8e 	bl	8005c4c <_malloc_r>
 8005d30:	4605      	mov	r5, r0
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d0f2      	beq.n	8005d1c <_realloc_r+0x1c>
 8005d36:	4631      	mov	r1, r6
 8005d38:	4622      	mov	r2, r4
 8005d3a:	f7ff ff15 	bl	8005b68 <memcpy>
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4638      	mov	r0, r7
 8005d42:	f7ff ff35 	bl	8005bb0 <_free_r>
 8005d46:	e7e9      	b.n	8005d1c <_realloc_r+0x1c>
 8005d48:	4635      	mov	r5, r6
 8005d4a:	e7e7      	b.n	8005d1c <_realloc_r+0x1c>

08005d4c <_sbrk_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4c06      	ldr	r4, [pc, #24]	; (8005d68 <_sbrk_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4605      	mov	r5, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	f7fb fd8e 	bl	8001878 <_sbrk>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_sbrk_r+0x1a>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_sbrk_r+0x1a>
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20000250 	.word	0x20000250

08005d6c <__malloc_lock>:
 8005d6c:	4770      	bx	lr

08005d6e <__malloc_unlock>:
 8005d6e:	4770      	bx	lr

08005d70 <_malloc_usable_size_r>:
 8005d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d74:	1f18      	subs	r0, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfbc      	itt	lt
 8005d7a:	580b      	ldrlt	r3, [r1, r0]
 8005d7c:	18c0      	addlt	r0, r0, r3
 8005d7e:	4770      	bx	lr

08005d80 <_init>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr

08005d8c <_fini>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr
