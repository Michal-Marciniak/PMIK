
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b32c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b4d0  0800b4d0  0001b4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b970  0800b970  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b978  0800b978  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800b980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000260  0800bbe0  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800bbe0  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018189  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344c  00000000  00000000  00038419  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003cc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001979d  00000000  00000000  0003de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000124a2  00000000  00000000  000575b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000957c5  00000000  00000000  00069a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff21c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  000ff298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4b4 	.word	0x0800b4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0800b4b4 	.word	0x0800b4b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <rtc_set_time>:
uint8_t uart_rx_data;
/* UART */


void rtc_set_time ()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	get_Time();
 8000f9c:	f002 fa42 	bl	8003424 <get_Time>

	hour = time.hour;
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <rtc_set_time+0x1d4>)
 8000fa2:	789a      	ldrb	r2, [r3, #2]
 8000fa4:	4b72      	ldr	r3, [pc, #456]	; (8001170 <rtc_set_time+0x1d8>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	min = time.minutes;
 8000fa8:	4b70      	ldr	r3, [pc, #448]	; (800116c <rtc_set_time+0x1d4>)
 8000faa:	785a      	ldrb	r2, [r3, #1]
 8000fac:	4b71      	ldr	r3, [pc, #452]	; (8001174 <rtc_set_time+0x1dc>)
 8000fae:	701a      	strb	r2, [r3, #0]
	sec = time.seconds;
 8000fb0:	4b6e      	ldr	r3, [pc, #440]	; (800116c <rtc_set_time+0x1d4>)
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	4b70      	ldr	r3, [pc, #448]	; (8001178 <rtc_set_time+0x1e0>)
 8000fb6:	701a      	strb	r2, [r3, #0]

	day = time.dayofmonth;
 8000fb8:	4b6c      	ldr	r3, [pc, #432]	; (800116c <rtc_set_time+0x1d4>)
 8000fba:	791a      	ldrb	r2, [r3, #4]
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	; (800117c <rtc_set_time+0x1e4>)
 8000fbe:	701a      	strb	r2, [r3, #0]
	year = time.year;
 8000fc0:	4b6a      	ldr	r3, [pc, #424]	; (800116c <rtc_set_time+0x1d4>)
 8000fc2:	799a      	ldrb	r2, [r3, #6]
 8000fc4:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <rtc_set_time+0x1e8>)
 8000fc6:	701a      	strb	r2, [r3, #0]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <rtc_set_time+0x1d8>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 f98d 	bl	80032ec <decToBcd>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <rtc_set_time+0x1ec>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = decToBcd(min);
 8000fda:	4b66      	ldr	r3, [pc, #408]	; (8001174 <rtc_set_time+0x1dc>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 f984 	bl	80032ec <decToBcd>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b66      	ldr	r3, [pc, #408]	; (8001184 <rtc_set_time+0x1ec>)
 8000fea:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = decToBcd(sec);
 8000fec:	4b62      	ldr	r3, [pc, #392]	; (8001178 <rtc_set_time+0x1e0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f97b 	bl	80032ec <decToBcd>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <rtc_set_time+0x1ec>)
 8000ffc:	709a      	strb	r2, [r3, #2]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffe:	4b61      	ldr	r3, [pc, #388]	; (8001184 <rtc_set_time+0x1ec>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001004:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <rtc_set_time+0x1ec>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800100a:	2201      	movs	r2, #1
 800100c:	495d      	ldr	r1, [pc, #372]	; (8001184 <rtc_set_time+0x1ec>)
 800100e:	485e      	ldr	r0, [pc, #376]	; (8001188 <rtc_set_time+0x1f0>)
 8001010:	f004 fdf7 	bl	8005c02 <HAL_RTC_SetTime>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <rtc_set_time+0x86>
	{
	  Error_Handler();
 800101a:	f001 fc3f 	bl	800289c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <rtc_set_time+0x1d4>)
 8001020:	78db      	ldrb	r3, [r3, #3]
 8001022:	3b01      	subs	r3, #1
 8001024:	2b06      	cmp	r3, #6
 8001026:	d82d      	bhi.n	8001084 <rtc_set_time+0xec>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <rtc_set_time+0x98>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	0800104d 	.word	0x0800104d
 8001034:	08001055 	.word	0x08001055
 8001038:	0800105d 	.word	0x0800105d
 800103c:	08001065 	.word	0x08001065
 8001040:	0800106d 	.word	0x0800106d
 8001044:	08001075 	.word	0x08001075
 8001048:	0800107d 	.word	0x0800107d

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <rtc_set_time+0x1f4>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
		break;
 8001052:	e017      	b.n	8001084 <rtc_set_time+0xec>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001054:	4b4d      	ldr	r3, [pc, #308]	; (800118c <rtc_set_time+0x1f4>)
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
		break;
 800105a:	e013      	b.n	8001084 <rtc_set_time+0xec>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <rtc_set_time+0x1f4>)
 800105e:	2203      	movs	r2, #3
 8001060:	701a      	strb	r2, [r3, #0]
		break;
 8001062:	e00f      	b.n	8001084 <rtc_set_time+0xec>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001064:	4b49      	ldr	r3, [pc, #292]	; (800118c <rtc_set_time+0x1f4>)
 8001066:	2204      	movs	r2, #4
 8001068:	701a      	strb	r2, [r3, #0]
		break;
 800106a:	e00b      	b.n	8001084 <rtc_set_time+0xec>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <rtc_set_time+0x1f4>)
 800106e:	2205      	movs	r2, #5
 8001070:	701a      	strb	r2, [r3, #0]
		break;
 8001072:	e007      	b.n	8001084 <rtc_set_time+0xec>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <rtc_set_time+0x1f4>)
 8001076:	2206      	movs	r2, #6
 8001078:	701a      	strb	r2, [r3, #0]
		break;
 800107a:	e003      	b.n	8001084 <rtc_set_time+0xec>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <rtc_set_time+0x1f4>)
 800107e:	2207      	movs	r2, #7
 8001080:	701a      	strb	r2, [r3, #0]
		break;
 8001082:	bf00      	nop

	}


	switch( (int) time.month) {
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <rtc_set_time+0x1d4>)
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	3b01      	subs	r3, #1
 800108a:	2b0b      	cmp	r3, #11
 800108c:	d84a      	bhi.n	8001124 <rtc_set_time+0x18c>
 800108e:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <rtc_set_time+0xfc>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010cd 	.word	0x080010cd
 800109c:	080010d5 	.word	0x080010d5
 80010a0:	080010dd 	.word	0x080010dd
 80010a4:	080010e5 	.word	0x080010e5
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	080010f5 	.word	0x080010f5
 80010b0:	080010fd 	.word	0x080010fd
 80010b4:	08001105 	.word	0x08001105
 80010b8:	0800110d 	.word	0x0800110d
 80010bc:	08001115 	.word	0x08001115
 80010c0:	0800111d 	.word	0x0800111d

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <rtc_set_time+0x1f4>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	705a      	strb	r2, [r3, #1]
		  break;
 80010ca:	e02b      	b.n	8001124 <rtc_set_time+0x18c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <rtc_set_time+0x1f4>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	705a      	strb	r2, [r3, #1]
		  break;
 80010d2:	e027      	b.n	8001124 <rtc_set_time+0x18c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <rtc_set_time+0x1f4>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	705a      	strb	r2, [r3, #1]
		  break;
 80010da:	e023      	b.n	8001124 <rtc_set_time+0x18c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <rtc_set_time+0x1f4>)
 80010de:	2204      	movs	r2, #4
 80010e0:	705a      	strb	r2, [r3, #1]
		  break;
 80010e2:	e01f      	b.n	8001124 <rtc_set_time+0x18c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <rtc_set_time+0x1f4>)
 80010e6:	2205      	movs	r2, #5
 80010e8:	705a      	strb	r2, [r3, #1]
		  break;
 80010ea:	e01b      	b.n	8001124 <rtc_set_time+0x18c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <rtc_set_time+0x1f4>)
 80010ee:	2206      	movs	r2, #6
 80010f0:	705a      	strb	r2, [r3, #1]
		  break;
 80010f2:	e017      	b.n	8001124 <rtc_set_time+0x18c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <rtc_set_time+0x1f4>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	705a      	strb	r2, [r3, #1]
		  break;
 80010fa:	e013      	b.n	8001124 <rtc_set_time+0x18c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <rtc_set_time+0x1f4>)
 80010fe:	2208      	movs	r2, #8
 8001100:	705a      	strb	r2, [r3, #1]
		  break;
 8001102:	e00f      	b.n	8001124 <rtc_set_time+0x18c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <rtc_set_time+0x1f4>)
 8001106:	2209      	movs	r2, #9
 8001108:	705a      	strb	r2, [r3, #1]
		  break;
 800110a:	e00b      	b.n	8001124 <rtc_set_time+0x18c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <rtc_set_time+0x1f4>)
 800110e:	2210      	movs	r2, #16
 8001110:	705a      	strb	r2, [r3, #1]
		  break;
 8001112:	e007      	b.n	8001124 <rtc_set_time+0x18c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <rtc_set_time+0x1f4>)
 8001116:	2211      	movs	r2, #17
 8001118:	705a      	strb	r2, [r3, #1]
		  break;
 800111a:	e003      	b.n	8001124 <rtc_set_time+0x18c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <rtc_set_time+0x1f4>)
 800111e:	2212      	movs	r2, #18
 8001120:	705a      	strb	r2, [r3, #1]
		  break;
 8001122:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <rtc_set_time+0x1e4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f8df 	bl	80032ec <decToBcd>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <rtc_set_time+0x1f4>)
 8001134:	709a      	strb	r2, [r3, #2]
	sDate.Year = decToBcd(year);
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <rtc_set_time+0x1e8>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f8d6 	bl	80032ec <decToBcd>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <rtc_set_time+0x1f4>)
 8001146:	70da      	strb	r2, [r3, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001148:	2201      	movs	r2, #1
 800114a:	4910      	ldr	r1, [pc, #64]	; (800118c <rtc_set_time+0x1f4>)
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <rtc_set_time+0x1f0>)
 800114e:	f004 fe15 	bl	8005d7c <HAL_RTC_SetDate>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <rtc_set_time+0x1c4>
	{
		Error_Handler();
 8001158:	f001 fba0 	bl	800289c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800115c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001160:	2101      	movs	r1, #1
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <rtc_set_time+0x1f0>)
 8001164:	f005 f9e8 	bl	8006538 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000032c 	.word	0x2000032c
 8001170:	20000328 	.word	0x20000328
 8001174:	20000333 	.word	0x20000333
 8001178:	20000335 	.word	0x20000335
 800117c:	20000336 	.word	0x20000336
 8001180:	20000334 	.word	0x20000334
 8001184:	200002d4 	.word	0x200002d4
 8001188:	20000404 	.word	0x20000404
 800118c:	20000324 	.word	0x20000324

08001190 <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość dni do alarmu, godzinę, minutę oraz sekundę alarmu
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b085      	sub	sp, #20
 8001194:	af02      	add	r7, sp, #8
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	4603      	mov	r3, r0
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	460b      	mov	r3, r1
 80011a8:	717b      	strb	r3, [r7, #5]
 80011aa:	4613      	mov	r3, r2
 80011ac:	713b      	strb	r3, [r7, #4]
	get_Time();
 80011ae:	f002 f939 	bl	8003424 <get_Time>

	if( (day >= 0) && (hour >= 0) && (hour < 24) && (min > 0) && (min < 60) && (sec >= 0) && (sec < 60) ) {
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	2b17      	cmp	r3, #23
 80011b6:	f200 8202 	bhi.w	80015be <rtc_set_alarm+0x42e>
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 81fe 	beq.w	80015be <rtc_set_alarm+0x42e>
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	2b3b      	cmp	r3, #59	; 0x3b
 80011c6:	f200 81fa 	bhi.w	80015be <rtc_set_alarm+0x42e>
 80011ca:	793b      	ldrb	r3, [r7, #4]
 80011cc:	2b3b      	cmp	r3, #59	; 0x3b
 80011ce:	f200 81f6 	bhi.w	80015be <rtc_set_alarm+0x42e>

		if(hour > time.hour) {
 80011d2:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <rtc_set_alarm+0x268>)
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	79ba      	ldrb	r2, [r7, #6]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d97f      	bls.n	80012dc <rtc_set_alarm+0x14c>

			alarm_day = (time.dayofmonth + day) % 31;
 80011dc:	4b86      	ldr	r3, [pc, #536]	; (80013f8 <rtc_set_alarm+0x268>)
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	461a      	mov	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	441a      	add	r2, r3
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <rtc_set_alarm+0x26c>)
 80011e8:	fb83 1302 	smull	r1, r3, r3, r2
 80011ec:	4413      	add	r3, r2
 80011ee:	1119      	asrs	r1, r3, #4
 80011f0:	17d3      	asrs	r3, r2, #31
 80011f2:	1ac9      	subs	r1, r1, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	015b      	lsls	r3, r3, #5
 80011f8:	1a5b      	subs	r3, r3, r1
 80011fa:	1ad1      	subs	r1, r2, r3
 80011fc:	b2ca      	uxtb	r2, r1
 80011fe:	4b80      	ldr	r3, [pc, #512]	; (8001400 <rtc_set_alarm+0x270>)
 8001200:	701a      	strb	r2, [r3, #0]
			alarm_hour = hour;
 8001202:	4a80      	ldr	r2, [pc, #512]	; (8001404 <rtc_set_alarm+0x274>)
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	7013      	strb	r3, [r2, #0]
			alarm_min = min;
 8001208:	4a7f      	ldr	r2, [pc, #508]	; (8001408 <rtc_set_alarm+0x278>)
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	7013      	strb	r3, [r2, #0]
			alarm_sec = sec;
 800120e:	4a7f      	ldr	r2, [pc, #508]	; (800140c <rtc_set_alarm+0x27c>)
 8001210:	793b      	ldrb	r3, [r7, #4]
 8001212:	7013      	strb	r3, [r2, #0]

			/**Enable the Alarm A*/
			sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 8001214:	4b7b      	ldr	r3, [pc, #492]	; (8001404 <rtc_set_alarm+0x274>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 f867 	bl	80032ec <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <rtc_set_alarm+0x280>)
 8001224:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <rtc_set_alarm+0x278>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f85e 	bl	80032ec <decToBcd>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b76      	ldr	r3, [pc, #472]	; (8001410 <rtc_set_alarm+0x280>)
 8001236:	705a      	strb	r2, [r3, #1]
			sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 8001238:	4b74      	ldr	r3, [pc, #464]	; (800140c <rtc_set_alarm+0x27c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f855 	bl	80032ec <decToBcd>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <rtc_set_alarm+0x280>)
 8001248:	709a      	strb	r2, [r3, #2]
			sAlarm.AlarmTime.SubSeconds = 0x0;
 800124a:	4b71      	ldr	r3, [pc, #452]	; (8001410 <rtc_set_alarm+0x280>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
			sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <rtc_set_alarm+0x280>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
			sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <rtc_set_alarm+0x280>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
			sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800125c:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <rtc_set_alarm+0x280>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
			sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <rtc_set_alarm+0x280>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
			sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <rtc_set_alarm+0x280>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
			sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 800126e:	4b64      	ldr	r3, [pc, #400]	; (8001400 <rtc_set_alarm+0x270>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 f83a 	bl	80032ec <decToBcd>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b64      	ldr	r3, [pc, #400]	; (8001410 <rtc_set_alarm+0x280>)
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
			sAlarm.Alarm = RTC_ALARM_A;
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <rtc_set_alarm+0x280>)
 8001284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
			if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800128a:	2201      	movs	r2, #1
 800128c:	4960      	ldr	r1, [pc, #384]	; (8001410 <rtc_set_alarm+0x280>)
 800128e:	4861      	ldr	r0, [pc, #388]	; (8001414 <rtc_set_alarm+0x284>)
 8001290:	f004 fe1c 	bl	8005ecc <HAL_RTC_SetAlarm_IT>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <rtc_set_alarm+0x10e>
			{
				Error_Handler();
 800129a:	f001 faff 	bl	800289c <Error_Handler>
			}

			HAL_NVIC_SetPriority(EXTI_LINE_17, 0, 1);	// alarm A ma drugi najwyższy priorytet w układzie
 800129e:	2201      	movs	r2, #1
 80012a0:	2100      	movs	r1, #0
 80012a2:	2011      	movs	r0, #17
 80012a4:	f002 fb41 	bl	800392a <HAL_NVIC_SetPriority>

			lcd_clear();
 80012a8:	f000 ffa6 	bl	80021f8 <lcd_clear>
			sprintf(alarm_details_msg, "%02d:%02d:%02d", hour, min, sec);
 80012ac:	79ba      	ldrb	r2, [r7, #6]
 80012ae:	7979      	ldrb	r1, [r7, #5]
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	460b      	mov	r3, r1
 80012b6:	4958      	ldr	r1, [pc, #352]	; (8001418 <rtc_set_alarm+0x288>)
 80012b8:	4858      	ldr	r0, [pc, #352]	; (800141c <rtc_set_alarm+0x28c>)
 80012ba:	f007 fa07 	bl	80086cc <siprintf>
			lcd_send_string("Alarm na godz.:");
 80012be:	4858      	ldr	r0, [pc, #352]	; (8001420 <rtc_set_alarm+0x290>)
 80012c0:	f001 f8c4 	bl	800244c <lcd_send_string>
			lcd_second_line();
 80012c4:	f000 fffc 	bl	80022c0 <lcd_second_line>
			lcd_send_string(alarm_details_msg);
 80012c8:	4854      	ldr	r0, [pc, #336]	; (800141c <rtc_set_alarm+0x28c>)
 80012ca:	f001 f8bf 	bl	800244c <lcd_send_string>
			delay(1000);
 80012ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d2:	f002 f8ff 	bl	80034d4 <delay>
			lcd_clear();
 80012d6:	f000 ff8f 	bl	80021f8 <lcd_clear>
		if(hour > time.hour) {
 80012da:	e18f      	b.n	80015fc <rtc_set_alarm+0x46c>

		}
		else if ( (hour == time.hour) ) {
 80012dc:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <rtc_set_alarm+0x268>)
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	79ba      	ldrb	r2, [r7, #6]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	f040 814c 	bne.w	8001580 <rtc_set_alarm+0x3f0>

			if( (min > time.minutes) ) {
 80012e8:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <rtc_set_alarm+0x268>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	797a      	ldrb	r2, [r7, #5]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	f240 809a 	bls.w	8001428 <rtc_set_alarm+0x298>

				alarm_day = time.dayofmonth + (day % 7);
 80012f4:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <rtc_set_alarm+0x268>)
 80012f6:	7918      	ldrb	r0, [r3, #4]
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <rtc_set_alarm+0x294>)
 80012fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001300:	1ad1      	subs	r1, r2, r3
 8001302:	0849      	lsrs	r1, r1, #1
 8001304:	440b      	add	r3, r1
 8001306:	0899      	lsrs	r1, r3, #2
 8001308:	460b      	mov	r3, r1
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4403      	add	r3, r0
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <rtc_set_alarm+0x270>)
 8001318:	701a      	strb	r2, [r3, #0]
				alarm_hour = hour;
 800131a:	4a3a      	ldr	r2, [pc, #232]	; (8001404 <rtc_set_alarm+0x274>)
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	7013      	strb	r3, [r2, #0]
				alarm_min = min;
 8001320:	4a39      	ldr	r2, [pc, #228]	; (8001408 <rtc_set_alarm+0x278>)
 8001322:	797b      	ldrb	r3, [r7, #5]
 8001324:	7013      	strb	r3, [r2, #0]
				alarm_sec = sec;
 8001326:	4a39      	ldr	r2, [pc, #228]	; (800140c <rtc_set_alarm+0x27c>)
 8001328:	793b      	ldrb	r3, [r7, #4]
 800132a:	7013      	strb	r3, [r2, #0]

				/**Enable the Alarm A*/
				sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <rtc_set_alarm+0x274>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f001 ffdb 	bl	80032ec <decToBcd>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <rtc_set_alarm+0x280>)
 800133c:	701a      	strb	r2, [r3, #0]
				sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <rtc_set_alarm+0x278>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 ffd2 	bl	80032ec <decToBcd>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <rtc_set_alarm+0x280>)
 800134e:	705a      	strb	r2, [r3, #1]
				sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec - 2);
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <rtc_set_alarm+0x27c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3b02      	subs	r3, #2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 ffc8 	bl	80032ec <decToBcd>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <rtc_set_alarm+0x280>)
 8001362:	709a      	strb	r2, [r3, #2]
				sAlarm.AlarmTime.SubSeconds = 0x0;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <rtc_set_alarm+0x280>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
				sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <rtc_set_alarm+0x280>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
				sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <rtc_set_alarm+0x280>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
				sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <rtc_set_alarm+0x280>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
				sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <rtc_set_alarm+0x280>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
				sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <rtc_set_alarm+0x280>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
				sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <rtc_set_alarm+0x270>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f001 ffad 	bl	80032ec <decToBcd>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <rtc_set_alarm+0x280>)
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
				sAlarm.Alarm = RTC_ALARM_A;
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <rtc_set_alarm+0x280>)
 800139e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
				if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013a4:	2201      	movs	r2, #1
 80013a6:	491a      	ldr	r1, [pc, #104]	; (8001410 <rtc_set_alarm+0x280>)
 80013a8:	481a      	ldr	r0, [pc, #104]	; (8001414 <rtc_set_alarm+0x284>)
 80013aa:	f004 fd8f 	bl	8005ecc <HAL_RTC_SetAlarm_IT>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <rtc_set_alarm+0x228>
				{
					Error_Handler();
 80013b4:	f001 fa72 	bl	800289c <Error_Handler>
				}

				HAL_NVIC_SetPriority(EXTI_LINE_17, 0, 1);	// alarm A ma drugi najwyższy priorytet w układzie
 80013b8:	2201      	movs	r2, #1
 80013ba:	2100      	movs	r1, #0
 80013bc:	2011      	movs	r0, #17
 80013be:	f002 fab4 	bl	800392a <HAL_NVIC_SetPriority>

				lcd_clear();
 80013c2:	f000 ff19 	bl	80021f8 <lcd_clear>
				sprintf(alarm_details_msg, "%02d:%02d:%02d", hour, min, sec);
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	7979      	ldrb	r1, [r7, #5]
 80013ca:	793b      	ldrb	r3, [r7, #4]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	460b      	mov	r3, r1
 80013d0:	4911      	ldr	r1, [pc, #68]	; (8001418 <rtc_set_alarm+0x288>)
 80013d2:	4812      	ldr	r0, [pc, #72]	; (800141c <rtc_set_alarm+0x28c>)
 80013d4:	f007 f97a 	bl	80086cc <siprintf>
				lcd_send_string("Alarm na godz.:");
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <rtc_set_alarm+0x290>)
 80013da:	f001 f837 	bl	800244c <lcd_send_string>
				lcd_second_line();
 80013de:	f000 ff6f 	bl	80022c0 <lcd_second_line>
				lcd_send_string(alarm_details_msg);
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <rtc_set_alarm+0x28c>)
 80013e4:	f001 f832 	bl	800244c <lcd_send_string>
				delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f002 f872 	bl	80034d4 <delay>
				lcd_clear();
 80013f0:	f000 ff02 	bl	80021f8 <lcd_clear>
		if(hour > time.hour) {
 80013f4:	e102      	b.n	80015fc <rtc_set_alarm+0x46c>
 80013f6:	bf00      	nop
 80013f8:	2000032c 	.word	0x2000032c
 80013fc:	84210843 	.word	0x84210843
 8001400:	20000322 	.word	0x20000322
 8001404:	200002d3 	.word	0x200002d3
 8001408:	20000338 	.word	0x20000338
 800140c:	200002d1 	.word	0x200002d1
 8001410:	200002f0 	.word	0x200002f0
 8001414:	20000404 	.word	0x20000404
 8001418:	0800b4d0 	.word	0x0800b4d0
 800141c:	20000318 	.word	0x20000318
 8001420:	0800b4e0 	.word	0x0800b4e0
 8001424:	24924925 	.word	0x24924925
			}
			else if ( (min == time.minutes) ) {
 8001428:	4b77      	ldr	r3, [pc, #476]	; (8001608 <rtc_set_alarm+0x478>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	797a      	ldrb	r2, [r7, #5]
 800142e:	429a      	cmp	r2, r3
 8001430:	f040 80e4 	bne.w	80015fc <rtc_set_alarm+0x46c>

				if( (sec > time.seconds) ) {
 8001434:	4b74      	ldr	r3, [pc, #464]	; (8001608 <rtc_set_alarm+0x478>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	793a      	ldrb	r2, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	f240 8081 	bls.w	8001542 <rtc_set_alarm+0x3b2>

					alarm_day = time.dayofmonth + (day % 7);
 8001440:	4b71      	ldr	r3, [pc, #452]	; (8001608 <rtc_set_alarm+0x478>)
 8001442:	7918      	ldrb	r0, [r3, #4]
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <rtc_set_alarm+0x47c>)
 8001448:	fba3 1302 	umull	r1, r3, r3, r2
 800144c:	1ad1      	subs	r1, r2, r3
 800144e:	0849      	lsrs	r1, r1, #1
 8001450:	440b      	add	r3, r1
 8001452:	0899      	lsrs	r1, r3, #2
 8001454:	460b      	mov	r3, r1
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	1a5b      	subs	r3, r3, r1
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4403      	add	r3, r0
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <rtc_set_alarm+0x480>)
 8001464:	701a      	strb	r2, [r3, #0]
					alarm_hour = hour;
 8001466:	4a6b      	ldr	r2, [pc, #428]	; (8001614 <rtc_set_alarm+0x484>)
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	7013      	strb	r3, [r2, #0]
					alarm_min = min;
 800146c:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <rtc_set_alarm+0x488>)
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	7013      	strb	r3, [r2, #0]
					alarm_sec = sec;
 8001472:	4a6a      	ldr	r2, [pc, #424]	; (800161c <rtc_set_alarm+0x48c>)
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	7013      	strb	r3, [r2, #0]

					/**Enable the Alarm A*/
					sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 8001478:	4b66      	ldr	r3, [pc, #408]	; (8001614 <rtc_set_alarm+0x484>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f001 ff35 	bl	80032ec <decToBcd>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	4b66      	ldr	r3, [pc, #408]	; (8001620 <rtc_set_alarm+0x490>)
 8001488:	701a      	strb	r2, [r3, #0]
					sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <rtc_set_alarm+0x488>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f001 ff2c 	bl	80032ec <decToBcd>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <rtc_set_alarm+0x490>)
 800149a:	705a      	strb	r2, [r3, #1]
					sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec - 2);
 800149c:	4b5f      	ldr	r3, [pc, #380]	; (800161c <rtc_set_alarm+0x48c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	3b02      	subs	r3, #2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 ff22 	bl	80032ec <decToBcd>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <rtc_set_alarm+0x490>)
 80014ae:	709a      	strb	r2, [r3, #2]
					sAlarm.AlarmTime.SubSeconds = 0x0;
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <rtc_set_alarm+0x490>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
					sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014b6:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <rtc_set_alarm+0x490>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
					sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014bc:	4b58      	ldr	r3, [pc, #352]	; (8001620 <rtc_set_alarm+0x490>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
					sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014c2:	4b57      	ldr	r3, [pc, #348]	; (8001620 <rtc_set_alarm+0x490>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
					sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014c8:	4b55      	ldr	r3, [pc, #340]	; (8001620 <rtc_set_alarm+0x490>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
					sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <rtc_set_alarm+0x490>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
					sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80014d4:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <rtc_set_alarm+0x480>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 ff07 	bl	80032ec <decToBcd>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <rtc_set_alarm+0x490>)
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]
					sAlarm.Alarm = RTC_ALARM_A;
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <rtc_set_alarm+0x490>)
 80014ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
					if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014f0:	2201      	movs	r2, #1
 80014f2:	494b      	ldr	r1, [pc, #300]	; (8001620 <rtc_set_alarm+0x490>)
 80014f4:	484b      	ldr	r0, [pc, #300]	; (8001624 <rtc_set_alarm+0x494>)
 80014f6:	f004 fce9 	bl	8005ecc <HAL_RTC_SetAlarm_IT>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <rtc_set_alarm+0x374>
					{
						Error_Handler();
 8001500:	f001 f9cc 	bl	800289c <Error_Handler>
					}

					HAL_NVIC_SetPriority(EXTI_LINE_17, 0, 1);	// alarm A ma drugi najwyższy priorytet w układzie
 8001504:	2201      	movs	r2, #1
 8001506:	2100      	movs	r1, #0
 8001508:	2011      	movs	r0, #17
 800150a:	f002 fa0e 	bl	800392a <HAL_NVIC_SetPriority>

					lcd_clear();
 800150e:	f000 fe73 	bl	80021f8 <lcd_clear>
					sprintf(alarm_details_msg, "%02d:%02d:%02d", hour, min, sec);
 8001512:	79ba      	ldrb	r2, [r7, #6]
 8001514:	7979      	ldrb	r1, [r7, #5]
 8001516:	793b      	ldrb	r3, [r7, #4]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	460b      	mov	r3, r1
 800151c:	4942      	ldr	r1, [pc, #264]	; (8001628 <rtc_set_alarm+0x498>)
 800151e:	4843      	ldr	r0, [pc, #268]	; (800162c <rtc_set_alarm+0x49c>)
 8001520:	f007 f8d4 	bl	80086cc <siprintf>
					lcd_send_string("Alarm na godz.:");
 8001524:	4842      	ldr	r0, [pc, #264]	; (8001630 <rtc_set_alarm+0x4a0>)
 8001526:	f000 ff91 	bl	800244c <lcd_send_string>
					lcd_second_line();
 800152a:	f000 fec9 	bl	80022c0 <lcd_second_line>
					lcd_send_string(alarm_details_msg);
 800152e:	483f      	ldr	r0, [pc, #252]	; (800162c <rtc_set_alarm+0x49c>)
 8001530:	f000 ff8c 	bl	800244c <lcd_send_string>
					delay(1000);
 8001534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001538:	f001 ffcc 	bl	80034d4 <delay>
					lcd_clear();
 800153c:	f000 fe5c 	bl	80021f8 <lcd_clear>
		if(hour > time.hour) {
 8001540:	e05c      	b.n	80015fc <rtc_set_alarm+0x46c>
				}
				else {
					lcd_clear();
 8001542:	f000 fe59 	bl	80021f8 <lcd_clear>
					lcd_set_cursor(0, 1);
 8001546:	2101      	movs	r1, #1
 8001548:	2000      	movs	r0, #0
 800154a:	f000 fe77 	bl	800223c <lcd_set_cursor>
					lcd_send_string("Nieprawid");
 800154e:	4839      	ldr	r0, [pc, #228]	; (8001634 <rtc_set_alarm+0x4a4>)
 8001550:	f000 ff7c 	bl	800244c <lcd_send_string>
					lcd_send_own_char(3);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 ffff 	bl	8002558 <lcd_send_own_char>
					lcd_send_string("owy");
 800155a:	4837      	ldr	r0, [pc, #220]	; (8001638 <rtc_set_alarm+0x4a8>)
 800155c:	f000 ff76 	bl	800244c <lcd_send_string>
					lcd_second_line();
 8001560:	f000 feae 	bl	80022c0 <lcd_second_line>
					lcd_set_cursor(1, 2);
 8001564:	2102      	movs	r1, #2
 8001566:	2001      	movs	r0, #1
 8001568:	f000 fe68 	bl	800223c <lcd_set_cursor>
					lcd_send_string("czas alarmu!");
 800156c:	4833      	ldr	r0, [pc, #204]	; (800163c <rtc_set_alarm+0x4ac>)
 800156e:	f000 ff6d 	bl	800244c <lcd_send_string>
					delay(1000);
 8001572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001576:	f001 ffad 	bl	80034d4 <delay>
					lcd_clear();
 800157a:	f000 fe3d 	bl	80021f8 <lcd_clear>
		if(hour > time.hour) {
 800157e:	e03d      	b.n	80015fc <rtc_set_alarm+0x46c>
			else {

			}
		}
		else {
			lcd_clear();
 8001580:	f000 fe3a 	bl	80021f8 <lcd_clear>
			lcd_set_cursor(0, 1);
 8001584:	2101      	movs	r1, #1
 8001586:	2000      	movs	r0, #0
 8001588:	f000 fe58 	bl	800223c <lcd_set_cursor>
			lcd_send_string("Nieprawid");
 800158c:	4829      	ldr	r0, [pc, #164]	; (8001634 <rtc_set_alarm+0x4a4>)
 800158e:	f000 ff5d 	bl	800244c <lcd_send_string>
			lcd_send_own_char(3);
 8001592:	2003      	movs	r0, #3
 8001594:	f000 ffe0 	bl	8002558 <lcd_send_own_char>
			lcd_send_string("owy");
 8001598:	4827      	ldr	r0, [pc, #156]	; (8001638 <rtc_set_alarm+0x4a8>)
 800159a:	f000 ff57 	bl	800244c <lcd_send_string>
			lcd_second_line();
 800159e:	f000 fe8f 	bl	80022c0 <lcd_second_line>
			lcd_set_cursor(1, 2);
 80015a2:	2102      	movs	r1, #2
 80015a4:	2001      	movs	r0, #1
 80015a6:	f000 fe49 	bl	800223c <lcd_set_cursor>
			lcd_send_string("czas alarmu!");
 80015aa:	4824      	ldr	r0, [pc, #144]	; (800163c <rtc_set_alarm+0x4ac>)
 80015ac:	f000 ff4e 	bl	800244c <lcd_send_string>
			delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b4:	f001 ff8e 	bl	80034d4 <delay>
			lcd_clear();
 80015b8:	f000 fe1e 	bl	80021f8 <lcd_clear>
		if(hour > time.hour) {
 80015bc:	e01e      	b.n	80015fc <rtc_set_alarm+0x46c>
		}

	} else {
		lcd_clear();
 80015be:	f000 fe1b 	bl	80021f8 <lcd_clear>
		lcd_set_cursor(0, 1);
 80015c2:	2101      	movs	r1, #1
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 fe39 	bl	800223c <lcd_set_cursor>
		lcd_send_string("Nieprawid");
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <rtc_set_alarm+0x4a4>)
 80015cc:	f000 ff3e 	bl	800244c <lcd_send_string>
		lcd_send_own_char(3);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 ffc1 	bl	8002558 <lcd_send_own_char>
		lcd_send_string("owy");
 80015d6:	4818      	ldr	r0, [pc, #96]	; (8001638 <rtc_set_alarm+0x4a8>)
 80015d8:	f000 ff38 	bl	800244c <lcd_send_string>
		lcd_second_line();
 80015dc:	f000 fe70 	bl	80022c0 <lcd_second_line>
		lcd_set_cursor(1, 2);
 80015e0:	2102      	movs	r1, #2
 80015e2:	2001      	movs	r0, #1
 80015e4:	f000 fe2a 	bl	800223c <lcd_set_cursor>
		lcd_send_string("czas alarmu!");
 80015e8:	4814      	ldr	r0, [pc, #80]	; (800163c <rtc_set_alarm+0x4ac>)
 80015ea:	f000 ff2f 	bl	800244c <lcd_send_string>
		delay(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f2:	f001 ff6f 	bl	80034d4 <delay>
		lcd_clear();
 80015f6:	f000 fdff 	bl	80021f8 <lcd_clear>


  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 80015fa:	e000      	b.n	80015fe <rtc_set_alarm+0x46e>
		if(hour > time.hour) {
 80015fc:	bf00      	nop
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	2000032c 	.word	0x2000032c
 800160c:	24924925 	.word	0x24924925
 8001610:	20000322 	.word	0x20000322
 8001614:	200002d3 	.word	0x200002d3
 8001618:	20000338 	.word	0x20000338
 800161c:	200002d1 	.word	0x200002d1
 8001620:	200002f0 	.word	0x200002f0
 8001624:	20000404 	.word	0x20000404
 8001628:	0800b4d0 	.word	0x0800b4d0
 800162c:	20000318 	.word	0x20000318
 8001630:	0800b4e0 	.word	0x0800b4e0
 8001634:	0800b4f0 	.word	0x0800b4f0
 8001638:	0800b4fc 	.word	0x0800b4fc
 800163c:	0800b500 	.word	0x0800b500

08001640 <activate_time>:

// Funkcja sygnalizująca, że użytkownik ustawia nową godzinę na zegarku
void activate_time () {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

	if(uart_rx_data == 't' || uart_rx_data == 'T') {
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <activate_time+0x6c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b74      	cmp	r3, #116	; 0x74
 800164a:	d003      	beq.n	8001654 <activate_time+0x14>
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <activate_time+0x6c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b54      	cmp	r3, #84	; 0x54
 8001652:	d10b      	bne.n	800166c <activate_time+0x2c>

		date_activated_flag = 0;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <activate_time+0x70>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <activate_time+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <activate_time+0x78>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		time_activated_flag = 1;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <activate_time+0x7c>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
	}

	if(time_activated_flag) {
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <activate_time+0x7c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <activate_time+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <activate_time+0x78>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <activate_time+0x6c>)
 800167c:	7819      	ldrb	r1, [r3, #0]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <activate_time+0x80>)
 8001680:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <activate_time+0x78>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <activate_time+0x78>)
 800168c:	701a      	strb	r2, [r3, #0]

		if(global_counter == 3) {
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <activate_time+0x78>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d102      	bne.n	800169c <activate_time+0x5c>
			time_set_flag = 1;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <activate_time+0x84>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800169c:	2201      	movs	r2, #1
 800169e:	4903      	ldr	r1, [pc, #12]	; (80016ac <activate_time+0x6c>)
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <activate_time+0x88>)
 80016a2:	f005 fb96 	bl	8006dd2 <HAL_UART_Receive_IT>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000339 	.word	0x20000339
 80016b0:	200002d2 	.word	0x200002d2
 80016b4:	200002d0 	.word	0x200002d0
 80016b8:	2000027c 	.word	0x2000027c
 80016bc:	200002ed 	.word	0x200002ed
 80016c0:	200002e8 	.word	0x200002e8
 80016c4:	200002ef 	.word	0x200002ef
 80016c8:	200004c8 	.word	0x200004c8

080016cc <activate_date>:

// Funkcja sygnalizująca, że użytkownik ustawia nową datę na zegarku
void activate_date () {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'd' || uart_rx_data == 'D') {
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <activate_date+0x6c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d003      	beq.n	80016e0 <activate_date+0x14>
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <activate_date+0x6c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b44      	cmp	r3, #68	; 0x44
 80016de:	d10b      	bne.n	80016f8 <activate_date+0x2c>

		time_activated_flag = 0;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <activate_date+0x70>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <activate_date+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <activate_date+0x78>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 1;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <activate_date+0x7c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
	}

	if(date_activated_flag) {
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <activate_date+0x7c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <activate_date+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <activate_date+0x78>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <activate_date+0x6c>)
 8001708:	7819      	ldrb	r1, [r3, #0]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <activate_date+0x80>)
 800170c:	5499      	strb	r1, [r3, r2]

		++global_counter;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <activate_date+0x78>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <activate_date+0x78>)
 8001718:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <activate_date+0x78>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d102      	bne.n	8001728 <activate_date+0x5c>
			date_set_flag = 1;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <activate_date+0x84>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	4903      	ldr	r1, [pc, #12]	; (8001738 <activate_date+0x6c>)
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <activate_date+0x88>)
 800172e:	f005 fb50 	bl	8006dd2 <HAL_UART_Receive_IT>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000339 	.word	0x20000339
 800173c:	200002ed 	.word	0x200002ed
 8001740:	200002d0 	.word	0x200002d0
 8001744:	2000027c 	.word	0x2000027c
 8001748:	200002d2 	.word	0x200002d2
 800174c:	200002e8 	.word	0x200002e8
 8001750:	200002ee 	.word	0x200002ee
 8001754:	200004c8 	.word	0x200004c8

08001758 <activate_alarm>:

// Funkcja sygnalizująca, że użytkownik ustawia nowy alarm
void activate_alarm () {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'a' || uart_rx_data == 'A') {
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <activate_alarm+0x6c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b61      	cmp	r3, #97	; 0x61
 8001762:	d003      	beq.n	800176c <activate_alarm+0x14>
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <activate_alarm+0x6c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b41      	cmp	r3, #65	; 0x41
 800176a:	d10b      	bne.n	8001784 <activate_alarm+0x2c>

		time_activated_flag = 0;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <activate_alarm+0x70>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 0;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <activate_alarm+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <activate_alarm+0x78>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 1;
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <activate_alarm+0x7c>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <activate_alarm+0x7c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <activate_alarm+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <activate_alarm+0x78>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <activate_alarm+0x6c>)
 8001794:	7819      	ldrb	r1, [r3, #0]
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <activate_alarm+0x80>)
 8001798:	5499      	strb	r1, [r3, r2]

		++global_counter;
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <activate_alarm+0x78>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <activate_alarm+0x78>)
 80017a4:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <activate_alarm+0x78>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d102      	bne.n	80017b4 <activate_alarm+0x5c>
			alarm_set_flag = 1;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <activate_alarm+0x84>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80017b4:	2201      	movs	r2, #1
 80017b6:	4903      	ldr	r1, [pc, #12]	; (80017c4 <activate_alarm+0x6c>)
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <activate_alarm+0x88>)
 80017ba:	f005 fb0a 	bl	8006dd2 <HAL_UART_Receive_IT>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000339 	.word	0x20000339
 80017c8:	200002ed 	.word	0x200002ed
 80017cc:	200002d2 	.word	0x200002d2
 80017d0:	2000027c 	.word	0x2000027c
 80017d4:	200002d0 	.word	0x200002d0
 80017d8:	200002e8 	.word	0x200002e8
 80017dc:	20000337 	.word	0x20000337
 80017e0:	200004c8 	.word	0x200004c8

080017e4 <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000321 	.word	0x20000321

08001804 <to_do_on_alarm>:

void to_do_on_alarm() {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <to_do_on_alarm+0x18>)
 800180e:	f002 fa7f 	bl	8003d10 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_on_msg, strlen(alarm_on_msg));
	lcd_send_alarm_on_msg();
 8001812:	f000 fe33 	bl	800247c <lcd_send_alarm_on_msg>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40020000 	.word	0x40020000

08001820 <to_do_on_alarm_off>:

void to_do_on_alarm_off() {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

	//HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_off_msg, strlen(alarm_off_msg));
	lcd_send_alarm_off_msg();
 8001824:	f000 fe44 	bl	80024b0 <lcd_send_alarm_off_msg>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183c:	d107      	bne.n	800184e <HAL_GPIO_EXTI_Callback+0x22>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2140      	movs	r1, #64	; 0x40
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001844:	f002 fa64 	bl	8003d10 <HAL_GPIO_WritePin>
		alarm_flag = 0;
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_GPIO_EXTI_Callback+0x30>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
	}
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40020000 	.word	0x40020000
 800185c:	20000321 	.word	0x20000321

08001860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <MX_GPIO_Init+0x150>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <MX_GPIO_Init+0x150>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <MX_GPIO_Init+0x150>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <MX_GPIO_Init+0x150>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a45      	ldr	r2, [pc, #276]	; (80019b0 <MX_GPIO_Init+0x150>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <MX_GPIO_Init+0x150>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <MX_GPIO_Init+0x150>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a3e      	ldr	r2, [pc, #248]	; (80019b0 <MX_GPIO_Init+0x150>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <MX_GPIO_Init+0x150>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2160      	movs	r1, #96	; 0x60
 80018ce:	4839      	ldr	r0, [pc, #228]	; (80019b4 <MX_GPIO_Init+0x154>)
 80018d0:	f002 fa1e 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	4837      	ldr	r0, [pc, #220]	; (80019b8 <MX_GPIO_Init+0x158>)
 80018da:	f002 fa19 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C2_Pin|C3_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018e4:	4833      	ldr	r0, [pc, #204]	; (80019b4 <MX_GPIO_Init+0x154>)
 80018e6:	f002 fa13 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2110      	movs	r1, #16
 80018ee:	4833      	ldr	r0, [pc, #204]	; (80019bc <MX_GPIO_Init+0x15c>)
 80018f0:	f002 fa0e 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80018f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <MX_GPIO_Init+0x160>)
 80018fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4619      	mov	r1, r3
 8001908:	482b      	ldr	r0, [pc, #172]	; (80019b8 <MX_GPIO_Init+0x158>)
 800190a:	f002 f867 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin|C2_Pin|C3_Pin;
 800190e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_GPIO_Init+0x154>)
 8001928:	f002 f858 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R4_Pin;
 800192c:	f246 0320 	movw	r3, #24608	; 0x6020
 8001930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001936:	2302      	movs	r3, #2
 8001938:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4619      	mov	r1, r3
 8001940:	481e      	ldr	r0, [pc, #120]	; (80019bc <MX_GPIO_Init+0x15c>)
 8001942:	f002 f84b 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C4_Pin;
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	4619      	mov	r1, r3
 800195c:	4816      	ldr	r0, [pc, #88]	; (80019b8 <MX_GPIO_Init+0x158>)
 800195e:	f002 f83d 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R3_Pin;
 8001962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800196c:	2302      	movs	r3, #2
 800196e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <MX_GPIO_Init+0x154>)
 8001978:	f002 f830 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C1_Pin;
 800197c:	2310      	movs	r3, #16
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <MX_GPIO_Init+0x15c>)
 8001994:	f002 f822 	bl	80039dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2028      	movs	r0, #40	; 0x28
 800199e:	f001 ffc4 	bl	800392a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019a2:	2028      	movs	r0, #40	; 0x28
 80019a4:	f001 ffdd 	bl	8003962 <HAL_NVIC_EnableIRQ>

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020400 	.word	0x40020400
 80019c0:	10210000 	.word	0x10210000

080019c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <MX_I2C1_Init+0x54>)
 80019cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_I2C1_Init+0x58>)
 80019d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_I2C1_Init+0x50>)
 8001a02:	f002 f9d1 	bl	8003da8 <HAL_I2C_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a0c:	f000 ff46 	bl	800289c <Error_Handler>
  }

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000033c 	.word	0x2000033c
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	000186a0 	.word	0x000186a0

08001a20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <MX_I2C2_Init+0x54>)
 8001a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_I2C2_Init+0x58>)
 8001a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a5e:	f002 f9a3 	bl	8003da8 <HAL_I2C_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a68:	f000 ff18 	bl	800289c <Error_Handler>
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000390 	.word	0x20000390
 8001a74:	40005800 	.word	0x40005800
 8001a78:	000186a0 	.word	0x000186a0

08001a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_I2C_MspInit+0x10c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d12d      	bne.n	8001afa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac0:	2312      	movs	r3, #18
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001acc:	2304      	movs	r3, #4
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	482e      	ldr	r0, [pc, #184]	; (8001b90 <HAL_I2C_MspInit+0x114>)
 8001ad8:	f001 ff80 	bl	80039dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aea:	6413      	str	r3, [r2, #64]	; 0x40
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001af8:	e041      	b.n	8001b7e <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <HAL_I2C_MspInit+0x118>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d13c      	bne.n	8001b7e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b26:	2312      	movs	r3, #18
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b32:	2304      	movs	r3, #4
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4814      	ldr	r0, [pc, #80]	; (8001b90 <HAL_I2C_MspInit+0x114>)
 8001b3e:	f001 ff4d 	bl	80039dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b42:	2308      	movs	r3, #8
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b52:	2309      	movs	r3, #9
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <HAL_I2C_MspInit+0x114>)
 8001b5e:	f001 ff3d 	bl	80039dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_I2C_MspInit+0x110>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40005800 	.word	0x40005800

08001b98 <keypad4x4_Init>:
	"#",
	"D"
};

void keypad4x4_Init(Keypad_Wires_TypeDef  *KeypadWiringStruct)
{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	KeypadStruct = *KeypadWiringStruct;
 8001ba0:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	461d      	mov	r5, r3
 8001ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// znalezienie pinów 4 kolumn
	keypad4x4_FindPins_positions();
 8001bb8:	f000 f826 	bl	8001c08 <keypad4x4_FindPins_positions>

	// ustawienie pinów wszystkich kolumn na stan wysoki
	HAL_GPIO_WritePin(KeypadStruct.C1_Port, KeypadStruct.C1_pin, GPIO_PIN_SET);
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bbe:	6918      	ldr	r0, [r3, #16]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f002 f8a2 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C2_Port, KeypadStruct.C2_pin, GPIO_PIN_SET);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bce:	6958      	ldr	r0, [r3, #20]
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f002 f89a 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C3_Port, KeypadStruct.C3_pin, GPIO_PIN_SET);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bde:	6998      	ldr	r0, [r3, #24]
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001be2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001be4:	2201      	movs	r2, #1
 8001be6:	4619      	mov	r1, r3
 8001be8:	f002 f892 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C4_Port, KeypadStruct.C4_pin, GPIO_PIN_SET);
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bee:	69d8      	ldr	r0, [r3, #28]
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <keypad4x4_Init+0x6c>)
 8001bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f002 f88a 	bl	8003d10 <HAL_GPIO_WritePin>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}
 8001c04:	20000280 	.word	0x20000280

08001c08 <keypad4x4_FindPins_positions>:

void keypad4x4_FindPins_positions(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	idx=0;
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

	for(idx=0; idx<16; idx++)
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e041      	b.n	8001c9e <keypad4x4_FindPins_positions+0x96>
	{
		if(((KeypadStruct.C1_pin >> idx) & 0x0001) == 0x0001)
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <keypad4x4_FindPins_positions+0xac>)
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	fa42 f303 	asr.w	r3, r2, r3
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <keypad4x4_FindPins_positions+0x30>
		{
			ColumnsPositions[0] = idx;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <keypad4x4_FindPins_positions+0xb0>)
 8001c36:	701a      	strb	r2, [r3, #0]
		}
		if(((KeypadStruct.C2_pin >> idx) & 0x0001) == 0x0001)
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <keypad4x4_FindPins_positions+0xac>)
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	fa42 f303 	asr.w	r3, r2, r3
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <keypad4x4_FindPins_positions+0x4e>
		{
			ColumnsPositions[1] = idx;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <keypad4x4_FindPins_positions+0xb0>)
 8001c54:	705a      	strb	r2, [r3, #1]
		}
		if(((KeypadStruct.C3_pin >> idx) & 0x0001) == 0x0001)
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <keypad4x4_FindPins_positions+0xac>)
 8001c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	fa42 f303 	asr.w	r3, r2, r3
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <keypad4x4_FindPins_positions+0x6c>
		{
			ColumnsPositions[2] = idx;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <keypad4x4_FindPins_positions+0xb0>)
 8001c72:	709a      	strb	r2, [r3, #2]
		}
		if(((KeypadStruct.C4_pin >> idx) & 0x0001) == 0x0001)
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <keypad4x4_FindPins_positions+0xac>)
 8001c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	fa42 f303 	asr.w	r3, r2, r3
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <keypad4x4_FindPins_positions+0x8a>
		{
			ColumnsPositions[3] = idx;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <keypad4x4_FindPins_positions+0xb0>)
 8001c90:	70da      	strb	r2, [r3, #3]
	for(idx=0; idx<16; idx++)
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <keypad4x4_FindPins_positions+0xa8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	d9b9      	bls.n	8001c1a <keypad4x4_FindPins_positions+0x12>
		}
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	200003e4 	.word	0x200003e4
 8001cb4:	20000280 	.word	0x20000280
 8001cb8:	200002b0 	.word	0x200002b0

08001cbc <keypad4x4_ChangeColumn>:

void keypad4x4_ChangeColumn(uint8_t col_num)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	if(col_num == 1)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d134      	bne.n	8001d36 <keypad4x4_ChangeColumn+0x7a>
	{
		//Set selected column
		KeypadStruct.C1_Port->OTYPER &= ~(1UL << ColumnsPositions[0]);
 8001ccc:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2301      	movs	r3, #1
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]

		//Make other columns floating
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	fa03 f202 	lsl.w	r2, r3, r2
 8001cf8:	4b65      	ldr	r3, [pc, #404]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001d08:	789b      	ldrb	r3, [r3, #2]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	fa03 f202 	lsl.w	r2, r3, r2
 8001d12:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001d22:	78db      	ldrb	r3, [r3, #3]
 8001d24:	461a      	mov	r2, r3
 8001d26:	2301      	movs	r3, #1
 8001d28:	fa03 f202 	lsl.w	r2, r3, r2
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
		//Make other columns floating
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
	}
}
 8001d34:	e0a6      	b.n	8001e84 <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 2)
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d134      	bne.n	8001da6 <keypad4x4_ChangeColumn+0xea>
		KeypadStruct.C2_Port->OTYPER &= ~(1UL << ColumnsPositions[1]);
 8001d3c:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	6859      	ldr	r1, [r3, #4]
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	461a      	mov	r2, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	400a      	ands	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	2301      	movs	r3, #1
 8001d64:	fa03 f202 	lsl.w	r2, r3, r2
 8001d68:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001d78:	789b      	ldrb	r3, [r3, #2]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	fa03 f202 	lsl.w	r2, r3, r2
 8001d82:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001d92:	78db      	ldrb	r3, [r3, #3]
 8001d94:	461a      	mov	r2, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	fa03 f202 	lsl.w	r2, r3, r2
 8001d9c:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
}
 8001da4:	e06e      	b.n	8001e84 <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 3)
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d134      	bne.n	8001e16 <keypad4x4_ChangeColumn+0x15a>
		KeypadStruct.C3_Port->OTYPER &= ~(1UL << ColumnsPositions[2]);
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001db4:	789b      	ldrb	r3, [r3, #2]
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	fa03 f202 	lsl.w	r2, r3, r2
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	461a      	mov	r2, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	fa03 f202 	lsl.w	r2, r3, r2
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001e02:	78db      	ldrb	r3, [r3, #3]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2301      	movs	r3, #1
 8001e08:	fa03 f202 	lsl.w	r2, r3, r2
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
}
 8001e14:	e036      	b.n	8001e84 <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 4)
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d133      	bne.n	8001e84 <keypad4x4_ChangeColumn+0x1c8>
		KeypadStruct.C4_Port->OTYPER &= ~(1UL << ColumnsPositions[3]);
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001e24:	78db      	ldrb	r3, [r3, #3]
 8001e26:	461a      	mov	r2, r3
 8001e28:	2301      	movs	r3, #1
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	400a      	ands	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	2301      	movs	r3, #1
 8001e44:	fa03 f202 	lsl.w	r2, r3, r2
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	fa03 f202 	lsl.w	r2, r3, r2
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <keypad4x4_ChangeColumn+0x1d8>)
 8001e72:	789b      	ldrb	r3, [r3, #2]
 8001e74:	461a      	mov	r2, r3
 8001e76:	2301      	movs	r3, #1
 8001e78:	fa03 f202 	lsl.w	r2, r3, r2
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <keypad4x4_ChangeColumn+0x1d4>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	20000280 	.word	0x20000280
 8001e94:	200002b0 	.word	0x200002b0

08001e98 <keypad4x4_ReadKeypad>:

void keypad4x4_ReadKeypad(bool keys[16])
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	// Ustawienie pierwszej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ff0b 	bl	8001cbc <keypad4x4_ChangeColumn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001ea6:	4b95      	ldr	r3, [pc, #596]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b94      	ldr	r3, [pc, #592]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001eac:	8c1b      	ldrh	r3, [r3, #32]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f001 ff15 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001ecc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f001 ff05 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2201      	movne	r2, #1
 8001ee4:	2200      	moveq	r2, #0
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001eea:	4b84      	ldr	r3, [pc, #528]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b83      	ldr	r3, [pc, #524]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001ef0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f001 fef3 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3308      	adds	r3, #8
 8001f02:	2a00      	cmp	r2, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2201      	movne	r2, #1
 8001f08:	2200      	moveq	r2, #0
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001f0e:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f001 fee1 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	330c      	adds	r3, #12
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2201      	movne	r2, #1
 8001f2c:	2200      	moveq	r2, #0
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

	// Ustawienie drugiej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(2);
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7ff fec2 	bl	8001cbc <keypad4x4_ChangeColumn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001f38:	4b70      	ldr	r3, [pc, #448]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f3e:	8c1b      	ldrh	r3, [r3, #32]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f001 fecc 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2201      	movne	r2, #1
 8001f56:	2200      	moveq	r2, #0
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f001 feba 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3305      	adds	r3, #5
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2201      	movne	r2, #1
 8001f7a:	2200      	moveq	r2, #0
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001f80:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f001 fea8 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3309      	adds	r3, #9
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2201      	movne	r2, #1
 8001f9e:	2200      	moveq	r2, #0
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b54      	ldr	r3, [pc, #336]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f001 fe96 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	330d      	adds	r3, #13
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2201      	movne	r2, #1
 8001fc2:	2200      	moveq	r2, #0
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

	// Ustawienie trzeciej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(3);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f7ff fe77 	bl	8001cbc <keypad4x4_ChangeColumn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001fce:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001fd4:	8c1b      	ldrh	r3, [r3, #32]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f001 fe81 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2201      	movne	r2, #1
 8001fec:	2200      	moveq	r2, #0
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8001ff8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f001 fe6f 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3306      	adds	r3, #6
 800200a:	2a00      	cmp	r2, #0
 800200c:	bf14      	ite	ne
 800200e:	2201      	movne	r2, #1
 8002010:	2200      	moveq	r2, #0
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	4b38      	ldr	r3, [pc, #224]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 800201c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f001 fe5d 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	330a      	adds	r3, #10
 800202e:	2a00      	cmp	r2, #0
 8002030:	bf14      	ite	ne
 8002032:	2201      	movne	r2, #1
 8002034:	2200      	moveq	r2, #0
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8002040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f001 fe4b 	bl	8003ce0 <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	330e      	adds	r3, #14
 8002052:	2a00      	cmp	r2, #0
 8002054:	bf14      	ite	ne
 8002056:	2201      	movne	r2, #1
 8002058:	2200      	moveq	r2, #0
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

	// Ustawienie czwartej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(4);
 800205e:	2004      	movs	r0, #4
 8002060:	f7ff fe2c 	bl	8001cbc <keypad4x4_ChangeColumn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 800206a:	8c1b      	ldrh	r3, [r3, #32]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f001 fe36 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3303      	adds	r3, #3
 800207c:	2a00      	cmp	r2, #0
 800207e:	bf14      	ite	ne
 8002080:	2201      	movne	r2, #1
 8002082:	2200      	moveq	r2, #0
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 800208e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f001 fe24 	bl	8003ce0 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3307      	adds	r3, #7
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2201      	movne	r2, #1
 80020a6:	2200      	moveq	r2, #0
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 80020b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f001 fe12 	bl	8003ce0 <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	330b      	adds	r3, #11
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2201      	movne	r2, #1
 80020ca:	2200      	moveq	r2, #0
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <keypad4x4_ReadKeypad+0x264>)
 80020d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f001 fe00 	bl	8003ce0 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	330f      	adds	r3, #15
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2201      	movne	r2, #1
 80020ee:	2200      	moveq	r2, #0
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000280 	.word	0x20000280

08002100 <keypad4x4_GetChar>:

char* keypad4x4_GetChar(uint8_t keypad_char_index)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
	return keypad_keys[keypad_char_index];
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <keypad4x4_GetChar+0x20>)
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	/* sekwencja z dokumentacji inicjalizująca wyświetlacz*/
	HAL_Delay(40);
 8002128:	2028      	movs	r0, #40	; 0x28
 800212a:	f001 fb01 	bl	8003730 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 800212e:	2030      	movs	r0, #48	; 0x30
 8002130:	f000 f8d0 	bl	80022d4 <lcd_write_command>
	HAL_Delay(5);
 8002134:	2005      	movs	r0, #5
 8002136:	f001 fafb 	bl	8003730 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 800213a:	2030      	movs	r0, #48	; 0x30
 800213c:	f000 f8ca 	bl	80022d4 <lcd_write_command>
	HAL_Delay(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f001 faf5 	bl	8003730 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8002146:	2030      	movs	r0, #48	; 0x30
 8002148:	f000 f8c4 	bl	80022d4 <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 800214c:	2002      	movs	r0, #2
 800214e:	f000 f8c1 	bl	80022d4 <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8002152:	200c      	movs	r0, #12
 8002154:	f000 f8be 	bl	80022d4 <lcd_write_command>

	HAL_Delay(5);
 8002158:	2005      	movs	r0, #5
 800215a:	f001 fae9 	bl	8003730 <HAL_Delay>

	lcd_generate_own_chars();
 800215e:	f000 f9c3 	bl	80024e8 <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8002162:	f000 f849 	bl	80021f8 <lcd_clear>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <lcd_display_refresh>:

// Funkcja odpowiedzialna za aktualizowanie i wyświetlanie na bieżąco wszystkich danych na wyświetlaczu LCD
void lcd_display_refresh() {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af02      	add	r7, sp, #8

	get_Time();
 8002172:	f001 f957 	bl	8003424 <get_Time>

	// wyświetlanie godziny na LCD
	lcd_first_line();
 8002176:	f000 f899 	bl	80022ac <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <lcd_display_refresh+0x78>)
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	461a      	mov	r2, r3
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <lcd_display_refresh+0x78>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	4619      	mov	r1, r3
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <lcd_display_refresh+0x78>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	460b      	mov	r3, r1
 800218e:	4916      	ldr	r1, [pc, #88]	; (80021e8 <lcd_display_refresh+0x7c>)
 8002190:	4816      	ldr	r0, [pc, #88]	; (80021ec <lcd_display_refresh+0x80>)
 8002192:	f006 fa9b 	bl	80086cc <siprintf>
	lcd_send_string(time_date_buffer);
 8002196:	4815      	ldr	r0, [pc, #84]	; (80021ec <lcd_display_refresh+0x80>)
 8002198:	f000 f958 	bl	800244c <lcd_send_string>

	//wyświetlenie poziomu baterii
	battery_level = 100;
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <lcd_display_refresh+0x84>)
 800219e:	2264      	movs	r2, #100	; 0x64
 80021a0:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <lcd_display_refresh+0x84>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fa72 	bl	8002690 <lcd_show_battery_level>

	// wyświetlanie daty na LCD
	lcd_second_line();
 80021ac:	f000 f888 	bl	80022c0 <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <lcd_display_refresh+0x78>)
 80021b2:	791b      	ldrb	r3, [r3, #4]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <lcd_display_refresh+0x78>)
 80021b8:	795b      	ldrb	r3, [r3, #5]
 80021ba:	4619      	mov	r1, r3
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <lcd_display_refresh+0x78>)
 80021be:	799b      	ldrb	r3, [r3, #6]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	460b      	mov	r3, r1
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <lcd_display_refresh+0x88>)
 80021c6:	4809      	ldr	r0, [pc, #36]	; (80021ec <lcd_display_refresh+0x80>)
 80021c8:	f006 fa80 	bl	80086cc <siprintf>
	lcd_send_string(time_date_buffer);
 80021cc:	4807      	ldr	r0, [pc, #28]	; (80021ec <lcd_display_refresh+0x80>)
 80021ce:	f000 f93d 	bl	800244c <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_show_week_day_name(time.dayofweek);
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <lcd_display_refresh+0x78>)
 80021d4:	78db      	ldrb	r3, [r3, #3]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fa0e 	bl	80025f8 <lcd_show_week_day_name>
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000032c 	.word	0x2000032c
 80021e8:	0800b550 	.word	0x0800b550
 80021ec:	200003ec 	.word	0x200003ec
 80021f0:	200003f9 	.word	0x200003f9
 80021f4:	0800b560 	.word	0x0800b560

080021f8 <lcd_clear>:

void lcd_clear(void) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f000 f869 	bl	80022d4 <lcd_write_command>
	HAL_Delay(5);
 8002202:	2005      	movs	r0, #5
 8002204:	f001 fa94 	bl	8003730 <HAL_Delay>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <lcd_back_light_on>:

// Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD
void lcd_back_light_on(void) {
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	BL = 0x08;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <lcd_back_light_on+0x14>)
 8002212:	2208      	movs	r2, #8
 8002214:	701a      	strb	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	200003fa 	.word	0x200003fa

08002224 <lcd_back_light_off>:

// Funkcja odpowiadająca za wyłączenie podświetlenia wyświetlacza LCD
void lcd_back_light_off(void) {
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
	BL = 0x00;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <lcd_back_light_off+0x14>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	200003fa 	.word	0x200003fa

0800223c <lcd_set_cursor>:

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	460a      	mov	r2, r1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	4613      	mov	r3, r2
 800224a:	71bb      	strb	r3, [r7, #6]

	col_number = (col) & 0x0F;
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <lcd_set_cursor+0x6c>)
 8002256:	701a      	strb	r2, [r3, #0]

	switch(row) {
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <lcd_set_cursor+0x28>
 800225e:	2b01      	cmp	r3, #1
 8002260:	d00d      	beq.n	800227e <lcd_set_cursor+0x42>
 8002262:	e019      	b.n	8002298 <lcd_set_cursor+0x5c>

		case 0:
			col_number |= (0x80);
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <lcd_set_cursor+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <lcd_set_cursor+0x6c>)
 8002270:	701a      	strb	r2, [r3, #0]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <lcd_set_cursor+0x6c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f82c 	bl	80022d4 <lcd_write_command>
			break;
 800227c:	e00c      	b.n	8002298 <lcd_set_cursor+0x5c>

		case 1:
			col_number |= (0xc0);
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <lcd_set_cursor+0x6c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <lcd_set_cursor+0x6c>)
 800228a:	701a      	strb	r2, [r3, #0]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <lcd_set_cursor+0x6c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f81f 	bl	80022d4 <lcd_write_command>
			break;
 8002296:	bf00      	nop
	}

	HAL_Delay(5);
 8002298:	2005      	movs	r0, #5
 800229a:	f001 fa49 	bl	8003730 <HAL_Delay>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200003fb 	.word	0x200003fb

080022ac <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 80022b0:	2080      	movs	r0, #128	; 0x80
 80022b2:	f000 f80f 	bl	80022d4 <lcd_write_command>
	HAL_Delay(5);
 80022b6:	2005      	movs	r0, #5
 80022b8:	f001 fa3a 	bl	8003730 <HAL_Delay>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 80022c4:	20c0      	movs	r0, #192	; 0xc0
 80022c6:	f000 f805 	bl	80022d4 <lcd_write_command>
	HAL_Delay(5);
 80022ca:	2005      	movs	r0, #5
 80022cc:	f001 fa30 	bl	8003730 <HAL_Delay>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af02      	add	r7, sp, #8
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
	addr = LCD_ADDRESS;
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <lcd_write_command+0x94>)
 80022e0:	224e      	movs	r2, #78	; 0x4e
 80022e2:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		// EN = 1, RS = 0
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f023 030f 	bic.w	r3, r3, #15
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <lcd_write_command+0x98>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <lcd_write_command+0x9c>)
 80022fc:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	f023 030f 	bic.w	r3, r3, #15
 8002306:	b25a      	sxtb	r2, r3
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <lcd_write_command+0x98>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b25b      	sxtb	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b25b      	sxtb	r3, r3
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <lcd_write_command+0x9c>)
 8002316:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		// EN = 1, RS = 0
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <lcd_write_command+0x98>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <lcd_write_command+0x9c>)
 800232e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4)   | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	b25a      	sxtb	r2, r3
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <lcd_write_command+0x98>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b25b      	sxtb	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b25b      	sxtb	r3, r3
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <lcd_write_command+0x9c>)
 8002344:	70da      	strb	r2, [r3, #3]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <lcd_write_command+0x94>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b299      	uxth	r1, r3
 800234c:	2364      	movs	r3, #100	; 0x64
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2304      	movs	r3, #4
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <lcd_write_command+0x9c>)
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <lcd_write_command+0xa0>)
 8002356:	f001 fe5f 	bl	8004018 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 800235a:	2005      	movs	r0, #5
 800235c:	f001 f9e8 	bl	8003730 <HAL_Delay>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000080 	.word	0x20000080
 800236c:	200003fa 	.word	0x200003fa
 8002370:	20000400 	.word	0x20000400
 8002374:	2000033c 	.word	0x2000033c

08002378 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af02      	add	r7, sp, #8
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
	addr = LCD_ADDRESS;
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <lcd_write_data+0xc0>)
 8002384:	224e      	movs	r2, #78	; 0x4e
 8002386:	701a      	strb	r2, [r3, #0]
	RS = 0x01;
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <lcd_write_data+0xc4>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		// EN = 1, RS = 1
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f023 030f 	bic.w	r3, r3, #15
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <lcd_write_data+0xc4>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <lcd_write_data+0xc8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <lcd_write_data+0xcc>)
 80023ae:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	f023 030f 	bic.w	r3, r3, #15
 80023b8:	b25a      	sxtb	r2, r3
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <lcd_write_data+0xc4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b25a      	sxtb	r2, r3
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <lcd_write_data+0xc8>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <lcd_write_data+0xcc>)
 80023d2:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		// EN = 1, RS = 1
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <lcd_write_data+0xc4>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <lcd_write_data+0xc8>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <lcd_write_data+0xcc>)
 80023f2:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4)   | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	b25a      	sxtb	r2, r3
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <lcd_write_data+0xc4>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b25b      	sxtb	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b25a      	sxtb	r2, r3
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <lcd_write_data+0xc8>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b25b      	sxtb	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	b25b      	sxtb	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <lcd_write_data+0xcc>)
 8002412:	70da      	strb	r2, [r3, #3]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <lcd_write_data+0xc0>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b299      	uxth	r1, r3
 800241a:	2364      	movs	r3, #100	; 0x64
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2304      	movs	r3, #4
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <lcd_write_data+0xcc>)
 8002422:	4809      	ldr	r0, [pc, #36]	; (8002448 <lcd_write_data+0xd0>)
 8002424:	f001 fdf8 	bl	8004018 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002428:	2005      	movs	r0, #5
 800242a:	f001 f981 	bl	8003730 <HAL_Delay>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000080 	.word	0x20000080
 800243c:	20000081 	.word	0x20000081
 8002440:	200003fa 	.word	0x200003fa
 8002444:	20000400 	.word	0x20000400
 8002448:	2000033c 	.word	0x2000033c

0800244c <lcd_send_string>:

void lcd_send_string(const char * string)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	while(*string)
 8002454:	e006      	b.n	8002464 <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff8a 	bl	8002378 <lcd_write_data>
	while(*string)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f4      	bne.n	8002456 <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 800246c:	2005      	movs	r0, #5
 800246e:	f001 f95f 	bl	8003730 <HAL_Delay>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0

	lcd_clear();
 8002480:	f7ff feba 	bl	80021f8 <lcd_clear>
	lcd_send_string("Wy");
 8002484:	4808      	ldr	r0, [pc, #32]	; (80024a8 <lcd_send_alarm_on_msg+0x2c>)
 8002486:	f7ff ffe1 	bl	800244c <lcd_send_string>
	lcd_send_own_char(3);
 800248a:	2003      	movs	r0, #3
 800248c:	f000 f864 	bl	8002558 <lcd_send_own_char>
	lcd_send_own_char(8);
 8002490:	2008      	movs	r0, #8
 8002492:	f000 f861 	bl	8002558 <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <lcd_send_alarm_on_msg+0x30>)
 8002498:	f7ff ffd8 	bl	800244c <lcd_send_string>
	delay(1000);
 800249c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a0:	f001 f818 	bl	80034d4 <delay>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0800b574 	.word	0x0800b574
 80024ac:	0800b578 	.word	0x0800b578

080024b0 <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0

	lcd_clear();
 80024b4:	f7ff fea0 	bl	80021f8 <lcd_clear>
	lcd_send_string("Alarm wy");
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <lcd_send_alarm_off_msg+0x30>)
 80024ba:	f7ff ffc7 	bl	800244c <lcd_send_string>
	lcd_send_own_char(3);
 80024be:	2003      	movs	r0, #3
 80024c0:	f000 f84a 	bl	8002558 <lcd_send_own_char>
	lcd_send_own_char(8);
 80024c4:	2008      	movs	r0, #8
 80024c6:	f000 f847 	bl	8002558 <lcd_send_own_char>
	lcd_send_string("czony");
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <lcd_send_alarm_off_msg+0x34>)
 80024cc:	f7ff ffbe 	bl	800244c <lcd_send_string>
	delay(1000);
 80024d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d4:	f000 fffe 	bl	80034d4 <delay>
	lcd_clear();
 80024d8:	f7ff fe8e 	bl	80021f8 <lcd_clear>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	0800b588 	.word	0x0800b588
 80024e4:	0800b594 	.word	0x0800b594

080024e8 <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 80024ec:	2040      	movs	r0, #64	; 0x40
 80024ee:	f7ff fef1 	bl	80022d4 <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <lcd_generate_own_chars+0x64>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e021      	b.n	800253e <lcd_generate_own_chars+0x56>
		for(j = 0; j <= 7; j ++) {
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <lcd_generate_own_chars+0x68>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e013      	b.n	800252a <lcd_generate_own_chars+0x42>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <lcd_generate_own_chars+0x64>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <lcd_generate_own_chars+0x68>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <lcd_generate_own_chars+0x6c>)
 8002510:	00c3      	lsls	r3, r0, #3
 8002512:	4413      	add	r3, r2
 8002514:	440b      	add	r3, r1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff2d 	bl	8002378 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <lcd_generate_own_chars+0x68>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <lcd_generate_own_chars+0x68>)
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <lcd_generate_own_chars+0x68>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b07      	cmp	r3, #7
 8002530:	d9e7      	bls.n	8002502 <lcd_generate_own_chars+0x1a>
	for(i = 0; i <= 7; i ++) {
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <lcd_generate_own_chars+0x64>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <lcd_generate_own_chars+0x64>)
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <lcd_generate_own_chars+0x64>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b07      	cmp	r3, #7
 8002544:	d9d9      	bls.n	80024fa <lcd_generate_own_chars+0x12>
		}
	}
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200003fc 	.word	0x200003fc
 8002550:	200003e8 	.word	0x200003e8
 8002554:	20000040 	.word	0x20000040

08002558 <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	3b01      	subs	r3, #1
 8002566:	2b07      	cmp	r3, #7
 8002568:	d832      	bhi.n	80025d0 <lcd_send_own_char+0x78>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <lcd_send_own_char+0x18>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002591 	.word	0x08002591
 8002574:	08002599 	.word	0x08002599
 8002578:	080025a1 	.word	0x080025a1
 800257c:	080025a9 	.word	0x080025a9
 8002580:	080025b1 	.word	0x080025b1
 8002584:	080025b9 	.word	0x080025b9
 8002588:	080025c1 	.word	0x080025c1
 800258c:	080025c9 	.word	0x080025c9

		case 1:
			lcd_send_string("\x1");
 8002590:	4811      	ldr	r0, [pc, #68]	; (80025d8 <lcd_send_own_char+0x80>)
 8002592:	f7ff ff5b 	bl	800244c <lcd_send_string>
			break;
 8002596:	e01b      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8002598:	4810      	ldr	r0, [pc, #64]	; (80025dc <lcd_send_own_char+0x84>)
 800259a:	f7ff ff57 	bl	800244c <lcd_send_string>
			break;
 800259e:	e017      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 80025a0:	480f      	ldr	r0, [pc, #60]	; (80025e0 <lcd_send_own_char+0x88>)
 80025a2:	f7ff ff53 	bl	800244c <lcd_send_string>
			break;
 80025a6:	e013      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 80025a8:	480e      	ldr	r0, [pc, #56]	; (80025e4 <lcd_send_own_char+0x8c>)
 80025aa:	f7ff ff4f 	bl	800244c <lcd_send_string>
			break;
 80025ae:	e00f      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <lcd_send_own_char+0x90>)
 80025b2:	f7ff ff4b 	bl	800244c <lcd_send_string>
			break;
 80025b6:	e00b      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <lcd_send_own_char+0x94>)
 80025ba:	f7ff ff47 	bl	800244c <lcd_send_string>
			break;
 80025be:	e007      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 80025c0:	480b      	ldr	r0, [pc, #44]	; (80025f0 <lcd_send_own_char+0x98>)
 80025c2:	f7ff ff43 	bl	800244c <lcd_send_string>
			break;
 80025c6:	e003      	b.n	80025d0 <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 80025c8:	480a      	ldr	r0, [pc, #40]	; (80025f4 <lcd_send_own_char+0x9c>)
 80025ca:	f7ff ff3f 	bl	800244c <lcd_send_string>
			break;
 80025ce:	bf00      	nop
	}
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	0800b59c 	.word	0x0800b59c
 80025dc:	0800b5a0 	.word	0x0800b5a0
 80025e0:	0800b5a4 	.word	0x0800b5a4
 80025e4:	0800b5a8 	.word	0x0800b5a8
 80025e8:	0800b5ac 	.word	0x0800b5ac
 80025ec:	0800b5b0 	.word	0x0800b5b0
 80025f0:	0800b5b4 	.word	0x0800b5b4
 80025f4:	0800b5b8 	.word	0x0800b5b8

080025f8 <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 8002602:	210c      	movs	r1, #12
 8002604:	2001      	movs	r0, #1
 8002606:	f7ff fe19 	bl	800223c <lcd_set_cursor>

	switch(day_number) {
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	3b01      	subs	r3, #1
 800260e:	2b06      	cmp	r3, #6
 8002610:	d82c      	bhi.n	800266c <lcd_show_week_day_name+0x74>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <lcd_show_week_day_name+0x20>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002635 	.word	0x08002635
 800261c:	0800263d 	.word	0x0800263d
 8002620:	08002645 	.word	0x08002645
 8002624:	0800264d 	.word	0x0800264d
 8002628:	08002655 	.word	0x08002655
 800262c:	0800265d 	.word	0x0800265d
 8002630:	08002665 	.word	0x08002665

		case 1:
			lcd_send_string("pon.");
 8002634:	480f      	ldr	r0, [pc, #60]	; (8002674 <lcd_show_week_day_name+0x7c>)
 8002636:	f7ff ff09 	bl	800244c <lcd_send_string>
			break;
 800263a:	e017      	b.n	800266c <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 800263c:	480e      	ldr	r0, [pc, #56]	; (8002678 <lcd_show_week_day_name+0x80>)
 800263e:	f7ff ff05 	bl	800244c <lcd_send_string>
			break;
 8002642:	e013      	b.n	800266c <lcd_show_week_day_name+0x74>

		case 3:
			//lcd_send_own_char(6);
			lcd_send_string("sr.");
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <lcd_show_week_day_name+0x84>)
 8002646:	f7ff ff01 	bl	800244c <lcd_send_string>
			break;
 800264a:	e00f      	b.n	800266c <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <lcd_show_week_day_name+0x88>)
 800264e:	f7ff fefd 	bl	800244c <lcd_send_string>
			break;
 8002652:	e00b      	b.n	800266c <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 8002654:	480b      	ldr	r0, [pc, #44]	; (8002684 <lcd_show_week_day_name+0x8c>)
 8002656:	f7ff fef9 	bl	800244c <lcd_send_string>
			break;
 800265a:	e007      	b.n	800266c <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <lcd_show_week_day_name+0x90>)
 800265e:	f7ff fef5 	bl	800244c <lcd_send_string>
			break;
 8002662:	e003      	b.n	800266c <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 8002664:	4809      	ldr	r0, [pc, #36]	; (800268c <lcd_show_week_day_name+0x94>)
 8002666:	f7ff fef1 	bl	800244c <lcd_send_string>
			break;
 800266a:	bf00      	nop
	}
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	0800b5bc 	.word	0x0800b5bc
 8002678:	0800b5c4 	.word	0x0800b5c4
 800267c:	0800b5c8 	.word	0x0800b5c8
 8002680:	0800b5cc 	.word	0x0800b5cc
 8002684:	0800b5d4 	.word	0x0800b5d4
 8002688:	0800b5d8 	.word	0x0800b5d8
 800268c:	0800b5e0 	.word	0x0800b5e0

08002690 <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 800269a:	210b      	movs	r1, #11
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff fdcd 	bl	800223c <lcd_set_cursor>
	lcd_send_own_char(6);
 80026a2:	2006      	movs	r0, #6
 80026a4:	f7ff ff58 	bl	8002558 <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <lcd_show_battery_level+0x40>)
 80026b0:	4618      	mov	r0, r3
 80026b2:	f006 f80b 	bl	80086cc <siprintf>

	lcd_send_string(battery_level);
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fec6 	bl	800244c <lcd_send_string>
	lcd_send_string("%");
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <lcd_show_battery_level+0x44>)
 80026c2:	f7ff fec3 	bl	800244c <lcd_send_string>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0800b5e8 	.word	0x0800b5e8
 80026d4:	0800b5ec 	.word	0x0800b5ec

080026d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026dc:	f000 ffb6 	bl	800364c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e0:	f000 f83a 	bl	8002758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e4:	f7ff f8bc 	bl	8001860 <MX_GPIO_Init>
  MX_I2C1_Init();
 80026e8:	f7ff f96c 	bl	80019c4 <MX_I2C1_Init>
  MX_RTC_Init();
 80026ec:	f000 f8de 	bl	80028ac <MX_RTC_Init>
  MX_USART2_UART_Init();
 80026f0:	f000 ff08 	bl	8003504 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80026f4:	f7ff f994 	bl	8001a20 <MX_I2C2_Init>
  MX_TIM1_Init();
 80026f8:	f000 fd6e 	bl	80031d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	4811      	ldr	r0, [pc, #68]	; (8002748 <main+0x70>)
 8002702:	f001 fb05 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8002706:	2200      	movs	r2, #0
 8002708:	2120      	movs	r1, #32
 800270a:	480f      	ldr	r0, [pc, #60]	; (8002748 <main+0x70>)
 800270c:	f001 fb00 	bl	8003d10 <HAL_GPIO_WritePin>

	/****************** LCD BEGIN ******************/
	lcd_init();
 8002710:	f7ff fd08 	bl	8002124 <lcd_init>
	/****************** LCD END ******************/

	//set_Time(10, 59, 15, 7, 29, 11, 20);
	rtc_set_time();	// Wpisanie do rejestru RTC, czasu i daty pobranych z DS3231, aby czas w RTC był aktualny
 8002714:	f7fe fc40 	bl	8000f98 <rtc_set_time>

	/****************** UART BEGIN ******************/
	// Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
	// Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback HAL_UART_RxCpltCallback.
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8002718:	2201      	movs	r2, #1
 800271a:	490c      	ldr	r1, [pc, #48]	; (800274c <main+0x74>)
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <main+0x78>)
 800271e:	f004 fb58 	bl	8006dd2 <HAL_UART_Receive_IT>

	// wystąpienie przerwania po ukończeniu transmisji danych (TC - Transmition Complete)
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <main+0x78>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <main+0x78>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002730:	60da      	str	r2, [r3, #12]
	/****************** UART END ******************/

	/****************** TIMER BEGIN ******************/
	HAL_TIM_Base_Start_IT(&htim1);
 8002732:	4808      	ldr	r0, [pc, #32]	; (8002754 <main+0x7c>)
 8002734:	f003 ff4f 	bl	80065d6 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		to_do_after_wake_up_from_standby();
 8002738:	f000 f972 	bl	8002a20 <to_do_after_wake_up_from_standby>

		to_do_before_going_to_standby();
 800273c:	f000 fa12 	bl	8002b64 <to_do_before_going_to_standby>

		go_to_standby();
 8002740:	f000 fbf2 	bl	8002f28 <go_to_standby>
		to_do_after_wake_up_from_standby();
 8002744:	e7f8      	b.n	8002738 <main+0x60>
 8002746:	bf00      	nop
 8002748:	40020000 	.word	0x40020000
 800274c:	20000339 	.word	0x20000339
 8002750:	200004c8 	.word	0x200004c8
 8002754:	20000478 	.word	0x20000478

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b098      	sub	sp, #96	; 0x60
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002762:	2230      	movs	r2, #48	; 0x30
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f005 f964 	bl	8007a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	4b31      	ldr	r3, [pc, #196]	; (8002858 <SystemClock_Config+0x100>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4a30      	ldr	r2, [pc, #192]	; (8002858 <SystemClock_Config+0x100>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279a:	6413      	str	r3, [r2, #64]	; 0x40
 800279c:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <SystemClock_Config+0x100>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027a8:	2300      	movs	r3, #0
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <SystemClock_Config+0x104>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <SystemClock_Config+0x104>)
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <SystemClock_Config+0x104>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027c8:	230a      	movs	r3, #10
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027cc:	2301      	movs	r3, #1
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027d0:	2310      	movs	r3, #16
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027d4:	2301      	movs	r3, #1
 80027d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d8:	2302      	movs	r3, #2
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027dc:	2300      	movs	r3, #0
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027e0:	2308      	movs	r3, #8
 80027e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80027e4:	233c      	movs	r3, #60	; 0x3c
 80027e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027e8:	2302      	movs	r3, #2
 80027ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027ec:	2304      	movs	r3, #4
 80027ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fc49 	bl	800508c <HAL_RCC_OscConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002800:	f000 f84c 	bl	800289c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002804:	230f      	movs	r3, #15
 8002806:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	2101      	movs	r1, #1
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fea3 	bl	800556c <HAL_RCC_ClockConfig>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800282c:	f000 f836 	bl	800289c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002830:	2302      	movs	r3, #2
 8002832:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002838:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f003 f860 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800284a:	f000 f827 	bl	800289c <Error_Handler>
  }
}
 800284e:	bf00      	nop
 8002850:	3760      	adds	r7, #96	; 0x60
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart2, a nie coś innego
	if (huart->Instance == USART2) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_UART_RxCpltCallback+0x30>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10a      	bne.n	8002888 <HAL_UART_RxCpltCallback+0x28>
		activate_time();
 8002872:	f7fe fee5 	bl	8001640 <activate_time>
		activate_date();
 8002876:	f7fe ff29 	bl	80016cc <activate_date>
		activate_alarm();
 800287a:	f7fe ff6d 	bl	8001758 <activate_alarm>

		// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800287e:	2201      	movs	r2, #1
 8002880:	4904      	ldr	r1, [pc, #16]	; (8002894 <HAL_UART_RxCpltCallback+0x34>)
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <HAL_UART_RxCpltCallback+0x38>)
 8002884:	f004 faa5 	bl	8006dd2 <HAL_UART_Receive_IT>
	}

}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40004400 	.word	0x40004400
 8002894:	20000339 	.word	0x20000339
 8002898:	200004c8 	.word	0x200004c8

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b090      	sub	sp, #64	; 0x40
 80028b0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80028c6:	463b      	mov	r3, r7
 80028c8:	2228      	movs	r2, #40	; 0x28
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f005 f8b1 	bl	8007a34 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <MX_RTC_Init+0x124>)
 80028d4:	4a3f      	ldr	r2, [pc, #252]	; (80029d4 <MX_RTC_Init+0x128>)
 80028d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <MX_RTC_Init+0x124>)
 80028da:	2200      	movs	r2, #0
 80028dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <MX_RTC_Init+0x124>)
 80028e0:	227f      	movs	r2, #127	; 0x7f
 80028e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <MX_RTC_Init+0x124>)
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <MX_RTC_Init+0x124>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028f0:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <MX_RTC_Init+0x124>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028f6:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <MX_RTC_Init+0x124>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028fc:	4834      	ldr	r0, [pc, #208]	; (80029d0 <MX_RTC_Init+0x124>)
 80028fe:	f003 f8ef 	bl	8005ae0 <HAL_RTC_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002908:	f7ff ffc8 	bl	800289c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x46;
 8002912:	2346      	movs	r3, #70	; 0x46
 8002914:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8002918:	2345      	movs	r3, #69	; 0x45
 800291a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292a:	2201      	movs	r2, #1
 800292c:	4619      	mov	r1, r3
 800292e:	4828      	ldr	r0, [pc, #160]	; (80029d0 <MX_RTC_Init+0x124>)
 8002930:	f003 f967 	bl	8005c02 <HAL_RTC_SetTime>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800293a:	f7ff ffaf 	bl	800289c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800293e:	2302      	movs	r3, #2
 8002940:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 8002944:	2310      	movs	r3, #16
 8002946:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x24;
 800294a:	2324      	movs	r3, #36	; 0x24
 800294c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 8002950:	2320      	movs	r3, #32
 8002952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800295a:	2201      	movs	r2, #1
 800295c:	4619      	mov	r1, r3
 800295e:	481c      	ldr	r0, [pc, #112]	; (80029d0 <MX_RTC_Init+0x124>)
 8002960:	f003 fa0c 	bl	8005d7c <HAL_RTC_SetDate>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800296a:	f7ff ff97 	bl	800289c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 800296e:	2319      	movs	r3, #25
 8002970:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 8002972:	2323      	movs	r3, #35	; 0x23
 8002974:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8002976:	2310      	movs	r3, #16
 8002978:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 8002992:	2312      	movs	r3, #18
 8002994:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800299e:	463b      	mov	r3, r7
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	480a      	ldr	r0, [pc, #40]	; (80029d0 <MX_RTC_Init+0x124>)
 80029a6:	f003 fa91 	bl	8005ecc <HAL_RTC_SetAlarm_IT>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80029b0:	f7ff ff74 	bl	800289c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80029b4:	2200      	movs	r2, #0
 80029b6:	2105      	movs	r1, #5
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_RTC_Init+0x124>)
 80029ba:	f003 fc77 	bl	80062ac <HAL_RTCEx_SetWakeUpTimer_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80029c4:	f7ff ff6a 	bl	800289c <Error_Handler>
  }

}
 80029c8:	bf00      	nop
 80029ca:	3740      	adds	r7, #64	; 0x40
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000404 	.word	0x20000404
 80029d4:	40002800 	.word	0x40002800

080029d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <HAL_RTC_MspInit+0x40>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d112      	bne.n	8002a10 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RTC_MspInit+0x44>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2003      	movs	r0, #3
 80029f6:	f000 ff98 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80029fa:	2003      	movs	r0, #3
 80029fc:	f000 ffb1 	bl	8003962 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	2029      	movs	r0, #41	; 0x29
 8002a06:	f000 ff90 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a0a:	2029      	movs	r0, #41	; 0x29
 8002a0c:	f000 ffa9 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40002800 	.word	0x40002800
 8002a1c:	42470e3c 	.word	0x42470e3c

08002a20 <to_do_after_wake_up_from_standby>:
bool keypadSwitches[16] = {0};
Keypad_Wires_TypeDef keypadStruct;
/*	keypad	*/


void to_do_after_wake_up_from_standby(void) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0

	lcd_back_light_on();
 8002a26:	f7ff fbf1 	bl	800220c <lcd_back_light_on>

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 8002a2a:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <to_do_after_wake_up_from_standby+0x120>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <to_do_after_wake_up_from_standby+0x24>

		while (alarm_flag) {
 8002a32:	e001      	b.n	8002a38 <to_do_after_wake_up_from_standby+0x18>
			to_do_on_alarm();
 8002a34:	f7fe fee6 	bl	8001804 <to_do_on_alarm>
		while (alarm_flag) {
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <to_do_after_wake_up_from_standby+0x120>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f9      	bne.n	8002a34 <to_do_after_wake_up_from_standby+0x14>
		}

		to_do_on_alarm_off();
 8002a40:	f7fe feee 	bl	8001820 <to_do_on_alarm_off>

	// Flaga SBF (Standby flag) mówi o tym, czy MCU wybudził się ze stanu standby
	// SBF = 1 -> MCU wybudził się ze standby

	// na początku sprawdzamy czy nie jest ustawiona flaga SBF
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <to_do_after_wake_up_from_standby+0x124>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d13a      	bne.n	8002ac6 <to_do_after_wake_up_from_standby+0xa6>

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);	// wyszyszczenie flagi SBF, aby upewnić się że nie jesteśmy w trybie stanby
 8002a50:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <to_do_after_wake_up_from_standby+0x124>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <to_do_after_wake_up_from_standby+0x124>)
 8002a56:	f043 0308 	orr.w	r3, r3, #8
 8002a5a:	6013      	str	r3, [r2, #0]

	  for(int i=0; i<15; i++) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	e009      	b.n	8002a76 <to_do_after_wake_up_from_standby+0x56>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8002a62:	2120      	movs	r1, #32
 8002a64:	4838      	ldr	r0, [pc, #224]	; (8002b48 <to_do_after_wake_up_from_standby+0x128>)
 8002a66:	f001 f96c 	bl	8003d42 <HAL_GPIO_TogglePin>
		  delay(80);
 8002a6a:	2050      	movs	r0, #80	; 0x50
 8002a6c:	f000 fd32 	bl	80034d4 <delay>
	  for(int i=0; i<15; i++) {
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3301      	adds	r3, #1
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b0e      	cmp	r3, #14
 8002a7a:	ddf2      	ble.n	8002a62 <to_do_after_wake_up_from_standby+0x42>
	  }

	  if(!alarm_flag) {
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <to_do_after_wake_up_from_standby+0x120>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d118      	bne.n	8002ab6 <to_do_after_wake_up_from_standby+0x96>
		  lcd_clear();
 8002a84:	f7ff fbb8 	bl	80021f8 <lcd_clear>
		  lcd_set_cursor(0, 2);
 8002a88:	2102      	movs	r1, #2
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7ff fbd6 	bl	800223c <lcd_set_cursor>
		  lcd_send_string("Wake up from");
 8002a90:	482e      	ldr	r0, [pc, #184]	; (8002b4c <to_do_after_wake_up_from_standby+0x12c>)
 8002a92:	f7ff fcdb 	bl	800244c <lcd_send_string>
		  lcd_second_line();
 8002a96:	f7ff fc13 	bl	80022c0 <lcd_second_line>
		  lcd_set_cursor(1, 2);
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7ff fbcd 	bl	800223c <lcd_set_cursor>
		  lcd_send_string("STANDBY MODE");
 8002aa2:	482b      	ldr	r0, [pc, #172]	; (8002b50 <to_do_after_wake_up_from_standby+0x130>)
 8002aa4:	f7ff fcd2 	bl	800244c <lcd_send_string>
		  delay(1000);
 8002aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aac:	f000 fd12 	bl	80034d4 <delay>
		  lcd_clear();
 8002ab0:	f7ff fba2 	bl	80021f8 <lcd_clear>
 8002ab4:	e001      	b.n	8002aba <to_do_after_wake_up_from_standby+0x9a>
	  }
	  else {
		  to_do_on_alarm();
 8002ab6:	f7fe fea5 	bl	8001804 <to_do_on_alarm>
	  }

	  // Wyłączenie pinu WAKE UP
	  HAL_PWR_DisableWakeUpPin(WakeUp_PIN_Pin);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f002 faba 	bl	8005034 <HAL_PWR_DisableWakeUpPin>

	  // Wyłączenie Wake up timer
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002ac0:	4824      	ldr	r0, [pc, #144]	; (8002b54 <to_do_after_wake_up_from_standby+0x134>)
 8002ac2:	f003 fcb3 	bl	800642c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	// Keypad ports
	keypadStruct.R1_Port = R1_GPIO_Port;
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002ac8:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <to_do_after_wake_up_from_standby+0x13c>)
 8002aca:	601a      	str	r2, [r3, #0]
	keypadStruct.R2_Port = R2_GPIO_Port;
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002ace:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <to_do_after_wake_up_from_standby+0x13c>)
 8002ad0:	605a      	str	r2, [r3, #4]
	keypadStruct.R3_Port = R3_GPIO_Port;
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <to_do_after_wake_up_from_standby+0x128>)
 8002ad6:	609a      	str	r2, [r3, #8]
	keypadStruct.R4_Port = R4_GPIO_Port;
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002ada:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <to_do_after_wake_up_from_standby+0x13c>)
 8002adc:	60da      	str	r2, [r3, #12]

	keypadStruct.C1_Port = C1_GPIO_Port;
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <to_do_after_wake_up_from_standby+0x13c>)
 8002ae2:	611a      	str	r2, [r3, #16]
	keypadStruct.C2_Port = C2_GPIO_Port;
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <to_do_after_wake_up_from_standby+0x128>)
 8002ae8:	615a      	str	r2, [r3, #20]
	keypadStruct.C3_Port = C3_GPIO_Port;
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <to_do_after_wake_up_from_standby+0x128>)
 8002aee:	619a      	str	r2, [r3, #24]
	keypadStruct.C4_Port = C4_GPIO_Port;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <to_do_after_wake_up_from_standby+0x140>)
 8002af4:	61da      	str	r2, [r3, #28]

	// Keypad pins
	keypadStruct.R1_pin = R1_Pin;
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afc:	841a      	strh	r2, [r3, #32]
	keypadStruct.R2_pin = R2_Pin;
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b04:	845a      	strh	r2, [r3, #34]	; 0x22
	keypadStruct.R3_pin = R3_Pin;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0c:	849a      	strh	r2, [r3, #36]	; 0x24
	keypadStruct.R4_pin = R4_Pin;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b10:	2220      	movs	r2, #32
 8002b12:	84da      	strh	r2, [r3, #38]	; 0x26

	keypadStruct.C1_pin = C1_Pin;
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b16:	2210      	movs	r2, #16
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
	keypadStruct.C2_pin = C2_Pin;
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
	keypadStruct.C3_pin = C3_Pin;
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	859a      	strh	r2, [r3, #44]	; 0x2c
	keypadStruct.C4_pin = C4_Pin;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

	keypad4x4_Init(&keypadStruct);
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <to_do_after_wake_up_from_standby+0x138>)
 8002b32:	f7ff f831 	bl	8001b98 <keypad4x4_Init>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000321 	.word	0x20000321
 8002b44:	40007000 	.word	0x40007000
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	0800b5f0 	.word	0x0800b5f0
 8002b50:	0800b600 	.word	0x0800b600
 8002b54:	20000404 	.word	0x20000404
 8002b58:	20000424 	.word	0x20000424
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800

08002b64 <to_do_before_going_to_standby>:

void to_do_before_going_to_standby(void) {
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af04      	add	r7, sp, #16

	for(int i=0; i<3000; i++) {
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	e1af      	b.n	8002ed0 <to_do_before_going_to_standby+0x36c>

		// wykonaj jeśli zaczął się alarm
		if(alarm_flag) {
 8002b70:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <to_do_before_going_to_standby+0x258>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <to_do_before_going_to_standby+0x26>

			while (alarm_flag) {
 8002b78:	e001      	b.n	8002b7e <to_do_before_going_to_standby+0x1a>
				to_do_on_alarm();
 8002b7a:	f7fe fe43 	bl	8001804 <to_do_on_alarm>
			while (alarm_flag) {
 8002b7e:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <to_do_before_going_to_standby+0x258>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <to_do_before_going_to_standby+0x16>
			}

			to_do_on_alarm_off();
 8002b86:	f7fe fe4b 	bl	8001820 <to_do_on_alarm_off>
		}

		keypad4x4_ReadKeypad(keypadSwitches);
 8002b8a:	488d      	ldr	r0, [pc, #564]	; (8002dc0 <to_do_before_going_to_standby+0x25c>)
 8002b8c:	f7ff f984 	bl	8001e98 <keypad4x4_ReadKeypad>

		for(int j=0; j<16; j++) {
 8002b90:	2300      	movs	r3, #0
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	e01f      	b.n	8002bd6 <to_do_before_going_to_standby+0x72>

			if(keypadSwitches[j]) {
 8002b96:	4a8a      	ldr	r2, [pc, #552]	; (8002dc0 <to_do_before_going_to_standby+0x25c>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <to_do_before_going_to_standby+0x6c>
				lcd_clear();
 8002ba2:	f7ff fb29 	bl	80021f8 <lcd_clear>
				HAL_Delay(5);
 8002ba6:	2005      	movs	r0, #5
 8002ba8:	f000 fdc2 	bl	8003730 <HAL_Delay>
				lcd_send_string("Przycisk: ");
 8002bac:	4885      	ldr	r0, [pc, #532]	; (8002dc4 <to_do_before_going_to_standby+0x260>)
 8002bae:	f7ff fc4d 	bl	800244c <lcd_send_string>
				lcd_send_string(keypad4x4_GetChar(j));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff faa2 	bl	8002100 <keypad4x4_GetChar>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fc44 	bl	800244c <lcd_send_string>
				delay(1000);
 8002bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc8:	f000 fc84 	bl	80034d4 <delay>
				lcd_clear();
 8002bcc:	f7ff fb14 	bl	80021f8 <lcd_clear>
		for(int j=0; j<16; j++) {
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	dddc      	ble.n	8002b96 <to_do_before_going_to_standby+0x32>
			}

		}

		lcd_display_refresh();
 8002bdc:	f7ff fac6 	bl	800216c <lcd_display_refresh>

		// wykonaj jeśli użytkownik ustawił nową godzinę
		if(time_set_flag) {
 8002be0:	4b79      	ldr	r3, [pc, #484]	; (8002dc8 <to_do_before_going_to_standby+0x264>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8085 	beq.w	8002cf4 <to_do_before_going_to_standby+0x190>

			new_sec = time.seconds;
 8002bea:	4b78      	ldr	r3, [pc, #480]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <to_do_before_going_to_standby+0x26c>)
 8002bf0:	701a      	strb	r2, [r3, #0]
			new_hour = global_buffer[1];
 8002bf2:	4b78      	ldr	r3, [pc, #480]	; (8002dd4 <to_do_before_going_to_standby+0x270>)
 8002bf4:	785a      	ldrb	r2, [r3, #1]
 8002bf6:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <to_do_before_going_to_standby+0x274>)
 8002bf8:	701a      	strb	r2, [r3, #0]
			new_min = global_buffer[2];
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <to_do_before_going_to_standby+0x270>)
 8002bfc:	789a      	ldrb	r2, [r3, #2]
 8002bfe:	4b77      	ldr	r3, [pc, #476]	; (8002ddc <to_do_before_going_to_standby+0x278>)
 8002c00:	701a      	strb	r2, [r3, #0]
			new_dow = time.dayofweek;
 8002c02:	4b72      	ldr	r3, [pc, #456]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002c04:	78da      	ldrb	r2, [r3, #3]
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <to_do_before_going_to_standby+0x27c>)
 8002c08:	701a      	strb	r2, [r3, #0]
			new_dom = time.dayofmonth;
 8002c0a:	4b70      	ldr	r3, [pc, #448]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002c0c:	791a      	ldrb	r2, [r3, #4]
 8002c0e:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <to_do_before_going_to_standby+0x280>)
 8002c10:	701a      	strb	r2, [r3, #0]
			new_month = time.month;
 8002c12:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002c14:	795a      	ldrb	r2, [r3, #5]
 8002c16:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <to_do_before_going_to_standby+0x284>)
 8002c18:	701a      	strb	r2, [r3, #0]
			new_year = time.year;
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002c1c:	799a      	ldrb	r2, [r3, #6]
 8002c1e:	4b73      	ldr	r3, [pc, #460]	; (8002dec <to_do_before_going_to_standby+0x288>)
 8002c20:	701a      	strb	r2, [r3, #0]

			if( (new_hour > 23 || new_hour < 0 || new_min > 59 || new_min < 1) && time_set_flag) {
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <to_do_before_going_to_standby+0x274>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b17      	cmp	r3, #23
 8002c28:	d807      	bhi.n	8002c3a <to_do_before_going_to_standby+0xd6>
 8002c2a:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <to_do_before_going_to_standby+0x278>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b3b      	cmp	r3, #59	; 0x3b
 8002c30:	d803      	bhi.n	8002c3a <to_do_before_going_to_standby+0xd6>
 8002c32:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <to_do_before_going_to_standby+0x278>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d125      	bne.n	8002c86 <to_do_before_going_to_standby+0x122>
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <to_do_before_going_to_standby+0x264>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d021      	beq.n	8002c86 <to_do_before_going_to_standby+0x122>

				lcd_clear();
 8002c42:	f7ff fad9 	bl	80021f8 <lcd_clear>
				lcd_set_cursor(0, 1);
 8002c46:	2101      	movs	r1, #1
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff faf7 	bl	800223c <lcd_set_cursor>
				lcd_send_string("Nieprawid");
 8002c4e:	4868      	ldr	r0, [pc, #416]	; (8002df0 <to_do_before_going_to_standby+0x28c>)
 8002c50:	f7ff fbfc 	bl	800244c <lcd_send_string>
				lcd_send_own_char(3);
 8002c54:	2003      	movs	r0, #3
 8002c56:	f7ff fc7f 	bl	8002558 <lcd_send_own_char>
				lcd_send_string("owy");
 8002c5a:	4866      	ldr	r0, [pc, #408]	; (8002df4 <to_do_before_going_to_standby+0x290>)
 8002c5c:	f7ff fbf6 	bl	800244c <lcd_send_string>
				lcd_second_line();
 8002c60:	f7ff fb2e 	bl	80022c0 <lcd_second_line>
				lcd_set_cursor(1, 6);
 8002c64:	2106      	movs	r1, #6
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7ff fae8 	bl	800223c <lcd_set_cursor>
				lcd_send_string("czas!");
 8002c6c:	4862      	ldr	r0, [pc, #392]	; (8002df8 <to_do_before_going_to_standby+0x294>)
 8002c6e:	f7ff fbed 	bl	800244c <lcd_send_string>
				delay(1000);
 8002c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c76:	f000 fc2d 	bl	80034d4 <delay>
				lcd_clear();
 8002c7a:	f7ff fabd 	bl	80021f8 <lcd_clear>

				time_set_flag = 0;
 8002c7e:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <to_do_before_going_to_standby+0x264>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e036      	b.n	8002cf4 <to_do_before_going_to_standby+0x190>
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 8002c86:	4b52      	ldr	r3, [pc, #328]	; (8002dd0 <to_do_before_going_to_standby+0x26c>)
 8002c88:	7818      	ldrb	r0, [r3, #0]
 8002c8a:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <to_do_before_going_to_standby+0x278>)
 8002c8c:	781c      	ldrb	r4, [r3, #0]
 8002c8e:	4b52      	ldr	r3, [pc, #328]	; (8002dd8 <to_do_before_going_to_standby+0x274>)
 8002c90:	781d      	ldrb	r5, [r3, #0]
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <to_do_before_going_to_standby+0x27c>)
 8002c94:	781e      	ldrb	r6, [r3, #0]
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <to_do_before_going_to_standby+0x280>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <to_do_before_going_to_standby+0x284>)
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	4953      	ldr	r1, [pc, #332]	; (8002dec <to_do_before_going_to_standby+0x288>)
 8002ca0:	7809      	ldrb	r1, [r1, #0]
 8002ca2:	9102      	str	r1, [sp, #8]
 8002ca4:	9201      	str	r2, [sp, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4633      	mov	r3, r6
 8002caa:	462a      	mov	r2, r5
 8002cac:	4621      	mov	r1, r4
 8002cae:	f000 fb5b 	bl	8003368 <set_Time>

				lcd_clear();
 8002cb2:	f7ff faa1 	bl	80021f8 <lcd_clear>
				sprintf(new_time_details_msg, "%02d:%02d:%02d", new_hour, new_min, new_sec);
 8002cb6:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <to_do_before_going_to_standby+0x274>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <to_do_before_going_to_standby+0x278>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <to_do_before_going_to_standby+0x26c>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	494c      	ldr	r1, [pc, #304]	; (8002dfc <to_do_before_going_to_standby+0x298>)
 8002ccc:	484c      	ldr	r0, [pc, #304]	; (8002e00 <to_do_before_going_to_standby+0x29c>)
 8002cce:	f005 fcfd 	bl	80086cc <siprintf>
				lcd_send_string("Ustawiony czas:");
 8002cd2:	484c      	ldr	r0, [pc, #304]	; (8002e04 <to_do_before_going_to_standby+0x2a0>)
 8002cd4:	f7ff fbba 	bl	800244c <lcd_send_string>
				lcd_second_line();
 8002cd8:	f7ff faf2 	bl	80022c0 <lcd_second_line>
				lcd_send_string(new_time_details_msg);
 8002cdc:	4848      	ldr	r0, [pc, #288]	; (8002e00 <to_do_before_going_to_standby+0x29c>)
 8002cde:	f7ff fbb5 	bl	800244c <lcd_send_string>
				delay(1000);
 8002ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ce6:	f000 fbf5 	bl	80034d4 <delay>
				lcd_clear();
 8002cea:	f7ff fa85 	bl	80021f8 <lcd_clear>

				time_set_flag = 0;
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <to_do_before_going_to_standby+0x264>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			}

		}

		// wykonaj jeśli użytkownik ustawił nową datę
		if(date_set_flag) {
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <to_do_before_going_to_standby+0x2a4>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80c2 	beq.w	8002e82 <to_do_before_going_to_standby+0x31e>

			new_sec = time.seconds;
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <to_do_before_going_to_standby+0x26c>)
 8002d04:	701a      	strb	r2, [r3, #0]
			new_min = time.minutes;
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002d08:	785a      	ldrb	r2, [r3, #1]
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <to_do_before_going_to_standby+0x278>)
 8002d0c:	701a      	strb	r2, [r3, #0]
			new_hour = time.hour;
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <to_do_before_going_to_standby+0x268>)
 8002d10:	789a      	ldrb	r2, [r3, #2]
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <to_do_before_going_to_standby+0x274>)
 8002d14:	701a      	strb	r2, [r3, #0]

			new_dow = global_buffer[1];
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <to_do_before_going_to_standby+0x270>)
 8002d18:	785a      	ldrb	r2, [r3, #1]
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <to_do_before_going_to_standby+0x27c>)
 8002d1c:	701a      	strb	r2, [r3, #0]
			new_dom = global_buffer[2];
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <to_do_before_going_to_standby+0x270>)
 8002d20:	789a      	ldrb	r2, [r3, #2]
 8002d22:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <to_do_before_going_to_standby+0x280>)
 8002d24:	701a      	strb	r2, [r3, #0]
			new_month = global_buffer[3];
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <to_do_before_going_to_standby+0x270>)
 8002d28:	78da      	ldrb	r2, [r3, #3]
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <to_do_before_going_to_standby+0x284>)
 8002d2c:	701a      	strb	r2, [r3, #0]
			new_year = global_buffer[4];
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <to_do_before_going_to_standby+0x270>)
 8002d30:	791a      	ldrb	r2, [r3, #4]
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <to_do_before_going_to_standby+0x288>)
 8002d34:	701a      	strb	r2, [r3, #0]


			if( (new_dow > 7 || new_dow < 1 || new_dom > 31 || new_dom < 1 || new_month > 12 || new_month < 1 || new_year < 20) && date_set_flag) {
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <to_do_before_going_to_standby+0x27c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b07      	cmp	r3, #7
 8002d3c:	d817      	bhi.n	8002d6e <to_do_before_going_to_standby+0x20a>
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <to_do_before_going_to_standby+0x27c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <to_do_before_going_to_standby+0x20a>
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <to_do_before_going_to_standby+0x280>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b1f      	cmp	r3, #31
 8002d4c:	d80f      	bhi.n	8002d6e <to_do_before_going_to_standby+0x20a>
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <to_do_before_going_to_standby+0x280>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <to_do_before_going_to_standby+0x20a>
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <to_do_before_going_to_standby+0x284>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d807      	bhi.n	8002d6e <to_do_before_going_to_standby+0x20a>
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <to_do_before_going_to_standby+0x284>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <to_do_before_going_to_standby+0x20a>
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <to_do_before_going_to_standby+0x288>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b13      	cmp	r3, #19
 8002d6c:	d852      	bhi.n	8002e14 <to_do_before_going_to_standby+0x2b0>
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <to_do_before_going_to_standby+0x2a4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d04e      	beq.n	8002e14 <to_do_before_going_to_standby+0x2b0>

				lcd_clear();
 8002d76:	f7ff fa3f 	bl	80021f8 <lcd_clear>
				lcd_set_cursor(0, 1);
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7ff fa5d 	bl	800223c <lcd_set_cursor>
				lcd_send_string("Nieprawid");
 8002d82:	481b      	ldr	r0, [pc, #108]	; (8002df0 <to_do_before_going_to_standby+0x28c>)
 8002d84:	f7ff fb62 	bl	800244c <lcd_send_string>
				lcd_send_own_char(3);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f7ff fbe5 	bl	8002558 <lcd_send_own_char>
				lcd_send_string("owa");
 8002d8e:	481f      	ldr	r0, [pc, #124]	; (8002e0c <to_do_before_going_to_standby+0x2a8>)
 8002d90:	f7ff fb5c 	bl	800244c <lcd_send_string>
				lcd_second_line();
 8002d94:	f7ff fa94 	bl	80022c0 <lcd_second_line>
				lcd_set_cursor(1, 6);
 8002d98:	2106      	movs	r1, #6
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff fa4e 	bl	800223c <lcd_set_cursor>
				lcd_send_string("data!");
 8002da0:	481b      	ldr	r0, [pc, #108]	; (8002e10 <to_do_before_going_to_standby+0x2ac>)
 8002da2:	f7ff fb53 	bl	800244c <lcd_send_string>
				delay(1000);
 8002da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002daa:	f000 fb93 	bl	80034d4 <delay>
				lcd_clear();
 8002dae:	f7ff fa23 	bl	80021f8 <lcd_clear>

				date_set_flag = 0;
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <to_do_before_going_to_standby+0x2a4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e063      	b.n	8002e82 <to_do_before_going_to_standby+0x31e>
 8002dba:	bf00      	nop
 8002dbc:	20000321 	.word	0x20000321
 8002dc0:	200002b4 	.word	0x200002b4
 8002dc4:	0800b610 	.word	0x0800b610
 8002dc8:	200002ef 	.word	0x200002ef
 8002dcc:	2000032c 	.word	0x2000032c
 8002dd0:	20000468 	.word	0x20000468
 8002dd4:	200002e8 	.word	0x200002e8
 8002dd8:	20000465 	.word	0x20000465
 8002ddc:	20000467 	.word	0x20000467
 8002de0:	20000455 	.word	0x20000455
 8002de4:	20000466 	.word	0x20000466
 8002de8:	20000464 	.word	0x20000464
 8002dec:	20000469 	.word	0x20000469
 8002df0:	0800b61c 	.word	0x0800b61c
 8002df4:	0800b628 	.word	0x0800b628
 8002df8:	0800b62c 	.word	0x0800b62c
 8002dfc:	0800b634 	.word	0x0800b634
 8002e00:	2000046c 	.word	0x2000046c
 8002e04:	0800b644 	.word	0x0800b644
 8002e08:	200002ee 	.word	0x200002ee
 8002e0c:	0800b654 	.word	0x0800b654
 8002e10:	0800b658 	.word	0x0800b658
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 8002e14:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <to_do_before_going_to_standby+0x380>)
 8002e16:	7818      	ldrb	r0, [r3, #0]
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <to_do_before_going_to_standby+0x384>)
 8002e1a:	781c      	ldrb	r4, [r3, #0]
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <to_do_before_going_to_standby+0x388>)
 8002e1e:	781d      	ldrb	r5, [r3, #0]
 8002e20:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <to_do_before_going_to_standby+0x38c>)
 8002e22:	781e      	ldrb	r6, [r3, #0]
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <to_do_before_going_to_standby+0x390>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <to_do_before_going_to_standby+0x394>)
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	4933      	ldr	r1, [pc, #204]	; (8002efc <to_do_before_going_to_standby+0x398>)
 8002e2e:	7809      	ldrb	r1, [r1, #0]
 8002e30:	9102      	str	r1, [sp, #8]
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4633      	mov	r3, r6
 8002e38:	462a      	mov	r2, r5
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	f000 fa94 	bl	8003368 <set_Time>

				lcd_clear();
 8002e40:	f7ff f9da 	bl	80021f8 <lcd_clear>
				sprintf(new_date_details_msg, "%02d-%02d-20%02d", new_dom, new_month, new_year);
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <to_do_before_going_to_standby+0x390>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <to_do_before_going_to_standby+0x394>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <to_do_before_going_to_standby+0x398>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	460b      	mov	r3, r1
 8002e58:	4929      	ldr	r1, [pc, #164]	; (8002f00 <to_do_before_going_to_standby+0x39c>)
 8002e5a:	482a      	ldr	r0, [pc, #168]	; (8002f04 <to_do_before_going_to_standby+0x3a0>)
 8002e5c:	f005 fc36 	bl	80086cc <siprintf>
				lcd_send_string("Ustawiona data:");
 8002e60:	4829      	ldr	r0, [pc, #164]	; (8002f08 <to_do_before_going_to_standby+0x3a4>)
 8002e62:	f7ff faf3 	bl	800244c <lcd_send_string>
				lcd_second_line();
 8002e66:	f7ff fa2b 	bl	80022c0 <lcd_second_line>
				lcd_send_string(new_date_details_msg);
 8002e6a:	4826      	ldr	r0, [pc, #152]	; (8002f04 <to_do_before_going_to_standby+0x3a0>)
 8002e6c:	f7ff faee 	bl	800244c <lcd_send_string>
				delay(1000);
 8002e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e74:	f000 fb2e 	bl	80034d4 <delay>
				lcd_clear();
 8002e78:	f7ff f9be 	bl	80021f8 <lcd_clear>

				date_set_flag = 0;
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <to_do_before_going_to_standby+0x3a8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
			}

		}

		// wykonaj jeśli użytkownik ustawił nowy czas alarmu
		if(alarm_set_flag) {
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <to_do_before_going_to_standby+0x3ac>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01c      	beq.n	8002ec4 <to_do_before_going_to_standby+0x360>

			days_to_alarm = global_buffer[1];	// dni to drugi element, ponieważ pierwszy to literka a, mówiąca o tym, że ustawiamy alarm.
 8002e8a:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <to_do_before_going_to_standby+0x3b0>)
 8002e8c:	785a      	ldrb	r2, [r3, #1]
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <to_do_before_going_to_standby+0x3b4>)
 8002e90:	701a      	strb	r2, [r3, #0]
			alarm_hour = global_buffer[2];
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <to_do_before_going_to_standby+0x3b0>)
 8002e94:	789a      	ldrb	r2, [r3, #2]
 8002e96:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <to_do_before_going_to_standby+0x3b8>)
 8002e98:	701a      	strb	r2, [r3, #0]
			alarm_min = global_buffer[3];
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <to_do_before_going_to_standby+0x3b0>)
 8002e9c:	78da      	ldrb	r2, [r3, #3]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <to_do_before_going_to_standby+0x3bc>)
 8002ea0:	701a      	strb	r2, [r3, #0]
			alarm_sec = global_buffer[4];
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <to_do_before_going_to_standby+0x3b0>)
 8002ea4:	791a      	ldrb	r2, [r3, #4]
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <to_do_before_going_to_standby+0x3c0>)
 8002ea8:	701a      	strb	r2, [r3, #0]

			rtc_set_alarm(days_to_alarm, alarm_hour, alarm_min, alarm_sec);
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <to_do_before_going_to_standby+0x3b4>)
 8002eac:	7818      	ldrb	r0, [r3, #0]
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <to_do_before_going_to_standby+0x3b8>)
 8002eb0:	7819      	ldrb	r1, [r3, #0]
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <to_do_before_going_to_standby+0x3bc>)
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <to_do_before_going_to_standby+0x3c0>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f7fe f969 	bl	8001190 <rtc_set_alarm>
			alarm_set_flag = 0;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <to_do_before_going_to_standby+0x3ac>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
		}

		delay(10);		// 10 ms
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f000 fb05 	bl	80034d4 <delay>
	for(int i=0; i<3000; i++) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f77f ae4a 	ble.w	8002b70 <to_do_before_going_to_standby+0xc>
	}

}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee4:	20000468 	.word	0x20000468
 8002ee8:	20000467 	.word	0x20000467
 8002eec:	20000465 	.word	0x20000465
 8002ef0:	20000455 	.word	0x20000455
 8002ef4:	20000466 	.word	0x20000466
 8002ef8:	20000464 	.word	0x20000464
 8002efc:	20000469 	.word	0x20000469
 8002f00:	0800b660 	.word	0x0800b660
 8002f04:	20000458 	.word	0x20000458
 8002f08:	0800b674 	.word	0x0800b674
 8002f0c:	200002ee 	.word	0x200002ee
 8002f10:	20000337 	.word	0x20000337
 8002f14:	200002e8 	.word	0x200002e8
 8002f18:	20000454 	.word	0x20000454
 8002f1c:	200002d3 	.word	0x200002d3
 8002f20:	20000338 	.word	0x20000338
 8002f24:	200002d1 	.word	0x200002d1

08002f28 <go_to_standby>:

void go_to_standby(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <go_to_standby+0xc4>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <go_to_standby+0x1e>

		while (alarm_flag) {
 8002f34:	e001      	b.n	8002f3a <go_to_standby+0x12>
			to_do_on_alarm();
 8002f36:	f7fe fc65 	bl	8001804 <to_do_on_alarm>
		while (alarm_flag) {
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <go_to_standby+0xc4>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <go_to_standby+0xe>
		}

		to_do_on_alarm_off();
 8002f42:	f7fe fc6d 	bl	8001820 <to_do_on_alarm_off>
	}

	// Przed wejściem w tryb STANDBY, musimy wyczyścić flagę WU (Wake up)
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002f46:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <go_to_standby+0xc8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <go_to_standby+0xc8>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6013      	str	r3, [r2, #0]

	// Jeśli urzywamy RTC do wybudzenia MCU, w tym projekcie wybudza ALARM A, musimy wyczyścić też flagę RTC Wake up
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <go_to_standby+0xcc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <go_to_standby+0xcc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f62:	60da      	str	r2, [r3, #12]

	lcd_clear();
 8002f64:	f7ff f948 	bl	80021f8 <lcd_clear>
	lcd_set_cursor(0, 2);
 8002f68:	2102      	movs	r1, #2
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7ff f966 	bl	800223c <lcd_set_cursor>
	lcd_send_string("Entering to");
 8002f70:	4821      	ldr	r0, [pc, #132]	; (8002ff8 <go_to_standby+0xd0>)
 8002f72:	f7ff fa6b 	bl	800244c <lcd_send_string>
	lcd_second_line();
 8002f76:	f7ff f9a3 	bl	80022c0 <lcd_second_line>
	lcd_send_string("STANDBY MODE...");
 8002f7a:	4820      	ldr	r0, [pc, #128]	; (8002ffc <go_to_standby+0xd4>)
 8002f7c:	f7ff fa66 	bl	800244c <lcd_send_string>
	delay(1000);
 8002f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f84:	f000 faa6 	bl	80034d4 <delay>
	lcd_clear();
 8002f88:	f7ff f936 	bl	80021f8 <lcd_clear>

	// Przed wejściem w tryb STANDBY, musimy włączyć pin Wake up, aby mógł nas potem wybudzić z tego stanu
	HAL_PWR_EnableWakeUpPin(WakeUp_PIN_Pin);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f002 f83f 	bl	8005010 <HAL_PWR_EnableWakeUpPin>


	// Wybudzanie układu z trybu STANDBY, defaultowo co 30 sekund

	// Włączenie RTC Wake up			  0x1D4C0 = 120_000 = 30 sekund,	4000 = 1s
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x1D4C0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
 8002f92:	2200      	movs	r2, #0
 8002f94:	491a      	ldr	r1, [pc, #104]	; (8003000 <go_to_standby+0xd8>)
 8002f96:	4817      	ldr	r0, [pc, #92]	; (8002ff4 <go_to_standby+0xcc>)
 8002f98:	f003 f988 	bl	80062ac <HAL_RTCEx_SetWakeUpTimer_IT>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <go_to_standby+0x7e>
		Error_Handler();
 8002fa2:	f7ff fc7b 	bl	800289c <Error_Handler>
	}

	lcd_clear();
 8002fa6:	f7ff f927 	bl	80021f8 <lcd_clear>
	lcd_set_cursor(0, 2);
 8002faa:	2102      	movs	r1, #2
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff f945 	bl	800223c <lcd_set_cursor>
	lcd_send_string("STANDBY MODE");
 8002fb2:	4814      	ldr	r0, [pc, #80]	; (8003004 <go_to_standby+0xdc>)
 8002fb4:	f7ff fa4a 	bl	800244c <lcd_send_string>
	lcd_second_line();
 8002fb8:	f7ff f982 	bl	80022c0 <lcd_second_line>
	lcd_set_cursor(1, 7);
 8002fbc:	2107      	movs	r1, #7
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7ff f93c 	bl	800223c <lcd_set_cursor>
	lcd_send_string("ON");
 8002fc4:	4810      	ldr	r0, [pc, #64]	; (8003008 <go_to_standby+0xe0>)
 8002fc6:	f7ff fa41 	bl	800244c <lcd_send_string>
	delay(1000);
 8002fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fce:	f000 fa81 	bl	80034d4 <delay>
	lcd_back_light_off();
 8002fd2:	f7ff f927 	bl	8002224 <lcd_back_light_off>
	lcd_clear();
 8002fd6:	f7ff f90f 	bl	80021f8 <lcd_clear>

	HAL_NVIC_SetPriority(EXTI_LINE_22, 0, 0);	// Wybudzenie z trybu STANDBY ma najwyższy priorytet w układzie
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2016      	movs	r0, #22
 8002fe0:	f000 fca3 	bl	800392a <HAL_NVIC_SetPriority>

	// Finalnie wchodzimy w tryb STANDBY
	HAL_PWR_EnterSTANDBYMode();
 8002fe4:	f002 f83a 	bl	800505c <HAL_PWR_EnterSTANDBYMode>
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000321 	.word	0x20000321
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	20000404 	.word	0x20000404
 8002ff8:	0800b684 	.word	0x0800b684
 8002ffc:	0800b690 	.word	0x0800b690
 8003000:	0001d4c0 	.word	0x0001d4c0
 8003004:	0800b600 	.word	0x0800b600
 8003008:	0800b6a0 	.word	0x0800b6a0

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_MspInit+0x4c>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_MspInit+0x4c>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_MspInit+0x4c>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_MspInit+0x4c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <HAL_MspInit+0x4c>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_MspInit+0x4c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler+0x4>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler+0x4>

0800307c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler+0x4>

08003082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b0:	f000 fb1e 	bl	80036f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <RTC_WKUP_IRQHandler+0x10>)
 80030be:	f003 fa0d 	bl	80064dc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000404 	.word	0x20000404

080030cc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80030d2:	f003 faa4 	bl	800661e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000478 	.word	0x20000478

080030e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030e6:	f003 fa9a 	bl	800661e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000478 	.word	0x20000478

080030f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80030fa:	f003 fa90 	bl	800661e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000478 	.word	0x20000478

08003108 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <USART2_IRQHandler+0x10>)
 800310e:	f003 feb5 	bl	8006e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200004c8 	.word	0x200004c8

0800311c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003120:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003124:	f000 fe28 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <RTC_Alarm_IRQHandler+0x10>)
 8003132:	f003 f803 	bl	800613c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000404 	.word	0x20000404

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f004 fc36 	bl	80079e0 <__errno>
 8003174:	4602      	mov	r2, r0
 8003176:	230c      	movs	r3, #12
 8003178:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20018000 	.word	0x20018000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	200002c4 	.word	0x200002c4
 80031a8:	20000510 	.word	0x20000510

080031ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <SystemInit+0x28>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <SystemInit+0x28>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SystemInit+0x28>)
 80031c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031c6:	609a      	str	r2, [r3, #8]
#endif
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	463b      	mov	r3, r7
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <MX_TIM1_Init+0x9c>)
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <MX_TIM1_Init+0xa0>)
 80031f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <MX_TIM1_Init+0x9c>)
 80031fc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003200:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <MX_TIM1_Init+0x9c>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <MX_TIM1_Init+0x9c>)
 800320a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800320e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <MX_TIM1_Init+0x9c>)
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <MX_TIM1_Init+0x9c>)
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <MX_TIM1_Init+0x9c>)
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003222:	4814      	ldr	r0, [pc, #80]	; (8003274 <MX_TIM1_Init+0x9c>)
 8003224:	f003 f9ac 	bl	8006580 <HAL_TIM_Base_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800322e:	f7ff fb35 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	4619      	mov	r1, r3
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <MX_TIM1_Init+0x9c>)
 8003240:	f003 faf5 	bl	800682e <HAL_TIM_ConfigClockSource>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800324a:	f7ff fb27 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003256:	463b      	mov	r3, r7
 8003258:	4619      	mov	r1, r3
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <MX_TIM1_Init+0x9c>)
 800325c:	f003 fcea 	bl	8006c34 <HAL_TIMEx_MasterConfigSynchronization>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003266:	f7ff fb19 	bl	800289c <Error_Handler>
  }

}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000478 	.word	0x20000478
 8003278:	40010000 	.word	0x40010000

0800327c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_TIM_Base_MspInit+0x68>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d125      	bne.n	80032da <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_TIM_Base_MspInit+0x6c>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <HAL_TIM_Base_MspInit+0x6c>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_TIM_Base_MspInit+0x6c>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	2018      	movs	r0, #24
 80032b0:	f000 fb3b 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80032b4:	2018      	movs	r0, #24
 80032b6:	f000 fb54 	bl	8003962 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	2019      	movs	r0, #25
 80032c0:	f000 fb33 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032c4:	2019      	movs	r0, #25
 80032c6:	f000 fb4c 	bl	8003962 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	201a      	movs	r0, #26
 80032d0:	f000 fb2b 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80032d4:	201a      	movs	r0, #26
 80032d6:	f000 fb44 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40023800 	.word	0x40023800

080032ec <decToBcd>:
uint8_t time_to_read[7];

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <decToBcd+0x48>)
 80032f8:	fb82 1203 	smull	r1, r2, r2, r3
 80032fc:	1092      	asrs	r2, r2, #2
 80032fe:	17db      	asrs	r3, r3, #31
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	b2d8      	uxtb	r0, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <decToBcd+0x48>)
 800330c:	fb83 1302 	smull	r1, r3, r3, r2
 8003310:	1099      	asrs	r1, r3, #2
 8003312:	17d3      	asrs	r3, r2, #31
 8003314:	1ac9      	subs	r1, r1, r3
 8003316:	460b      	mov	r3, r1
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	1ad1      	subs	r1, r2, r3
 8003320:	b2cb      	uxtb	r3, r1
 8003322:	4403      	add	r3, r0
 8003324:	b2db      	uxtb	r3, r3
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	66666667 	.word	0x66666667

08003338 <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	461a      	mov	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4413      	add	r3, r2
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <set_Time>:
TIME time;

// Metoda odpowiedzialna za ustawienie czasu i daty
// set_Time(sec, min, hour, dow, dom, month, year)
void set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b087      	sub	sp, #28
 800336c:	af04      	add	r7, sp, #16
 800336e:	4604      	mov	r4, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	71fb      	strb	r3, [r7, #7]
 800337a:	4603      	mov	r3, r0
 800337c:	71bb      	strb	r3, [r7, #6]
 800337e:	460b      	mov	r3, r1
 8003380:	717b      	strb	r3, [r7, #5]
 8003382:	4613      	mov	r3, r2
 8003384:	713b      	strb	r3, [r7, #4]
	time_to_write[0] = decToBcd(sec);
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ffaf 	bl	80032ec <decToBcd>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <set_Time+0xb4>)
 8003394:	701a      	strb	r2, [r3, #0]
	time_to_write[1] = decToBcd(min);
 8003396:	79bb      	ldrb	r3, [r7, #6]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ffa7 	bl	80032ec <decToBcd>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <set_Time+0xb4>)
 80033a4:	705a      	strb	r2, [r3, #1]
	time_to_write[2] = decToBcd(hour);
 80033a6:	797b      	ldrb	r3, [r7, #5]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff9f 	bl	80032ec <decToBcd>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <set_Time+0xb4>)
 80033b4:	709a      	strb	r2, [r3, #2]
	time_to_write[3] = decToBcd(dow);
 80033b6:	793b      	ldrb	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff97 	bl	80032ec <decToBcd>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <set_Time+0xb4>)
 80033c4:	70da      	strb	r2, [r3, #3]
	time_to_write[4] = decToBcd(dom);
 80033c6:	7e3b      	ldrb	r3, [r7, #24]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff8f 	bl	80032ec <decToBcd>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <set_Time+0xb4>)
 80033d4:	711a      	strb	r2, [r3, #4]
	time_to_write[5] = decToBcd(month);
 80033d6:	7f3b      	ldrb	r3, [r7, #28]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff87 	bl	80032ec <decToBcd>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <set_Time+0xb4>)
 80033e4:	715a      	strb	r2, [r3, #5]
	time_to_write[6] = decToBcd(year);
 80033e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff7e 	bl	80032ec <decToBcd>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <set_Time+0xb4>)
 80033f6:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
 80033f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fc:	9302      	str	r3, [sp, #8]
 80033fe:	2307      	movs	r3, #7
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <set_Time+0xb4>)
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2301      	movs	r3, #1
 8003408:	2200      	movs	r2, #0
 800340a:	21d0      	movs	r1, #208	; 0xd0
 800340c:	4804      	ldr	r0, [pc, #16]	; (8003420 <set_Time+0xb8>)
 800340e:	f000 ff01 	bl	8004214 <HAL_I2C_Mem_Write>
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop
 800341c:	200004c0 	.word	0x200004c0
 8003420:	20000390 	.word	0x20000390

08003424 <get_Time>:

void get_Time (void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_read, 7, 1000);
 800342a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	2307      	movs	r3, #7
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <get_Time+0xa4>)
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2301      	movs	r3, #1
 800343a:	2200      	movs	r2, #0
 800343c:	21d0      	movs	r1, #208	; 0xd0
 800343e:	4823      	ldr	r0, [pc, #140]	; (80034cc <get_Time+0xa8>)
 8003440:	f000 ffe2 	bl	8004408 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_read[0]);
 8003444:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <get_Time+0xa4>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff75 	bl	8003338 <bcdToDec>
 800344e:	4603      	mov	r3, r0
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <get_Time+0xac>)
 8003454:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_read[1]);
 8003456:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <get_Time+0xa4>)
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff6c 	bl	8003338 <bcdToDec>
 8003460:	4603      	mov	r3, r0
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <get_Time+0xac>)
 8003466:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_read[2]);
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <get_Time+0xa4>)
 800346a:	789b      	ldrb	r3, [r3, #2]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff63 	bl	8003338 <bcdToDec>
 8003472:	4603      	mov	r3, r0
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <get_Time+0xac>)
 8003478:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_read[3]);
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <get_Time+0xa4>)
 800347c:	78db      	ldrb	r3, [r3, #3]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ff5a 	bl	8003338 <bcdToDec>
 8003484:	4603      	mov	r3, r0
 8003486:	b2da      	uxtb	r2, r3
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <get_Time+0xac>)
 800348a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_read[4]);
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <get_Time+0xa4>)
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff51 	bl	8003338 <bcdToDec>
 8003496:	4603      	mov	r3, r0
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <get_Time+0xac>)
 800349c:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_read[5]);
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <get_Time+0xa4>)
 80034a0:	795b      	ldrb	r3, [r3, #5]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff48 	bl	8003338 <bcdToDec>
 80034a8:	4603      	mov	r3, r0
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <get_Time+0xac>)
 80034ae:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_read[6]);
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <get_Time+0xa4>)
 80034b2:	799b      	ldrb	r3, [r3, #6]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff3f 	bl	8003338 <bcdToDec>
 80034ba:	4603      	mov	r3, r0
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <get_Time+0xac>)
 80034c0:	719a      	strb	r2, [r3, #6]
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200004b8 	.word	0x200004b8
 80034cc:	20000390 	.word	0x20000390
 80034d0:	2000032c 	.word	0x2000032c

080034d4 <delay>:

void delay(uint16_t delay) {
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <delay+0x2c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80034e6:	bf00      	nop
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <delay+0x2c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3f9      	bcc.n	80034e8 <delay+0x14>
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000478 	.word	0x20000478

08003504 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <MX_USART2_UART_Init+0x50>)
 800350c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 8003510:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 800352a:	220c      	movs	r2, #12
 800352c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_USART2_UART_Init+0x4c>)
 800353c:	f003 fbfc 	bl	8006d38 <HAL_UART_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003546:	f7ff f9a9 	bl	800289c <Error_Handler>
  }

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200004c8 	.word	0x200004c8
 8003554:	40004400 	.word	0x40004400

08003558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_UART_MspInit+0x94>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d133      	bne.n	80035e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_UART_MspInit+0x98>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <HAL_UART_MspInit+0x98>)
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_UART_MspInit+0x98>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_UART_MspInit+0x98>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_UART_MspInit+0x98>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_UART_MspInit+0x98>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035b2:	230c      	movs	r3, #12
 80035b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80035be:	2301      	movs	r3, #1
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035c2:	2307      	movs	r3, #7
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4619      	mov	r1, r3
 80035cc:	4809      	ldr	r0, [pc, #36]	; (80035f4 <HAL_UART_MspInit+0x9c>)
 80035ce:	f000 fa05 	bl	80039dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2026      	movs	r0, #38	; 0x26
 80035d8:	f000 f9a7 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035dc:	2026      	movs	r0, #38	; 0x26
 80035de:	f000 f9c0 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035e2:	bf00      	nop
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40004400 	.word	0x40004400
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020000 	.word	0x40020000

080035f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035fe:	e003      	b.n	8003608 <LoopCopyDataInit>

08003600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003606:	3104      	adds	r1, #4

08003608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800360c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800360e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003610:	d3f6      	bcc.n	8003600 <CopyDataInit>
  ldr  r2, =_sbss
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003614:	e002      	b.n	800361c <LoopFillZerobss>

08003616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003618:	f842 3b04 	str.w	r3, [r2], #4

0800361c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800361e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003620:	d3f9      	bcc.n	8003616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003622:	f7ff fdc3 	bl	80031ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003626:	f004 f9e1 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800362a:	f7ff f855 	bl	80026d8 <main>
  bx  lr    
 800362e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003630:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003634:	0800b980 	.word	0x0800b980
  ldr  r0, =_sdata
 8003638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800363c:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 8003640:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8003644:	20000510 	.word	0x20000510

08003648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003648:	e7fe      	b.n	8003648 <ADC_IRQHandler>
	...

0800364c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_Init+0x40>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0d      	ldr	r2, [pc, #52]	; (800368c <HAL_Init+0x40>)
 8003656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_Init+0x40>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_Init+0x40>)
 8003662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_Init+0x40>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a07      	ldr	r2, [pc, #28]	; (800368c <HAL_Init+0x40>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003674:	2003      	movs	r0, #3
 8003676:	f000 f94d 	bl	8003914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800367a:	2000      	movs	r0, #0
 800367c:	f000 f808 	bl	8003690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003680:	f7ff fcc4 	bl	800300c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00

08003690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_InitTick+0x54>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x58>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f965 	bl	800397e <HAL_SYSTICK_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00e      	b.n	80036dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d80a      	bhi.n	80036da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c4:	2200      	movs	r2, #0
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f000 f92d 	bl	800392a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <HAL_InitTick+0x5c>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000084 	.word	0x20000084
 80036e8:	2000008c 	.word	0x2000008c
 80036ec:	20000088 	.word	0x20000088

080036f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_IncTick+0x20>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x24>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_IncTick+0x24>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	2000008c 	.word	0x2000008c
 8003714:	20000508 	.word	0x20000508

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000508 	.word	0x20000508

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff ffee 	bl	8003718 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d005      	beq.n	8003756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_Delay+0x40>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003756:	bf00      	nop
 8003758:	f7ff ffde 	bl	8003718 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8f7      	bhi.n	8003758 <HAL_Delay+0x28>
  {
  }
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	2000008c 	.word	0x2000008c

08003774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800379c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <__NVIC_GetPriorityGrouping+0x18>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0b      	blt.n	8003802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <__NVIC_EnableIRQ+0x38>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	; (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e0:	d301      	bcc.n	80038e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <SysTick_Config+0x40>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ee:	210f      	movs	r1, #15
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f7ff ff8e 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <SysTick_Config+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SysTick_Config+0x40>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000e010 	.word	0xe000e010

08003914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff29 	bl	8003774 <__NVIC_SetPriorityGrouping>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800393c:	f7ff ff3e 	bl	80037bc <__NVIC_GetPriorityGrouping>
 8003940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff8e 	bl	8003868 <NVIC_EncodePriority>
 800394c:	4602      	mov	r2, r0
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff5d 	bl	8003814 <__NVIC_SetPriority>
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff31 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ffa2 	bl	80038d0 <SysTick_Config>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d004      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e00c      	b.n	80039ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2205      	movs	r2, #5
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e159      	b.n	8003cac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f8:	2201      	movs	r2, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f040 8148 	bne.w	8003ca6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d00b      	beq.n	8003a36 <HAL_GPIO_Init+0x5a>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a2a:	2b11      	cmp	r3, #17
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b12      	cmp	r3, #18
 8003a34:	d130      	bne.n	8003a98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 0201 	and.w	r2, r3, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0xfc>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b12      	cmp	r3, #18
 8003ad6:	d123      	bne.n	8003b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	220f      	movs	r2, #15
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	08da      	lsrs	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3208      	adds	r2, #8
 8003b1a:	69b9      	ldr	r1, [r7, #24]
 8003b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0203 	and.w	r2, r3, #3
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a2 	beq.w	8003ca6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <HAL_GPIO_Init+0x2e4>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a55      	ldr	r2, [pc, #340]	; (8003cc0 <HAL_GPIO_Init+0x2e4>)
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_GPIO_Init+0x2e4>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7e:	4a51      	ldr	r2, [pc, #324]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a48      	ldr	r2, [pc, #288]	; (8003cc8 <HAL_GPIO_Init+0x2ec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x202>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a47      	ldr	r2, [pc, #284]	; (8003ccc <HAL_GPIO_Init+0x2f0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x1fe>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a46      	ldr	r2, [pc, #280]	; (8003cd0 <HAL_GPIO_Init+0x2f4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a45      	ldr	r2, [pc, #276]	; (8003cd4 <HAL_GPIO_Init+0x2f8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x1f6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a44      	ldr	r2, [pc, #272]	; (8003cd8 <HAL_GPIO_Init+0x2fc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x1f2>
 8003bca:	2304      	movs	r3, #4
 8003bcc:	e008      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e004      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e002      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_GPIO_Init+0x204>
 8003bde:	2300      	movs	r3, #0
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	f002 0203 	and.w	r2, r2, #3
 8003be6:	0092      	lsls	r2, r2, #2
 8003be8:	4093      	lsls	r3, r2
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf0:	4934      	ldr	r1, [pc, #208]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bfe:	4b37      	ldr	r3, [pc, #220]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c22:	4a2e      	ldr	r2, [pc, #184]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c76:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	f67f aea2 	bls.w	80039f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3724      	adds	r7, #36	; 0x24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40020400 	.word	0x40020400
 8003cd0:	40020800 	.word	0x40020800
 8003cd4:	40020c00 	.word	0x40020c00
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40013c00 	.word	0x40013c00

08003ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e001      	b.n	8003d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d20:	787b      	ldrb	r3, [r7, #1]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d2c:	e003      	b.n	8003d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2e:	887b      	ldrh	r3, [r7, #2]
 8003d30:	041a      	lsls	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	619a      	str	r2, [r3, #24]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	401a      	ands	r2, r3
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d104      	bne.n	8003d66 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	041a      	lsls	r2, r3, #16
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fd48 	bl	800182c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e11f      	b.n	8003ffa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fe54 	bl	8001a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	; 0x24
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f001 fd52 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a7b      	ldr	r2, [pc, #492]	; (8004004 <HAL_I2C_Init+0x25c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d807      	bhi.n	8003e2c <HAL_I2C_Init+0x84>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a7a      	ldr	r2, [pc, #488]	; (8004008 <HAL_I2C_Init+0x260>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e006      	b.n	8003e3a <HAL_I2C_Init+0x92>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a77      	ldr	r2, [pc, #476]	; (800400c <HAL_I2C_Init+0x264>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0db      	b.n	8003ffa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a72      	ldr	r2, [pc, #456]	; (8004010 <HAL_I2C_Init+0x268>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0c9b      	lsrs	r3, r3, #18
 8003e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a64      	ldr	r2, [pc, #400]	; (8004004 <HAL_I2C_Init+0x25c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <HAL_I2C_Init+0xd4>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	e009      	b.n	8003e90 <HAL_I2C_Init+0xe8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a63      	ldr	r2, [pc, #396]	; (8004014 <HAL_I2C_Init+0x26c>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	3301      	adds	r3, #1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4956      	ldr	r1, [pc, #344]	; (8004004 <HAL_I2C_Init+0x25c>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d80d      	bhi.n	8003ecc <HAL_I2C_Init+0x124>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e59      	subs	r1, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	bf38      	it	cc
 8003ec8:	2304      	movcc	r3, #4
 8003eca:	e04f      	b.n	8003f6c <HAL_I2C_Init+0x1c4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d111      	bne.n	8003ef8 <HAL_I2C_Init+0x150>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1e58      	subs	r0, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	440b      	add	r3, r1
 8003ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e012      	b.n	8003f1e <HAL_I2C_Init+0x176>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1e58      	subs	r0, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	0099      	lsls	r1, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Init+0x17e>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e022      	b.n	8003f6c <HAL_I2C_Init+0x1c4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10e      	bne.n	8003f4c <HAL_I2C_Init+0x1a4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1e58      	subs	r0, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	440b      	add	r3, r1
 8003f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f40:	3301      	adds	r3, #1
 8003f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	e00f      	b.n	8003f6c <HAL_I2C_Init+0x1c4>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e58      	subs	r0, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	0099      	lsls	r1, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	6809      	ldr	r1, [r1, #0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6911      	ldr	r1, [r2, #16]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68d2      	ldr	r2, [r2, #12]
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	000186a0 	.word	0x000186a0
 8004008:	001e847f 	.word	0x001e847f
 800400c:	003d08ff 	.word	0x003d08ff
 8004010:	431bde83 	.word	0x431bde83
 8004014:	10624dd3 	.word	0x10624dd3

08004018 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	460b      	mov	r3, r1
 8004026:	817b      	strh	r3, [r7, #10]
 8004028:	4613      	mov	r3, r2
 800402a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff fb74 	bl	8003718 <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 80e0 	bne.w	8004200 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2319      	movs	r3, #25
 8004046:	2201      	movs	r2, #1
 8004048:	4970      	ldr	r1, [pc, #448]	; (800420c <HAL_I2C_Master_Transmit+0x1f4>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fe02 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	e0d3      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2C_Master_Transmit+0x50>
 8004064:	2302      	movs	r3, #2
 8004066:	e0cc      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d007      	beq.n	800408e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	893a      	ldrh	r2, [r7, #8]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a50      	ldr	r2, [pc, #320]	; (8004210 <HAL_I2C_Master_Transmit+0x1f8>)
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d0:	8979      	ldrh	r1, [r7, #10]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fbbc 	bl	8004854 <I2C_MasterRequestWrite>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e08d      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040fc:	e066      	b.n	80041cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fe7c 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06b      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d11b      	bne.n	80041a0 <HAL_I2C_Master_Transmit+0x188>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	d017      	beq.n	80041a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	6a39      	ldr	r1, [r7, #32]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fe6c 	bl	8004e82 <I2C_WaitOnBTFFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d107      	bne.n	80041c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01a      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d194      	bne.n	80040fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	00100002 	.word	0x00100002
 8004210:	ffff0000 	.word	0xffff0000

08004214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422e:	f7ff fa73 	bl	8003718 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	f040 80d9 	bne.w	80043f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2319      	movs	r3, #25
 8004248:	2201      	movs	r2, #1
 800424a:	496d      	ldr	r1, [pc, #436]	; (8004400 <HAL_I2C_Mem_Write+0x1ec>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fd01 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	e0cc      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_I2C_Mem_Write+0x56>
 8004266:	2302      	movs	r3, #2
 8004268:	e0c5      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d007      	beq.n	8004290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2221      	movs	r2, #33	; 0x21
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	; 0x40
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a4d      	ldr	r2, [pc, #308]	; (8004404 <HAL_I2C_Mem_Write+0x1f0>)
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042d2:	88f8      	ldrh	r0, [r7, #6]
 80042d4:	893a      	ldrh	r2, [r7, #8]
 80042d6:	8979      	ldrh	r1, [r7, #10]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	4603      	mov	r3, r0
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fb38 	bl	8004958 <I2C_RequestMemoryWrite>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d052      	beq.n	8004394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e081      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fd82 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b04      	cmp	r3, #4
 8004308:	d107      	bne.n	800431a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06b      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_I2C_Mem_Write+0x180>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d017      	beq.n	8004394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1aa      	bne.n	80042f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fd6e 	bl	8004e82 <I2C_WaitOnBTFFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e016      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	00100002 	.word	0x00100002
 8004404:	ffff0000 	.word	0xffff0000

08004408 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	; 0x30
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004422:	f7ff f979 	bl	8003718 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	f040 8208 	bne.w	8004846 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2319      	movs	r3, #25
 800443c:	2201      	movs	r2, #1
 800443e:	497b      	ldr	r1, [pc, #492]	; (800462c <HAL_I2C_Mem_Read+0x224>)
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fc07 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
 800444e:	e1fb      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_I2C_Mem_Read+0x56>
 800445a:	2302      	movs	r3, #2
 800445c:	e1f4      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	; 0x22
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2240      	movs	r2, #64	; 0x40
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a5b      	ldr	r2, [pc, #364]	; (8004630 <HAL_I2C_Mem_Read+0x228>)
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c6:	88f8      	ldrh	r0, [r7, #6]
 80044c8:	893a      	ldrh	r2, [r7, #8]
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	4603      	mov	r3, r0
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fad4 	bl	8004a84 <I2C_RequestMemoryRead>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1b0      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e184      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d11b      	bne.n	8004556 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e164      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	2b02      	cmp	r3, #2
 800455c:	d11b      	bne.n	8004596 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	e144      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045ac:	e138      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	f200 80f1 	bhi.w	800479a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d123      	bne.n	8004608 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fc9d 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e139      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004606:	e10b      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	2b02      	cmp	r3, #2
 800460e:	d14e      	bne.n	80046ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	2200      	movs	r2, #0
 8004618:	4906      	ldr	r1, [pc, #24]	; (8004634 <HAL_I2C_Mem_Read+0x22c>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fb1a 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e10e      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
 800462a:	bf00      	nop
 800462c:	00100002 	.word	0x00100002
 8004630:	ffff0000 	.word	0xffff0000
 8004634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ac:	e0b8      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	2200      	movs	r2, #0
 80046b6:	4966      	ldr	r1, [pc, #408]	; (8004850 <HAL_I2C_Mem_Read+0x448>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 facb 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0bf      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	2200      	movs	r2, #0
 8004712:	494f      	ldr	r1, [pc, #316]	; (8004850 <HAL_I2C_Mem_Read+0x448>)
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fa9d 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e091      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004798:	e042      	b.n	8004820 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fbb0 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e04c      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d118      	bne.n	8004820 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	f47f aec2 	bne.w	80045ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e000      	b.n	8004848 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004846:	2302      	movs	r3, #2
  }
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	; 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	00010004 	.word	0x00010004

08004854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d006      	beq.n	800487e <I2C_MasterRequestWrite+0x2a>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d003      	beq.n	800487e <I2C_MasterRequestWrite+0x2a>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800487c:	d108      	bne.n	8004890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e00b      	b.n	80048a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b12      	cmp	r3, #18
 8004896:	d107      	bne.n	80048a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9cd 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d103      	bne.n	80048d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e035      	b.n	8004948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d108      	bne.n	80048f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f4:	611a      	str	r2, [r3, #16]
 80048f6:	e01b      	b.n	8004930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048f8:	897b      	ldrh	r3, [r7, #10]
 80048fa:	11db      	asrs	r3, r3, #7
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 0306 	and.w	r3, r3, #6
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f063 030f 	orn	r3, r3, #15
 8004908:	b2da      	uxtb	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	490e      	ldr	r1, [pc, #56]	; (8004950 <I2C_MasterRequestWrite+0xfc>)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f9f3 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e010      	b.n	8004948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004926:	897b      	ldrh	r3, [r7, #10]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4907      	ldr	r1, [pc, #28]	; (8004954 <I2C_MasterRequestWrite+0x100>)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f9e3 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	00010008 	.word	0x00010008
 8004954:	00010002 	.word	0x00010002

08004958 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	817b      	strh	r3, [r7, #10]
 800496a:	460b      	mov	r3, r1
 800496c:	813b      	strh	r3, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f960 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d103      	bne.n	80049b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e05f      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	492d      	ldr	r1, [pc, #180]	; (8004a80 <I2C_RequestMemoryWrite+0x128>)
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f998 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04c      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa02 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e02b      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a24:	893b      	ldrh	r3, [r7, #8]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	e021      	b.n	8004a74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6a39      	ldr	r1, [r7, #32]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f9dc 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d107      	bne.n	8004a66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e005      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6a:	893b      	ldrh	r3, [r7, #8]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00010002 	.word	0x00010002

08004a84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f8c2 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	d103      	bne.n	8004aee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0aa      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	4952      	ldr	r1, [pc, #328]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f8fa 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e097      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6a39      	ldr	r1, [r7, #32]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f964 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e076      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e021      	b.n	8004bb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	6a39      	ldr	r1, [r7, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f93e 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e050      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba6:	893b      	ldrh	r3, [r7, #8]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f923 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d107      	bne.n	8004bd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e035      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f82b 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d103      	bne.n	8004c1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e013      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c20:	897b      	ldrh	r3, [r7, #10]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f863 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	00010002 	.word	0x00010002

08004c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	e025      	b.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d021      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe fd53 	bl	8003718 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d116      	bne.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e023      	b.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10d      	bne.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	e00c      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0b6      	beq.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d10:	e051      	b.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d123      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e046      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d021      	beq.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fe fcd1 	bl	8003718 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d116      	bne.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e020      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10c      	bne.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e00b      	b.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d18d      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e02d      	b.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8ce 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e02d      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d021      	beq.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fe fc77 	bl	8003718 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d116      	bne.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e007      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d1ca      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8e:	e02d      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f88d 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e02d      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d021      	beq.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	f7fe fc36 	bl	8003718 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d1ca      	bne.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f10:	e042      	b.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d119      	bne.n	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e029      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fe fbe0 	bl	8003718 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e007      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d1b5      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d11b      	bne.n	8005000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_PWR_EnableWakeUpPin+0x20>)
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4904      	ldr	r1, [pc, #16]	; (8005030 <HAL_PWR_EnableWakeUpPin+0x20>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40007000 	.word	0x40007000

08005034 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_PWR_DisableWakeUpPin+0x24>)
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	43db      	mvns	r3, r3
 8005044:	4904      	ldr	r1, [pc, #16]	; (8005058 <HAL_PWR_DisableWakeUpPin+0x24>)
 8005046:	4013      	ands	r3, r2
 8005048:	604b      	str	r3, [r1, #4]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40007000 	.word	0x40007000

0800505c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a07      	ldr	r2, [pc, #28]	; (8005084 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4a05      	ldr	r2, [pc, #20]	; (8005088 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005072:	f043 0304 	orr.w	r3, r3, #4
 8005076:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005078:	bf30      	wfi
}
 800507a:	bf00      	nop
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40007000 	.word	0x40007000
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e25b      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d075      	beq.n	8005196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050aa:	4ba3      	ldr	r3, [pc, #652]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b6:	4ba0      	ldr	r3, [pc, #640]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d112      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c2:	4b9d      	ldr	r3, [pc, #628]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	4b99      	ldr	r3, [pc, #612]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05b      	beq.n	8005194 <HAL_RCC_OscConfig+0x108>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d157      	bne.n	8005194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e236      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x74>
 80050f2:	4b91      	ldr	r3, [pc, #580]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a90      	ldr	r2, [pc, #576]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e01d      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x98>
 800510a:	4b8b      	ldr	r3, [pc, #556]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a8a      	ldr	r2, [pc, #552]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b88      	ldr	r3, [pc, #544]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a87      	ldr	r2, [pc, #540]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e00b      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005124:	4b84      	ldr	r3, [pc, #528]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a83      	ldr	r2, [pc, #524]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b81      	ldr	r3, [pc, #516]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a80      	ldr	r2, [pc, #512]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe fae8 	bl	8003718 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fe fae4 	bl	8003718 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1fb      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b76      	ldr	r3, [pc, #472]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0xc0>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe fad4 	bl	8003718 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe fad0 	bl	8003718 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1e7      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0xe8>
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d063      	beq.n	800526a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	4b65      	ldr	r3, [pc, #404]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ae:	4b62      	ldr	r3, [pc, #392]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d11c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ba:	4b5f      	ldr	r3, [pc, #380]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e1bb      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b56      	ldr	r3, [pc, #344]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4952      	ldr	r1, [pc, #328]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	e03a      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b4f      	ldr	r3, [pc, #316]	; (800533c <HAL_RCC_OscConfig+0x2b0>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fe fa89 	bl	8003718 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800520a:	f7fe fa85 	bl	8003718 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e19c      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4940      	ldr	r1, [pc, #256]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	e015      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <HAL_RCC_OscConfig+0x2b0>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fe fa68 	bl	8003718 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524c:	f7fe fa64 	bl	8003718 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e17b      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d030      	beq.n	80052d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527e:	4b30      	ldr	r3, [pc, #192]	; (8005340 <HAL_RCC_OscConfig+0x2b4>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fe fa48 	bl	8003718 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528c:	f7fe fa44 	bl	8003718 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e15b      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	4b26      	ldr	r3, [pc, #152]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x200>
 80052aa:	e015      	b.n	80052d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <HAL_RCC_OscConfig+0x2b4>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fe fa31 	bl	8003718 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fe fa2d 	bl	8003718 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e144      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a0 	beq.w	8005426 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10f      	bne.n	8005316 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6413      	str	r3, [r2, #64]	; 0x40
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_RCC_OscConfig+0x2b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d121      	bne.n	8005366 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <HAL_RCC_OscConfig+0x2b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a07      	ldr	r2, [pc, #28]	; (8005344 <HAL_RCC_OscConfig+0x2b8>)
 8005328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532e:	f7fe f9f3 	bl	8003718 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	e011      	b.n	800535a <HAL_RCC_OscConfig+0x2ce>
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	42470000 	.word	0x42470000
 8005340:	42470e80 	.word	0x42470e80
 8005344:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005348:	f7fe f9e6 	bl	8003718 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0fd      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535a:	4b81      	ldr	r3, [pc, #516]	; (8005560 <HAL_RCC_OscConfig+0x4d4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d106      	bne.n	800537c <HAL_RCC_OscConfig+0x2f0>
 800536e:	4b7d      	ldr	r3, [pc, #500]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a7c      	ldr	r2, [pc, #496]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
 800537a:	e01c      	b.n	80053b6 <HAL_RCC_OscConfig+0x32a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b05      	cmp	r3, #5
 8005382:	d10c      	bne.n	800539e <HAL_RCC_OscConfig+0x312>
 8005384:	4b77      	ldr	r3, [pc, #476]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a76      	ldr	r2, [pc, #472]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 800538a:	f043 0304 	orr.w	r3, r3, #4
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	4b74      	ldr	r3, [pc, #464]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a73      	ldr	r2, [pc, #460]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	e00b      	b.n	80053b6 <HAL_RCC_OscConfig+0x32a>
 800539e:	4b71      	ldr	r3, [pc, #452]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a70      	ldr	r2, [pc, #448]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	4b6e      	ldr	r3, [pc, #440]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a6d      	ldr	r2, [pc, #436]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053be:	f7fe f9ab 	bl	8003718 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7fe f9a7 	bl	8003718 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0bc      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053dc:	4b61      	ldr	r3, [pc, #388]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ee      	beq.n	80053c6 <HAL_RCC_OscConfig+0x33a>
 80053e8:	e014      	b.n	8005414 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ea:	f7fe f995 	bl	8003718 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fe f991 	bl	8003718 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e0a6      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005408:	4b56      	ldr	r3, [pc, #344]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ee      	bne.n	80053f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541a:	4b52      	ldr	r3, [pc, #328]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	4a51      	ldr	r2, [pc, #324]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8092 	beq.w	8005554 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005430:	4b4c      	ldr	r3, [pc, #304]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d05c      	beq.n	80054f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d141      	bne.n	80054c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005444:	4b48      	ldr	r3, [pc, #288]	; (8005568 <HAL_RCC_OscConfig+0x4dc>)
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fe f965 	bl	8003718 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005452:	f7fe f961 	bl	8003718 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e078      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f0      	bne.n	8005452 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	019b      	lsls	r3, r3, #6
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	061b      	lsls	r3, r3, #24
 8005494:	4933      	ldr	r1, [pc, #204]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800549a:	4b33      	ldr	r3, [pc, #204]	; (8005568 <HAL_RCC_OscConfig+0x4dc>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fe f93a 	bl	8003718 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fe f936 	bl	8003718 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e04d      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ba:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x41c>
 80054c6:	e045      	b.n	8005554 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <HAL_RCC_OscConfig+0x4dc>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ce:	f7fe f923 	bl	8003718 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fe f91f 	bl	8003718 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e036      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x44a>
 80054f4:	e02e      	b.n	8005554 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e029      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_RCC_OscConfig+0x4d8>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d11c      	bne.n	8005550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d115      	bne.n	8005550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800552a:	4013      	ands	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005530:	4293      	cmp	r3, r2
 8005532:	d10d      	bne.n	8005550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d106      	bne.n	8005550 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40007000 	.word	0x40007000
 8005564:	40023800 	.word	0x40023800
 8005568:	42470060 	.word	0x42470060

0800556c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0cc      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005580:	4b68      	ldr	r3, [pc, #416]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d90c      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b65      	ldr	r3, [pc, #404]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b63      	ldr	r3, [pc, #396]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0b8      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c0:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4a58      	ldr	r2, [pc, #352]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d8:	4b53      	ldr	r3, [pc, #332]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4a52      	ldr	r2, [pc, #328]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e4:	4b50      	ldr	r3, [pc, #320]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	494d      	ldr	r1, [pc, #308]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d044      	beq.n	800568c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d107      	bne.n	800561a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560a:	4b47      	ldr	r3, [pc, #284]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d119      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e07f      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d003      	beq.n	800562a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005626:	2b03      	cmp	r3, #3
 8005628:	d107      	bne.n	800563a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562a:	4b3f      	ldr	r3, [pc, #252]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e06f      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e067      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 0203 	bic.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4934      	ldr	r1, [pc, #208]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	4313      	orrs	r3, r2
 800565a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800565c:	f7fe f85c 	bl	8003718 <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	e00a      	b.n	800567a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005664:	f7fe f858 	bl	8003718 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e04f      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 020c 	and.w	r2, r3, #12
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	429a      	cmp	r2, r3
 800568a:	d1eb      	bne.n	8005664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d20c      	bcs.n	80056b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e032      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c0:	4b19      	ldr	r3, [pc, #100]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4916      	ldr	r1, [pc, #88]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	490e      	ldr	r1, [pc, #56]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056f2:	f000 f821 	bl	8005738 <HAL_RCC_GetSysClockFreq>
 80056f6:	4601      	mov	r1, r0
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <HAL_RCC_ClockConfig+0x1c0>)
 8005704:	5cd3      	ldrb	r3, [r2, r3]
 8005706:	fa21 f303 	lsr.w	r3, r1, r3
 800570a:	4a09      	ldr	r2, [pc, #36]	; (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 800570c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_RCC_ClockConfig+0x1c8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fd ffbc 	bl	8003690 <HAL_InitTick>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023c00 	.word	0x40023c00
 8005728:	40023800 	.word	0x40023800
 800572c:	0800b6a4 	.word	0x0800b6a4
 8005730:	20000084 	.word	0x20000084
 8005734:	20000088 	.word	0x20000088

08005738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	2300      	movs	r3, #0
 8005748:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800574e:	4b50      	ldr	r3, [pc, #320]	; (8005890 <HAL_RCC_GetSysClockFreq+0x158>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
 8005756:	2b04      	cmp	r3, #4
 8005758:	d007      	beq.n	800576a <HAL_RCC_GetSysClockFreq+0x32>
 800575a:	2b08      	cmp	r3, #8
 800575c:	d008      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x38>
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 808d 	bne.w	800587e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005764:	4b4b      	ldr	r3, [pc, #300]	; (8005894 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005766:	60bb      	str	r3, [r7, #8]
       break;
 8005768:	e08c      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800576a:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_RCC_GetSysClockFreq+0x160>)
 800576c:	60bb      	str	r3, [r7, #8]
      break;
 800576e:	e089      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005770:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCC_GetSysClockFreq+0x158>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005778:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800577a:	4b45      	ldr	r3, [pc, #276]	; (8005890 <HAL_RCC_GetSysClockFreq+0x158>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d023      	beq.n	80057ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005786:	4b42      	ldr	r3, [pc, #264]	; (8005890 <HAL_RCC_GetSysClockFreq+0x158>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	099b      	lsrs	r3, r3, #6
 800578c:	f04f 0400 	mov.w	r4, #0
 8005790:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	ea03 0501 	and.w	r5, r3, r1
 800579c:	ea04 0602 	and.w	r6, r4, r2
 80057a0:	4a3d      	ldr	r2, [pc, #244]	; (8005898 <HAL_RCC_GetSysClockFreq+0x160>)
 80057a2:	fb02 f106 	mul.w	r1, r2, r6
 80057a6:	2200      	movs	r2, #0
 80057a8:	fb02 f205 	mul.w	r2, r2, r5
 80057ac:	440a      	add	r2, r1
 80057ae:	493a      	ldr	r1, [pc, #232]	; (8005898 <HAL_RCC_GetSysClockFreq+0x160>)
 80057b0:	fba5 0101 	umull	r0, r1, r5, r1
 80057b4:	1853      	adds	r3, r2, r1
 80057b6:	4619      	mov	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f04f 0400 	mov.w	r4, #0
 80057be:	461a      	mov	r2, r3
 80057c0:	4623      	mov	r3, r4
 80057c2:	f7fb fa69 	bl	8000c98 <__aeabi_uldivmod>
 80057c6:	4603      	mov	r3, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e049      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ce:	4b30      	ldr	r3, [pc, #192]	; (8005890 <HAL_RCC_GetSysClockFreq+0x158>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	f04f 0400 	mov.w	r4, #0
 80057d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	ea03 0501 	and.w	r5, r3, r1
 80057e4:	ea04 0602 	and.w	r6, r4, r2
 80057e8:	4629      	mov	r1, r5
 80057ea:	4632      	mov	r2, r6
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	0154      	lsls	r4, r2, #5
 80057f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057fa:	014b      	lsls	r3, r1, #5
 80057fc:	4619      	mov	r1, r3
 80057fe:	4622      	mov	r2, r4
 8005800:	1b49      	subs	r1, r1, r5
 8005802:	eb62 0206 	sbc.w	r2, r2, r6
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	0194      	lsls	r4, r2, #6
 8005810:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005814:	018b      	lsls	r3, r1, #6
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	eb64 0402 	sbc.w	r4, r4, r2
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	00e2      	lsls	r2, r4, #3
 8005826:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800582a:	00d9      	lsls	r1, r3, #3
 800582c:	460b      	mov	r3, r1
 800582e:	4614      	mov	r4, r2
 8005830:	195b      	adds	r3, r3, r5
 8005832:	eb44 0406 	adc.w	r4, r4, r6
 8005836:	f04f 0100 	mov.w	r1, #0
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	02a2      	lsls	r2, r4, #10
 8005840:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005844:	0299      	lsls	r1, r3, #10
 8005846:	460b      	mov	r3, r1
 8005848:	4614      	mov	r4, r2
 800584a:	4618      	mov	r0, r3
 800584c:	4621      	mov	r1, r4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	461a      	mov	r2, r3
 8005856:	4623      	mov	r3, r4
 8005858:	f7fb fa1e 	bl	8000c98 <__aeabi_uldivmod>
 800585c:	4603      	mov	r3, r0
 800585e:	460c      	mov	r4, r1
 8005860:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_GetSysClockFreq+0x158>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	3301      	adds	r3, #1
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	60bb      	str	r3, [r7, #8]
      break;
 800587c:	e002      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005880:	60bb      	str	r3, [r7, #8]
      break;
 8005882:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005884:	68bb      	ldr	r3, [r7, #8]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800
 8005894:	00f42400 	.word	0x00f42400
 8005898:	017d7840 	.word	0x017d7840

0800589c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000084 	.word	0x20000084

080058b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b8:	f7ff fff0 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058bc:	4601      	mov	r1, r0
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4a03      	ldr	r2, [pc, #12]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ca:	5cd3      	ldrb	r3, [r2, r3]
 80058cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	0800b6b4 	.word	0x0800b6b4

080058dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e0:	f7ff ffdc 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058e4:	4601      	mov	r1, r0
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0b5b      	lsrs	r3, r3, #13
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4a03      	ldr	r2, [pc, #12]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f2:	5cd3      	ldrb	r3, [r2, r3]
 80058f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40023800 	.word	0x40023800
 8005900:	0800b6b4 	.word	0x0800b6b4

08005904 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005928:	2b00      	cmp	r3, #0
 800592a:	d035      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800592c:	4b67      	ldr	r3, [pc, #412]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005932:	f7fd fef1 	bl	8003718 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800593a:	f7fd feed 	bl	8003718 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e0ba      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800594c:	4b60      	ldr	r3, [pc, #384]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	019a      	lsls	r2, r3, #6
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	071b      	lsls	r3, r3, #28
 8005964:	495a      	ldr	r1, [pc, #360]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800596c:	4b57      	ldr	r3, [pc, #348]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005972:	f7fd fed1 	bl	8003718 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800597a:	f7fd fecd 	bl	8003718 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e09a      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800598c:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8083 	beq.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	4a48      	ldr	r2, [pc, #288]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	6413      	str	r3, [r2, #64]	; 0x40
 80059b6:	4b46      	ldr	r3, [pc, #280]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059c2:	4b44      	ldr	r3, [pc, #272]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a43      	ldr	r2, [pc, #268]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059ce:	f7fd fea3 	bl	8003718 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059d6:	f7fd fe9f 	bl	8003718 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e06c      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059e8:	4b3a      	ldr	r3, [pc, #232]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d028      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a12:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a1c:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a22:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a28:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a2e:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d114      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fd fe6d 	bl	8003718 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	e00a      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a42:	f7fd fe69 	bl	8003718 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e034      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ee      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a72:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a86:	4912      	ldr	r1, [pc, #72]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]
 8005a8c:	e005      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4a0f      	ldr	r2, [pc, #60]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a98:	6093      	str	r3, [r2, #8]
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	7c1a      	ldrb	r2, [r3, #16]
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005abe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	42470068 	.word	0x42470068
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40007000 	.word	0x40007000
 8005ad8:	42470e40 	.word	0x42470e40
 8005adc:	424711e0 	.word	0x424711e0

08005ae0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e083      	b.n	8005bfa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7f5b      	ldrb	r3, [r3, #29]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc ff68 	bl	80029d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	22ca      	movs	r2, #202	; 0xca
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2253      	movs	r2, #83	; 0x53
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb7a 	bl	8006218 <RTC_EnterInitMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2204      	movs	r2, #4
 8005b36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e05e      	b.n	8005bfa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6899      	ldr	r1, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68d2      	ldr	r2, [r2, #12]
 8005b76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6919      	ldr	r1, [r3, #16]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	041a      	lsls	r2, r3, #16
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fb0c 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	22ff      	movs	r2, #255	; 0xff
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e018      	b.n	8005bfa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c02:	b590      	push	{r4, r7, lr}
 8005c04:	b087      	sub	sp, #28
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	7f1b      	ldrb	r3, [r3, #28]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_RTC_SetTime+0x1c>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0aa      	b.n	8005d74 <HAL_RTC_SetTime+0x172>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2202      	movs	r2, #2
 8005c28:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d126      	bne.n	8005c7e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2200      	movs	r2, #0
 8005c42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fb11 	bl	8006270 <RTC_ByteToBcd2>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fb0a 	bl	8006270 <RTC_ByteToBcd2>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c60:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	789b      	ldrb	r3, [r3, #2]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fb02 	bl	8006270 <RTC_ByteToBcd2>
 8005c6c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c6e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e018      	b.n	8005cb0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ca4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	22ca      	movs	r2, #202	; 0xca
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2253      	movs	r2, #83	; 0x53
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 faa9 	bl	8006218 <RTC_EnterInitMode>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	22ff      	movs	r2, #255	; 0xff
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e047      	b.n	8005d74 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cf2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6899      	ldr	r1, [r3, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d111      	bne.n	8005d5e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fa44 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2204      	movs	r2, #4
 8005d52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00a      	b.n	8005d74 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005d72:	2300      	movs	r3, #0
  }
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}

08005d7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	7f1b      	ldrb	r3, [r3, #28]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_RTC_SetDate+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e094      	b.n	8005ec2 <HAL_RTC_SetDate+0x146>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2202      	movs	r2, #2
 8005da2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10e      	bne.n	8005dc8 <HAL_RTC_SetDate+0x4c>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	330a      	adds	r3, #10
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11c      	bne.n	8005e08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa4c 	bl	8006270 <RTC_ByteToBcd2>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fa45 	bl	8006270 <RTC_ByteToBcd2>
 8005de6:	4603      	mov	r3, r0
 8005de8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005dea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	789b      	ldrb	r3, [r3, #2]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fa3d 	bl	8006270 <RTC_ByteToBcd2>
 8005df6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005df8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e00e      	b.n	8005e26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e14:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	22ca      	movs	r2, #202	; 0xca
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2253      	movs	r2, #83	; 0x53
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f9ee 	bl	8006218 <RTC_EnterInitMode>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	22ff      	movs	r2, #255	; 0xff
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e033      	b.n	8005ec2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d111      	bne.n	8005eac <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f99d 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	22ff      	movs	r2, #255	; 0xff
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	22ff      	movs	r2, #255	; 0xff
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
  }
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}
	...

08005ecc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b089      	sub	sp, #36	; 0x24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	2300      	movs	r3, #0
 8005ede:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005ee0:	4b93      	ldr	r3, [pc, #588]	; (8006130 <HAL_RTC_SetAlarm_IT+0x264>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a93      	ldr	r2, [pc, #588]	; (8006134 <HAL_RTC_SetAlarm_IT+0x268>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	0adb      	lsrs	r3, r3, #11
 8005eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	7f1b      	ldrb	r3, [r3, #28]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_RTC_SetAlarm_IT+0x36>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e111      	b.n	8006126 <HAL_RTC_SetAlarm_IT+0x25a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d137      	bne.n	8005f84 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f99f 	bl	8006270 <RTC_ByteToBcd2>
 8005f32:	4603      	mov	r3, r0
 8005f34:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f998 	bl	8006270 <RTC_ByteToBcd2>
 8005f40:	4603      	mov	r3, r0
 8005f42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f44:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f990 	bl	8006270 <RTC_ByteToBcd2>
 8005f50:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f52:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	78db      	ldrb	r3, [r3, #3]
 8005f5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f5c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f982 	bl	8006270 <RTC_ByteToBcd2>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f70:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	e023      	b.n	8005fcc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2200      	movs	r2, #0
 8005f96:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005fa4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005faa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	78db      	ldrb	r3, [r3, #3]
 8005fb0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005fb2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005fbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005fc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	22ca      	movs	r2, #202	; 0xca
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2253      	movs	r2, #83	; 0x53
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff0:	d141      	bne.n	8006076 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006000:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006012:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	1e5a      	subs	r2, r3, #1
 8006018:	617a      	str	r2, [r7, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	22ff      	movs	r2, #255	; 0xff
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2203      	movs	r2, #3
 800602a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e077      	b.n	8006126 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0e7      	beq.n	8006014 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006062:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006072:	609a      	str	r2, [r3, #8]
 8006074:	e040      	b.n	80060f8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006084:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006096:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	1e5a      	subs	r2, r3, #1
 800609c:	617a      	str	r2, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	22ff      	movs	r2, #255	; 0xff
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2203      	movs	r2, #3
 80060ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e035      	b.n	8006126 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0e7      	beq.n	8006098 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <HAL_RTC_SetAlarm_IT+0x26c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <HAL_RTC_SetAlarm_IT+0x26c>)
 80060fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006102:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4a0b      	ldr	r2, [pc, #44]	; (8006138 <HAL_RTC_SetAlarm_IT+0x26c>)
 800610a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3724      	adds	r7, #36	; 0x24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd90      	pop	{r4, r7, pc}
 800612e:	bf00      	nop
 8006130:	20000084 	.word	0x20000084
 8006134:	10624dd3 	.word	0x10624dd3
 8006138:	40013c00 	.word	0x40013c00

0800613c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d012      	beq.n	8006178 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7fb fb3f 	bl	80017e4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006176:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d012      	beq.n	80061ac <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f9e9 	bl	800656c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80061aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80061ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061b2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	775a      	strb	r2, [r3, #29]
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40013c00 	.word	0x40013c00

080061c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061e4:	f7fd fa98 	bl	8003718 <HAL_GetTick>
 80061e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80061ea:	e009      	b.n	8006200 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061ec:	f7fd fa94 	bl	8003718 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fa:	d901      	bls.n	8006200 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e007      	b.n	8006210 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0ee      	beq.n	80061ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800623c:	f7fd fa6c 	bl	8003718 <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006242:	e009      	b.n	8006258 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006244:	f7fd fa68 	bl	8003718 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006252:	d901      	bls.n	8006258 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e007      	b.n	8006268 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0ee      	beq.n	8006244 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800627e:	e005      	b.n	800628c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	3b0a      	subs	r3, #10
 800628a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b09      	cmp	r3, #9
 8006290:	d8f6      	bhi.n	8006280 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	b2da      	uxtb	r2, r3
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4313      	orrs	r3, r2
 800629e:	b2db      	uxtb	r3, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	7f1b      	ldrb	r3, [r3, #28]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e0a6      	b.n	8006412 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2202      	movs	r2, #2
 80062ce:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	22ca      	movs	r2, #202	; 0xca
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2253      	movs	r2, #83	; 0x53
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d022      	beq.n	8006334 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80062ee:	4b4c      	ldr	r3, [pc, #304]	; (8006420 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4c      	ldr	r2, [pc, #304]	; (8006424 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	0adb      	lsrs	r3, r3, #11
 80062fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	617a      	str	r2, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2203      	movs	r2, #3
 800631a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e075      	b.n	8006412 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e7      	bne.n	8006304 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006342:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8006344:	4b36      	ldr	r3, [pc, #216]	; (8006420 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a36      	ldr	r2, [pc, #216]	; (8006424 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0adb      	lsrs	r3, r3, #11
 8006350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006354:	fb02 f303 	mul.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	617a      	str	r2, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	22ff      	movs	r2, #255	; 0xff
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2203      	movs	r2, #3
 8006370:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e04a      	b.n	8006412 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0e7      	beq.n	800635a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0207 	bic.w	r2, r2, #7
 80063a0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6899      	ldr	r1, [r3, #8]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80063b2:	4b1d      	ldr	r3, [pc, #116]	; (8006428 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80063b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063bc:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 80063be:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	4a19      	ldr	r2, [pc, #100]	; (8006428 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80063c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063c8:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80063da:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ea:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063fa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000084 	.word	0x20000084
 8006424:	10624dd3 	.word	0x10624dd3
 8006428:	40013c00 	.word	0x40013c00

0800642c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7f1b      	ldrb	r3, [r3, #28]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e047      	b.n	80064d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	22ca      	movs	r2, #202	; 0xca
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2253      	movs	r2, #83	; 0x53
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800647e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006480:	f7fd f94a 	bl	8003718 <HAL_GetTick>
 8006484:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006486:	e013      	b.n	80064b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006488:	f7fd f946 	bl	8003718 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006496:	d90b      	bls.n	80064b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2203      	movs	r2, #3
 80064a4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e011      	b.n	80064d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0e4      	beq.n	8006488 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	22ff      	movs	r2, #255	; 0xff
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f816 	bl	8006524 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006508:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800650c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006510:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	775a      	strb	r2, [r3, #29]
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40013c00 	.word	0x40013c00

08006524 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3350      	adds	r3, #80	; 0x50
 800654e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4413      	add	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	601a      	str	r2, [r3, #0]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e01d      	b.n	80065ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fc fe68 	bl	800327c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f000 fa1e 	bl	8006a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d007      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d122      	bne.n	800667a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b02      	cmp	r3, #2
 8006640:	d11b      	bne.n	800667a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f06f 0202 	mvn.w	r2, #2
 800664a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9af 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 8006666:	e005      	b.n	8006674 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f9a1 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f9b2 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b04      	cmp	r3, #4
 8006686:	d122      	bne.n	80066ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d11b      	bne.n	80066ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f06f 0204 	mvn.w	r2, #4
 800669e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f985 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 80066ba:	e005      	b.n	80066c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f977 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f988 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d122      	bne.n	8006722 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d11b      	bne.n	8006722 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f06f 0208 	mvn.w	r2, #8
 80066f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2204      	movs	r2, #4
 80066f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f003 0303 	and.w	r3, r3, #3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f95b 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 800670e:	e005      	b.n	800671c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f94d 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f95e 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b10      	cmp	r3, #16
 800672e:	d122      	bne.n	8006776 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b10      	cmp	r3, #16
 800673c:	d11b      	bne.n	8006776 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0210 	mvn.w	r2, #16
 8006746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2208      	movs	r2, #8
 800674c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f931 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 8006762:	e005      	b.n	8006770 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f923 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f934 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10e      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d107      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0201 	mvn.w	r2, #1
 800679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f8fd 	bl	800699c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b80      	cmp	r3, #128	; 0x80
 80067ae:	d10e      	bne.n	80067ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d107      	bne.n	80067ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 faab 	bl	8006d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	d10e      	bne.n	80067fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d107      	bne.n	80067fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8f9 	bl	80069ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b20      	cmp	r3, #32
 8006806:	d10e      	bne.n	8006826 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d107      	bne.n	8006826 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f06f 0220 	mvn.w	r2, #32
 800681e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa75 	bl	8006d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_TIM_ConfigClockSource+0x18>
 8006842:	2302      	movs	r3, #2
 8006844:	e0a6      	b.n	8006994 <HAL_TIM_ConfigClockSource+0x166>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006864:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d067      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x120>
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d80b      	bhi.n	800689a <HAL_TIM_ConfigClockSource+0x6c>
 8006882:	2b10      	cmp	r3, #16
 8006884:	d073      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x140>
 8006886:	2b10      	cmp	r3, #16
 8006888:	d802      	bhi.n	8006890 <HAL_TIM_ConfigClockSource+0x62>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d06f      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800688e:	e078      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006890:	2b20      	cmp	r3, #32
 8006892:	d06c      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x140>
 8006894:	2b30      	cmp	r3, #48	; 0x30
 8006896:	d06a      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006898:	e073      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800689a:	2b70      	cmp	r3, #112	; 0x70
 800689c:	d00d      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0x8c>
 800689e:	2b70      	cmp	r3, #112	; 0x70
 80068a0:	d804      	bhi.n	80068ac <HAL_TIM_ConfigClockSource+0x7e>
 80068a2:	2b50      	cmp	r3, #80	; 0x50
 80068a4:	d033      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xe0>
 80068a6:	2b60      	cmp	r3, #96	; 0x60
 80068a8:	d041      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80068aa:	e06a      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d066      	beq.n	8006980 <HAL_TIM_ConfigClockSource+0x152>
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b6:	d017      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068b8:	e063      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6899      	ldr	r1, [r3, #8]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f000 f993 	bl	8006bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	609a      	str	r2, [r3, #8]
      break;
 80068e6:	e04c      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6899      	ldr	r1, [r3, #8]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f000 f97c 	bl	8006bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800690a:	609a      	str	r2, [r3, #8]
      break;
 800690c:	e039      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	461a      	mov	r2, r3
 800691c:	f000 f8f0 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2150      	movs	r1, #80	; 0x50
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f949 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 800692c:	e029      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	461a      	mov	r2, r3
 800693c:	f000 f90f 	bl	8006b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2160      	movs	r1, #96	; 0x60
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f939 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 800694c:	e019      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	461a      	mov	r2, r3
 800695c:	f000 f8d0 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f929 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 800696c:	e009      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4619      	mov	r1, r3
 8006978:	4610      	mov	r0, r2
 800697a:	f000 f920 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 800697e:	e000      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006980:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <TIM_Base_SetConfig+0xe4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00f      	beq.n	8006a38 <TIM_Base_SetConfig+0x38>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1e:	d00b      	beq.n	8006a38 <TIM_Base_SetConfig+0x38>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a31      	ldr	r2, [pc, #196]	; (8006ae8 <TIM_Base_SetConfig+0xe8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d007      	beq.n	8006a38 <TIM_Base_SetConfig+0x38>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a30      	ldr	r2, [pc, #192]	; (8006aec <TIM_Base_SetConfig+0xec>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_Base_SetConfig+0x38>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <TIM_Base_SetConfig+0xf0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d108      	bne.n	8006a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a25      	ldr	r2, [pc, #148]	; (8006ae4 <TIM_Base_SetConfig+0xe4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01b      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a58:	d017      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <TIM_Base_SetConfig+0xe8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a21      	ldr	r2, [pc, #132]	; (8006aec <TIM_Base_SetConfig+0xec>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00f      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <TIM_Base_SetConfig+0xf0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <TIM_Base_SetConfig+0xf4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <TIM_Base_SetConfig+0xf8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <TIM_Base_SetConfig+0xfc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <TIM_Base_SetConfig+0xe4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d103      	bne.n	8006ad0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	615a      	str	r2, [r3, #20]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800

08006b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 030a 	bic.w	r3, r3, #10
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b087      	sub	sp, #28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f023 0210 	bic.w	r2, r3, #16
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	031b      	lsls	r3, r3, #12
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f043 0307 	orr.w	r3, r3, #7
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	021a      	lsls	r2, r3, #8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e050      	b.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c98:	d013      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10c      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40014000 	.word	0x40014000

08006d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e03f      	b.n	8006dca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fc fbfa 	bl	8003558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2224      	movs	r2, #36	; 0x24
 8006d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fab3 	bl	80072e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695a      	ldr	r2, [r3, #20]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d140      	bne.n	8006e6e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_UART_Receive_IT+0x26>
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e039      	b.n	8006e70 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Receive_IT+0x38>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e032      	b.n	8006e70 <HAL_UART_Receive_IT+0x9e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2222      	movs	r2, #34	; 0x22
 8006e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e48:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695a      	ldr	r2, [r3, #20]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0220 	orr.w	r2, r2, #32
 8006e68:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e000      	b.n	8006e70 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006e6e:	2302      	movs	r3, #2
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_UART_IRQHandler+0x52>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f98c 	bl	80071e4 <UART_Receive_IT>
      return;
 8006ecc:	e0d1      	b.n	8007072 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80b0 	beq.w	8007036 <HAL_UART_IRQHandler+0x1ba>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <HAL_UART_IRQHandler+0x70>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80a5 	beq.w	8007036 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <HAL_UART_IRQHandler+0x90>
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	f043 0201 	orr.w	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_UART_IRQHandler+0xb0>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	f043 0202 	orr.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_UART_IRQHandler+0xd0>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f44:	f043 0204 	orr.w	r2, r3, #4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00f      	beq.n	8006f76 <HAL_UART_IRQHandler+0xfa>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_UART_IRQHandler+0xee>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	f043 0208 	orr.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d078      	beq.n	8007070 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <HAL_UART_IRQHandler+0x11c>
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f926 	bl	80071e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2301      	moveq	r3, #1
 8006fa8:	2300      	movne	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x144>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d031      	beq.n	8007024 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f86f 	bl	80070a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d123      	bne.n	800701c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <HAL_UART_IRQHandler+0x1fc>)
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fc fccc 	bl	8003996 <HAL_DMA_Abort_IT>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d016      	beq.n	8007032 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800700e:	4610      	mov	r0, r2
 8007010:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007012:	e00e      	b.n	8007032 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f83b 	bl	8007090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701a:	e00a      	b.n	8007032 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f837 	bl	8007090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007022:	e006      	b.n	8007032 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f833 	bl	8007090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007030:	e01e      	b.n	8007070 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007032:	bf00      	nop
    return;
 8007034:	e01c      	b.n	8007070 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_UART_IRQHandler+0x1d6>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f85c 	bl	8007108 <UART_Transmit_IT>
    return;
 8007050:	e00f      	b.n	8007072 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <HAL_UART_IRQHandler+0x1f6>
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8a4 	bl	80071b4 <UART_EndTransmit_IT>
    return;
 800706c:	bf00      	nop
 800706e:	e000      	b.n	8007072 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007070:	bf00      	nop
  }
}
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	080070e1 	.word	0x080070e1

0800707c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff ffc8 	bl	8007090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b21      	cmp	r3, #33	; 0x21
 800711a:	d144      	bne.n	80071a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007124:	d11a      	bne.n	800715c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800713a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	1c9a      	adds	r2, r3, #2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]
 800714e:	e00e      	b.n	800716e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]
 800715a:	e008      	b.n	800716e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	1c59      	adds	r1, r3, #1
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6211      	str	r1, [r2, #32]
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29b      	uxth	r3, r3
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10f      	bne.n	80071a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007190:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
  }
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff51 	bl	800707c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b22      	cmp	r3, #34	; 0x22
 80071f6:	d171      	bne.n	80072dc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007200:	d123      	bne.n	800724a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10e      	bne.n	800722e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	629a      	str	r2, [r3, #40]	; 0x28
 800722c:	e029      	b.n	8007282 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	b29b      	uxth	r3, r3
 8007236:	b2db      	uxtb	r3, r3
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	629a      	str	r2, [r3, #40]	; 0x28
 8007248:	e01b      	b.n	8007282 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6858      	ldr	r0, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	1c59      	adds	r1, r3, #1
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6291      	str	r1, [r2, #40]	; 0x28
 8007262:	b2c2      	uxtb	r2, r0
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e00c      	b.n	8007282 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	1c58      	adds	r0, r3, #1
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	6288      	str	r0, [r1, #40]	; 0x28
 800727a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29b      	uxth	r3, r3
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4619      	mov	r1, r3
 8007290:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007292:	2b00      	cmp	r3, #0
 8007294:	d120      	bne.n	80072d8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0220 	bic.w	r2, r2, #32
 80072a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fb fac6 	bl	8002860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e002      	b.n	80072de <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800732a:	f023 030c 	bic.w	r3, r3, #12
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	430b      	orrs	r3, r1
 8007336:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007356:	f040 818b 	bne.w	8007670 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4ac1      	ldr	r2, [pc, #772]	; (8007664 <UART_SetConfig+0x37c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d005      	beq.n	8007370 <UART_SetConfig+0x88>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4abf      	ldr	r2, [pc, #764]	; (8007668 <UART_SetConfig+0x380>)
 800736a:	4293      	cmp	r3, r2
 800736c:	f040 80bd 	bne.w	80074ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007370:	f7fe fab4 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 8007374:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	461d      	mov	r5, r3
 800737a:	f04f 0600 	mov.w	r6, #0
 800737e:	46a8      	mov	r8, r5
 8007380:	46b1      	mov	r9, r6
 8007382:	eb18 0308 	adds.w	r3, r8, r8
 8007386:	eb49 0409 	adc.w	r4, r9, r9
 800738a:	4698      	mov	r8, r3
 800738c:	46a1      	mov	r9, r4
 800738e:	eb18 0805 	adds.w	r8, r8, r5
 8007392:	eb49 0906 	adc.w	r9, r9, r6
 8007396:	f04f 0100 	mov.w	r1, #0
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073aa:	4688      	mov	r8, r1
 80073ac:	4691      	mov	r9, r2
 80073ae:	eb18 0005 	adds.w	r0, r8, r5
 80073b2:	eb49 0106 	adc.w	r1, r9, r6
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	461d      	mov	r5, r3
 80073bc:	f04f 0600 	mov.w	r6, #0
 80073c0:	196b      	adds	r3, r5, r5
 80073c2:	eb46 0406 	adc.w	r4, r6, r6
 80073c6:	461a      	mov	r2, r3
 80073c8:	4623      	mov	r3, r4
 80073ca:	f7f9 fc65 	bl	8000c98 <__aeabi_uldivmod>
 80073ce:	4603      	mov	r3, r0
 80073d0:	460c      	mov	r4, r1
 80073d2:	461a      	mov	r2, r3
 80073d4:	4ba5      	ldr	r3, [pc, #660]	; (800766c <UART_SetConfig+0x384>)
 80073d6:	fba3 2302 	umull	r2, r3, r3, r2
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	461d      	mov	r5, r3
 80073e4:	f04f 0600 	mov.w	r6, #0
 80073e8:	46a9      	mov	r9, r5
 80073ea:	46b2      	mov	sl, r6
 80073ec:	eb19 0309 	adds.w	r3, r9, r9
 80073f0:	eb4a 040a 	adc.w	r4, sl, sl
 80073f4:	4699      	mov	r9, r3
 80073f6:	46a2      	mov	sl, r4
 80073f8:	eb19 0905 	adds.w	r9, r9, r5
 80073fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007400:	f04f 0100 	mov.w	r1, #0
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800740c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007414:	4689      	mov	r9, r1
 8007416:	4692      	mov	sl, r2
 8007418:	eb19 0005 	adds.w	r0, r9, r5
 800741c:	eb4a 0106 	adc.w	r1, sl, r6
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	461d      	mov	r5, r3
 8007426:	f04f 0600 	mov.w	r6, #0
 800742a:	196b      	adds	r3, r5, r5
 800742c:	eb46 0406 	adc.w	r4, r6, r6
 8007430:	461a      	mov	r2, r3
 8007432:	4623      	mov	r3, r4
 8007434:	f7f9 fc30 	bl	8000c98 <__aeabi_uldivmod>
 8007438:	4603      	mov	r3, r0
 800743a:	460c      	mov	r4, r1
 800743c:	461a      	mov	r2, r3
 800743e:	4b8b      	ldr	r3, [pc, #556]	; (800766c <UART_SetConfig+0x384>)
 8007440:	fba3 1302 	umull	r1, r3, r3, r2
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	2164      	movs	r1, #100	; 0x64
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	3332      	adds	r3, #50	; 0x32
 8007452:	4a86      	ldr	r2, [pc, #536]	; (800766c <UART_SetConfig+0x384>)
 8007454:	fba2 2303 	umull	r2, r3, r2, r3
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007460:	4498      	add	r8, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	461d      	mov	r5, r3
 8007466:	f04f 0600 	mov.w	r6, #0
 800746a:	46a9      	mov	r9, r5
 800746c:	46b2      	mov	sl, r6
 800746e:	eb19 0309 	adds.w	r3, r9, r9
 8007472:	eb4a 040a 	adc.w	r4, sl, sl
 8007476:	4699      	mov	r9, r3
 8007478:	46a2      	mov	sl, r4
 800747a:	eb19 0905 	adds.w	r9, r9, r5
 800747e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007482:	f04f 0100 	mov.w	r1, #0
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800748e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007492:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007496:	4689      	mov	r9, r1
 8007498:	4692      	mov	sl, r2
 800749a:	eb19 0005 	adds.w	r0, r9, r5
 800749e:	eb4a 0106 	adc.w	r1, sl, r6
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	461d      	mov	r5, r3
 80074a8:	f04f 0600 	mov.w	r6, #0
 80074ac:	196b      	adds	r3, r5, r5
 80074ae:	eb46 0406 	adc.w	r4, r6, r6
 80074b2:	461a      	mov	r2, r3
 80074b4:	4623      	mov	r3, r4
 80074b6:	f7f9 fbef 	bl	8000c98 <__aeabi_uldivmod>
 80074ba:	4603      	mov	r3, r0
 80074bc:	460c      	mov	r4, r1
 80074be:	461a      	mov	r2, r3
 80074c0:	4b6a      	ldr	r3, [pc, #424]	; (800766c <UART_SetConfig+0x384>)
 80074c2:	fba3 1302 	umull	r1, r3, r3, r2
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	2164      	movs	r1, #100	; 0x64
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	3332      	adds	r3, #50	; 0x32
 80074d4:	4a65      	ldr	r2, [pc, #404]	; (800766c <UART_SetConfig+0x384>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	f003 0207 	and.w	r2, r3, #7
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4442      	add	r2, r8
 80074e6:	609a      	str	r2, [r3, #8]
 80074e8:	e26f      	b.n	80079ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ea:	f7fe f9e3 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 80074ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	461d      	mov	r5, r3
 80074f4:	f04f 0600 	mov.w	r6, #0
 80074f8:	46a8      	mov	r8, r5
 80074fa:	46b1      	mov	r9, r6
 80074fc:	eb18 0308 	adds.w	r3, r8, r8
 8007500:	eb49 0409 	adc.w	r4, r9, r9
 8007504:	4698      	mov	r8, r3
 8007506:	46a1      	mov	r9, r4
 8007508:	eb18 0805 	adds.w	r8, r8, r5
 800750c:	eb49 0906 	adc.w	r9, r9, r6
 8007510:	f04f 0100 	mov.w	r1, #0
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800751c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007520:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007524:	4688      	mov	r8, r1
 8007526:	4691      	mov	r9, r2
 8007528:	eb18 0005 	adds.w	r0, r8, r5
 800752c:	eb49 0106 	adc.w	r1, r9, r6
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	461d      	mov	r5, r3
 8007536:	f04f 0600 	mov.w	r6, #0
 800753a:	196b      	adds	r3, r5, r5
 800753c:	eb46 0406 	adc.w	r4, r6, r6
 8007540:	461a      	mov	r2, r3
 8007542:	4623      	mov	r3, r4
 8007544:	f7f9 fba8 	bl	8000c98 <__aeabi_uldivmod>
 8007548:	4603      	mov	r3, r0
 800754a:	460c      	mov	r4, r1
 800754c:	461a      	mov	r2, r3
 800754e:	4b47      	ldr	r3, [pc, #284]	; (800766c <UART_SetConfig+0x384>)
 8007550:	fba3 2302 	umull	r2, r3, r3, r2
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	461d      	mov	r5, r3
 800755e:	f04f 0600 	mov.w	r6, #0
 8007562:	46a9      	mov	r9, r5
 8007564:	46b2      	mov	sl, r6
 8007566:	eb19 0309 	adds.w	r3, r9, r9
 800756a:	eb4a 040a 	adc.w	r4, sl, sl
 800756e:	4699      	mov	r9, r3
 8007570:	46a2      	mov	sl, r4
 8007572:	eb19 0905 	adds.w	r9, r9, r5
 8007576:	eb4a 0a06 	adc.w	sl, sl, r6
 800757a:	f04f 0100 	mov.w	r1, #0
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800758a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800758e:	4689      	mov	r9, r1
 8007590:	4692      	mov	sl, r2
 8007592:	eb19 0005 	adds.w	r0, r9, r5
 8007596:	eb4a 0106 	adc.w	r1, sl, r6
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	461d      	mov	r5, r3
 80075a0:	f04f 0600 	mov.w	r6, #0
 80075a4:	196b      	adds	r3, r5, r5
 80075a6:	eb46 0406 	adc.w	r4, r6, r6
 80075aa:	461a      	mov	r2, r3
 80075ac:	4623      	mov	r3, r4
 80075ae:	f7f9 fb73 	bl	8000c98 <__aeabi_uldivmod>
 80075b2:	4603      	mov	r3, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	461a      	mov	r2, r3
 80075b8:	4b2c      	ldr	r3, [pc, #176]	; (800766c <UART_SetConfig+0x384>)
 80075ba:	fba3 1302 	umull	r1, r3, r3, r2
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	2164      	movs	r1, #100	; 0x64
 80075c2:	fb01 f303 	mul.w	r3, r1, r3
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	3332      	adds	r3, #50	; 0x32
 80075cc:	4a27      	ldr	r2, [pc, #156]	; (800766c <UART_SetConfig+0x384>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075da:	4498      	add	r8, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	461d      	mov	r5, r3
 80075e0:	f04f 0600 	mov.w	r6, #0
 80075e4:	46a9      	mov	r9, r5
 80075e6:	46b2      	mov	sl, r6
 80075e8:	eb19 0309 	adds.w	r3, r9, r9
 80075ec:	eb4a 040a 	adc.w	r4, sl, sl
 80075f0:	4699      	mov	r9, r3
 80075f2:	46a2      	mov	sl, r4
 80075f4:	eb19 0905 	adds.w	r9, r9, r5
 80075f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80075fc:	f04f 0100 	mov.w	r1, #0
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007608:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800760c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007610:	4689      	mov	r9, r1
 8007612:	4692      	mov	sl, r2
 8007614:	eb19 0005 	adds.w	r0, r9, r5
 8007618:	eb4a 0106 	adc.w	r1, sl, r6
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	461d      	mov	r5, r3
 8007622:	f04f 0600 	mov.w	r6, #0
 8007626:	196b      	adds	r3, r5, r5
 8007628:	eb46 0406 	adc.w	r4, r6, r6
 800762c:	461a      	mov	r2, r3
 800762e:	4623      	mov	r3, r4
 8007630:	f7f9 fb32 	bl	8000c98 <__aeabi_uldivmod>
 8007634:	4603      	mov	r3, r0
 8007636:	460c      	mov	r4, r1
 8007638:	461a      	mov	r2, r3
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <UART_SetConfig+0x384>)
 800763c:	fba3 1302 	umull	r1, r3, r3, r2
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	2164      	movs	r1, #100	; 0x64
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	3332      	adds	r3, #50	; 0x32
 800764e:	4a07      	ldr	r2, [pc, #28]	; (800766c <UART_SetConfig+0x384>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	f003 0207 	and.w	r2, r3, #7
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4442      	add	r2, r8
 8007660:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007662:	e1b2      	b.n	80079ca <UART_SetConfig+0x6e2>
 8007664:	40011000 	.word	0x40011000
 8007668:	40011400 	.word	0x40011400
 800766c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4ad7      	ldr	r2, [pc, #860]	; (80079d4 <UART_SetConfig+0x6ec>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d005      	beq.n	8007686 <UART_SetConfig+0x39e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4ad6      	ldr	r2, [pc, #856]	; (80079d8 <UART_SetConfig+0x6f0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	f040 80d1 	bne.w	8007828 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007686:	f7fe f929 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 800768a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	469a      	mov	sl, r3
 8007690:	f04f 0b00 	mov.w	fp, #0
 8007694:	46d0      	mov	r8, sl
 8007696:	46d9      	mov	r9, fp
 8007698:	eb18 0308 	adds.w	r3, r8, r8
 800769c:	eb49 0409 	adc.w	r4, r9, r9
 80076a0:	4698      	mov	r8, r3
 80076a2:	46a1      	mov	r9, r4
 80076a4:	eb18 080a 	adds.w	r8, r8, sl
 80076a8:	eb49 090b 	adc.w	r9, r9, fp
 80076ac:	f04f 0100 	mov.w	r1, #0
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076c0:	4688      	mov	r8, r1
 80076c2:	4691      	mov	r9, r2
 80076c4:	eb1a 0508 	adds.w	r5, sl, r8
 80076c8:	eb4b 0609 	adc.w	r6, fp, r9
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4619      	mov	r1, r3
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	f04f 0400 	mov.w	r4, #0
 80076de:	0094      	lsls	r4, r2, #2
 80076e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076e4:	008b      	lsls	r3, r1, #2
 80076e6:	461a      	mov	r2, r3
 80076e8:	4623      	mov	r3, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	4631      	mov	r1, r6
 80076ee:	f7f9 fad3 	bl	8000c98 <__aeabi_uldivmod>
 80076f2:	4603      	mov	r3, r0
 80076f4:	460c      	mov	r4, r1
 80076f6:	461a      	mov	r2, r3
 80076f8:	4bb8      	ldr	r3, [pc, #736]	; (80079dc <UART_SetConfig+0x6f4>)
 80076fa:	fba3 2302 	umull	r2, r3, r3, r2
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	469b      	mov	fp, r3
 8007708:	f04f 0c00 	mov.w	ip, #0
 800770c:	46d9      	mov	r9, fp
 800770e:	46e2      	mov	sl, ip
 8007710:	eb19 0309 	adds.w	r3, r9, r9
 8007714:	eb4a 040a 	adc.w	r4, sl, sl
 8007718:	4699      	mov	r9, r3
 800771a:	46a2      	mov	sl, r4
 800771c:	eb19 090b 	adds.w	r9, r9, fp
 8007720:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007724:	f04f 0100 	mov.w	r1, #0
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007738:	4689      	mov	r9, r1
 800773a:	4692      	mov	sl, r2
 800773c:	eb1b 0509 	adds.w	r5, fp, r9
 8007740:	eb4c 060a 	adc.w	r6, ip, sl
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4619      	mov	r1, r3
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	f04f 0300 	mov.w	r3, #0
 8007752:	f04f 0400 	mov.w	r4, #0
 8007756:	0094      	lsls	r4, r2, #2
 8007758:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800775c:	008b      	lsls	r3, r1, #2
 800775e:	461a      	mov	r2, r3
 8007760:	4623      	mov	r3, r4
 8007762:	4628      	mov	r0, r5
 8007764:	4631      	mov	r1, r6
 8007766:	f7f9 fa97 	bl	8000c98 <__aeabi_uldivmod>
 800776a:	4603      	mov	r3, r0
 800776c:	460c      	mov	r4, r1
 800776e:	461a      	mov	r2, r3
 8007770:	4b9a      	ldr	r3, [pc, #616]	; (80079dc <UART_SetConfig+0x6f4>)
 8007772:	fba3 1302 	umull	r1, r3, r3, r2
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	2164      	movs	r1, #100	; 0x64
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	3332      	adds	r3, #50	; 0x32
 8007784:	4a95      	ldr	r2, [pc, #596]	; (80079dc <UART_SetConfig+0x6f4>)
 8007786:	fba2 2303 	umull	r2, r3, r2, r3
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007790:	4498      	add	r8, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	469b      	mov	fp, r3
 8007796:	f04f 0c00 	mov.w	ip, #0
 800779a:	46d9      	mov	r9, fp
 800779c:	46e2      	mov	sl, ip
 800779e:	eb19 0309 	adds.w	r3, r9, r9
 80077a2:	eb4a 040a 	adc.w	r4, sl, sl
 80077a6:	4699      	mov	r9, r3
 80077a8:	46a2      	mov	sl, r4
 80077aa:	eb19 090b 	adds.w	r9, r9, fp
 80077ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077b2:	f04f 0100 	mov.w	r1, #0
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077c6:	4689      	mov	r9, r1
 80077c8:	4692      	mov	sl, r2
 80077ca:	eb1b 0509 	adds.w	r5, fp, r9
 80077ce:	eb4c 060a 	adc.w	r6, ip, sl
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	4619      	mov	r1, r3
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	f04f 0400 	mov.w	r4, #0
 80077e4:	0094      	lsls	r4, r2, #2
 80077e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077ea:	008b      	lsls	r3, r1, #2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4623      	mov	r3, r4
 80077f0:	4628      	mov	r0, r5
 80077f2:	4631      	mov	r1, r6
 80077f4:	f7f9 fa50 	bl	8000c98 <__aeabi_uldivmod>
 80077f8:	4603      	mov	r3, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	461a      	mov	r2, r3
 80077fe:	4b77      	ldr	r3, [pc, #476]	; (80079dc <UART_SetConfig+0x6f4>)
 8007800:	fba3 1302 	umull	r1, r3, r3, r2
 8007804:	095b      	lsrs	r3, r3, #5
 8007806:	2164      	movs	r1, #100	; 0x64
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	3332      	adds	r3, #50	; 0x32
 8007812:	4a72      	ldr	r2, [pc, #456]	; (80079dc <UART_SetConfig+0x6f4>)
 8007814:	fba2 2303 	umull	r2, r3, r2, r3
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	f003 020f 	and.w	r2, r3, #15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4442      	add	r2, r8
 8007824:	609a      	str	r2, [r3, #8]
 8007826:	e0d0      	b.n	80079ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007828:	f7fe f844 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 800782c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	469a      	mov	sl, r3
 8007832:	f04f 0b00 	mov.w	fp, #0
 8007836:	46d0      	mov	r8, sl
 8007838:	46d9      	mov	r9, fp
 800783a:	eb18 0308 	adds.w	r3, r8, r8
 800783e:	eb49 0409 	adc.w	r4, r9, r9
 8007842:	4698      	mov	r8, r3
 8007844:	46a1      	mov	r9, r4
 8007846:	eb18 080a 	adds.w	r8, r8, sl
 800784a:	eb49 090b 	adc.w	r9, r9, fp
 800784e:	f04f 0100 	mov.w	r1, #0
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800785a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800785e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007862:	4688      	mov	r8, r1
 8007864:	4691      	mov	r9, r2
 8007866:	eb1a 0508 	adds.w	r5, sl, r8
 800786a:	eb4b 0609 	adc.w	r6, fp, r9
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4619      	mov	r1, r3
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	f04f 0400 	mov.w	r4, #0
 8007880:	0094      	lsls	r4, r2, #2
 8007882:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007886:	008b      	lsls	r3, r1, #2
 8007888:	461a      	mov	r2, r3
 800788a:	4623      	mov	r3, r4
 800788c:	4628      	mov	r0, r5
 800788e:	4631      	mov	r1, r6
 8007890:	f7f9 fa02 	bl	8000c98 <__aeabi_uldivmod>
 8007894:	4603      	mov	r3, r0
 8007896:	460c      	mov	r4, r1
 8007898:	461a      	mov	r2, r3
 800789a:	4b50      	ldr	r3, [pc, #320]	; (80079dc <UART_SetConfig+0x6f4>)
 800789c:	fba3 2302 	umull	r2, r3, r3, r2
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	469b      	mov	fp, r3
 80078aa:	f04f 0c00 	mov.w	ip, #0
 80078ae:	46d9      	mov	r9, fp
 80078b0:	46e2      	mov	sl, ip
 80078b2:	eb19 0309 	adds.w	r3, r9, r9
 80078b6:	eb4a 040a 	adc.w	r4, sl, sl
 80078ba:	4699      	mov	r9, r3
 80078bc:	46a2      	mov	sl, r4
 80078be:	eb19 090b 	adds.w	r9, r9, fp
 80078c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078c6:	f04f 0100 	mov.w	r1, #0
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078da:	4689      	mov	r9, r1
 80078dc:	4692      	mov	sl, r2
 80078de:	eb1b 0509 	adds.w	r5, fp, r9
 80078e2:	eb4c 060a 	adc.w	r6, ip, sl
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	4619      	mov	r1, r3
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	f04f 0400 	mov.w	r4, #0
 80078f8:	0094      	lsls	r4, r2, #2
 80078fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078fe:	008b      	lsls	r3, r1, #2
 8007900:	461a      	mov	r2, r3
 8007902:	4623      	mov	r3, r4
 8007904:	4628      	mov	r0, r5
 8007906:	4631      	mov	r1, r6
 8007908:	f7f9 f9c6 	bl	8000c98 <__aeabi_uldivmod>
 800790c:	4603      	mov	r3, r0
 800790e:	460c      	mov	r4, r1
 8007910:	461a      	mov	r2, r3
 8007912:	4b32      	ldr	r3, [pc, #200]	; (80079dc <UART_SetConfig+0x6f4>)
 8007914:	fba3 1302 	umull	r1, r3, r3, r2
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	2164      	movs	r1, #100	; 0x64
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	3332      	adds	r3, #50	; 0x32
 8007926:	4a2d      	ldr	r2, [pc, #180]	; (80079dc <UART_SetConfig+0x6f4>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007932:	4498      	add	r8, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	469b      	mov	fp, r3
 8007938:	f04f 0c00 	mov.w	ip, #0
 800793c:	46d9      	mov	r9, fp
 800793e:	46e2      	mov	sl, ip
 8007940:	eb19 0309 	adds.w	r3, r9, r9
 8007944:	eb4a 040a 	adc.w	r4, sl, sl
 8007948:	4699      	mov	r9, r3
 800794a:	46a2      	mov	sl, r4
 800794c:	eb19 090b 	adds.w	r9, r9, fp
 8007950:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007954:	f04f 0100 	mov.w	r1, #0
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007968:	4689      	mov	r9, r1
 800796a:	4692      	mov	sl, r2
 800796c:	eb1b 0509 	adds.w	r5, fp, r9
 8007970:	eb4c 060a 	adc.w	r6, ip, sl
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4619      	mov	r1, r3
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	f04f 0400 	mov.w	r4, #0
 8007986:	0094      	lsls	r4, r2, #2
 8007988:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800798c:	008b      	lsls	r3, r1, #2
 800798e:	461a      	mov	r2, r3
 8007990:	4623      	mov	r3, r4
 8007992:	4628      	mov	r0, r5
 8007994:	4631      	mov	r1, r6
 8007996:	f7f9 f97f 	bl	8000c98 <__aeabi_uldivmod>
 800799a:	4603      	mov	r3, r0
 800799c:	460c      	mov	r4, r1
 800799e:	461a      	mov	r2, r3
 80079a0:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <UART_SetConfig+0x6f4>)
 80079a2:	fba3 1302 	umull	r1, r3, r3, r2
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	2164      	movs	r1, #100	; 0x64
 80079aa:	fb01 f303 	mul.w	r3, r1, r3
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	3332      	adds	r3, #50	; 0x32
 80079b4:	4a09      	ldr	r2, [pc, #36]	; (80079dc <UART_SetConfig+0x6f4>)
 80079b6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ba:	095b      	lsrs	r3, r3, #5
 80079bc:	f003 020f 	and.w	r2, r3, #15
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4442      	add	r2, r8
 80079c6:	609a      	str	r2, [r3, #8]
}
 80079c8:	e7ff      	b.n	80079ca <UART_SetConfig+0x6e2>
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d4:	40011000 	.word	0x40011000
 80079d8:	40011400 	.word	0x40011400
 80079dc:	51eb851f 	.word	0x51eb851f

080079e0 <__errno>:
 80079e0:	4b01      	ldr	r3, [pc, #4]	; (80079e8 <__errno+0x8>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20000090 	.word	0x20000090

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4e0d      	ldr	r6, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4c0d      	ldr	r4, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1ba4      	subs	r4, r4, r6
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	2500      	movs	r5, #0
 80079f8:	42a5      	cmp	r5, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	4e0b      	ldr	r6, [pc, #44]	; (8007a2c <__libc_init_array+0x40>)
 80079fe:	4c0c      	ldr	r4, [pc, #48]	; (8007a30 <__libc_init_array+0x44>)
 8007a00:	f003 fd58 	bl	800b4b4 <_init>
 8007a04:	1ba4      	subs	r4, r4, r6
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	2500      	movs	r5, #0
 8007a0a:	42a5      	cmp	r5, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a14:	4798      	blx	r3
 8007a16:	3501      	adds	r5, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a1e:	4798      	blx	r3
 8007a20:	3501      	adds	r5, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	0800b978 	.word	0x0800b978
 8007a28:	0800b978 	.word	0x0800b978
 8007a2c:	0800b978 	.word	0x0800b978
 8007a30:	0800b97c 	.word	0x0800b97c

08007a34 <memset>:
 8007a34:	4402      	add	r2, r0
 8007a36:	4603      	mov	r3, r0
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d100      	bne.n	8007a3e <memset+0xa>
 8007a3c:	4770      	bx	lr
 8007a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a42:	e7f9      	b.n	8007a38 <memset+0x4>

08007a44 <__cvt>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	ec55 4b10 	vmov	r4, r5, d0
 8007a4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007a4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	460e      	mov	r6, r1
 8007a56:	4691      	mov	r9, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	bfb8      	it	lt
 8007a5c:	4622      	movlt	r2, r4
 8007a5e:	462b      	mov	r3, r5
 8007a60:	f027 0720 	bic.w	r7, r7, #32
 8007a64:	bfbb      	ittet	lt
 8007a66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a6a:	461d      	movlt	r5, r3
 8007a6c:	2300      	movge	r3, #0
 8007a6e:	232d      	movlt	r3, #45	; 0x2d
 8007a70:	bfb8      	it	lt
 8007a72:	4614      	movlt	r4, r2
 8007a74:	2f46      	cmp	r7, #70	; 0x46
 8007a76:	700b      	strb	r3, [r1, #0]
 8007a78:	d004      	beq.n	8007a84 <__cvt+0x40>
 8007a7a:	2f45      	cmp	r7, #69	; 0x45
 8007a7c:	d100      	bne.n	8007a80 <__cvt+0x3c>
 8007a7e:	3601      	adds	r6, #1
 8007a80:	2102      	movs	r1, #2
 8007a82:	e000      	b.n	8007a86 <__cvt+0x42>
 8007a84:	2103      	movs	r1, #3
 8007a86:	ab03      	add	r3, sp, #12
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	ab02      	add	r3, sp, #8
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4632      	mov	r2, r6
 8007a90:	4653      	mov	r3, sl
 8007a92:	ec45 4b10 	vmov	d0, r4, r5
 8007a96:	f001 fd77 	bl	8009588 <_dtoa_r>
 8007a9a:	2f47      	cmp	r7, #71	; 0x47
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	d102      	bne.n	8007aa6 <__cvt+0x62>
 8007aa0:	f019 0f01 	tst.w	r9, #1
 8007aa4:	d026      	beq.n	8007af4 <__cvt+0xb0>
 8007aa6:	2f46      	cmp	r7, #70	; 0x46
 8007aa8:	eb08 0906 	add.w	r9, r8, r6
 8007aac:	d111      	bne.n	8007ad2 <__cvt+0x8e>
 8007aae:	f898 3000 	ldrb.w	r3, [r8]
 8007ab2:	2b30      	cmp	r3, #48	; 0x30
 8007ab4:	d10a      	bne.n	8007acc <__cvt+0x88>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4620      	mov	r0, r4
 8007abc:	4629      	mov	r1, r5
 8007abe:	f7f9 f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ac2:	b918      	cbnz	r0, 8007acc <__cvt+0x88>
 8007ac4:	f1c6 0601 	rsb	r6, r6, #1
 8007ac8:	f8ca 6000 	str.w	r6, [sl]
 8007acc:	f8da 3000 	ldr.w	r3, [sl]
 8007ad0:	4499      	add	r9, r3
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ade:	b938      	cbnz	r0, 8007af0 <__cvt+0xac>
 8007ae0:	2230      	movs	r2, #48	; 0x30
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	454b      	cmp	r3, r9
 8007ae6:	d205      	bcs.n	8007af4 <__cvt+0xb0>
 8007ae8:	1c59      	adds	r1, r3, #1
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e7f8      	b.n	8007ae2 <__cvt+0x9e>
 8007af0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007af8:	eba3 0308 	sub.w	r3, r3, r8
 8007afc:	4640      	mov	r0, r8
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	b004      	add	sp, #16
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007b06 <__exponent>:
 8007b06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b08:	2900      	cmp	r1, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	bfba      	itte	lt
 8007b0e:	4249      	neglt	r1, r1
 8007b10:	232d      	movlt	r3, #45	; 0x2d
 8007b12:	232b      	movge	r3, #43	; 0x2b
 8007b14:	2909      	cmp	r1, #9
 8007b16:	f804 2b02 	strb.w	r2, [r4], #2
 8007b1a:	7043      	strb	r3, [r0, #1]
 8007b1c:	dd20      	ble.n	8007b60 <__exponent+0x5a>
 8007b1e:	f10d 0307 	add.w	r3, sp, #7
 8007b22:	461f      	mov	r7, r3
 8007b24:	260a      	movs	r6, #10
 8007b26:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b2a:	fb06 1115 	mls	r1, r6, r5, r1
 8007b2e:	3130      	adds	r1, #48	; 0x30
 8007b30:	2d09      	cmp	r5, #9
 8007b32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b36:	f103 32ff 	add.w	r2, r3, #4294967295
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	dc09      	bgt.n	8007b52 <__exponent+0x4c>
 8007b3e:	3130      	adds	r1, #48	; 0x30
 8007b40:	3b02      	subs	r3, #2
 8007b42:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b46:	42bb      	cmp	r3, r7
 8007b48:	4622      	mov	r2, r4
 8007b4a:	d304      	bcc.n	8007b56 <__exponent+0x50>
 8007b4c:	1a10      	subs	r0, r2, r0
 8007b4e:	b003      	add	sp, #12
 8007b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b52:	4613      	mov	r3, r2
 8007b54:	e7e7      	b.n	8007b26 <__exponent+0x20>
 8007b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b5a:	f804 2b01 	strb.w	r2, [r4], #1
 8007b5e:	e7f2      	b.n	8007b46 <__exponent+0x40>
 8007b60:	2330      	movs	r3, #48	; 0x30
 8007b62:	4419      	add	r1, r3
 8007b64:	7083      	strb	r3, [r0, #2]
 8007b66:	1d02      	adds	r2, r0, #4
 8007b68:	70c1      	strb	r1, [r0, #3]
 8007b6a:	e7ef      	b.n	8007b4c <__exponent+0x46>

08007b6c <_printf_float>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	b08d      	sub	sp, #52	; 0x34
 8007b72:	460c      	mov	r4, r1
 8007b74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007b78:	4616      	mov	r6, r2
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	f002 fde7 	bl	800a750 <_localeconv_r>
 8007b82:	6803      	ldr	r3, [r0, #0]
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f8 fb2a 	bl	80001e0 <strlen>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b90:	f8d8 3000 	ldr.w	r3, [r8]
 8007b94:	9005      	str	r0, [sp, #20]
 8007b96:	3307      	adds	r3, #7
 8007b98:	f023 0307 	bic.w	r3, r3, #7
 8007b9c:	f103 0208 	add.w	r2, r3, #8
 8007ba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8007ba8:	f8c8 2000 	str.w	r2, [r8]
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bb4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bbc:	9307      	str	r3, [sp, #28]
 8007bbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	4ba7      	ldr	r3, [pc, #668]	; (8007e64 <_printf_float+0x2f8>)
 8007bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bcc:	f7f8 ffb6 	bl	8000b3c <__aeabi_dcmpun>
 8007bd0:	bb70      	cbnz	r0, 8007c30 <_printf_float+0xc4>
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	4ba3      	ldr	r3, [pc, #652]	; (8007e64 <_printf_float+0x2f8>)
 8007bd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bdc:	f7f8 ff90 	bl	8000b00 <__aeabi_dcmple>
 8007be0:	bb30      	cbnz	r0, 8007c30 <_printf_float+0xc4>
 8007be2:	2200      	movs	r2, #0
 8007be4:	2300      	movs	r3, #0
 8007be6:	4640      	mov	r0, r8
 8007be8:	4649      	mov	r1, r9
 8007bea:	f7f8 ff7f 	bl	8000aec <__aeabi_dcmplt>
 8007bee:	b110      	cbz	r0, 8007bf6 <_printf_float+0x8a>
 8007bf0:	232d      	movs	r3, #45	; 0x2d
 8007bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf6:	4a9c      	ldr	r2, [pc, #624]	; (8007e68 <_printf_float+0x2fc>)
 8007bf8:	4b9c      	ldr	r3, [pc, #624]	; (8007e6c <_printf_float+0x300>)
 8007bfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007bfe:	bf8c      	ite	hi
 8007c00:	4690      	movhi	r8, r2
 8007c02:	4698      	movls	r8, r3
 8007c04:	2303      	movs	r3, #3
 8007c06:	f02b 0204 	bic.w	r2, fp, #4
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	6022      	str	r2, [r4, #0]
 8007c0e:	f04f 0900 	mov.w	r9, #0
 8007c12:	9700      	str	r7, [sp, #0]
 8007c14:	4633      	mov	r3, r6
 8007c16:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f000 f9e6 	bl	8007fec <_printf_common>
 8007c20:	3001      	adds	r0, #1
 8007c22:	f040 808d 	bne.w	8007d40 <_printf_float+0x1d4>
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	b00d      	add	sp, #52	; 0x34
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	4640      	mov	r0, r8
 8007c36:	4649      	mov	r1, r9
 8007c38:	f7f8 ff80 	bl	8000b3c <__aeabi_dcmpun>
 8007c3c:	b110      	cbz	r0, 8007c44 <_printf_float+0xd8>
 8007c3e:	4a8c      	ldr	r2, [pc, #560]	; (8007e70 <_printf_float+0x304>)
 8007c40:	4b8c      	ldr	r3, [pc, #560]	; (8007e74 <_printf_float+0x308>)
 8007c42:	e7da      	b.n	8007bfa <_printf_float+0x8e>
 8007c44:	6861      	ldr	r1, [r4, #4]
 8007c46:	1c4b      	adds	r3, r1, #1
 8007c48:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007c4c:	a80a      	add	r0, sp, #40	; 0x28
 8007c4e:	d13e      	bne.n	8007cce <_printf_float+0x162>
 8007c50:	2306      	movs	r3, #6
 8007c52:	6063      	str	r3, [r4, #4]
 8007c54:	2300      	movs	r3, #0
 8007c56:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007c5a:	ab09      	add	r3, sp, #36	; 0x24
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	ec49 8b10 	vmov	d0, r8, r9
 8007c62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	f8cd a004 	str.w	sl, [sp, #4]
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f7ff fee8 	bl	8007a44 <__cvt>
 8007c74:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007c78:	2b47      	cmp	r3, #71	; 0x47
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	d109      	bne.n	8007c92 <_printf_float+0x126>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c80:	1cd8      	adds	r0, r3, #3
 8007c82:	db02      	blt.n	8007c8a <_printf_float+0x11e>
 8007c84:	6862      	ldr	r2, [r4, #4]
 8007c86:	4293      	cmp	r3, r2
 8007c88:	dd47      	ble.n	8007d1a <_printf_float+0x1ae>
 8007c8a:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c8e:	fa5f fa8a 	uxtb.w	sl, sl
 8007c92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c98:	d824      	bhi.n	8007ce4 <_printf_float+0x178>
 8007c9a:	3901      	subs	r1, #1
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ca2:	9109      	str	r1, [sp, #36]	; 0x24
 8007ca4:	f7ff ff2f 	bl	8007b06 <__exponent>
 8007ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007caa:	1813      	adds	r3, r2, r0
 8007cac:	2a01      	cmp	r2, #1
 8007cae:	4681      	mov	r9, r0
 8007cb0:	6123      	str	r3, [r4, #16]
 8007cb2:	dc02      	bgt.n	8007cba <_printf_float+0x14e>
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	07d1      	lsls	r1, r2, #31
 8007cb8:	d501      	bpl.n	8007cbe <_printf_float+0x152>
 8007cba:	3301      	adds	r3, #1
 8007cbc:	6123      	str	r3, [r4, #16]
 8007cbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0a5      	beq.n	8007c12 <_printf_float+0xa6>
 8007cc6:	232d      	movs	r3, #45	; 0x2d
 8007cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ccc:	e7a1      	b.n	8007c12 <_printf_float+0xa6>
 8007cce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007cd2:	f000 8177 	beq.w	8007fc4 <_printf_float+0x458>
 8007cd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007cda:	d1bb      	bne.n	8007c54 <_printf_float+0xe8>
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	d1b9      	bne.n	8007c54 <_printf_float+0xe8>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e7b6      	b.n	8007c52 <_printf_float+0xe6>
 8007ce4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007ce8:	d119      	bne.n	8007d1e <_printf_float+0x1b2>
 8007cea:	2900      	cmp	r1, #0
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	dd0c      	ble.n	8007d0a <_printf_float+0x19e>
 8007cf0:	6121      	str	r1, [r4, #16]
 8007cf2:	b913      	cbnz	r3, 8007cfa <_printf_float+0x18e>
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	07d2      	lsls	r2, r2, #31
 8007cf8:	d502      	bpl.n	8007d00 <_printf_float+0x194>
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	440b      	add	r3, r1
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d04:	f04f 0900 	mov.w	r9, #0
 8007d08:	e7d9      	b.n	8007cbe <_printf_float+0x152>
 8007d0a:	b913      	cbnz	r3, 8007d12 <_printf_float+0x1a6>
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	07d0      	lsls	r0, r2, #31
 8007d10:	d501      	bpl.n	8007d16 <_printf_float+0x1aa>
 8007d12:	3302      	adds	r3, #2
 8007d14:	e7f3      	b.n	8007cfe <_printf_float+0x192>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e7f1      	b.n	8007cfe <_printf_float+0x192>
 8007d1a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007d1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d22:	4293      	cmp	r3, r2
 8007d24:	db05      	blt.n	8007d32 <_printf_float+0x1c6>
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	07d1      	lsls	r1, r2, #31
 8007d2c:	d5e8      	bpl.n	8007d00 <_printf_float+0x194>
 8007d2e:	3301      	adds	r3, #1
 8007d30:	e7e5      	b.n	8007cfe <_printf_float+0x192>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bfd4      	ite	le
 8007d36:	f1c3 0302 	rsble	r3, r3, #2
 8007d3a:	2301      	movgt	r3, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	e7de      	b.n	8007cfe <_printf_float+0x192>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	055a      	lsls	r2, r3, #21
 8007d44:	d407      	bmi.n	8007d56 <_printf_float+0x1ea>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	4642      	mov	r2, r8
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b8      	blx	r7
 8007d50:	3001      	adds	r0, #1
 8007d52:	d12b      	bne.n	8007dac <_printf_float+0x240>
 8007d54:	e767      	b.n	8007c26 <_printf_float+0xba>
 8007d56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007d5a:	f240 80dc 	bls.w	8007f16 <_printf_float+0x3aa>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d66:	f7f8 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d033      	beq.n	8007dd6 <_printf_float+0x26a>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4a41      	ldr	r2, [pc, #260]	; (8007e78 <_printf_float+0x30c>)
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f af54 	beq.w	8007c26 <_printf_float+0xba>
 8007d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d82:	429a      	cmp	r2, r3
 8007d84:	db02      	blt.n	8007d8c <_printf_float+0x220>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	07d8      	lsls	r0, r3, #31
 8007d8a:	d50f      	bpl.n	8007dac <_printf_float+0x240>
 8007d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af45 	beq.w	8007c26 <_printf_float+0xba>
 8007d9c:	f04f 0800 	mov.w	r8, #0
 8007da0:	f104 091a 	add.w	r9, r4, #26
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	3b01      	subs	r3, #1
 8007da8:	4543      	cmp	r3, r8
 8007daa:	dc09      	bgt.n	8007dc0 <_printf_float+0x254>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	079b      	lsls	r3, r3, #30
 8007db0:	f100 8103 	bmi.w	8007fba <_printf_float+0x44e>
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db8:	4298      	cmp	r0, r3
 8007dba:	bfb8      	it	lt
 8007dbc:	4618      	movlt	r0, r3
 8007dbe:	e734      	b.n	8007c2a <_printf_float+0xbe>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	464a      	mov	r2, r9
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f43f af2b 	beq.w	8007c26 <_printf_float+0xba>
 8007dd0:	f108 0801 	add.w	r8, r8, #1
 8007dd4:	e7e6      	b.n	8007da4 <_printf_float+0x238>
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc2b      	bgt.n	8007e34 <_printf_float+0x2c8>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4a26      	ldr	r2, [pc, #152]	; (8007e78 <_printf_float+0x30c>)
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f af1d 	beq.w	8007c26 <_printf_float+0xba>
 8007dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dee:	b923      	cbnz	r3, 8007dfa <_printf_float+0x28e>
 8007df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df2:	b913      	cbnz	r3, 8007dfa <_printf_float+0x28e>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	07d9      	lsls	r1, r3, #31
 8007df8:	d5d8      	bpl.n	8007dac <_printf_float+0x240>
 8007dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b8      	blx	r7
 8007e04:	3001      	adds	r0, #1
 8007e06:	f43f af0e 	beq.w	8007c26 <_printf_float+0xba>
 8007e0a:	f04f 0900 	mov.w	r9, #0
 8007e0e:	f104 0a1a 	add.w	sl, r4, #26
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	425b      	negs	r3, r3
 8007e16:	454b      	cmp	r3, r9
 8007e18:	dc01      	bgt.n	8007e1e <_printf_float+0x2b2>
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1c:	e794      	b.n	8007d48 <_printf_float+0x1dc>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4652      	mov	r2, sl
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f aefc 	beq.w	8007c26 <_printf_float+0xba>
 8007e2e:	f109 0901 	add.w	r9, r9, #1
 8007e32:	e7ee      	b.n	8007e12 <_printf_float+0x2a6>
 8007e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	bfa8      	it	ge
 8007e3c:	461a      	movge	r2, r3
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	4691      	mov	r9, r2
 8007e42:	dd07      	ble.n	8007e54 <_printf_float+0x2e8>
 8007e44:	4613      	mov	r3, r2
 8007e46:	4631      	mov	r1, r6
 8007e48:	4642      	mov	r2, r8
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	47b8      	blx	r7
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f43f aee9 	beq.w	8007c26 <_printf_float+0xba>
 8007e54:	f104 031a 	add.w	r3, r4, #26
 8007e58:	f04f 0b00 	mov.w	fp, #0
 8007e5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e60:	9306      	str	r3, [sp, #24]
 8007e62:	e015      	b.n	8007e90 <_printf_float+0x324>
 8007e64:	7fefffff 	.word	0x7fefffff
 8007e68:	0800b6c0 	.word	0x0800b6c0
 8007e6c:	0800b6bc 	.word	0x0800b6bc
 8007e70:	0800b6c8 	.word	0x0800b6c8
 8007e74:	0800b6c4 	.word	0x0800b6c4
 8007e78:	0800b6cc 	.word	0x0800b6cc
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	9a06      	ldr	r2, [sp, #24]
 8007e80:	4631      	mov	r1, r6
 8007e82:	4628      	mov	r0, r5
 8007e84:	47b8      	blx	r7
 8007e86:	3001      	adds	r0, #1
 8007e88:	f43f aecd 	beq.w	8007c26 <_printf_float+0xba>
 8007e8c:	f10b 0b01 	add.w	fp, fp, #1
 8007e90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e94:	ebaa 0309 	sub.w	r3, sl, r9
 8007e98:	455b      	cmp	r3, fp
 8007e9a:	dcef      	bgt.n	8007e7c <_printf_float+0x310>
 8007e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	44d0      	add	r8, sl
 8007ea4:	db15      	blt.n	8007ed2 <_printf_float+0x366>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	07da      	lsls	r2, r3, #31
 8007eaa:	d412      	bmi.n	8007ed2 <_printf_float+0x366>
 8007eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb0:	eba3 020a 	sub.w	r2, r3, sl
 8007eb4:	eba3 0a01 	sub.w	sl, r3, r1
 8007eb8:	4592      	cmp	sl, r2
 8007eba:	bfa8      	it	ge
 8007ebc:	4692      	movge	sl, r2
 8007ebe:	f1ba 0f00 	cmp.w	sl, #0
 8007ec2:	dc0e      	bgt.n	8007ee2 <_printf_float+0x376>
 8007ec4:	f04f 0800 	mov.w	r8, #0
 8007ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ecc:	f104 091a 	add.w	r9, r4, #26
 8007ed0:	e019      	b.n	8007f06 <_printf_float+0x39a>
 8007ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	d1e5      	bne.n	8007eac <_printf_float+0x340>
 8007ee0:	e6a1      	b.n	8007c26 <_printf_float+0xba>
 8007ee2:	4653      	mov	r3, sl
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1e9      	bne.n	8007ec4 <_printf_float+0x358>
 8007ef0:	e699      	b.n	8007c26 <_printf_float+0xba>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	464a      	mov	r2, r9
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f ae92 	beq.w	8007c26 <_printf_float+0xba>
 8007f02:	f108 0801 	add.w	r8, r8, #1
 8007f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f0a:	1a9b      	subs	r3, r3, r2
 8007f0c:	eba3 030a 	sub.w	r3, r3, sl
 8007f10:	4543      	cmp	r3, r8
 8007f12:	dcee      	bgt.n	8007ef2 <_printf_float+0x386>
 8007f14:	e74a      	b.n	8007dac <_printf_float+0x240>
 8007f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f18:	2a01      	cmp	r2, #1
 8007f1a:	dc01      	bgt.n	8007f20 <_printf_float+0x3b4>
 8007f1c:	07db      	lsls	r3, r3, #31
 8007f1e:	d53a      	bpl.n	8007f96 <_printf_float+0x42a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4642      	mov	r2, r8
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f ae7b 	beq.w	8007c26 <_printf_float+0xba>
 8007f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f108 0801 	add.w	r8, r8, #1
 8007f40:	f43f ae71 	beq.w	8007c26 <_printf_float+0xba>
 8007f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f46:	2200      	movs	r2, #0
 8007f48:	f103 3aff 	add.w	sl, r3, #4294967295
 8007f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f50:	2300      	movs	r3, #0
 8007f52:	f7f8 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f56:	b9c8      	cbnz	r0, 8007f8c <_printf_float+0x420>
 8007f58:	4653      	mov	r3, sl
 8007f5a:	4642      	mov	r2, r8
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	d10e      	bne.n	8007f84 <_printf_float+0x418>
 8007f66:	e65e      	b.n	8007c26 <_printf_float+0xba>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	47b8      	blx	r7
 8007f72:	3001      	adds	r0, #1
 8007f74:	f43f ae57 	beq.w	8007c26 <_printf_float+0xba>
 8007f78:	f108 0801 	add.w	r8, r8, #1
 8007f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dcf1      	bgt.n	8007f68 <_printf_float+0x3fc>
 8007f84:	464b      	mov	r3, r9
 8007f86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f8a:	e6de      	b.n	8007d4a <_printf_float+0x1de>
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	f104 0a1a 	add.w	sl, r4, #26
 8007f94:	e7f2      	b.n	8007f7c <_printf_float+0x410>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e7df      	b.n	8007f5a <_printf_float+0x3ee>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	464a      	mov	r2, r9
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f ae3e 	beq.w	8007c26 <_printf_float+0xba>
 8007faa:	f108 0801 	add.w	r8, r8, #1
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	4543      	cmp	r3, r8
 8007fb6:	dcf0      	bgt.n	8007f9a <_printf_float+0x42e>
 8007fb8:	e6fc      	b.n	8007db4 <_printf_float+0x248>
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	f104 0919 	add.w	r9, r4, #25
 8007fc2:	e7f4      	b.n	8007fae <_printf_float+0x442>
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	f43f ae8b 	beq.w	8007ce0 <_printf_float+0x174>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007fd0:	ab09      	add	r3, sp, #36	; 0x24
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	ec49 8b10 	vmov	d0, r8, r9
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	f8cd a004 	str.w	sl, [sp, #4]
 8007fde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f7ff fd2e 	bl	8007a44 <__cvt>
 8007fe8:	4680      	mov	r8, r0
 8007fea:	e648      	b.n	8007c7e <_printf_float+0x112>

08007fec <_printf_common>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	4691      	mov	r9, r2
 8007ff2:	461f      	mov	r7, r3
 8007ff4:	688a      	ldr	r2, [r1, #8]
 8007ff6:	690b      	ldr	r3, [r1, #16]
 8007ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	bfb8      	it	lt
 8008000:	4613      	movlt	r3, r2
 8008002:	f8c9 3000 	str.w	r3, [r9]
 8008006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800800a:	4606      	mov	r6, r0
 800800c:	460c      	mov	r4, r1
 800800e:	b112      	cbz	r2, 8008016 <_printf_common+0x2a>
 8008010:	3301      	adds	r3, #1
 8008012:	f8c9 3000 	str.w	r3, [r9]
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	0699      	lsls	r1, r3, #26
 800801a:	bf42      	ittt	mi
 800801c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008020:	3302      	addmi	r3, #2
 8008022:	f8c9 3000 	strmi.w	r3, [r9]
 8008026:	6825      	ldr	r5, [r4, #0]
 8008028:	f015 0506 	ands.w	r5, r5, #6
 800802c:	d107      	bne.n	800803e <_printf_common+0x52>
 800802e:	f104 0a19 	add.w	sl, r4, #25
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	f8d9 2000 	ldr.w	r2, [r9]
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	42ab      	cmp	r3, r5
 800803c:	dc28      	bgt.n	8008090 <_printf_common+0xa4>
 800803e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	3300      	adds	r3, #0
 8008046:	bf18      	it	ne
 8008048:	2301      	movne	r3, #1
 800804a:	0692      	lsls	r2, r2, #26
 800804c:	d42d      	bmi.n	80080aa <_printf_common+0xbe>
 800804e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008052:	4639      	mov	r1, r7
 8008054:	4630      	mov	r0, r6
 8008056:	47c0      	blx	r8
 8008058:	3001      	adds	r0, #1
 800805a:	d020      	beq.n	800809e <_printf_common+0xb2>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	68e5      	ldr	r5, [r4, #12]
 8008060:	f8d9 2000 	ldr.w	r2, [r9]
 8008064:	f003 0306 	and.w	r3, r3, #6
 8008068:	2b04      	cmp	r3, #4
 800806a:	bf08      	it	eq
 800806c:	1aad      	subeq	r5, r5, r2
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	6922      	ldr	r2, [r4, #16]
 8008072:	bf0c      	ite	eq
 8008074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008078:	2500      	movne	r5, #0
 800807a:	4293      	cmp	r3, r2
 800807c:	bfc4      	itt	gt
 800807e:	1a9b      	subgt	r3, r3, r2
 8008080:	18ed      	addgt	r5, r5, r3
 8008082:	f04f 0900 	mov.w	r9, #0
 8008086:	341a      	adds	r4, #26
 8008088:	454d      	cmp	r5, r9
 800808a:	d11a      	bne.n	80080c2 <_printf_common+0xd6>
 800808c:	2000      	movs	r0, #0
 800808e:	e008      	b.n	80080a2 <_printf_common+0xb6>
 8008090:	2301      	movs	r3, #1
 8008092:	4652      	mov	r2, sl
 8008094:	4639      	mov	r1, r7
 8008096:	4630      	mov	r0, r6
 8008098:	47c0      	blx	r8
 800809a:	3001      	adds	r0, #1
 800809c:	d103      	bne.n	80080a6 <_printf_common+0xba>
 800809e:	f04f 30ff 	mov.w	r0, #4294967295
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	3501      	adds	r5, #1
 80080a8:	e7c3      	b.n	8008032 <_printf_common+0x46>
 80080aa:	18e1      	adds	r1, r4, r3
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	2030      	movs	r0, #48	; 0x30
 80080b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080b4:	4422      	add	r2, r4
 80080b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080be:	3302      	adds	r3, #2
 80080c0:	e7c5      	b.n	800804e <_printf_common+0x62>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4622      	mov	r2, r4
 80080c6:	4639      	mov	r1, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	47c0      	blx	r8
 80080cc:	3001      	adds	r0, #1
 80080ce:	d0e6      	beq.n	800809e <_printf_common+0xb2>
 80080d0:	f109 0901 	add.w	r9, r9, #1
 80080d4:	e7d8      	b.n	8008088 <_printf_common+0x9c>
	...

080080d8 <_printf_i>:
 80080d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080e0:	460c      	mov	r4, r1
 80080e2:	7e09      	ldrb	r1, [r1, #24]
 80080e4:	b085      	sub	sp, #20
 80080e6:	296e      	cmp	r1, #110	; 0x6e
 80080e8:	4617      	mov	r7, r2
 80080ea:	4606      	mov	r6, r0
 80080ec:	4698      	mov	r8, r3
 80080ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f0:	f000 80b3 	beq.w	800825a <_printf_i+0x182>
 80080f4:	d822      	bhi.n	800813c <_printf_i+0x64>
 80080f6:	2963      	cmp	r1, #99	; 0x63
 80080f8:	d036      	beq.n	8008168 <_printf_i+0x90>
 80080fa:	d80a      	bhi.n	8008112 <_printf_i+0x3a>
 80080fc:	2900      	cmp	r1, #0
 80080fe:	f000 80b9 	beq.w	8008274 <_printf_i+0x19c>
 8008102:	2958      	cmp	r1, #88	; 0x58
 8008104:	f000 8083 	beq.w	800820e <_printf_i+0x136>
 8008108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800810c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008110:	e032      	b.n	8008178 <_printf_i+0xa0>
 8008112:	2964      	cmp	r1, #100	; 0x64
 8008114:	d001      	beq.n	800811a <_printf_i+0x42>
 8008116:	2969      	cmp	r1, #105	; 0x69
 8008118:	d1f6      	bne.n	8008108 <_printf_i+0x30>
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	6813      	ldr	r3, [r2, #0]
 800811e:	0605      	lsls	r5, r0, #24
 8008120:	f103 0104 	add.w	r1, r3, #4
 8008124:	d52a      	bpl.n	800817c <_printf_i+0xa4>
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da03      	bge.n	8008136 <_printf_i+0x5e>
 800812e:	222d      	movs	r2, #45	; 0x2d
 8008130:	425b      	negs	r3, r3
 8008132:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008136:	486f      	ldr	r0, [pc, #444]	; (80082f4 <_printf_i+0x21c>)
 8008138:	220a      	movs	r2, #10
 800813a:	e039      	b.n	80081b0 <_printf_i+0xd8>
 800813c:	2973      	cmp	r1, #115	; 0x73
 800813e:	f000 809d 	beq.w	800827c <_printf_i+0x1a4>
 8008142:	d808      	bhi.n	8008156 <_printf_i+0x7e>
 8008144:	296f      	cmp	r1, #111	; 0x6f
 8008146:	d020      	beq.n	800818a <_printf_i+0xb2>
 8008148:	2970      	cmp	r1, #112	; 0x70
 800814a:	d1dd      	bne.n	8008108 <_printf_i+0x30>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	f043 0320 	orr.w	r3, r3, #32
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	e003      	b.n	800815e <_printf_i+0x86>
 8008156:	2975      	cmp	r1, #117	; 0x75
 8008158:	d017      	beq.n	800818a <_printf_i+0xb2>
 800815a:	2978      	cmp	r1, #120	; 0x78
 800815c:	d1d4      	bne.n	8008108 <_printf_i+0x30>
 800815e:	2378      	movs	r3, #120	; 0x78
 8008160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008164:	4864      	ldr	r0, [pc, #400]	; (80082f8 <_printf_i+0x220>)
 8008166:	e055      	b.n	8008214 <_printf_i+0x13c>
 8008168:	6813      	ldr	r3, [r2, #0]
 800816a:	1d19      	adds	r1, r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6011      	str	r1, [r2, #0]
 8008170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008178:	2301      	movs	r3, #1
 800817a:	e08c      	b.n	8008296 <_printf_i+0x1be>
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6011      	str	r1, [r2, #0]
 8008180:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008184:	bf18      	it	ne
 8008186:	b21b      	sxthne	r3, r3
 8008188:	e7cf      	b.n	800812a <_printf_i+0x52>
 800818a:	6813      	ldr	r3, [r2, #0]
 800818c:	6825      	ldr	r5, [r4, #0]
 800818e:	1d18      	adds	r0, r3, #4
 8008190:	6010      	str	r0, [r2, #0]
 8008192:	0628      	lsls	r0, r5, #24
 8008194:	d501      	bpl.n	800819a <_printf_i+0xc2>
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	e002      	b.n	80081a0 <_printf_i+0xc8>
 800819a:	0668      	lsls	r0, r5, #25
 800819c:	d5fb      	bpl.n	8008196 <_printf_i+0xbe>
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	4854      	ldr	r0, [pc, #336]	; (80082f4 <_printf_i+0x21c>)
 80081a2:	296f      	cmp	r1, #111	; 0x6f
 80081a4:	bf14      	ite	ne
 80081a6:	220a      	movne	r2, #10
 80081a8:	2208      	moveq	r2, #8
 80081aa:	2100      	movs	r1, #0
 80081ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081b0:	6865      	ldr	r5, [r4, #4]
 80081b2:	60a5      	str	r5, [r4, #8]
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	f2c0 8095 	blt.w	80082e4 <_printf_i+0x20c>
 80081ba:	6821      	ldr	r1, [r4, #0]
 80081bc:	f021 0104 	bic.w	r1, r1, #4
 80081c0:	6021      	str	r1, [r4, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d13d      	bne.n	8008242 <_printf_i+0x16a>
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	f040 808e 	bne.w	80082e8 <_printf_i+0x210>
 80081cc:	4665      	mov	r5, ip
 80081ce:	2a08      	cmp	r2, #8
 80081d0:	d10b      	bne.n	80081ea <_printf_i+0x112>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	07db      	lsls	r3, r3, #31
 80081d6:	d508      	bpl.n	80081ea <_printf_i+0x112>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	6862      	ldr	r2, [r4, #4]
 80081dc:	429a      	cmp	r2, r3
 80081de:	bfde      	ittt	le
 80081e0:	2330      	movle	r3, #48	; 0x30
 80081e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081ea:	ebac 0305 	sub.w	r3, ip, r5
 80081ee:	6123      	str	r3, [r4, #16]
 80081f0:	f8cd 8000 	str.w	r8, [sp]
 80081f4:	463b      	mov	r3, r7
 80081f6:	aa03      	add	r2, sp, #12
 80081f8:	4621      	mov	r1, r4
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff fef6 	bl	8007fec <_printf_common>
 8008200:	3001      	adds	r0, #1
 8008202:	d14d      	bne.n	80082a0 <_printf_i+0x1c8>
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	b005      	add	sp, #20
 800820a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800820e:	4839      	ldr	r0, [pc, #228]	; (80082f4 <_printf_i+0x21c>)
 8008210:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008214:	6813      	ldr	r3, [r2, #0]
 8008216:	6821      	ldr	r1, [r4, #0]
 8008218:	1d1d      	adds	r5, r3, #4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6015      	str	r5, [r2, #0]
 800821e:	060a      	lsls	r2, r1, #24
 8008220:	d50b      	bpl.n	800823a <_printf_i+0x162>
 8008222:	07ca      	lsls	r2, r1, #31
 8008224:	bf44      	itt	mi
 8008226:	f041 0120 	orrmi.w	r1, r1, #32
 800822a:	6021      	strmi	r1, [r4, #0]
 800822c:	b91b      	cbnz	r3, 8008236 <_printf_i+0x15e>
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	f022 0220 	bic.w	r2, r2, #32
 8008234:	6022      	str	r2, [r4, #0]
 8008236:	2210      	movs	r2, #16
 8008238:	e7b7      	b.n	80081aa <_printf_i+0xd2>
 800823a:	064d      	lsls	r5, r1, #25
 800823c:	bf48      	it	mi
 800823e:	b29b      	uxthmi	r3, r3
 8008240:	e7ef      	b.n	8008222 <_printf_i+0x14a>
 8008242:	4665      	mov	r5, ip
 8008244:	fbb3 f1f2 	udiv	r1, r3, r2
 8008248:	fb02 3311 	mls	r3, r2, r1, r3
 800824c:	5cc3      	ldrb	r3, [r0, r3]
 800824e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008252:	460b      	mov	r3, r1
 8008254:	2900      	cmp	r1, #0
 8008256:	d1f5      	bne.n	8008244 <_printf_i+0x16c>
 8008258:	e7b9      	b.n	80081ce <_printf_i+0xf6>
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	6961      	ldr	r1, [r4, #20]
 8008260:	1d18      	adds	r0, r3, #4
 8008262:	6010      	str	r0, [r2, #0]
 8008264:	0628      	lsls	r0, r5, #24
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	d501      	bpl.n	800826e <_printf_i+0x196>
 800826a:	6019      	str	r1, [r3, #0]
 800826c:	e002      	b.n	8008274 <_printf_i+0x19c>
 800826e:	066a      	lsls	r2, r5, #25
 8008270:	d5fb      	bpl.n	800826a <_printf_i+0x192>
 8008272:	8019      	strh	r1, [r3, #0]
 8008274:	2300      	movs	r3, #0
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	4665      	mov	r5, ip
 800827a:	e7b9      	b.n	80081f0 <_printf_i+0x118>
 800827c:	6813      	ldr	r3, [r2, #0]
 800827e:	1d19      	adds	r1, r3, #4
 8008280:	6011      	str	r1, [r2, #0]
 8008282:	681d      	ldr	r5, [r3, #0]
 8008284:	6862      	ldr	r2, [r4, #4]
 8008286:	2100      	movs	r1, #0
 8008288:	4628      	mov	r0, r5
 800828a:	f7f7 ffb1 	bl	80001f0 <memchr>
 800828e:	b108      	cbz	r0, 8008294 <_printf_i+0x1bc>
 8008290:	1b40      	subs	r0, r0, r5
 8008292:	6060      	str	r0, [r4, #4]
 8008294:	6863      	ldr	r3, [r4, #4]
 8008296:	6123      	str	r3, [r4, #16]
 8008298:	2300      	movs	r3, #0
 800829a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829e:	e7a7      	b.n	80081f0 <_printf_i+0x118>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	462a      	mov	r2, r5
 80082a4:	4639      	mov	r1, r7
 80082a6:	4630      	mov	r0, r6
 80082a8:	47c0      	blx	r8
 80082aa:	3001      	adds	r0, #1
 80082ac:	d0aa      	beq.n	8008204 <_printf_i+0x12c>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	079b      	lsls	r3, r3, #30
 80082b2:	d413      	bmi.n	80082dc <_printf_i+0x204>
 80082b4:	68e0      	ldr	r0, [r4, #12]
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	4298      	cmp	r0, r3
 80082ba:	bfb8      	it	lt
 80082bc:	4618      	movlt	r0, r3
 80082be:	e7a3      	b.n	8008208 <_printf_i+0x130>
 80082c0:	2301      	movs	r3, #1
 80082c2:	464a      	mov	r2, r9
 80082c4:	4639      	mov	r1, r7
 80082c6:	4630      	mov	r0, r6
 80082c8:	47c0      	blx	r8
 80082ca:	3001      	adds	r0, #1
 80082cc:	d09a      	beq.n	8008204 <_printf_i+0x12c>
 80082ce:	3501      	adds	r5, #1
 80082d0:	68e3      	ldr	r3, [r4, #12]
 80082d2:	9a03      	ldr	r2, [sp, #12]
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	42ab      	cmp	r3, r5
 80082d8:	dcf2      	bgt.n	80082c0 <_printf_i+0x1e8>
 80082da:	e7eb      	b.n	80082b4 <_printf_i+0x1dc>
 80082dc:	2500      	movs	r5, #0
 80082de:	f104 0919 	add.w	r9, r4, #25
 80082e2:	e7f5      	b.n	80082d0 <_printf_i+0x1f8>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1ac      	bne.n	8008242 <_printf_i+0x16a>
 80082e8:	7803      	ldrb	r3, [r0, #0]
 80082ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082f2:	e76c      	b.n	80081ce <_printf_i+0xf6>
 80082f4:	0800b6ce 	.word	0x0800b6ce
 80082f8:	0800b6df 	.word	0x0800b6df

080082fc <_scanf_float>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	469a      	mov	sl, r3
 8008302:	688b      	ldr	r3, [r1, #8]
 8008304:	4616      	mov	r6, r2
 8008306:	1e5a      	subs	r2, r3, #1
 8008308:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800830c:	b087      	sub	sp, #28
 800830e:	bf83      	ittte	hi
 8008310:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008314:	189b      	addhi	r3, r3, r2
 8008316:	9301      	strhi	r3, [sp, #4]
 8008318:	2300      	movls	r3, #0
 800831a:	bf86      	itte	hi
 800831c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008320:	608b      	strhi	r3, [r1, #8]
 8008322:	9301      	strls	r3, [sp, #4]
 8008324:	680b      	ldr	r3, [r1, #0]
 8008326:	4688      	mov	r8, r1
 8008328:	f04f 0b00 	mov.w	fp, #0
 800832c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008330:	f848 3b1c 	str.w	r3, [r8], #28
 8008334:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008338:	4607      	mov	r7, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4645      	mov	r5, r8
 800833e:	465a      	mov	r2, fp
 8008340:	46d9      	mov	r9, fp
 8008342:	f8cd b008 	str.w	fp, [sp, #8]
 8008346:	68a1      	ldr	r1, [r4, #8]
 8008348:	b181      	cbz	r1, 800836c <_scanf_float+0x70>
 800834a:	6833      	ldr	r3, [r6, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b49      	cmp	r3, #73	; 0x49
 8008350:	d071      	beq.n	8008436 <_scanf_float+0x13a>
 8008352:	d84d      	bhi.n	80083f0 <_scanf_float+0xf4>
 8008354:	2b39      	cmp	r3, #57	; 0x39
 8008356:	d840      	bhi.n	80083da <_scanf_float+0xde>
 8008358:	2b31      	cmp	r3, #49	; 0x31
 800835a:	f080 8088 	bcs.w	800846e <_scanf_float+0x172>
 800835e:	2b2d      	cmp	r3, #45	; 0x2d
 8008360:	f000 8090 	beq.w	8008484 <_scanf_float+0x188>
 8008364:	d815      	bhi.n	8008392 <_scanf_float+0x96>
 8008366:	2b2b      	cmp	r3, #43	; 0x2b
 8008368:	f000 808c 	beq.w	8008484 <_scanf_float+0x188>
 800836c:	f1b9 0f00 	cmp.w	r9, #0
 8008370:	d003      	beq.n	800837a <_scanf_float+0x7e>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	3a01      	subs	r2, #1
 800837c:	2a01      	cmp	r2, #1
 800837e:	f200 80ea 	bhi.w	8008556 <_scanf_float+0x25a>
 8008382:	4545      	cmp	r5, r8
 8008384:	f200 80dc 	bhi.w	8008540 <_scanf_float+0x244>
 8008388:	2601      	movs	r6, #1
 800838a:	4630      	mov	r0, r6
 800838c:	b007      	add	sp, #28
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008392:	2b2e      	cmp	r3, #46	; 0x2e
 8008394:	f000 809f 	beq.w	80084d6 <_scanf_float+0x1da>
 8008398:	2b30      	cmp	r3, #48	; 0x30
 800839a:	d1e7      	bne.n	800836c <_scanf_float+0x70>
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	f410 7f80 	tst.w	r0, #256	; 0x100
 80083a2:	d064      	beq.n	800846e <_scanf_float+0x172>
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	f109 0901 	add.w	r9, r9, #1
 80083b0:	b11b      	cbz	r3, 80083ba <_scanf_float+0xbe>
 80083b2:	3b01      	subs	r3, #1
 80083b4:	3101      	adds	r1, #1
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	60a1      	str	r1, [r4, #8]
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	3b01      	subs	r3, #1
 80083be:	60a3      	str	r3, [r4, #8]
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	3301      	adds	r3, #1
 80083c4:	6123      	str	r3, [r4, #16]
 80083c6:	6873      	ldr	r3, [r6, #4]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	6073      	str	r3, [r6, #4]
 80083ce:	f340 80ac 	ble.w	800852a <_scanf_float+0x22e>
 80083d2:	6833      	ldr	r3, [r6, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	e7b5      	b.n	8008346 <_scanf_float+0x4a>
 80083da:	2b45      	cmp	r3, #69	; 0x45
 80083dc:	f000 8085 	beq.w	80084ea <_scanf_float+0x1ee>
 80083e0:	2b46      	cmp	r3, #70	; 0x46
 80083e2:	d06a      	beq.n	80084ba <_scanf_float+0x1be>
 80083e4:	2b41      	cmp	r3, #65	; 0x41
 80083e6:	d1c1      	bne.n	800836c <_scanf_float+0x70>
 80083e8:	2a01      	cmp	r2, #1
 80083ea:	d1bf      	bne.n	800836c <_scanf_float+0x70>
 80083ec:	2202      	movs	r2, #2
 80083ee:	e046      	b.n	800847e <_scanf_float+0x182>
 80083f0:	2b65      	cmp	r3, #101	; 0x65
 80083f2:	d07a      	beq.n	80084ea <_scanf_float+0x1ee>
 80083f4:	d818      	bhi.n	8008428 <_scanf_float+0x12c>
 80083f6:	2b54      	cmp	r3, #84	; 0x54
 80083f8:	d066      	beq.n	80084c8 <_scanf_float+0x1cc>
 80083fa:	d811      	bhi.n	8008420 <_scanf_float+0x124>
 80083fc:	2b4e      	cmp	r3, #78	; 0x4e
 80083fe:	d1b5      	bne.n	800836c <_scanf_float+0x70>
 8008400:	2a00      	cmp	r2, #0
 8008402:	d146      	bne.n	8008492 <_scanf_float+0x196>
 8008404:	f1b9 0f00 	cmp.w	r9, #0
 8008408:	d145      	bne.n	8008496 <_scanf_float+0x19a>
 800840a:	6821      	ldr	r1, [r4, #0]
 800840c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008410:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008414:	d13f      	bne.n	8008496 <_scanf_float+0x19a>
 8008416:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800841a:	6021      	str	r1, [r4, #0]
 800841c:	2201      	movs	r2, #1
 800841e:	e02e      	b.n	800847e <_scanf_float+0x182>
 8008420:	2b59      	cmp	r3, #89	; 0x59
 8008422:	d01e      	beq.n	8008462 <_scanf_float+0x166>
 8008424:	2b61      	cmp	r3, #97	; 0x61
 8008426:	e7de      	b.n	80083e6 <_scanf_float+0xea>
 8008428:	2b6e      	cmp	r3, #110	; 0x6e
 800842a:	d0e9      	beq.n	8008400 <_scanf_float+0x104>
 800842c:	d815      	bhi.n	800845a <_scanf_float+0x15e>
 800842e:	2b66      	cmp	r3, #102	; 0x66
 8008430:	d043      	beq.n	80084ba <_scanf_float+0x1be>
 8008432:	2b69      	cmp	r3, #105	; 0x69
 8008434:	d19a      	bne.n	800836c <_scanf_float+0x70>
 8008436:	f1bb 0f00 	cmp.w	fp, #0
 800843a:	d138      	bne.n	80084ae <_scanf_float+0x1b2>
 800843c:	f1b9 0f00 	cmp.w	r9, #0
 8008440:	d197      	bne.n	8008372 <_scanf_float+0x76>
 8008442:	6821      	ldr	r1, [r4, #0]
 8008444:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008448:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800844c:	d195      	bne.n	800837a <_scanf_float+0x7e>
 800844e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008452:	6021      	str	r1, [r4, #0]
 8008454:	f04f 0b01 	mov.w	fp, #1
 8008458:	e011      	b.n	800847e <_scanf_float+0x182>
 800845a:	2b74      	cmp	r3, #116	; 0x74
 800845c:	d034      	beq.n	80084c8 <_scanf_float+0x1cc>
 800845e:	2b79      	cmp	r3, #121	; 0x79
 8008460:	d184      	bne.n	800836c <_scanf_float+0x70>
 8008462:	f1bb 0f07 	cmp.w	fp, #7
 8008466:	d181      	bne.n	800836c <_scanf_float+0x70>
 8008468:	f04f 0b08 	mov.w	fp, #8
 800846c:	e007      	b.n	800847e <_scanf_float+0x182>
 800846e:	eb12 0f0b 	cmn.w	r2, fp
 8008472:	f47f af7b 	bne.w	800836c <_scanf_float+0x70>
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800847c:	6021      	str	r1, [r4, #0]
 800847e:	702b      	strb	r3, [r5, #0]
 8008480:	3501      	adds	r5, #1
 8008482:	e79a      	b.n	80083ba <_scanf_float+0xbe>
 8008484:	6821      	ldr	r1, [r4, #0]
 8008486:	0608      	lsls	r0, r1, #24
 8008488:	f57f af70 	bpl.w	800836c <_scanf_float+0x70>
 800848c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008490:	e7f4      	b.n	800847c <_scanf_float+0x180>
 8008492:	2a02      	cmp	r2, #2
 8008494:	d047      	beq.n	8008526 <_scanf_float+0x22a>
 8008496:	f1bb 0f01 	cmp.w	fp, #1
 800849a:	d003      	beq.n	80084a4 <_scanf_float+0x1a8>
 800849c:	f1bb 0f04 	cmp.w	fp, #4
 80084a0:	f47f af64 	bne.w	800836c <_scanf_float+0x70>
 80084a4:	f10b 0b01 	add.w	fp, fp, #1
 80084a8:	fa5f fb8b 	uxtb.w	fp, fp
 80084ac:	e7e7      	b.n	800847e <_scanf_float+0x182>
 80084ae:	f1bb 0f03 	cmp.w	fp, #3
 80084b2:	d0f7      	beq.n	80084a4 <_scanf_float+0x1a8>
 80084b4:	f1bb 0f05 	cmp.w	fp, #5
 80084b8:	e7f2      	b.n	80084a0 <_scanf_float+0x1a4>
 80084ba:	f1bb 0f02 	cmp.w	fp, #2
 80084be:	f47f af55 	bne.w	800836c <_scanf_float+0x70>
 80084c2:	f04f 0b03 	mov.w	fp, #3
 80084c6:	e7da      	b.n	800847e <_scanf_float+0x182>
 80084c8:	f1bb 0f06 	cmp.w	fp, #6
 80084cc:	f47f af4e 	bne.w	800836c <_scanf_float+0x70>
 80084d0:	f04f 0b07 	mov.w	fp, #7
 80084d4:	e7d3      	b.n	800847e <_scanf_float+0x182>
 80084d6:	6821      	ldr	r1, [r4, #0]
 80084d8:	0588      	lsls	r0, r1, #22
 80084da:	f57f af47 	bpl.w	800836c <_scanf_float+0x70>
 80084de:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80084e2:	6021      	str	r1, [r4, #0]
 80084e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80084e8:	e7c9      	b.n	800847e <_scanf_float+0x182>
 80084ea:	6821      	ldr	r1, [r4, #0]
 80084ec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80084f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80084f4:	d006      	beq.n	8008504 <_scanf_float+0x208>
 80084f6:	0548      	lsls	r0, r1, #21
 80084f8:	f57f af38 	bpl.w	800836c <_scanf_float+0x70>
 80084fc:	f1b9 0f00 	cmp.w	r9, #0
 8008500:	f43f af3b 	beq.w	800837a <_scanf_float+0x7e>
 8008504:	0588      	lsls	r0, r1, #22
 8008506:	bf58      	it	pl
 8008508:	9802      	ldrpl	r0, [sp, #8]
 800850a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800850e:	bf58      	it	pl
 8008510:	eba9 0000 	subpl.w	r0, r9, r0
 8008514:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008518:	bf58      	it	pl
 800851a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800851e:	6021      	str	r1, [r4, #0]
 8008520:	f04f 0900 	mov.w	r9, #0
 8008524:	e7ab      	b.n	800847e <_scanf_float+0x182>
 8008526:	2203      	movs	r2, #3
 8008528:	e7a9      	b.n	800847e <_scanf_float+0x182>
 800852a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800852e:	9205      	str	r2, [sp, #20]
 8008530:	4631      	mov	r1, r6
 8008532:	4638      	mov	r0, r7
 8008534:	4798      	blx	r3
 8008536:	9a05      	ldr	r2, [sp, #20]
 8008538:	2800      	cmp	r0, #0
 800853a:	f43f af04 	beq.w	8008346 <_scanf_float+0x4a>
 800853e:	e715      	b.n	800836c <_scanf_float+0x70>
 8008540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008544:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008548:	4632      	mov	r2, r6
 800854a:	4638      	mov	r0, r7
 800854c:	4798      	blx	r3
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	3b01      	subs	r3, #1
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	e715      	b.n	8008382 <_scanf_float+0x86>
 8008556:	f10b 33ff 	add.w	r3, fp, #4294967295
 800855a:	2b06      	cmp	r3, #6
 800855c:	d80a      	bhi.n	8008574 <_scanf_float+0x278>
 800855e:	f1bb 0f02 	cmp.w	fp, #2
 8008562:	d968      	bls.n	8008636 <_scanf_float+0x33a>
 8008564:	f1ab 0b03 	sub.w	fp, fp, #3
 8008568:	fa5f fb8b 	uxtb.w	fp, fp
 800856c:	eba5 0b0b 	sub.w	fp, r5, fp
 8008570:	455d      	cmp	r5, fp
 8008572:	d14b      	bne.n	800860c <_scanf_float+0x310>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	05da      	lsls	r2, r3, #23
 8008578:	d51f      	bpl.n	80085ba <_scanf_float+0x2be>
 800857a:	055b      	lsls	r3, r3, #21
 800857c:	d468      	bmi.n	8008650 <_scanf_float+0x354>
 800857e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	2965      	cmp	r1, #101	; 0x65
 8008586:	f103 33ff 	add.w	r3, r3, #4294967295
 800858a:	f105 3bff 	add.w	fp, r5, #4294967295
 800858e:	6123      	str	r3, [r4, #16]
 8008590:	d00d      	beq.n	80085ae <_scanf_float+0x2b2>
 8008592:	2945      	cmp	r1, #69	; 0x45
 8008594:	d00b      	beq.n	80085ae <_scanf_float+0x2b2>
 8008596:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800859a:	4632      	mov	r2, r6
 800859c:	4638      	mov	r0, r7
 800859e:	4798      	blx	r3
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	f1a5 0b02 	sub.w	fp, r5, #2
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b2:	4632      	mov	r2, r6
 80085b4:	4638      	mov	r0, r7
 80085b6:	4798      	blx	r3
 80085b8:	465d      	mov	r5, fp
 80085ba:	6826      	ldr	r6, [r4, #0]
 80085bc:	f016 0610 	ands.w	r6, r6, #16
 80085c0:	d17a      	bne.n	80086b8 <_scanf_float+0x3bc>
 80085c2:	702e      	strb	r6, [r5, #0]
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ce:	d142      	bne.n	8008656 <_scanf_float+0x35a>
 80085d0:	9b02      	ldr	r3, [sp, #8]
 80085d2:	eba9 0303 	sub.w	r3, r9, r3
 80085d6:	425a      	negs	r2, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d149      	bne.n	8008670 <_scanf_float+0x374>
 80085dc:	2200      	movs	r2, #0
 80085de:	4641      	mov	r1, r8
 80085e0:	4638      	mov	r0, r7
 80085e2:	f000 fea5 	bl	8009330 <_strtod_r>
 80085e6:	6825      	ldr	r5, [r4, #0]
 80085e8:	f8da 3000 	ldr.w	r3, [sl]
 80085ec:	f015 0f02 	tst.w	r5, #2
 80085f0:	f103 0204 	add.w	r2, r3, #4
 80085f4:	ec59 8b10 	vmov	r8, r9, d0
 80085f8:	f8ca 2000 	str.w	r2, [sl]
 80085fc:	d043      	beq.n	8008686 <_scanf_float+0x38a>
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	e9c3 8900 	strd	r8, r9, [r3]
 8008604:	68e3      	ldr	r3, [r4, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60e3      	str	r3, [r4, #12]
 800860a:	e6be      	b.n	800838a <_scanf_float+0x8e>
 800860c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008610:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008614:	4632      	mov	r2, r6
 8008616:	4638      	mov	r0, r7
 8008618:	4798      	blx	r3
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	e7a6      	b.n	8008570 <_scanf_float+0x274>
 8008622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008626:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800862a:	4632      	mov	r2, r6
 800862c:	4638      	mov	r0, r7
 800862e:	4798      	blx	r3
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	3b01      	subs	r3, #1
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	4545      	cmp	r5, r8
 8008638:	d8f3      	bhi.n	8008622 <_scanf_float+0x326>
 800863a:	e6a5      	b.n	8008388 <_scanf_float+0x8c>
 800863c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008640:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008644:	4632      	mov	r2, r6
 8008646:	4638      	mov	r0, r7
 8008648:	4798      	blx	r3
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	3b01      	subs	r3, #1
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	4545      	cmp	r5, r8
 8008652:	d8f3      	bhi.n	800863c <_scanf_float+0x340>
 8008654:	e698      	b.n	8008388 <_scanf_float+0x8c>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0bf      	beq.n	80085dc <_scanf_float+0x2e0>
 800865c:	9904      	ldr	r1, [sp, #16]
 800865e:	230a      	movs	r3, #10
 8008660:	4632      	mov	r2, r6
 8008662:	3101      	adds	r1, #1
 8008664:	4638      	mov	r0, r7
 8008666:	f000 feef 	bl	8009448 <_strtol_r>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	9d04      	ldr	r5, [sp, #16]
 800866e:	1ac2      	subs	r2, r0, r3
 8008670:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008674:	429d      	cmp	r5, r3
 8008676:	bf28      	it	cs
 8008678:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800867c:	490f      	ldr	r1, [pc, #60]	; (80086bc <_scanf_float+0x3c0>)
 800867e:	4628      	mov	r0, r5
 8008680:	f000 f824 	bl	80086cc <siprintf>
 8008684:	e7aa      	b.n	80085dc <_scanf_float+0x2e0>
 8008686:	f015 0504 	ands.w	r5, r5, #4
 800868a:	d1b8      	bne.n	80085fe <_scanf_float+0x302>
 800868c:	681f      	ldr	r7, [r3, #0]
 800868e:	ee10 2a10 	vmov	r2, s0
 8008692:	464b      	mov	r3, r9
 8008694:	ee10 0a10 	vmov	r0, s0
 8008698:	4649      	mov	r1, r9
 800869a:	f7f8 fa4f 	bl	8000b3c <__aeabi_dcmpun>
 800869e:	b128      	cbz	r0, 80086ac <_scanf_float+0x3b0>
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f80d 	bl	80086c0 <nanf>
 80086a6:	ed87 0a00 	vstr	s0, [r7]
 80086aa:	e7ab      	b.n	8008604 <_scanf_float+0x308>
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7f8 faa2 	bl	8000bf8 <__aeabi_d2f>
 80086b4:	6038      	str	r0, [r7, #0]
 80086b6:	e7a5      	b.n	8008604 <_scanf_float+0x308>
 80086b8:	2600      	movs	r6, #0
 80086ba:	e666      	b.n	800838a <_scanf_float+0x8e>
 80086bc:	0800b6f0 	.word	0x0800b6f0

080086c0 <nanf>:
 80086c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086c8 <nanf+0x8>
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	7fc00000 	.word	0x7fc00000

080086cc <siprintf>:
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b500      	push	{lr}
 80086d0:	b09c      	sub	sp, #112	; 0x70
 80086d2:	ab1d      	add	r3, sp, #116	; 0x74
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	9006      	str	r0, [sp, #24]
 80086d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086dc:	4809      	ldr	r0, [pc, #36]	; (8008704 <siprintf+0x38>)
 80086de:	9107      	str	r1, [sp, #28]
 80086e0:	9104      	str	r1, [sp, #16]
 80086e2:	4909      	ldr	r1, [pc, #36]	; (8008708 <siprintf+0x3c>)
 80086e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	a902      	add	r1, sp, #8
 80086f0:	f002 fd70 	bl	800b1d4 <_svfiprintf_r>
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	b01c      	add	sp, #112	; 0x70
 80086fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008700:	b003      	add	sp, #12
 8008702:	4770      	bx	lr
 8008704:	20000090 	.word	0x20000090
 8008708:	ffff0208 	.word	0xffff0208

0800870c <sulp>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	460d      	mov	r5, r1
 8008712:	ec45 4b10 	vmov	d0, r4, r5
 8008716:	4616      	mov	r6, r2
 8008718:	f002 fb18 	bl	800ad4c <__ulp>
 800871c:	ec51 0b10 	vmov	r0, r1, d0
 8008720:	b17e      	cbz	r6, 8008742 <sulp+0x36>
 8008722:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008726:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800872a:	2b00      	cmp	r3, #0
 800872c:	dd09      	ble.n	8008742 <sulp+0x36>
 800872e:	051b      	lsls	r3, r3, #20
 8008730:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008734:	2400      	movs	r4, #0
 8008736:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800873a:	4622      	mov	r2, r4
 800873c:	462b      	mov	r3, r5
 800873e:	f7f7 ff63 	bl	8000608 <__aeabi_dmul>
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	0000      	movs	r0, r0
	...

08008748 <_strtod_l>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	461f      	mov	r7, r3
 800874e:	b0a1      	sub	sp, #132	; 0x84
 8008750:	2300      	movs	r3, #0
 8008752:	4681      	mov	r9, r0
 8008754:	4638      	mov	r0, r7
 8008756:	460e      	mov	r6, r1
 8008758:	9217      	str	r2, [sp, #92]	; 0x5c
 800875a:	931c      	str	r3, [sp, #112]	; 0x70
 800875c:	f001 fff5 	bl	800a74a <__localeconv_l>
 8008760:	4680      	mov	r8, r0
 8008762:	6800      	ldr	r0, [r0, #0]
 8008764:	f7f7 fd3c 	bl	80001e0 <strlen>
 8008768:	f04f 0a00 	mov.w	sl, #0
 800876c:	4604      	mov	r4, r0
 800876e:	f04f 0b00 	mov.w	fp, #0
 8008772:	961b      	str	r6, [sp, #108]	; 0x6c
 8008774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	2a0d      	cmp	r2, #13
 800877a:	d832      	bhi.n	80087e2 <_strtod_l+0x9a>
 800877c:	2a09      	cmp	r2, #9
 800877e:	d236      	bcs.n	80087ee <_strtod_l+0xa6>
 8008780:	2a00      	cmp	r2, #0
 8008782:	d03e      	beq.n	8008802 <_strtod_l+0xba>
 8008784:	2300      	movs	r3, #0
 8008786:	930d      	str	r3, [sp, #52]	; 0x34
 8008788:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800878a:	782b      	ldrb	r3, [r5, #0]
 800878c:	2b30      	cmp	r3, #48	; 0x30
 800878e:	f040 80ac 	bne.w	80088ea <_strtod_l+0x1a2>
 8008792:	786b      	ldrb	r3, [r5, #1]
 8008794:	2b58      	cmp	r3, #88	; 0x58
 8008796:	d001      	beq.n	800879c <_strtod_l+0x54>
 8008798:	2b78      	cmp	r3, #120	; 0x78
 800879a:	d167      	bne.n	800886c <_strtod_l+0x124>
 800879c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	ab1c      	add	r3, sp, #112	; 0x70
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	9702      	str	r7, [sp, #8]
 80087a6:	ab1d      	add	r3, sp, #116	; 0x74
 80087a8:	4a88      	ldr	r2, [pc, #544]	; (80089cc <_strtod_l+0x284>)
 80087aa:	a91b      	add	r1, sp, #108	; 0x6c
 80087ac:	4648      	mov	r0, r9
 80087ae:	f001 fcf2 	bl	800a196 <__gethex>
 80087b2:	f010 0407 	ands.w	r4, r0, #7
 80087b6:	4606      	mov	r6, r0
 80087b8:	d005      	beq.n	80087c6 <_strtod_l+0x7e>
 80087ba:	2c06      	cmp	r4, #6
 80087bc:	d12b      	bne.n	8008816 <_strtod_l+0xce>
 80087be:	3501      	adds	r5, #1
 80087c0:	2300      	movs	r3, #0
 80087c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80087c4:	930d      	str	r3, [sp, #52]	; 0x34
 80087c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 859a 	bne.w	8009302 <_strtod_l+0xbba>
 80087ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d0:	b1e3      	cbz	r3, 800880c <_strtod_l+0xc4>
 80087d2:	4652      	mov	r2, sl
 80087d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087d8:	ec43 2b10 	vmov	d0, r2, r3
 80087dc:	b021      	add	sp, #132	; 0x84
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	2a2b      	cmp	r2, #43	; 0x2b
 80087e4:	d015      	beq.n	8008812 <_strtod_l+0xca>
 80087e6:	2a2d      	cmp	r2, #45	; 0x2d
 80087e8:	d004      	beq.n	80087f4 <_strtod_l+0xac>
 80087ea:	2a20      	cmp	r2, #32
 80087ec:	d1ca      	bne.n	8008784 <_strtod_l+0x3c>
 80087ee:	3301      	adds	r3, #1
 80087f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80087f2:	e7bf      	b.n	8008774 <_strtod_l+0x2c>
 80087f4:	2201      	movs	r2, #1
 80087f6:	920d      	str	r2, [sp, #52]	; 0x34
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1c2      	bne.n	8008788 <_strtod_l+0x40>
 8008802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008804:	961b      	str	r6, [sp, #108]	; 0x6c
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 8579 	bne.w	80092fe <_strtod_l+0xbb6>
 800880c:	4652      	mov	r2, sl
 800880e:	465b      	mov	r3, fp
 8008810:	e7e2      	b.n	80087d8 <_strtod_l+0x90>
 8008812:	2200      	movs	r2, #0
 8008814:	e7ef      	b.n	80087f6 <_strtod_l+0xae>
 8008816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008818:	b13a      	cbz	r2, 800882a <_strtod_l+0xe2>
 800881a:	2135      	movs	r1, #53	; 0x35
 800881c:	a81e      	add	r0, sp, #120	; 0x78
 800881e:	f002 fb8d 	bl	800af3c <__copybits>
 8008822:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008824:	4648      	mov	r0, r9
 8008826:	f001 fffa 	bl	800a81e <_Bfree>
 800882a:	3c01      	subs	r4, #1
 800882c:	2c04      	cmp	r4, #4
 800882e:	d806      	bhi.n	800883e <_strtod_l+0xf6>
 8008830:	e8df f004 	tbb	[pc, r4]
 8008834:	1714030a 	.word	0x1714030a
 8008838:	0a          	.byte	0x0a
 8008839:	00          	.byte	0x00
 800883a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800883e:	0730      	lsls	r0, r6, #28
 8008840:	d5c1      	bpl.n	80087c6 <_strtod_l+0x7e>
 8008842:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008846:	e7be      	b.n	80087c6 <_strtod_l+0x7e>
 8008848:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800884c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800884e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008852:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008856:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800885a:	e7f0      	b.n	800883e <_strtod_l+0xf6>
 800885c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80089d0 <_strtod_l+0x288>
 8008860:	e7ed      	b.n	800883e <_strtod_l+0xf6>
 8008862:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008866:	f04f 3aff 	mov.w	sl, #4294967295
 800886a:	e7e8      	b.n	800883e <_strtod_l+0xf6>
 800886c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	921b      	str	r2, [sp, #108]	; 0x6c
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	2b30      	cmp	r3, #48	; 0x30
 8008876:	d0f9      	beq.n	800886c <_strtod_l+0x124>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0a4      	beq.n	80087c6 <_strtod_l+0x7e>
 800887c:	2301      	movs	r3, #1
 800887e:	2500      	movs	r5, #0
 8008880:	9306      	str	r3, [sp, #24]
 8008882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008884:	9308      	str	r3, [sp, #32]
 8008886:	9507      	str	r5, [sp, #28]
 8008888:	9505      	str	r5, [sp, #20]
 800888a:	220a      	movs	r2, #10
 800888c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800888e:	7807      	ldrb	r7, [r0, #0]
 8008890:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008894:	b2d9      	uxtb	r1, r3
 8008896:	2909      	cmp	r1, #9
 8008898:	d929      	bls.n	80088ee <_strtod_l+0x1a6>
 800889a:	4622      	mov	r2, r4
 800889c:	f8d8 1000 	ldr.w	r1, [r8]
 80088a0:	f002 fda0 	bl	800b3e4 <strncmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d031      	beq.n	800890c <_strtod_l+0x1c4>
 80088a8:	2000      	movs	r0, #0
 80088aa:	9c05      	ldr	r4, [sp, #20]
 80088ac:	9004      	str	r0, [sp, #16]
 80088ae:	463b      	mov	r3, r7
 80088b0:	4602      	mov	r2, r0
 80088b2:	2b65      	cmp	r3, #101	; 0x65
 80088b4:	d001      	beq.n	80088ba <_strtod_l+0x172>
 80088b6:	2b45      	cmp	r3, #69	; 0x45
 80088b8:	d114      	bne.n	80088e4 <_strtod_l+0x19c>
 80088ba:	b924      	cbnz	r4, 80088c6 <_strtod_l+0x17e>
 80088bc:	b910      	cbnz	r0, 80088c4 <_strtod_l+0x17c>
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d09e      	beq.n	8008802 <_strtod_l+0xba>
 80088c4:	2400      	movs	r4, #0
 80088c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80088c8:	1c73      	adds	r3, r6, #1
 80088ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80088cc:	7873      	ldrb	r3, [r6, #1]
 80088ce:	2b2b      	cmp	r3, #43	; 0x2b
 80088d0:	d078      	beq.n	80089c4 <_strtod_l+0x27c>
 80088d2:	2b2d      	cmp	r3, #45	; 0x2d
 80088d4:	d070      	beq.n	80089b8 <_strtod_l+0x270>
 80088d6:	f04f 0c00 	mov.w	ip, #0
 80088da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80088de:	2f09      	cmp	r7, #9
 80088e0:	d97c      	bls.n	80089dc <_strtod_l+0x294>
 80088e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80088e4:	f04f 0e00 	mov.w	lr, #0
 80088e8:	e09a      	b.n	8008a20 <_strtod_l+0x2d8>
 80088ea:	2300      	movs	r3, #0
 80088ec:	e7c7      	b.n	800887e <_strtod_l+0x136>
 80088ee:	9905      	ldr	r1, [sp, #20]
 80088f0:	2908      	cmp	r1, #8
 80088f2:	bfdd      	ittte	le
 80088f4:	9907      	ldrle	r1, [sp, #28]
 80088f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80088fa:	9307      	strle	r3, [sp, #28]
 80088fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008900:	9b05      	ldr	r3, [sp, #20]
 8008902:	3001      	adds	r0, #1
 8008904:	3301      	adds	r3, #1
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	901b      	str	r0, [sp, #108]	; 0x6c
 800890a:	e7bf      	b.n	800888c <_strtod_l+0x144>
 800890c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800890e:	191a      	adds	r2, r3, r4
 8008910:	921b      	str	r2, [sp, #108]	; 0x6c
 8008912:	9a05      	ldr	r2, [sp, #20]
 8008914:	5d1b      	ldrb	r3, [r3, r4]
 8008916:	2a00      	cmp	r2, #0
 8008918:	d037      	beq.n	800898a <_strtod_l+0x242>
 800891a:	9c05      	ldr	r4, [sp, #20]
 800891c:	4602      	mov	r2, r0
 800891e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008922:	2909      	cmp	r1, #9
 8008924:	d913      	bls.n	800894e <_strtod_l+0x206>
 8008926:	2101      	movs	r1, #1
 8008928:	9104      	str	r1, [sp, #16]
 800892a:	e7c2      	b.n	80088b2 <_strtod_l+0x16a>
 800892c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	921b      	str	r2, [sp, #108]	; 0x6c
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	3001      	adds	r0, #1
 8008936:	2b30      	cmp	r3, #48	; 0x30
 8008938:	d0f8      	beq.n	800892c <_strtod_l+0x1e4>
 800893a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800893e:	2a08      	cmp	r2, #8
 8008940:	f200 84e4 	bhi.w	800930c <_strtod_l+0xbc4>
 8008944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008946:	9208      	str	r2, [sp, #32]
 8008948:	4602      	mov	r2, r0
 800894a:	2000      	movs	r0, #0
 800894c:	4604      	mov	r4, r0
 800894e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008952:	f100 0101 	add.w	r1, r0, #1
 8008956:	d012      	beq.n	800897e <_strtod_l+0x236>
 8008958:	440a      	add	r2, r1
 800895a:	eb00 0c04 	add.w	ip, r0, r4
 800895e:	4621      	mov	r1, r4
 8008960:	270a      	movs	r7, #10
 8008962:	458c      	cmp	ip, r1
 8008964:	d113      	bne.n	800898e <_strtod_l+0x246>
 8008966:	1821      	adds	r1, r4, r0
 8008968:	2908      	cmp	r1, #8
 800896a:	f104 0401 	add.w	r4, r4, #1
 800896e:	4404      	add	r4, r0
 8008970:	dc19      	bgt.n	80089a6 <_strtod_l+0x25e>
 8008972:	9b07      	ldr	r3, [sp, #28]
 8008974:	210a      	movs	r1, #10
 8008976:	fb01 e303 	mla	r3, r1, r3, lr
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	2100      	movs	r1, #0
 800897e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008980:	1c58      	adds	r0, r3, #1
 8008982:	901b      	str	r0, [sp, #108]	; 0x6c
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	4608      	mov	r0, r1
 8008988:	e7c9      	b.n	800891e <_strtod_l+0x1d6>
 800898a:	9805      	ldr	r0, [sp, #20]
 800898c:	e7d3      	b.n	8008936 <_strtod_l+0x1ee>
 800898e:	2908      	cmp	r1, #8
 8008990:	f101 0101 	add.w	r1, r1, #1
 8008994:	dc03      	bgt.n	800899e <_strtod_l+0x256>
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	437b      	muls	r3, r7
 800899a:	9307      	str	r3, [sp, #28]
 800899c:	e7e1      	b.n	8008962 <_strtod_l+0x21a>
 800899e:	2910      	cmp	r1, #16
 80089a0:	bfd8      	it	le
 80089a2:	437d      	mulle	r5, r7
 80089a4:	e7dd      	b.n	8008962 <_strtod_l+0x21a>
 80089a6:	2c10      	cmp	r4, #16
 80089a8:	bfdc      	itt	le
 80089aa:	210a      	movle	r1, #10
 80089ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80089b0:	e7e4      	b.n	800897c <_strtod_l+0x234>
 80089b2:	2301      	movs	r3, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	e781      	b.n	80088bc <_strtod_l+0x174>
 80089b8:	f04f 0c01 	mov.w	ip, #1
 80089bc:	1cb3      	adds	r3, r6, #2
 80089be:	931b      	str	r3, [sp, #108]	; 0x6c
 80089c0:	78b3      	ldrb	r3, [r6, #2]
 80089c2:	e78a      	b.n	80088da <_strtod_l+0x192>
 80089c4:	f04f 0c00 	mov.w	ip, #0
 80089c8:	e7f8      	b.n	80089bc <_strtod_l+0x274>
 80089ca:	bf00      	nop
 80089cc:	0800b6f8 	.word	0x0800b6f8
 80089d0:	7ff00000 	.word	0x7ff00000
 80089d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089d6:	1c5f      	adds	r7, r3, #1
 80089d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b30      	cmp	r3, #48	; 0x30
 80089de:	d0f9      	beq.n	80089d4 <_strtod_l+0x28c>
 80089e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80089e4:	2f08      	cmp	r7, #8
 80089e6:	f63f af7d 	bhi.w	80088e4 <_strtod_l+0x19c>
 80089ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80089ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089f0:	930a      	str	r3, [sp, #40]	; 0x28
 80089f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089f4:	1c5f      	adds	r7, r3, #1
 80089f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80089fe:	f1b8 0f09 	cmp.w	r8, #9
 8008a02:	d937      	bls.n	8008a74 <_strtod_l+0x32c>
 8008a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a06:	1a7f      	subs	r7, r7, r1
 8008a08:	2f08      	cmp	r7, #8
 8008a0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008a0e:	dc37      	bgt.n	8008a80 <_strtod_l+0x338>
 8008a10:	45be      	cmp	lr, r7
 8008a12:	bfa8      	it	ge
 8008a14:	46be      	movge	lr, r7
 8008a16:	f1bc 0f00 	cmp.w	ip, #0
 8008a1a:	d001      	beq.n	8008a20 <_strtod_l+0x2d8>
 8008a1c:	f1ce 0e00 	rsb	lr, lr, #0
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d151      	bne.n	8008ac8 <_strtod_l+0x380>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f47f aece 	bne.w	80087c6 <_strtod_l+0x7e>
 8008a2a:	9a06      	ldr	r2, [sp, #24]
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	f47f aeca 	bne.w	80087c6 <_strtod_l+0x7e>
 8008a32:	9a04      	ldr	r2, [sp, #16]
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	f47f aee4 	bne.w	8008802 <_strtod_l+0xba>
 8008a3a:	2b4e      	cmp	r3, #78	; 0x4e
 8008a3c:	d027      	beq.n	8008a8e <_strtod_l+0x346>
 8008a3e:	dc21      	bgt.n	8008a84 <_strtod_l+0x33c>
 8008a40:	2b49      	cmp	r3, #73	; 0x49
 8008a42:	f47f aede 	bne.w	8008802 <_strtod_l+0xba>
 8008a46:	49a0      	ldr	r1, [pc, #640]	; (8008cc8 <_strtod_l+0x580>)
 8008a48:	a81b      	add	r0, sp, #108	; 0x6c
 8008a4a:	f001 fdd7 	bl	800a5fc <__match>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f aed7 	beq.w	8008802 <_strtod_l+0xba>
 8008a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a56:	499d      	ldr	r1, [pc, #628]	; (8008ccc <_strtod_l+0x584>)
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	a81b      	add	r0, sp, #108	; 0x6c
 8008a5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a5e:	f001 fdcd 	bl	800a5fc <__match>
 8008a62:	b910      	cbnz	r0, 8008a6a <_strtod_l+0x322>
 8008a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a66:	3301      	adds	r3, #1
 8008a68:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ce0 <_strtod_l+0x598>
 8008a6e:	f04f 0a00 	mov.w	sl, #0
 8008a72:	e6a8      	b.n	80087c6 <_strtod_l+0x7e>
 8008a74:	210a      	movs	r1, #10
 8008a76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008a7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008a7e:	e7b8      	b.n	80089f2 <_strtod_l+0x2aa>
 8008a80:	46be      	mov	lr, r7
 8008a82:	e7c8      	b.n	8008a16 <_strtod_l+0x2ce>
 8008a84:	2b69      	cmp	r3, #105	; 0x69
 8008a86:	d0de      	beq.n	8008a46 <_strtod_l+0x2fe>
 8008a88:	2b6e      	cmp	r3, #110	; 0x6e
 8008a8a:	f47f aeba 	bne.w	8008802 <_strtod_l+0xba>
 8008a8e:	4990      	ldr	r1, [pc, #576]	; (8008cd0 <_strtod_l+0x588>)
 8008a90:	a81b      	add	r0, sp, #108	; 0x6c
 8008a92:	f001 fdb3 	bl	800a5fc <__match>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f43f aeb3 	beq.w	8008802 <_strtod_l+0xba>
 8008a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b28      	cmp	r3, #40	; 0x28
 8008aa2:	d10e      	bne.n	8008ac2 <_strtod_l+0x37a>
 8008aa4:	aa1e      	add	r2, sp, #120	; 0x78
 8008aa6:	498b      	ldr	r1, [pc, #556]	; (8008cd4 <_strtod_l+0x58c>)
 8008aa8:	a81b      	add	r0, sp, #108	; 0x6c
 8008aaa:	f001 fdbb 	bl	800a624 <__hexnan>
 8008aae:	2805      	cmp	r0, #5
 8008ab0:	d107      	bne.n	8008ac2 <_strtod_l+0x37a>
 8008ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ab4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008ab8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008abc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ac0:	e681      	b.n	80087c6 <_strtod_l+0x7e>
 8008ac2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008ce8 <_strtod_l+0x5a0>
 8008ac6:	e7d2      	b.n	8008a6e <_strtod_l+0x326>
 8008ac8:	ebae 0302 	sub.w	r3, lr, r2
 8008acc:	9306      	str	r3, [sp, #24]
 8008ace:	9b05      	ldr	r3, [sp, #20]
 8008ad0:	9807      	ldr	r0, [sp, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bf08      	it	eq
 8008ad6:	4623      	moveq	r3, r4
 8008ad8:	2c10      	cmp	r4, #16
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	46a0      	mov	r8, r4
 8008ade:	bfa8      	it	ge
 8008ae0:	f04f 0810 	movge.w	r8, #16
 8008ae4:	f7f7 fd16 	bl	8000514 <__aeabi_ui2d>
 8008ae8:	2c09      	cmp	r4, #9
 8008aea:	4682      	mov	sl, r0
 8008aec:	468b      	mov	fp, r1
 8008aee:	dc13      	bgt.n	8008b18 <_strtod_l+0x3d0>
 8008af0:	9b06      	ldr	r3, [sp, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f43f ae67 	beq.w	80087c6 <_strtod_l+0x7e>
 8008af8:	9b06      	ldr	r3, [sp, #24]
 8008afa:	dd7a      	ble.n	8008bf2 <_strtod_l+0x4aa>
 8008afc:	2b16      	cmp	r3, #22
 8008afe:	dc61      	bgt.n	8008bc4 <_strtod_l+0x47c>
 8008b00:	4a75      	ldr	r2, [pc, #468]	; (8008cd8 <_strtod_l+0x590>)
 8008b02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008b06:	e9de 0100 	ldrd	r0, r1, [lr]
 8008b0a:	4652      	mov	r2, sl
 8008b0c:	465b      	mov	r3, fp
 8008b0e:	f7f7 fd7b 	bl	8000608 <__aeabi_dmul>
 8008b12:	4682      	mov	sl, r0
 8008b14:	468b      	mov	fp, r1
 8008b16:	e656      	b.n	80087c6 <_strtod_l+0x7e>
 8008b18:	4b6f      	ldr	r3, [pc, #444]	; (8008cd8 <_strtod_l+0x590>)
 8008b1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b22:	f7f7 fd71 	bl	8000608 <__aeabi_dmul>
 8008b26:	4606      	mov	r6, r0
 8008b28:	4628      	mov	r0, r5
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	f7f7 fcf2 	bl	8000514 <__aeabi_ui2d>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4630      	mov	r0, r6
 8008b36:	4639      	mov	r1, r7
 8008b38:	f7f7 fbb0 	bl	800029c <__adddf3>
 8008b3c:	2c0f      	cmp	r4, #15
 8008b3e:	4682      	mov	sl, r0
 8008b40:	468b      	mov	fp, r1
 8008b42:	ddd5      	ble.n	8008af0 <_strtod_l+0x3a8>
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	eba4 0808 	sub.w	r8, r4, r8
 8008b4a:	4498      	add	r8, r3
 8008b4c:	f1b8 0f00 	cmp.w	r8, #0
 8008b50:	f340 8096 	ble.w	8008c80 <_strtod_l+0x538>
 8008b54:	f018 030f 	ands.w	r3, r8, #15
 8008b58:	d00a      	beq.n	8008b70 <_strtod_l+0x428>
 8008b5a:	495f      	ldr	r1, [pc, #380]	; (8008cd8 <_strtod_l+0x590>)
 8008b5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b60:	4652      	mov	r2, sl
 8008b62:	465b      	mov	r3, fp
 8008b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b68:	f7f7 fd4e 	bl	8000608 <__aeabi_dmul>
 8008b6c:	4682      	mov	sl, r0
 8008b6e:	468b      	mov	fp, r1
 8008b70:	f038 080f 	bics.w	r8, r8, #15
 8008b74:	d073      	beq.n	8008c5e <_strtod_l+0x516>
 8008b76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008b7a:	dd47      	ble.n	8008c0c <_strtod_l+0x4c4>
 8008b7c:	2400      	movs	r4, #0
 8008b7e:	46a0      	mov	r8, r4
 8008b80:	9407      	str	r4, [sp, #28]
 8008b82:	9405      	str	r4, [sp, #20]
 8008b84:	2322      	movs	r3, #34	; 0x22
 8008b86:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ce0 <_strtod_l+0x598>
 8008b8a:	f8c9 3000 	str.w	r3, [r9]
 8008b8e:	f04f 0a00 	mov.w	sl, #0
 8008b92:	9b07      	ldr	r3, [sp, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f43f ae16 	beq.w	80087c6 <_strtod_l+0x7e>
 8008b9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b9c:	4648      	mov	r0, r9
 8008b9e:	f001 fe3e 	bl	800a81e <_Bfree>
 8008ba2:	9905      	ldr	r1, [sp, #20]
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f001 fe3a 	bl	800a81e <_Bfree>
 8008baa:	4641      	mov	r1, r8
 8008bac:	4648      	mov	r0, r9
 8008bae:	f001 fe36 	bl	800a81e <_Bfree>
 8008bb2:	9907      	ldr	r1, [sp, #28]
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f001 fe32 	bl	800a81e <_Bfree>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4648      	mov	r0, r9
 8008bbe:	f001 fe2e 	bl	800a81e <_Bfree>
 8008bc2:	e600      	b.n	80087c6 <_strtod_l+0x7e>
 8008bc4:	9a06      	ldr	r2, [sp, #24]
 8008bc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	dbba      	blt.n	8008b44 <_strtod_l+0x3fc>
 8008bce:	4d42      	ldr	r5, [pc, #264]	; (8008cd8 <_strtod_l+0x590>)
 8008bd0:	f1c4 040f 	rsb	r4, r4, #15
 8008bd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008bd8:	4652      	mov	r2, sl
 8008bda:	465b      	mov	r3, fp
 8008bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be0:	f7f7 fd12 	bl	8000608 <__aeabi_dmul>
 8008be4:	9b06      	ldr	r3, [sp, #24]
 8008be6:	1b1c      	subs	r4, r3, r4
 8008be8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008bec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bf0:	e78d      	b.n	8008b0e <_strtod_l+0x3c6>
 8008bf2:	f113 0f16 	cmn.w	r3, #22
 8008bf6:	dba5      	blt.n	8008b44 <_strtod_l+0x3fc>
 8008bf8:	4a37      	ldr	r2, [pc, #220]	; (8008cd8 <_strtod_l+0x590>)
 8008bfa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008bfe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008c02:	4650      	mov	r0, sl
 8008c04:	4659      	mov	r1, fp
 8008c06:	f7f7 fe29 	bl	800085c <__aeabi_ddiv>
 8008c0a:	e782      	b.n	8008b12 <_strtod_l+0x3ca>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4e33      	ldr	r6, [pc, #204]	; (8008cdc <_strtod_l+0x594>)
 8008c10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c14:	4650      	mov	r0, sl
 8008c16:	4659      	mov	r1, fp
 8008c18:	461d      	mov	r5, r3
 8008c1a:	f1b8 0f01 	cmp.w	r8, #1
 8008c1e:	dc21      	bgt.n	8008c64 <_strtod_l+0x51c>
 8008c20:	b10b      	cbz	r3, 8008c26 <_strtod_l+0x4de>
 8008c22:	4682      	mov	sl, r0
 8008c24:	468b      	mov	fp, r1
 8008c26:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <_strtod_l+0x594>)
 8008c28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008c30:	4652      	mov	r2, sl
 8008c32:	465b      	mov	r3, fp
 8008c34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008c38:	f7f7 fce6 	bl	8000608 <__aeabi_dmul>
 8008c3c:	4b28      	ldr	r3, [pc, #160]	; (8008ce0 <_strtod_l+0x598>)
 8008c3e:	460a      	mov	r2, r1
 8008c40:	400b      	ands	r3, r1
 8008c42:	4928      	ldr	r1, [pc, #160]	; (8008ce4 <_strtod_l+0x59c>)
 8008c44:	428b      	cmp	r3, r1
 8008c46:	4682      	mov	sl, r0
 8008c48:	d898      	bhi.n	8008b7c <_strtod_l+0x434>
 8008c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c4e:	428b      	cmp	r3, r1
 8008c50:	bf86      	itte	hi
 8008c52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008cec <_strtod_l+0x5a4>
 8008c56:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	e077      	b.n	8008d54 <_strtod_l+0x60c>
 8008c64:	f018 0f01 	tst.w	r8, #1
 8008c68:	d006      	beq.n	8008c78 <_strtod_l+0x530>
 8008c6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fcc9 	bl	8000608 <__aeabi_dmul>
 8008c76:	2301      	movs	r3, #1
 8008c78:	3501      	adds	r5, #1
 8008c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c7e:	e7cc      	b.n	8008c1a <_strtod_l+0x4d2>
 8008c80:	d0ed      	beq.n	8008c5e <_strtod_l+0x516>
 8008c82:	f1c8 0800 	rsb	r8, r8, #0
 8008c86:	f018 020f 	ands.w	r2, r8, #15
 8008c8a:	d00a      	beq.n	8008ca2 <_strtod_l+0x55a>
 8008c8c:	4b12      	ldr	r3, [pc, #72]	; (8008cd8 <_strtod_l+0x590>)
 8008c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c92:	4650      	mov	r0, sl
 8008c94:	4659      	mov	r1, fp
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 fddf 	bl	800085c <__aeabi_ddiv>
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ca6:	d0da      	beq.n	8008c5e <_strtod_l+0x516>
 8008ca8:	f1b8 0f1f 	cmp.w	r8, #31
 8008cac:	dd20      	ble.n	8008cf0 <_strtod_l+0x5a8>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	46a0      	mov	r8, r4
 8008cb2:	9407      	str	r4, [sp, #28]
 8008cb4:	9405      	str	r4, [sp, #20]
 8008cb6:	2322      	movs	r3, #34	; 0x22
 8008cb8:	f04f 0a00 	mov.w	sl, #0
 8008cbc:	f04f 0b00 	mov.w	fp, #0
 8008cc0:	f8c9 3000 	str.w	r3, [r9]
 8008cc4:	e765      	b.n	8008b92 <_strtod_l+0x44a>
 8008cc6:	bf00      	nop
 8008cc8:	0800b6c1 	.word	0x0800b6c1
 8008ccc:	0800b74b 	.word	0x0800b74b
 8008cd0:	0800b6c9 	.word	0x0800b6c9
 8008cd4:	0800b70c 	.word	0x0800b70c
 8008cd8:	0800b788 	.word	0x0800b788
 8008cdc:	0800b760 	.word	0x0800b760
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	7ca00000 	.word	0x7ca00000
 8008ce8:	fff80000 	.word	0xfff80000
 8008cec:	7fefffff 	.word	0x7fefffff
 8008cf0:	f018 0310 	ands.w	r3, r8, #16
 8008cf4:	bf18      	it	ne
 8008cf6:	236a      	movne	r3, #106	; 0x6a
 8008cf8:	4da0      	ldr	r5, [pc, #640]	; (8008f7c <_strtod_l+0x834>)
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	4650      	mov	r0, sl
 8008cfe:	4659      	mov	r1, fp
 8008d00:	2300      	movs	r3, #0
 8008d02:	f1b8 0f00 	cmp.w	r8, #0
 8008d06:	f300 810a 	bgt.w	8008f1e <_strtod_l+0x7d6>
 8008d0a:	b10b      	cbz	r3, 8008d10 <_strtod_l+0x5c8>
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	468b      	mov	fp, r1
 8008d10:	9b04      	ldr	r3, [sp, #16]
 8008d12:	b1bb      	cbz	r3, 8008d44 <_strtod_l+0x5fc>
 8008d14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008d18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	4659      	mov	r1, fp
 8008d20:	dd10      	ble.n	8008d44 <_strtod_l+0x5fc>
 8008d22:	2b1f      	cmp	r3, #31
 8008d24:	f340 8107 	ble.w	8008f36 <_strtod_l+0x7ee>
 8008d28:	2b34      	cmp	r3, #52	; 0x34
 8008d2a:	bfde      	ittt	le
 8008d2c:	3b20      	suble	r3, #32
 8008d2e:	f04f 32ff 	movle.w	r2, #4294967295
 8008d32:	fa02 f303 	lslle.w	r3, r2, r3
 8008d36:	f04f 0a00 	mov.w	sl, #0
 8008d3a:	bfcc      	ite	gt
 8008d3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d40:	ea03 0b01 	andle.w	fp, r3, r1
 8008d44:	2200      	movs	r2, #0
 8008d46:	2300      	movs	r3, #0
 8008d48:	4650      	mov	r0, sl
 8008d4a:	4659      	mov	r1, fp
 8008d4c:	f7f7 fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d1ac      	bne.n	8008cae <_strtod_l+0x566>
 8008d54:	9b07      	ldr	r3, [sp, #28]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	9a05      	ldr	r2, [sp, #20]
 8008d5a:	9908      	ldr	r1, [sp, #32]
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	4648      	mov	r0, r9
 8008d60:	f001 fdaf 	bl	800a8c2 <__s2b>
 8008d64:	9007      	str	r0, [sp, #28]
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f af08 	beq.w	8008b7c <_strtod_l+0x434>
 8008d6c:	9a06      	ldr	r2, [sp, #24]
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	2a00      	cmp	r2, #0
 8008d72:	f1c3 0300 	rsb	r3, r3, #0
 8008d76:	bfa8      	it	ge
 8008d78:	2300      	movge	r3, #0
 8008d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008d7c:	2400      	movs	r4, #0
 8008d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d82:	9316      	str	r3, [sp, #88]	; 0x58
 8008d84:	46a0      	mov	r8, r4
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	4648      	mov	r0, r9
 8008d8a:	6859      	ldr	r1, [r3, #4]
 8008d8c:	f001 fd13 	bl	800a7b6 <_Balloc>
 8008d90:	9005      	str	r0, [sp, #20]
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f43f aef6 	beq.w	8008b84 <_strtod_l+0x43c>
 8008d98:	9b07      	ldr	r3, [sp, #28]
 8008d9a:	691a      	ldr	r2, [r3, #16]
 8008d9c:	3202      	adds	r2, #2
 8008d9e:	f103 010c 	add.w	r1, r3, #12
 8008da2:	0092      	lsls	r2, r2, #2
 8008da4:	300c      	adds	r0, #12
 8008da6:	f001 fcfb 	bl	800a7a0 <memcpy>
 8008daa:	aa1e      	add	r2, sp, #120	; 0x78
 8008dac:	a91d      	add	r1, sp, #116	; 0x74
 8008dae:	ec4b ab10 	vmov	d0, sl, fp
 8008db2:	4648      	mov	r0, r9
 8008db4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008db8:	f002 f83e 	bl	800ae38 <__d2b>
 8008dbc:	901c      	str	r0, [sp, #112]	; 0x70
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f aee0 	beq.w	8008b84 <_strtod_l+0x43c>
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	4648      	mov	r0, r9
 8008dc8:	f001 fe07 	bl	800a9da <__i2b>
 8008dcc:	4680      	mov	r8, r0
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f43f aed8 	beq.w	8008b84 <_strtod_l+0x43c>
 8008dd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008dd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	bfab      	itete	ge
 8008ddc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008dde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008de0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008de2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008de4:	bfac      	ite	ge
 8008de6:	18f7      	addge	r7, r6, r3
 8008de8:	1b9d      	sublt	r5, r3, r6
 8008dea:	9b04      	ldr	r3, [sp, #16]
 8008dec:	1af6      	subs	r6, r6, r3
 8008dee:	4416      	add	r6, r2
 8008df0:	4b63      	ldr	r3, [pc, #396]	; (8008f80 <_strtod_l+0x838>)
 8008df2:	3e01      	subs	r6, #1
 8008df4:	429e      	cmp	r6, r3
 8008df6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008dfa:	f280 80af 	bge.w	8008f5c <_strtod_l+0x814>
 8008dfe:	1b9b      	subs	r3, r3, r6
 8008e00:	2b1f      	cmp	r3, #31
 8008e02:	eba2 0203 	sub.w	r2, r2, r3
 8008e06:	f04f 0101 	mov.w	r1, #1
 8008e0a:	f300 809b 	bgt.w	8008f44 <_strtod_l+0x7fc>
 8008e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e14:	2300      	movs	r3, #0
 8008e16:	930a      	str	r3, [sp, #40]	; 0x28
 8008e18:	18be      	adds	r6, r7, r2
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	42b7      	cmp	r7, r6
 8008e1e:	4415      	add	r5, r2
 8008e20:	441d      	add	r5, r3
 8008e22:	463b      	mov	r3, r7
 8008e24:	bfa8      	it	ge
 8008e26:	4633      	movge	r3, r6
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	bfa8      	it	ge
 8008e2c:	462b      	movge	r3, r5
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfc2      	ittt	gt
 8008e32:	1af6      	subgt	r6, r6, r3
 8008e34:	1aed      	subgt	r5, r5, r3
 8008e36:	1aff      	subgt	r7, r7, r3
 8008e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e3a:	b1bb      	cbz	r3, 8008e6c <_strtod_l+0x724>
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	461a      	mov	r2, r3
 8008e40:	4648      	mov	r0, r9
 8008e42:	f001 fe69 	bl	800ab18 <__pow5mult>
 8008e46:	4680      	mov	r8, r0
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f43f ae9b 	beq.w	8008b84 <_strtod_l+0x43c>
 8008e4e:	4601      	mov	r1, r0
 8008e50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008e52:	4648      	mov	r0, r9
 8008e54:	f001 fdca 	bl	800a9ec <__multiply>
 8008e58:	900c      	str	r0, [sp, #48]	; 0x30
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f43f ae92 	beq.w	8008b84 <_strtod_l+0x43c>
 8008e60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e62:	4648      	mov	r0, r9
 8008e64:	f001 fcdb 	bl	800a81e <_Bfree>
 8008e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e6a:	931c      	str	r3, [sp, #112]	; 0x70
 8008e6c:	2e00      	cmp	r6, #0
 8008e6e:	dc7a      	bgt.n	8008f66 <_strtod_l+0x81e>
 8008e70:	9b06      	ldr	r3, [sp, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dd08      	ble.n	8008e88 <_strtod_l+0x740>
 8008e76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e78:	9905      	ldr	r1, [sp, #20]
 8008e7a:	4648      	mov	r0, r9
 8008e7c:	f001 fe4c 	bl	800ab18 <__pow5mult>
 8008e80:	9005      	str	r0, [sp, #20]
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f ae7e 	beq.w	8008b84 <_strtod_l+0x43c>
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	dd08      	ble.n	8008e9e <_strtod_l+0x756>
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	9905      	ldr	r1, [sp, #20]
 8008e90:	4648      	mov	r0, r9
 8008e92:	f001 fe8f 	bl	800abb4 <__lshift>
 8008e96:	9005      	str	r0, [sp, #20]
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f43f ae73 	beq.w	8008b84 <_strtod_l+0x43c>
 8008e9e:	2f00      	cmp	r7, #0
 8008ea0:	dd08      	ble.n	8008eb4 <_strtod_l+0x76c>
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	4648      	mov	r0, r9
 8008ea8:	f001 fe84 	bl	800abb4 <__lshift>
 8008eac:	4680      	mov	r8, r0
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f43f ae68 	beq.w	8008b84 <_strtod_l+0x43c>
 8008eb4:	9a05      	ldr	r2, [sp, #20]
 8008eb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008eb8:	4648      	mov	r0, r9
 8008eba:	f001 fee9 	bl	800ac90 <__mdiff>
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f43f ae5f 	beq.w	8008b84 <_strtod_l+0x43c>
 8008ec6:	68c3      	ldr	r3, [r0, #12]
 8008ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60c3      	str	r3, [r0, #12]
 8008ece:	4641      	mov	r1, r8
 8008ed0:	f001 fec4 	bl	800ac5c <__mcmp>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	da55      	bge.n	8008f84 <_strtod_l+0x83c>
 8008ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eda:	b9e3      	cbnz	r3, 8008f16 <_strtod_l+0x7ce>
 8008edc:	f1ba 0f00 	cmp.w	sl, #0
 8008ee0:	d119      	bne.n	8008f16 <_strtod_l+0x7ce>
 8008ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ee6:	b9b3      	cbnz	r3, 8008f16 <_strtod_l+0x7ce>
 8008ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008eec:	0d1b      	lsrs	r3, r3, #20
 8008eee:	051b      	lsls	r3, r3, #20
 8008ef0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008ef4:	d90f      	bls.n	8008f16 <_strtod_l+0x7ce>
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	b913      	cbnz	r3, 8008f00 <_strtod_l+0x7b8>
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	dd0a      	ble.n	8008f16 <_strtod_l+0x7ce>
 8008f00:	4621      	mov	r1, r4
 8008f02:	2201      	movs	r2, #1
 8008f04:	4648      	mov	r0, r9
 8008f06:	f001 fe55 	bl	800abb4 <__lshift>
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	f001 fea5 	bl	800ac5c <__mcmp>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	dc67      	bgt.n	8008fe6 <_strtod_l+0x89e>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d171      	bne.n	8009000 <_strtod_l+0x8b8>
 8008f1c:	e63d      	b.n	8008b9a <_strtod_l+0x452>
 8008f1e:	f018 0f01 	tst.w	r8, #1
 8008f22:	d004      	beq.n	8008f2e <_strtod_l+0x7e6>
 8008f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f28:	f7f7 fb6e 	bl	8000608 <__aeabi_dmul>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f32:	3508      	adds	r5, #8
 8008f34:	e6e5      	b.n	8008d02 <_strtod_l+0x5ba>
 8008f36:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3e:	ea03 0a0a 	and.w	sl, r3, sl
 8008f42:	e6ff      	b.n	8008d44 <_strtod_l+0x5fc>
 8008f44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008f48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008f4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008f50:	36e2      	adds	r6, #226	; 0xe2
 8008f52:	fa01 f306 	lsl.w	r3, r1, r6
 8008f56:	930a      	str	r3, [sp, #40]	; 0x28
 8008f58:	910f      	str	r1, [sp, #60]	; 0x3c
 8008f5a:	e75d      	b.n	8008e18 <_strtod_l+0x6d0>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f60:	2301      	movs	r3, #1
 8008f62:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f64:	e758      	b.n	8008e18 <_strtod_l+0x6d0>
 8008f66:	4632      	mov	r2, r6
 8008f68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f6a:	4648      	mov	r0, r9
 8008f6c:	f001 fe22 	bl	800abb4 <__lshift>
 8008f70:	901c      	str	r0, [sp, #112]	; 0x70
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f47f af7c 	bne.w	8008e70 <_strtod_l+0x728>
 8008f78:	e604      	b.n	8008b84 <_strtod_l+0x43c>
 8008f7a:	bf00      	nop
 8008f7c:	0800b720 	.word	0x0800b720
 8008f80:	fffffc02 	.word	0xfffffc02
 8008f84:	465d      	mov	r5, fp
 8008f86:	f040 8086 	bne.w	8009096 <_strtod_l+0x94e>
 8008f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f90:	b32a      	cbz	r2, 8008fde <_strtod_l+0x896>
 8008f92:	4aaf      	ldr	r2, [pc, #700]	; (8009250 <_strtod_l+0xb08>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d153      	bne.n	8009040 <_strtod_l+0x8f8>
 8008f98:	9b04      	ldr	r3, [sp, #16]
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	b1d3      	cbz	r3, 8008fd4 <_strtod_l+0x88c>
 8008f9e:	4aad      	ldr	r2, [pc, #692]	; (8009254 <_strtod_l+0xb0c>)
 8008fa0:	402a      	ands	r2, r5
 8008fa2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8008faa:	d816      	bhi.n	8008fda <_strtod_l+0x892>
 8008fac:	0d12      	lsrs	r2, r2, #20
 8008fae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	d142      	bne.n	8009040 <_strtod_l+0x8f8>
 8008fba:	4ba7      	ldr	r3, [pc, #668]	; (8009258 <_strtod_l+0xb10>)
 8008fbc:	429d      	cmp	r5, r3
 8008fbe:	d102      	bne.n	8008fc6 <_strtod_l+0x87e>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f addf 	beq.w	8008b84 <_strtod_l+0x43c>
 8008fc6:	4ba3      	ldr	r3, [pc, #652]	; (8009254 <_strtod_l+0xb0c>)
 8008fc8:	402b      	ands	r3, r5
 8008fca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008fce:	f04f 0a00 	mov.w	sl, #0
 8008fd2:	e7a0      	b.n	8008f16 <_strtod_l+0x7ce>
 8008fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd8:	e7ed      	b.n	8008fb6 <_strtod_l+0x86e>
 8008fda:	460b      	mov	r3, r1
 8008fdc:	e7eb      	b.n	8008fb6 <_strtod_l+0x86e>
 8008fde:	bb7b      	cbnz	r3, 8009040 <_strtod_l+0x8f8>
 8008fe0:	f1ba 0f00 	cmp.w	sl, #0
 8008fe4:	d12c      	bne.n	8009040 <_strtod_l+0x8f8>
 8008fe6:	9904      	ldr	r1, [sp, #16]
 8008fe8:	4a9a      	ldr	r2, [pc, #616]	; (8009254 <_strtod_l+0xb0c>)
 8008fea:	465b      	mov	r3, fp
 8008fec:	b1f1      	cbz	r1, 800902c <_strtod_l+0x8e4>
 8008fee:	ea02 010b 	and.w	r1, r2, fp
 8008ff2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ff6:	dc19      	bgt.n	800902c <_strtod_l+0x8e4>
 8008ff8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008ffc:	f77f ae5b 	ble.w	8008cb6 <_strtod_l+0x56e>
 8009000:	4a96      	ldr	r2, [pc, #600]	; (800925c <_strtod_l+0xb14>)
 8009002:	2300      	movs	r3, #0
 8009004:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009008:	4650      	mov	r0, sl
 800900a:	4659      	mov	r1, fp
 800900c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009010:	f7f7 fafa 	bl	8000608 <__aeabi_dmul>
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	2900      	cmp	r1, #0
 800901a:	f47f adbe 	bne.w	8008b9a <_strtod_l+0x452>
 800901e:	2800      	cmp	r0, #0
 8009020:	f47f adbb 	bne.w	8008b9a <_strtod_l+0x452>
 8009024:	2322      	movs	r3, #34	; 0x22
 8009026:	f8c9 3000 	str.w	r3, [r9]
 800902a:	e5b6      	b.n	8008b9a <_strtod_l+0x452>
 800902c:	4013      	ands	r3, r2
 800902e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009032:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009036:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800903a:	f04f 3aff 	mov.w	sl, #4294967295
 800903e:	e76a      	b.n	8008f16 <_strtod_l+0x7ce>
 8009040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009042:	b193      	cbz	r3, 800906a <_strtod_l+0x922>
 8009044:	422b      	tst	r3, r5
 8009046:	f43f af66 	beq.w	8008f16 <_strtod_l+0x7ce>
 800904a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	b173      	cbz	r3, 8009072 <_strtod_l+0x92a>
 8009054:	f7ff fb5a 	bl	800870c <sulp>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009060:	f7f7 f91c 	bl	800029c <__adddf3>
 8009064:	4682      	mov	sl, r0
 8009066:	468b      	mov	fp, r1
 8009068:	e755      	b.n	8008f16 <_strtod_l+0x7ce>
 800906a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800906c:	ea13 0f0a 	tst.w	r3, sl
 8009070:	e7e9      	b.n	8009046 <_strtod_l+0x8fe>
 8009072:	f7ff fb4b 	bl	800870c <sulp>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800907e:	f7f7 f90b 	bl	8000298 <__aeabi_dsub>
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	4682      	mov	sl, r0
 8009088:	468b      	mov	fp, r1
 800908a:	f7f7 fd25 	bl	8000ad8 <__aeabi_dcmpeq>
 800908e:	2800      	cmp	r0, #0
 8009090:	f47f ae11 	bne.w	8008cb6 <_strtod_l+0x56e>
 8009094:	e73f      	b.n	8008f16 <_strtod_l+0x7ce>
 8009096:	4641      	mov	r1, r8
 8009098:	4620      	mov	r0, r4
 800909a:	f001 ff1c 	bl	800aed6 <__ratio>
 800909e:	ec57 6b10 	vmov	r6, r7, d0
 80090a2:	2200      	movs	r2, #0
 80090a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090a8:	ee10 0a10 	vmov	r0, s0
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fd27 	bl	8000b00 <__aeabi_dcmple>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d077      	beq.n	80091a6 <_strtod_l+0xa5e>
 80090b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d04a      	beq.n	8009152 <_strtod_l+0xa0a>
 80090bc:	4b68      	ldr	r3, [pc, #416]	; (8009260 <_strtod_l+0xb18>)
 80090be:	2200      	movs	r2, #0
 80090c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090c4:	4f66      	ldr	r7, [pc, #408]	; (8009260 <_strtod_l+0xb18>)
 80090c6:	2600      	movs	r6, #0
 80090c8:	4b62      	ldr	r3, [pc, #392]	; (8009254 <_strtod_l+0xb0c>)
 80090ca:	402b      	ands	r3, r5
 80090cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090d0:	4b64      	ldr	r3, [pc, #400]	; (8009264 <_strtod_l+0xb1c>)
 80090d2:	429a      	cmp	r2, r3
 80090d4:	f040 80ce 	bne.w	8009274 <_strtod_l+0xb2c>
 80090d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80090e4:	ec4b ab10 	vmov	d0, sl, fp
 80090e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80090ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80090f0:	f001 fe2c 	bl	800ad4c <__ulp>
 80090f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090f8:	ec53 2b10 	vmov	r2, r3, d0
 80090fc:	f7f7 fa84 	bl	8000608 <__aeabi_dmul>
 8009100:	4652      	mov	r2, sl
 8009102:	465b      	mov	r3, fp
 8009104:	f7f7 f8ca 	bl	800029c <__adddf3>
 8009108:	460b      	mov	r3, r1
 800910a:	4952      	ldr	r1, [pc, #328]	; (8009254 <_strtod_l+0xb0c>)
 800910c:	4a56      	ldr	r2, [pc, #344]	; (8009268 <_strtod_l+0xb20>)
 800910e:	4019      	ands	r1, r3
 8009110:	4291      	cmp	r1, r2
 8009112:	4682      	mov	sl, r0
 8009114:	d95b      	bls.n	80091ce <_strtod_l+0xa86>
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800911c:	4293      	cmp	r3, r2
 800911e:	d103      	bne.n	8009128 <_strtod_l+0x9e0>
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	3301      	adds	r3, #1
 8009124:	f43f ad2e 	beq.w	8008b84 <_strtod_l+0x43c>
 8009128:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009258 <_strtod_l+0xb10>
 800912c:	f04f 3aff 	mov.w	sl, #4294967295
 8009130:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009132:	4648      	mov	r0, r9
 8009134:	f001 fb73 	bl	800a81e <_Bfree>
 8009138:	9905      	ldr	r1, [sp, #20]
 800913a:	4648      	mov	r0, r9
 800913c:	f001 fb6f 	bl	800a81e <_Bfree>
 8009140:	4641      	mov	r1, r8
 8009142:	4648      	mov	r0, r9
 8009144:	f001 fb6b 	bl	800a81e <_Bfree>
 8009148:	4621      	mov	r1, r4
 800914a:	4648      	mov	r0, r9
 800914c:	f001 fb67 	bl	800a81e <_Bfree>
 8009150:	e619      	b.n	8008d86 <_strtod_l+0x63e>
 8009152:	f1ba 0f00 	cmp.w	sl, #0
 8009156:	d11a      	bne.n	800918e <_strtod_l+0xa46>
 8009158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800915c:	b9eb      	cbnz	r3, 800919a <_strtod_l+0xa52>
 800915e:	2200      	movs	r2, #0
 8009160:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <_strtod_l+0xb18>)
 8009162:	4630      	mov	r0, r6
 8009164:	4639      	mov	r1, r7
 8009166:	f7f7 fcc1 	bl	8000aec <__aeabi_dcmplt>
 800916a:	b9c8      	cbnz	r0, 80091a0 <_strtod_l+0xa58>
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	2200      	movs	r2, #0
 8009172:	4b3e      	ldr	r3, [pc, #248]	; (800926c <_strtod_l+0xb24>)
 8009174:	f7f7 fa48 	bl	8000608 <__aeabi_dmul>
 8009178:	4606      	mov	r6, r0
 800917a:	460f      	mov	r7, r1
 800917c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009180:	9618      	str	r6, [sp, #96]	; 0x60
 8009182:	9319      	str	r3, [sp, #100]	; 0x64
 8009184:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800918c:	e79c      	b.n	80090c8 <_strtod_l+0x980>
 800918e:	f1ba 0f01 	cmp.w	sl, #1
 8009192:	d102      	bne.n	800919a <_strtod_l+0xa52>
 8009194:	2d00      	cmp	r5, #0
 8009196:	f43f ad8e 	beq.w	8008cb6 <_strtod_l+0x56e>
 800919a:	2200      	movs	r2, #0
 800919c:	4b34      	ldr	r3, [pc, #208]	; (8009270 <_strtod_l+0xb28>)
 800919e:	e78f      	b.n	80090c0 <_strtod_l+0x978>
 80091a0:	2600      	movs	r6, #0
 80091a2:	4f32      	ldr	r7, [pc, #200]	; (800926c <_strtod_l+0xb24>)
 80091a4:	e7ea      	b.n	800917c <_strtod_l+0xa34>
 80091a6:	4b31      	ldr	r3, [pc, #196]	; (800926c <_strtod_l+0xb24>)
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	2200      	movs	r2, #0
 80091ae:	f7f7 fa2b 	bl	8000608 <__aeabi_dmul>
 80091b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b4:	4606      	mov	r6, r0
 80091b6:	460f      	mov	r7, r1
 80091b8:	b933      	cbnz	r3, 80091c8 <_strtod_l+0xa80>
 80091ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091be:	9010      	str	r0, [sp, #64]	; 0x40
 80091c0:	9311      	str	r3, [sp, #68]	; 0x44
 80091c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091c6:	e7df      	b.n	8009188 <_strtod_l+0xa40>
 80091c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80091cc:	e7f9      	b.n	80091c2 <_strtod_l+0xa7a>
 80091ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ab      	bne.n	8009130 <_strtod_l+0x9e8>
 80091d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091dc:	0d1b      	lsrs	r3, r3, #20
 80091de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091e0:	051b      	lsls	r3, r3, #20
 80091e2:	429a      	cmp	r2, r3
 80091e4:	465d      	mov	r5, fp
 80091e6:	d1a3      	bne.n	8009130 <_strtod_l+0x9e8>
 80091e8:	4639      	mov	r1, r7
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7f7 fcbc 	bl	8000b68 <__aeabi_d2iz>
 80091f0:	f7f7 f9a0 	bl	8000534 <__aeabi_i2d>
 80091f4:	460b      	mov	r3, r1
 80091f6:	4602      	mov	r2, r0
 80091f8:	4639      	mov	r1, r7
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7f7 f84c 	bl	8000298 <__aeabi_dsub>
 8009200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009202:	4606      	mov	r6, r0
 8009204:	460f      	mov	r7, r1
 8009206:	b933      	cbnz	r3, 8009216 <_strtod_l+0xace>
 8009208:	f1ba 0f00 	cmp.w	sl, #0
 800920c:	d103      	bne.n	8009216 <_strtod_l+0xace>
 800920e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009212:	2d00      	cmp	r5, #0
 8009214:	d06d      	beq.n	80092f2 <_strtod_l+0xbaa>
 8009216:	a30a      	add	r3, pc, #40	; (adr r3, 8009240 <_strtod_l+0xaf8>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	f7f7 fc64 	bl	8000aec <__aeabi_dcmplt>
 8009224:	2800      	cmp	r0, #0
 8009226:	f47f acb8 	bne.w	8008b9a <_strtod_l+0x452>
 800922a:	a307      	add	r3, pc, #28	; (adr r3, 8009248 <_strtod_l+0xb00>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 fc78 	bl	8000b28 <__aeabi_dcmpgt>
 8009238:	2800      	cmp	r0, #0
 800923a:	f43f af79 	beq.w	8009130 <_strtod_l+0x9e8>
 800923e:	e4ac      	b.n	8008b9a <_strtod_l+0x452>
 8009240:	94a03595 	.word	0x94a03595
 8009244:	3fdfffff 	.word	0x3fdfffff
 8009248:	35afe535 	.word	0x35afe535
 800924c:	3fe00000 	.word	0x3fe00000
 8009250:	000fffff 	.word	0x000fffff
 8009254:	7ff00000 	.word	0x7ff00000
 8009258:	7fefffff 	.word	0x7fefffff
 800925c:	39500000 	.word	0x39500000
 8009260:	3ff00000 	.word	0x3ff00000
 8009264:	7fe00000 	.word	0x7fe00000
 8009268:	7c9fffff 	.word	0x7c9fffff
 800926c:	3fe00000 	.word	0x3fe00000
 8009270:	bff00000 	.word	0xbff00000
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	b333      	cbz	r3, 80092c6 <_strtod_l+0xb7e>
 8009278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800927a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800927e:	d822      	bhi.n	80092c6 <_strtod_l+0xb7e>
 8009280:	a327      	add	r3, pc, #156	; (adr r3, 8009320 <_strtod_l+0xbd8>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	4630      	mov	r0, r6
 8009288:	4639      	mov	r1, r7
 800928a:	f7f7 fc39 	bl	8000b00 <__aeabi_dcmple>
 800928e:	b1a0      	cbz	r0, 80092ba <_strtod_l+0xb72>
 8009290:	4639      	mov	r1, r7
 8009292:	4630      	mov	r0, r6
 8009294:	f7f7 fc90 	bl	8000bb8 <__aeabi_d2uiz>
 8009298:	2800      	cmp	r0, #0
 800929a:	bf08      	it	eq
 800929c:	2001      	moveq	r0, #1
 800929e:	f7f7 f939 	bl	8000514 <__aeabi_ui2d>
 80092a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a4:	4606      	mov	r6, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	bb03      	cbnz	r3, 80092ec <_strtod_l+0xba4>
 80092aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092ae:	9012      	str	r0, [sp, #72]	; 0x48
 80092b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80092b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80092b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80092ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80092ce:	f001 fd3d 	bl	800ad4c <__ulp>
 80092d2:	4650      	mov	r0, sl
 80092d4:	ec53 2b10 	vmov	r2, r3, d0
 80092d8:	4659      	mov	r1, fp
 80092da:	f7f7 f995 	bl	8000608 <__aeabi_dmul>
 80092de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092e2:	f7f6 ffdb 	bl	800029c <__adddf3>
 80092e6:	4682      	mov	sl, r0
 80092e8:	468b      	mov	fp, r1
 80092ea:	e772      	b.n	80091d2 <_strtod_l+0xa8a>
 80092ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80092f0:	e7df      	b.n	80092b2 <_strtod_l+0xb6a>
 80092f2:	a30d      	add	r3, pc, #52	; (adr r3, 8009328 <_strtod_l+0xbe0>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f7 fbf8 	bl	8000aec <__aeabi_dcmplt>
 80092fc:	e79c      	b.n	8009238 <_strtod_l+0xaf0>
 80092fe:	2300      	movs	r3, #0
 8009300:	930d      	str	r3, [sp, #52]	; 0x34
 8009302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	f7ff ba61 	b.w	80087ce <_strtod_l+0x86>
 800930c:	2b65      	cmp	r3, #101	; 0x65
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	f43f ab4e 	beq.w	80089b2 <_strtod_l+0x26a>
 8009316:	2101      	movs	r1, #1
 8009318:	4614      	mov	r4, r2
 800931a:	9104      	str	r1, [sp, #16]
 800931c:	f7ff bacb 	b.w	80088b6 <_strtod_l+0x16e>
 8009320:	ffc00000 	.word	0xffc00000
 8009324:	41dfffff 	.word	0x41dfffff
 8009328:	94a03595 	.word	0x94a03595
 800932c:	3fcfffff 	.word	0x3fcfffff

08009330 <_strtod_r>:
 8009330:	4b05      	ldr	r3, [pc, #20]	; (8009348 <_strtod_r+0x18>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	b410      	push	{r4}
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	4c04      	ldr	r4, [pc, #16]	; (800934c <_strtod_r+0x1c>)
 800933a:	2b00      	cmp	r3, #0
 800933c:	bf08      	it	eq
 800933e:	4623      	moveq	r3, r4
 8009340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009344:	f7ff ba00 	b.w	8008748 <_strtod_l>
 8009348:	20000090 	.word	0x20000090
 800934c:	200000f4 	.word	0x200000f4

08009350 <_strtol_l.isra.0>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	4680      	mov	r8, r0
 8009356:	4689      	mov	r9, r1
 8009358:	4692      	mov	sl, r2
 800935a:	461e      	mov	r6, r3
 800935c:	460f      	mov	r7, r1
 800935e:	463d      	mov	r5, r7
 8009360:	9808      	ldr	r0, [sp, #32]
 8009362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009366:	f001 f9ed 	bl	800a744 <__locale_ctype_ptr_l>
 800936a:	4420      	add	r0, r4
 800936c:	7843      	ldrb	r3, [r0, #1]
 800936e:	f013 0308 	ands.w	r3, r3, #8
 8009372:	d132      	bne.n	80093da <_strtol_l.isra.0+0x8a>
 8009374:	2c2d      	cmp	r4, #45	; 0x2d
 8009376:	d132      	bne.n	80093de <_strtol_l.isra.0+0x8e>
 8009378:	787c      	ldrb	r4, [r7, #1]
 800937a:	1cbd      	adds	r5, r7, #2
 800937c:	2201      	movs	r2, #1
 800937e:	2e00      	cmp	r6, #0
 8009380:	d05d      	beq.n	800943e <_strtol_l.isra.0+0xee>
 8009382:	2e10      	cmp	r6, #16
 8009384:	d109      	bne.n	800939a <_strtol_l.isra.0+0x4a>
 8009386:	2c30      	cmp	r4, #48	; 0x30
 8009388:	d107      	bne.n	800939a <_strtol_l.isra.0+0x4a>
 800938a:	782b      	ldrb	r3, [r5, #0]
 800938c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009390:	2b58      	cmp	r3, #88	; 0x58
 8009392:	d14f      	bne.n	8009434 <_strtol_l.isra.0+0xe4>
 8009394:	786c      	ldrb	r4, [r5, #1]
 8009396:	2610      	movs	r6, #16
 8009398:	3502      	adds	r5, #2
 800939a:	2a00      	cmp	r2, #0
 800939c:	bf14      	ite	ne
 800939e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80093a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80093a6:	2700      	movs	r7, #0
 80093a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80093ac:	4638      	mov	r0, r7
 80093ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80093b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d817      	bhi.n	80093ea <_strtol_l.isra.0+0x9a>
 80093ba:	461c      	mov	r4, r3
 80093bc:	42a6      	cmp	r6, r4
 80093be:	dd23      	ble.n	8009408 <_strtol_l.isra.0+0xb8>
 80093c0:	1c7b      	adds	r3, r7, #1
 80093c2:	d007      	beq.n	80093d4 <_strtol_l.isra.0+0x84>
 80093c4:	4584      	cmp	ip, r0
 80093c6:	d31c      	bcc.n	8009402 <_strtol_l.isra.0+0xb2>
 80093c8:	d101      	bne.n	80093ce <_strtol_l.isra.0+0x7e>
 80093ca:	45a6      	cmp	lr, r4
 80093cc:	db19      	blt.n	8009402 <_strtol_l.isra.0+0xb2>
 80093ce:	fb00 4006 	mla	r0, r0, r6, r4
 80093d2:	2701      	movs	r7, #1
 80093d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093d8:	e7eb      	b.n	80093b2 <_strtol_l.isra.0+0x62>
 80093da:	462f      	mov	r7, r5
 80093dc:	e7bf      	b.n	800935e <_strtol_l.isra.0+0xe>
 80093de:	2c2b      	cmp	r4, #43	; 0x2b
 80093e0:	bf04      	itt	eq
 80093e2:	1cbd      	addeq	r5, r7, #2
 80093e4:	787c      	ldrbeq	r4, [r7, #1]
 80093e6:	461a      	mov	r2, r3
 80093e8:	e7c9      	b.n	800937e <_strtol_l.isra.0+0x2e>
 80093ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80093ee:	2b19      	cmp	r3, #25
 80093f0:	d801      	bhi.n	80093f6 <_strtol_l.isra.0+0xa6>
 80093f2:	3c37      	subs	r4, #55	; 0x37
 80093f4:	e7e2      	b.n	80093bc <_strtol_l.isra.0+0x6c>
 80093f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80093fa:	2b19      	cmp	r3, #25
 80093fc:	d804      	bhi.n	8009408 <_strtol_l.isra.0+0xb8>
 80093fe:	3c57      	subs	r4, #87	; 0x57
 8009400:	e7dc      	b.n	80093bc <_strtol_l.isra.0+0x6c>
 8009402:	f04f 37ff 	mov.w	r7, #4294967295
 8009406:	e7e5      	b.n	80093d4 <_strtol_l.isra.0+0x84>
 8009408:	1c7b      	adds	r3, r7, #1
 800940a:	d108      	bne.n	800941e <_strtol_l.isra.0+0xce>
 800940c:	2322      	movs	r3, #34	; 0x22
 800940e:	f8c8 3000 	str.w	r3, [r8]
 8009412:	4608      	mov	r0, r1
 8009414:	f1ba 0f00 	cmp.w	sl, #0
 8009418:	d107      	bne.n	800942a <_strtol_l.isra.0+0xda>
 800941a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941e:	b102      	cbz	r2, 8009422 <_strtol_l.isra.0+0xd2>
 8009420:	4240      	negs	r0, r0
 8009422:	f1ba 0f00 	cmp.w	sl, #0
 8009426:	d0f8      	beq.n	800941a <_strtol_l.isra.0+0xca>
 8009428:	b10f      	cbz	r7, 800942e <_strtol_l.isra.0+0xde>
 800942a:	f105 39ff 	add.w	r9, r5, #4294967295
 800942e:	f8ca 9000 	str.w	r9, [sl]
 8009432:	e7f2      	b.n	800941a <_strtol_l.isra.0+0xca>
 8009434:	2430      	movs	r4, #48	; 0x30
 8009436:	2e00      	cmp	r6, #0
 8009438:	d1af      	bne.n	800939a <_strtol_l.isra.0+0x4a>
 800943a:	2608      	movs	r6, #8
 800943c:	e7ad      	b.n	800939a <_strtol_l.isra.0+0x4a>
 800943e:	2c30      	cmp	r4, #48	; 0x30
 8009440:	d0a3      	beq.n	800938a <_strtol_l.isra.0+0x3a>
 8009442:	260a      	movs	r6, #10
 8009444:	e7a9      	b.n	800939a <_strtol_l.isra.0+0x4a>
	...

08009448 <_strtol_r>:
 8009448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800944a:	4c06      	ldr	r4, [pc, #24]	; (8009464 <_strtol_r+0x1c>)
 800944c:	4d06      	ldr	r5, [pc, #24]	; (8009468 <_strtol_r+0x20>)
 800944e:	6824      	ldr	r4, [r4, #0]
 8009450:	6a24      	ldr	r4, [r4, #32]
 8009452:	2c00      	cmp	r4, #0
 8009454:	bf08      	it	eq
 8009456:	462c      	moveq	r4, r5
 8009458:	9400      	str	r4, [sp, #0]
 800945a:	f7ff ff79 	bl	8009350 <_strtol_l.isra.0>
 800945e:	b003      	add	sp, #12
 8009460:	bd30      	pop	{r4, r5, pc}
 8009462:	bf00      	nop
 8009464:	20000090 	.word	0x20000090
 8009468:	200000f4 	.word	0x200000f4

0800946c <quorem>:
 800946c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	6903      	ldr	r3, [r0, #16]
 8009472:	690c      	ldr	r4, [r1, #16]
 8009474:	42a3      	cmp	r3, r4
 8009476:	4680      	mov	r8, r0
 8009478:	f2c0 8082 	blt.w	8009580 <quorem+0x114>
 800947c:	3c01      	subs	r4, #1
 800947e:	f101 0714 	add.w	r7, r1, #20
 8009482:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009486:	f100 0614 	add.w	r6, r0, #20
 800948a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800948e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009492:	eb06 030c 	add.w	r3, r6, ip
 8009496:	3501      	adds	r5, #1
 8009498:	eb07 090c 	add.w	r9, r7, ip
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	fbb0 f5f5 	udiv	r5, r0, r5
 80094a2:	b395      	cbz	r5, 800950a <quorem+0x9e>
 80094a4:	f04f 0a00 	mov.w	sl, #0
 80094a8:	4638      	mov	r0, r7
 80094aa:	46b6      	mov	lr, r6
 80094ac:	46d3      	mov	fp, sl
 80094ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80094b2:	b293      	uxth	r3, r2
 80094b4:	fb05 a303 	mla	r3, r5, r3, sl
 80094b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094bc:	b29b      	uxth	r3, r3
 80094be:	ebab 0303 	sub.w	r3, fp, r3
 80094c2:	0c12      	lsrs	r2, r2, #16
 80094c4:	f8de b000 	ldr.w	fp, [lr]
 80094c8:	fb05 a202 	mla	r2, r5, r2, sl
 80094cc:	fa13 f38b 	uxtah	r3, r3, fp
 80094d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80094d4:	fa1f fb82 	uxth.w	fp, r2
 80094d8:	f8de 2000 	ldr.w	r2, [lr]
 80094dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80094e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ea:	4581      	cmp	r9, r0
 80094ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80094f0:	f84e 3b04 	str.w	r3, [lr], #4
 80094f4:	d2db      	bcs.n	80094ae <quorem+0x42>
 80094f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80094fa:	b933      	cbnz	r3, 800950a <quorem+0x9e>
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	3b04      	subs	r3, #4
 8009500:	429e      	cmp	r6, r3
 8009502:	461a      	mov	r2, r3
 8009504:	d330      	bcc.n	8009568 <quorem+0xfc>
 8009506:	f8c8 4010 	str.w	r4, [r8, #16]
 800950a:	4640      	mov	r0, r8
 800950c:	f001 fba6 	bl	800ac5c <__mcmp>
 8009510:	2800      	cmp	r0, #0
 8009512:	db25      	blt.n	8009560 <quorem+0xf4>
 8009514:	3501      	adds	r5, #1
 8009516:	4630      	mov	r0, r6
 8009518:	f04f 0c00 	mov.w	ip, #0
 800951c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009520:	f8d0 e000 	ldr.w	lr, [r0]
 8009524:	b293      	uxth	r3, r2
 8009526:	ebac 0303 	sub.w	r3, ip, r3
 800952a:	0c12      	lsrs	r2, r2, #16
 800952c:	fa13 f38e 	uxtah	r3, r3, lr
 8009530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009538:	b29b      	uxth	r3, r3
 800953a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953e:	45b9      	cmp	r9, r7
 8009540:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009544:	f840 3b04 	str.w	r3, [r0], #4
 8009548:	d2e8      	bcs.n	800951c <quorem+0xb0>
 800954a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800954e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009552:	b92a      	cbnz	r2, 8009560 <quorem+0xf4>
 8009554:	3b04      	subs	r3, #4
 8009556:	429e      	cmp	r6, r3
 8009558:	461a      	mov	r2, r3
 800955a:	d30b      	bcc.n	8009574 <quorem+0x108>
 800955c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009560:	4628      	mov	r0, r5
 8009562:	b003      	add	sp, #12
 8009564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009568:	6812      	ldr	r2, [r2, #0]
 800956a:	3b04      	subs	r3, #4
 800956c:	2a00      	cmp	r2, #0
 800956e:	d1ca      	bne.n	8009506 <quorem+0x9a>
 8009570:	3c01      	subs	r4, #1
 8009572:	e7c5      	b.n	8009500 <quorem+0x94>
 8009574:	6812      	ldr	r2, [r2, #0]
 8009576:	3b04      	subs	r3, #4
 8009578:	2a00      	cmp	r2, #0
 800957a:	d1ef      	bne.n	800955c <quorem+0xf0>
 800957c:	3c01      	subs	r4, #1
 800957e:	e7ea      	b.n	8009556 <quorem+0xea>
 8009580:	2000      	movs	r0, #0
 8009582:	e7ee      	b.n	8009562 <quorem+0xf6>
 8009584:	0000      	movs	r0, r0
	...

08009588 <_dtoa_r>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	ec57 6b10 	vmov	r6, r7, d0
 8009590:	b097      	sub	sp, #92	; 0x5c
 8009592:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009594:	9106      	str	r1, [sp, #24]
 8009596:	4604      	mov	r4, r0
 8009598:	920b      	str	r2, [sp, #44]	; 0x2c
 800959a:	9312      	str	r3, [sp, #72]	; 0x48
 800959c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095a0:	e9cd 6700 	strd	r6, r7, [sp]
 80095a4:	b93d      	cbnz	r5, 80095b6 <_dtoa_r+0x2e>
 80095a6:	2010      	movs	r0, #16
 80095a8:	f001 f8e0 	bl	800a76c <malloc>
 80095ac:	6260      	str	r0, [r4, #36]	; 0x24
 80095ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095b2:	6005      	str	r5, [r0, #0]
 80095b4:	60c5      	str	r5, [r0, #12]
 80095b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b8:	6819      	ldr	r1, [r3, #0]
 80095ba:	b151      	cbz	r1, 80095d2 <_dtoa_r+0x4a>
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	604a      	str	r2, [r1, #4]
 80095c0:	2301      	movs	r3, #1
 80095c2:	4093      	lsls	r3, r2
 80095c4:	608b      	str	r3, [r1, #8]
 80095c6:	4620      	mov	r0, r4
 80095c8:	f001 f929 	bl	800a81e <_Bfree>
 80095cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	1e3b      	subs	r3, r7, #0
 80095d4:	bfbb      	ittet	lt
 80095d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095da:	9301      	strlt	r3, [sp, #4]
 80095dc:	2300      	movge	r3, #0
 80095de:	2201      	movlt	r2, #1
 80095e0:	bfac      	ite	ge
 80095e2:	f8c8 3000 	strge.w	r3, [r8]
 80095e6:	f8c8 2000 	strlt.w	r2, [r8]
 80095ea:	4baf      	ldr	r3, [pc, #700]	; (80098a8 <_dtoa_r+0x320>)
 80095ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095f0:	ea33 0308 	bics.w	r3, r3, r8
 80095f4:	d114      	bne.n	8009620 <_dtoa_r+0x98>
 80095f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	b923      	cbnz	r3, 800960c <_dtoa_r+0x84>
 8009602:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009606:	2800      	cmp	r0, #0
 8009608:	f000 8542 	beq.w	800a090 <_dtoa_r+0xb08>
 800960c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800960e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80098bc <_dtoa_r+0x334>
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 8544 	beq.w	800a0a0 <_dtoa_r+0xb18>
 8009618:	f10b 0303 	add.w	r3, fp, #3
 800961c:	f000 bd3e 	b.w	800a09c <_dtoa_r+0xb14>
 8009620:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009624:	2200      	movs	r2, #0
 8009626:	2300      	movs	r3, #0
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f7 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009630:	4681      	mov	r9, r0
 8009632:	b168      	cbz	r0, 8009650 <_dtoa_r+0xc8>
 8009634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009636:	2301      	movs	r3, #1
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 8524 	beq.w	800a08a <_dtoa_r+0xb02>
 8009642:	4b9a      	ldr	r3, [pc, #616]	; (80098ac <_dtoa_r+0x324>)
 8009644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009646:	f103 3bff 	add.w	fp, r3, #4294967295
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	f000 bd28 	b.w	800a0a0 <_dtoa_r+0xb18>
 8009650:	aa14      	add	r2, sp, #80	; 0x50
 8009652:	a915      	add	r1, sp, #84	; 0x54
 8009654:	ec47 6b10 	vmov	d0, r6, r7
 8009658:	4620      	mov	r0, r4
 800965a:	f001 fbed 	bl	800ae38 <__d2b>
 800965e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009662:	9004      	str	r0, [sp, #16]
 8009664:	2d00      	cmp	r5, #0
 8009666:	d07c      	beq.n	8009762 <_dtoa_r+0x1da>
 8009668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800966c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009670:	46b2      	mov	sl, r6
 8009672:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800967a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800967e:	2200      	movs	r2, #0
 8009680:	4b8b      	ldr	r3, [pc, #556]	; (80098b0 <_dtoa_r+0x328>)
 8009682:	4650      	mov	r0, sl
 8009684:	4659      	mov	r1, fp
 8009686:	f7f6 fe07 	bl	8000298 <__aeabi_dsub>
 800968a:	a381      	add	r3, pc, #516	; (adr r3, 8009890 <_dtoa_r+0x308>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 ffba 	bl	8000608 <__aeabi_dmul>
 8009694:	a380      	add	r3, pc, #512	; (adr r3, 8009898 <_dtoa_r+0x310>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fdff 	bl	800029c <__adddf3>
 800969e:	4606      	mov	r6, r0
 80096a0:	4628      	mov	r0, r5
 80096a2:	460f      	mov	r7, r1
 80096a4:	f7f6 ff46 	bl	8000534 <__aeabi_i2d>
 80096a8:	a37d      	add	r3, pc, #500	; (adr r3, 80098a0 <_dtoa_r+0x318>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 ffab 	bl	8000608 <__aeabi_dmul>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	f7f6 fdef 	bl	800029c <__adddf3>
 80096be:	4606      	mov	r6, r0
 80096c0:	460f      	mov	r7, r1
 80096c2:	f7f7 fa51 	bl	8000b68 <__aeabi_d2iz>
 80096c6:	2200      	movs	r2, #0
 80096c8:	4682      	mov	sl, r0
 80096ca:	2300      	movs	r3, #0
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f7 fa0c 	bl	8000aec <__aeabi_dcmplt>
 80096d4:	b148      	cbz	r0, 80096ea <_dtoa_r+0x162>
 80096d6:	4650      	mov	r0, sl
 80096d8:	f7f6 ff2c 	bl	8000534 <__aeabi_i2d>
 80096dc:	4632      	mov	r2, r6
 80096de:	463b      	mov	r3, r7
 80096e0:	f7f7 f9fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80096e4:	b908      	cbnz	r0, 80096ea <_dtoa_r+0x162>
 80096e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ea:	f1ba 0f16 	cmp.w	sl, #22
 80096ee:	d859      	bhi.n	80097a4 <_dtoa_r+0x21c>
 80096f0:	4970      	ldr	r1, [pc, #448]	; (80098b4 <_dtoa_r+0x32c>)
 80096f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80096f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fe:	f7f7 fa13 	bl	8000b28 <__aeabi_dcmpgt>
 8009702:	2800      	cmp	r0, #0
 8009704:	d050      	beq.n	80097a8 <_dtoa_r+0x220>
 8009706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800970a:	2300      	movs	r3, #0
 800970c:	930f      	str	r3, [sp, #60]	; 0x3c
 800970e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009710:	1b5d      	subs	r5, r3, r5
 8009712:	f1b5 0801 	subs.w	r8, r5, #1
 8009716:	bf49      	itett	mi
 8009718:	f1c5 0301 	rsbmi	r3, r5, #1
 800971c:	2300      	movpl	r3, #0
 800971e:	9305      	strmi	r3, [sp, #20]
 8009720:	f04f 0800 	movmi.w	r8, #0
 8009724:	bf58      	it	pl
 8009726:	9305      	strpl	r3, [sp, #20]
 8009728:	f1ba 0f00 	cmp.w	sl, #0
 800972c:	db3e      	blt.n	80097ac <_dtoa_r+0x224>
 800972e:	2300      	movs	r3, #0
 8009730:	44d0      	add	r8, sl
 8009732:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	2b09      	cmp	r3, #9
 800973c:	f200 8090 	bhi.w	8009860 <_dtoa_r+0x2d8>
 8009740:	2b05      	cmp	r3, #5
 8009742:	bfc4      	itt	gt
 8009744:	3b04      	subgt	r3, #4
 8009746:	9306      	strgt	r3, [sp, #24]
 8009748:	9b06      	ldr	r3, [sp, #24]
 800974a:	f1a3 0302 	sub.w	r3, r3, #2
 800974e:	bfcc      	ite	gt
 8009750:	2500      	movgt	r5, #0
 8009752:	2501      	movle	r5, #1
 8009754:	2b03      	cmp	r3, #3
 8009756:	f200 808f 	bhi.w	8009878 <_dtoa_r+0x2f0>
 800975a:	e8df f003 	tbb	[pc, r3]
 800975e:	7f7d      	.short	0x7f7d
 8009760:	7131      	.short	0x7131
 8009762:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009766:	441d      	add	r5, r3
 8009768:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800976c:	2820      	cmp	r0, #32
 800976e:	dd13      	ble.n	8009798 <_dtoa_r+0x210>
 8009770:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009774:	9b00      	ldr	r3, [sp, #0]
 8009776:	fa08 f800 	lsl.w	r8, r8, r0
 800977a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800977e:	fa23 f000 	lsr.w	r0, r3, r0
 8009782:	ea48 0000 	orr.w	r0, r8, r0
 8009786:	f7f6 fec5 	bl	8000514 <__aeabi_ui2d>
 800978a:	2301      	movs	r3, #1
 800978c:	4682      	mov	sl, r0
 800978e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009792:	3d01      	subs	r5, #1
 8009794:	9313      	str	r3, [sp, #76]	; 0x4c
 8009796:	e772      	b.n	800967e <_dtoa_r+0xf6>
 8009798:	9b00      	ldr	r3, [sp, #0]
 800979a:	f1c0 0020 	rsb	r0, r0, #32
 800979e:	fa03 f000 	lsl.w	r0, r3, r0
 80097a2:	e7f0      	b.n	8009786 <_dtoa_r+0x1fe>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e7b1      	b.n	800970c <_dtoa_r+0x184>
 80097a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80097aa:	e7b0      	b.n	800970e <_dtoa_r+0x186>
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	eba3 030a 	sub.w	r3, r3, sl
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	f1ca 0300 	rsb	r3, sl, #0
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	2300      	movs	r3, #0
 80097bc:	930e      	str	r3, [sp, #56]	; 0x38
 80097be:	e7bb      	b.n	8009738 <_dtoa_r+0x1b0>
 80097c0:	2301      	movs	r3, #1
 80097c2:	930a      	str	r3, [sp, #40]	; 0x28
 80097c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dd59      	ble.n	800987e <_dtoa_r+0x2f6>
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	4699      	mov	r9, r3
 80097ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097d0:	2200      	movs	r2, #0
 80097d2:	6072      	str	r2, [r6, #4]
 80097d4:	2204      	movs	r2, #4
 80097d6:	f102 0014 	add.w	r0, r2, #20
 80097da:	4298      	cmp	r0, r3
 80097dc:	6871      	ldr	r1, [r6, #4]
 80097de:	d953      	bls.n	8009888 <_dtoa_r+0x300>
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 ffe8 	bl	800a7b6 <_Balloc>
 80097e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e8:	6030      	str	r0, [r6, #0]
 80097ea:	f1b9 0f0e 	cmp.w	r9, #14
 80097ee:	f8d3 b000 	ldr.w	fp, [r3]
 80097f2:	f200 80e6 	bhi.w	80099c2 <_dtoa_r+0x43a>
 80097f6:	2d00      	cmp	r5, #0
 80097f8:	f000 80e3 	beq.w	80099c2 <_dtoa_r+0x43a>
 80097fc:	ed9d 7b00 	vldr	d7, [sp]
 8009800:	f1ba 0f00 	cmp.w	sl, #0
 8009804:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009808:	dd74      	ble.n	80098f4 <_dtoa_r+0x36c>
 800980a:	4a2a      	ldr	r2, [pc, #168]	; (80098b4 <_dtoa_r+0x32c>)
 800980c:	f00a 030f 	and.w	r3, sl, #15
 8009810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009814:	ed93 7b00 	vldr	d7, [r3]
 8009818:	ea4f 162a 	mov.w	r6, sl, asr #4
 800981c:	06f0      	lsls	r0, r6, #27
 800981e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009822:	d565      	bpl.n	80098f0 <_dtoa_r+0x368>
 8009824:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <_dtoa_r+0x330>)
 8009826:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800982a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800982e:	f7f7 f815 	bl	800085c <__aeabi_ddiv>
 8009832:	e9cd 0100 	strd	r0, r1, [sp]
 8009836:	f006 060f 	and.w	r6, r6, #15
 800983a:	2503      	movs	r5, #3
 800983c:	4f1e      	ldr	r7, [pc, #120]	; (80098b8 <_dtoa_r+0x330>)
 800983e:	e04c      	b.n	80098da <_dtoa_r+0x352>
 8009840:	2301      	movs	r3, #1
 8009842:	930a      	str	r3, [sp, #40]	; 0x28
 8009844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009846:	4453      	add	r3, sl
 8009848:	f103 0901 	add.w	r9, r3, #1
 800984c:	9302      	str	r3, [sp, #8]
 800984e:	464b      	mov	r3, r9
 8009850:	2b01      	cmp	r3, #1
 8009852:	bfb8      	it	lt
 8009854:	2301      	movlt	r3, #1
 8009856:	e7ba      	b.n	80097ce <_dtoa_r+0x246>
 8009858:	2300      	movs	r3, #0
 800985a:	e7b2      	b.n	80097c2 <_dtoa_r+0x23a>
 800985c:	2300      	movs	r3, #0
 800985e:	e7f0      	b.n	8009842 <_dtoa_r+0x2ba>
 8009860:	2501      	movs	r5, #1
 8009862:	2300      	movs	r3, #0
 8009864:	9306      	str	r3, [sp, #24]
 8009866:	950a      	str	r5, [sp, #40]	; 0x28
 8009868:	f04f 33ff 	mov.w	r3, #4294967295
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	4699      	mov	r9, r3
 8009870:	2200      	movs	r2, #0
 8009872:	2312      	movs	r3, #18
 8009874:	920b      	str	r2, [sp, #44]	; 0x2c
 8009876:	e7aa      	b.n	80097ce <_dtoa_r+0x246>
 8009878:	2301      	movs	r3, #1
 800987a:	930a      	str	r3, [sp, #40]	; 0x28
 800987c:	e7f4      	b.n	8009868 <_dtoa_r+0x2e0>
 800987e:	2301      	movs	r3, #1
 8009880:	9302      	str	r3, [sp, #8]
 8009882:	4699      	mov	r9, r3
 8009884:	461a      	mov	r2, r3
 8009886:	e7f5      	b.n	8009874 <_dtoa_r+0x2ec>
 8009888:	3101      	adds	r1, #1
 800988a:	6071      	str	r1, [r6, #4]
 800988c:	0052      	lsls	r2, r2, #1
 800988e:	e7a2      	b.n	80097d6 <_dtoa_r+0x24e>
 8009890:	636f4361 	.word	0x636f4361
 8009894:	3fd287a7 	.word	0x3fd287a7
 8009898:	8b60c8b3 	.word	0x8b60c8b3
 800989c:	3fc68a28 	.word	0x3fc68a28
 80098a0:	509f79fb 	.word	0x509f79fb
 80098a4:	3fd34413 	.word	0x3fd34413
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	0800b6cd 	.word	0x0800b6cd
 80098b0:	3ff80000 	.word	0x3ff80000
 80098b4:	0800b788 	.word	0x0800b788
 80098b8:	0800b760 	.word	0x0800b760
 80098bc:	0800b751 	.word	0x0800b751
 80098c0:	07f1      	lsls	r1, r6, #31
 80098c2:	d508      	bpl.n	80098d6 <_dtoa_r+0x34e>
 80098c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098cc:	f7f6 fe9c 	bl	8000608 <__aeabi_dmul>
 80098d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098d4:	3501      	adds	r5, #1
 80098d6:	1076      	asrs	r6, r6, #1
 80098d8:	3708      	adds	r7, #8
 80098da:	2e00      	cmp	r6, #0
 80098dc:	d1f0      	bne.n	80098c0 <_dtoa_r+0x338>
 80098de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098e6:	f7f6 ffb9 	bl	800085c <__aeabi_ddiv>
 80098ea:	e9cd 0100 	strd	r0, r1, [sp]
 80098ee:	e01a      	b.n	8009926 <_dtoa_r+0x39e>
 80098f0:	2502      	movs	r5, #2
 80098f2:	e7a3      	b.n	800983c <_dtoa_r+0x2b4>
 80098f4:	f000 80a0 	beq.w	8009a38 <_dtoa_r+0x4b0>
 80098f8:	f1ca 0600 	rsb	r6, sl, #0
 80098fc:	4b9f      	ldr	r3, [pc, #636]	; (8009b7c <_dtoa_r+0x5f4>)
 80098fe:	4fa0      	ldr	r7, [pc, #640]	; (8009b80 <_dtoa_r+0x5f8>)
 8009900:	f006 020f 	and.w	r2, r6, #15
 8009904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009910:	f7f6 fe7a 	bl	8000608 <__aeabi_dmul>
 8009914:	e9cd 0100 	strd	r0, r1, [sp]
 8009918:	1136      	asrs	r6, r6, #4
 800991a:	2300      	movs	r3, #0
 800991c:	2502      	movs	r5, #2
 800991e:	2e00      	cmp	r6, #0
 8009920:	d17f      	bne.n	8009a22 <_dtoa_r+0x49a>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e1      	bne.n	80098ea <_dtoa_r+0x362>
 8009926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 8087 	beq.w	8009a3c <_dtoa_r+0x4b4>
 800992e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009932:	2200      	movs	r2, #0
 8009934:	4b93      	ldr	r3, [pc, #588]	; (8009b84 <_dtoa_r+0x5fc>)
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f7 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800993e:	2800      	cmp	r0, #0
 8009940:	d07c      	beq.n	8009a3c <_dtoa_r+0x4b4>
 8009942:	f1b9 0f00 	cmp.w	r9, #0
 8009946:	d079      	beq.n	8009a3c <_dtoa_r+0x4b4>
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	dd35      	ble.n	80099ba <_dtoa_r+0x432>
 800994e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009952:	9308      	str	r3, [sp, #32]
 8009954:	4639      	mov	r1, r7
 8009956:	2200      	movs	r2, #0
 8009958:	4b8b      	ldr	r3, [pc, #556]	; (8009b88 <_dtoa_r+0x600>)
 800995a:	4630      	mov	r0, r6
 800995c:	f7f6 fe54 	bl	8000608 <__aeabi_dmul>
 8009960:	e9cd 0100 	strd	r0, r1, [sp]
 8009964:	9f02      	ldr	r7, [sp, #8]
 8009966:	3501      	adds	r5, #1
 8009968:	4628      	mov	r0, r5
 800996a:	f7f6 fde3 	bl	8000534 <__aeabi_i2d>
 800996e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009972:	f7f6 fe49 	bl	8000608 <__aeabi_dmul>
 8009976:	2200      	movs	r2, #0
 8009978:	4b84      	ldr	r3, [pc, #528]	; (8009b8c <_dtoa_r+0x604>)
 800997a:	f7f6 fc8f 	bl	800029c <__adddf3>
 800997e:	4605      	mov	r5, r0
 8009980:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009984:	2f00      	cmp	r7, #0
 8009986:	d15d      	bne.n	8009a44 <_dtoa_r+0x4bc>
 8009988:	2200      	movs	r2, #0
 800998a:	4b81      	ldr	r3, [pc, #516]	; (8009b90 <_dtoa_r+0x608>)
 800998c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009990:	f7f6 fc82 	bl	8000298 <__aeabi_dsub>
 8009994:	462a      	mov	r2, r5
 8009996:	4633      	mov	r3, r6
 8009998:	e9cd 0100 	strd	r0, r1, [sp]
 800999c:	f7f7 f8c4 	bl	8000b28 <__aeabi_dcmpgt>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f040 8288 	bne.w	8009eb6 <_dtoa_r+0x92e>
 80099a6:	462a      	mov	r2, r5
 80099a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80099ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099b0:	f7f7 f89c 	bl	8000aec <__aeabi_dcmplt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	f040 827c 	bne.w	8009eb2 <_dtoa_r+0x92a>
 80099ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099be:	e9cd 2300 	strd	r2, r3, [sp]
 80099c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f2c0 8150 	blt.w	8009c6a <_dtoa_r+0x6e2>
 80099ca:	f1ba 0f0e 	cmp.w	sl, #14
 80099ce:	f300 814c 	bgt.w	8009c6a <_dtoa_r+0x6e2>
 80099d2:	4b6a      	ldr	r3, [pc, #424]	; (8009b7c <_dtoa_r+0x5f4>)
 80099d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099d8:	ed93 7b00 	vldr	d7, [r3]
 80099dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099e4:	f280 80d8 	bge.w	8009b98 <_dtoa_r+0x610>
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	f300 80d4 	bgt.w	8009b98 <_dtoa_r+0x610>
 80099f0:	f040 825e 	bne.w	8009eb0 <_dtoa_r+0x928>
 80099f4:	2200      	movs	r2, #0
 80099f6:	4b66      	ldr	r3, [pc, #408]	; (8009b90 <_dtoa_r+0x608>)
 80099f8:	ec51 0b17 	vmov	r0, r1, d7
 80099fc:	f7f6 fe04 	bl	8000608 <__aeabi_dmul>
 8009a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a04:	f7f7 f886 	bl	8000b14 <__aeabi_dcmpge>
 8009a08:	464f      	mov	r7, r9
 8009a0a:	464e      	mov	r6, r9
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f040 8234 	bne.w	8009e7a <_dtoa_r+0x8f2>
 8009a12:	2331      	movs	r3, #49	; 0x31
 8009a14:	f10b 0501 	add.w	r5, fp, #1
 8009a18:	f88b 3000 	strb.w	r3, [fp]
 8009a1c:	f10a 0a01 	add.w	sl, sl, #1
 8009a20:	e22f      	b.n	8009e82 <_dtoa_r+0x8fa>
 8009a22:	07f2      	lsls	r2, r6, #31
 8009a24:	d505      	bpl.n	8009a32 <_dtoa_r+0x4aa>
 8009a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a2a:	f7f6 fded 	bl	8000608 <__aeabi_dmul>
 8009a2e:	3501      	adds	r5, #1
 8009a30:	2301      	movs	r3, #1
 8009a32:	1076      	asrs	r6, r6, #1
 8009a34:	3708      	adds	r7, #8
 8009a36:	e772      	b.n	800991e <_dtoa_r+0x396>
 8009a38:	2502      	movs	r5, #2
 8009a3a:	e774      	b.n	8009926 <_dtoa_r+0x39e>
 8009a3c:	f8cd a020 	str.w	sl, [sp, #32]
 8009a40:	464f      	mov	r7, r9
 8009a42:	e791      	b.n	8009968 <_dtoa_r+0x3e0>
 8009a44:	4b4d      	ldr	r3, [pc, #308]	; (8009b7c <_dtoa_r+0x5f4>)
 8009a46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d047      	beq.n	8009ae4 <_dtoa_r+0x55c>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	2000      	movs	r0, #0
 8009a5a:	494e      	ldr	r1, [pc, #312]	; (8009b94 <_dtoa_r+0x60c>)
 8009a5c:	f7f6 fefe 	bl	800085c <__aeabi_ddiv>
 8009a60:	462a      	mov	r2, r5
 8009a62:	4633      	mov	r3, r6
 8009a64:	f7f6 fc18 	bl	8000298 <__aeabi_dsub>
 8009a68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a6c:	465d      	mov	r5, fp
 8009a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a72:	f7f7 f879 	bl	8000b68 <__aeabi_d2iz>
 8009a76:	4606      	mov	r6, r0
 8009a78:	f7f6 fd5c 	bl	8000534 <__aeabi_i2d>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a84:	f7f6 fc08 	bl	8000298 <__aeabi_dsub>
 8009a88:	3630      	adds	r6, #48	; 0x30
 8009a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a92:	e9cd 0100 	strd	r0, r1, [sp]
 8009a96:	f7f7 f829 	bl	8000aec <__aeabi_dcmplt>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d163      	bne.n	8009b66 <_dtoa_r+0x5de>
 8009a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	4937      	ldr	r1, [pc, #220]	; (8009b84 <_dtoa_r+0x5fc>)
 8009aa6:	f7f6 fbf7 	bl	8000298 <__aeabi_dsub>
 8009aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009aae:	f7f7 f81d 	bl	8000aec <__aeabi_dcmplt>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	f040 80b7 	bne.w	8009c26 <_dtoa_r+0x69e>
 8009ab8:	eba5 030b 	sub.w	r3, r5, fp
 8009abc:	429f      	cmp	r7, r3
 8009abe:	f77f af7c 	ble.w	80099ba <_dtoa_r+0x432>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4b30      	ldr	r3, [pc, #192]	; (8009b88 <_dtoa_r+0x600>)
 8009ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009aca:	f7f6 fd9d 	bl	8000608 <__aeabi_dmul>
 8009ace:	2200      	movs	r2, #0
 8009ad0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <_dtoa_r+0x600>)
 8009ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ada:	f7f6 fd95 	bl	8000608 <__aeabi_dmul>
 8009ade:	e9cd 0100 	strd	r0, r1, [sp]
 8009ae2:	e7c4      	b.n	8009a6e <_dtoa_r+0x4e6>
 8009ae4:	462a      	mov	r2, r5
 8009ae6:	4633      	mov	r3, r6
 8009ae8:	f7f6 fd8e 	bl	8000608 <__aeabi_dmul>
 8009aec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009af0:	eb0b 0507 	add.w	r5, fp, r7
 8009af4:	465e      	mov	r6, fp
 8009af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009afa:	f7f7 f835 	bl	8000b68 <__aeabi_d2iz>
 8009afe:	4607      	mov	r7, r0
 8009b00:	f7f6 fd18 	bl	8000534 <__aeabi_i2d>
 8009b04:	3730      	adds	r7, #48	; 0x30
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b0e:	f7f6 fbc3 	bl	8000298 <__aeabi_dsub>
 8009b12:	f806 7b01 	strb.w	r7, [r6], #1
 8009b16:	42ae      	cmp	r6, r5
 8009b18:	e9cd 0100 	strd	r0, r1, [sp]
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	d126      	bne.n	8009b70 <_dtoa_r+0x5e8>
 8009b22:	4b1c      	ldr	r3, [pc, #112]	; (8009b94 <_dtoa_r+0x60c>)
 8009b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b28:	f7f6 fbb8 	bl	800029c <__adddf3>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b34:	f7f6 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d174      	bne.n	8009c26 <_dtoa_r+0x69e>
 8009b3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b40:	2000      	movs	r0, #0
 8009b42:	4914      	ldr	r1, [pc, #80]	; (8009b94 <_dtoa_r+0x60c>)
 8009b44:	f7f6 fba8 	bl	8000298 <__aeabi_dsub>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b50:	f7f6 ffcc 	bl	8000aec <__aeabi_dcmplt>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f43f af30 	beq.w	80099ba <_dtoa_r+0x432>
 8009b5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b5e:	2b30      	cmp	r3, #48	; 0x30
 8009b60:	f105 32ff 	add.w	r2, r5, #4294967295
 8009b64:	d002      	beq.n	8009b6c <_dtoa_r+0x5e4>
 8009b66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b6a:	e04a      	b.n	8009c02 <_dtoa_r+0x67a>
 8009b6c:	4615      	mov	r5, r2
 8009b6e:	e7f4      	b.n	8009b5a <_dtoa_r+0x5d2>
 8009b70:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <_dtoa_r+0x600>)
 8009b72:	f7f6 fd49 	bl	8000608 <__aeabi_dmul>
 8009b76:	e9cd 0100 	strd	r0, r1, [sp]
 8009b7a:	e7bc      	b.n	8009af6 <_dtoa_r+0x56e>
 8009b7c:	0800b788 	.word	0x0800b788
 8009b80:	0800b760 	.word	0x0800b760
 8009b84:	3ff00000 	.word	0x3ff00000
 8009b88:	40240000 	.word	0x40240000
 8009b8c:	401c0000 	.word	0x401c0000
 8009b90:	40140000 	.word	0x40140000
 8009b94:	3fe00000 	.word	0x3fe00000
 8009b98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b9c:	465d      	mov	r5, fp
 8009b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	f7f6 fe59 	bl	800085c <__aeabi_ddiv>
 8009baa:	f7f6 ffdd 	bl	8000b68 <__aeabi_d2iz>
 8009bae:	4680      	mov	r8, r0
 8009bb0:	f7f6 fcc0 	bl	8000534 <__aeabi_i2d>
 8009bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bb8:	f7f6 fd26 	bl	8000608 <__aeabi_dmul>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009bc8:	f7f6 fb66 	bl	8000298 <__aeabi_dsub>
 8009bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8009bd0:	eba5 060b 	sub.w	r6, r5, fp
 8009bd4:	45b1      	cmp	r9, r6
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	d139      	bne.n	8009c50 <_dtoa_r+0x6c8>
 8009bdc:	f7f6 fb5e 	bl	800029c <__adddf3>
 8009be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009be4:	4606      	mov	r6, r0
 8009be6:	460f      	mov	r7, r1
 8009be8:	f7f6 ff9e 	bl	8000b28 <__aeabi_dcmpgt>
 8009bec:	b9c8      	cbnz	r0, 8009c22 <_dtoa_r+0x69a>
 8009bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	f7f6 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bfa:	b110      	cbz	r0, 8009c02 <_dtoa_r+0x67a>
 8009bfc:	f018 0f01 	tst.w	r8, #1
 8009c00:	d10f      	bne.n	8009c22 <_dtoa_r+0x69a>
 8009c02:	9904      	ldr	r1, [sp, #16]
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fe0a 	bl	800a81e <_Bfree>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c0e:	702b      	strb	r3, [r5, #0]
 8009c10:	f10a 0301 	add.w	r3, sl, #1
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 8241 	beq.w	800a0a0 <_dtoa_r+0xb18>
 8009c1e:	601d      	str	r5, [r3, #0]
 8009c20:	e23e      	b.n	800a0a0 <_dtoa_r+0xb18>
 8009c22:	f8cd a020 	str.w	sl, [sp, #32]
 8009c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c2a:	2a39      	cmp	r2, #57	; 0x39
 8009c2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009c30:	d108      	bne.n	8009c44 <_dtoa_r+0x6bc>
 8009c32:	459b      	cmp	fp, r3
 8009c34:	d10a      	bne.n	8009c4c <_dtoa_r+0x6c4>
 8009c36:	9b08      	ldr	r3, [sp, #32]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	2330      	movs	r3, #48	; 0x30
 8009c3e:	f88b 3000 	strb.w	r3, [fp]
 8009c42:	465b      	mov	r3, fp
 8009c44:	781a      	ldrb	r2, [r3, #0]
 8009c46:	3201      	adds	r2, #1
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e78c      	b.n	8009b66 <_dtoa_r+0x5de>
 8009c4c:	461d      	mov	r5, r3
 8009c4e:	e7ea      	b.n	8009c26 <_dtoa_r+0x69e>
 8009c50:	2200      	movs	r2, #0
 8009c52:	4b9b      	ldr	r3, [pc, #620]	; (8009ec0 <_dtoa_r+0x938>)
 8009c54:	f7f6 fcd8 	bl	8000608 <__aeabi_dmul>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	f7f6 ff3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d09a      	beq.n	8009b9e <_dtoa_r+0x616>
 8009c68:	e7cb      	b.n	8009c02 <_dtoa_r+0x67a>
 8009c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	f000 808b 	beq.w	8009d88 <_dtoa_r+0x800>
 8009c72:	9a06      	ldr	r2, [sp, #24]
 8009c74:	2a01      	cmp	r2, #1
 8009c76:	dc6e      	bgt.n	8009d56 <_dtoa_r+0x7ce>
 8009c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d067      	beq.n	8009d4e <_dtoa_r+0x7c6>
 8009c7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c82:	9f07      	ldr	r7, [sp, #28]
 8009c84:	9d05      	ldr	r5, [sp, #20]
 8009c86:	9a05      	ldr	r2, [sp, #20]
 8009c88:	2101      	movs	r1, #1
 8009c8a:	441a      	add	r2, r3
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	9205      	str	r2, [sp, #20]
 8009c90:	4498      	add	r8, r3
 8009c92:	f000 fea2 	bl	800a9da <__i2b>
 8009c96:	4606      	mov	r6, r0
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	dd0c      	ble.n	8009cb6 <_dtoa_r+0x72e>
 8009c9c:	f1b8 0f00 	cmp.w	r8, #0
 8009ca0:	dd09      	ble.n	8009cb6 <_dtoa_r+0x72e>
 8009ca2:	4545      	cmp	r5, r8
 8009ca4:	9a05      	ldr	r2, [sp, #20]
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	bfa8      	it	ge
 8009caa:	4643      	movge	r3, r8
 8009cac:	1ad2      	subs	r2, r2, r3
 8009cae:	9205      	str	r2, [sp, #20]
 8009cb0:	1aed      	subs	r5, r5, r3
 8009cb2:	eba8 0803 	sub.w	r8, r8, r3
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	b1eb      	cbz	r3, 8009cf6 <_dtoa_r+0x76e>
 8009cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d067      	beq.n	8009d90 <_dtoa_r+0x808>
 8009cc0:	b18f      	cbz	r7, 8009ce6 <_dtoa_r+0x75e>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	463a      	mov	r2, r7
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 ff26 	bl	800ab18 <__pow5mult>
 8009ccc:	9a04      	ldr	r2, [sp, #16]
 8009cce:	4601      	mov	r1, r0
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fe8a 	bl	800a9ec <__multiply>
 8009cd8:	9904      	ldr	r1, [sp, #16]
 8009cda:	9008      	str	r0, [sp, #32]
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f000 fd9e 	bl	800a81e <_Bfree>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	9b07      	ldr	r3, [sp, #28]
 8009ce8:	1bda      	subs	r2, r3, r7
 8009cea:	d004      	beq.n	8009cf6 <_dtoa_r+0x76e>
 8009cec:	9904      	ldr	r1, [sp, #16]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 ff12 	bl	800ab18 <__pow5mult>
 8009cf4:	9004      	str	r0, [sp, #16]
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fe6e 	bl	800a9da <__i2b>
 8009cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d00:	4607      	mov	r7, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 81d0 	beq.w	800a0a8 <_dtoa_r+0xb20>
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 ff03 	bl	800ab18 <__pow5mult>
 8009d12:	9b06      	ldr	r3, [sp, #24]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	4607      	mov	r7, r0
 8009d18:	dc40      	bgt.n	8009d9c <_dtoa_r+0x814>
 8009d1a:	9b00      	ldr	r3, [sp, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d139      	bne.n	8009d94 <_dtoa_r+0x80c>
 8009d20:	9b01      	ldr	r3, [sp, #4]
 8009d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d136      	bne.n	8009d98 <_dtoa_r+0x810>
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d30:	0d1b      	lsrs	r3, r3, #20
 8009d32:	051b      	lsls	r3, r3, #20
 8009d34:	b12b      	cbz	r3, 8009d42 <_dtoa_r+0x7ba>
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	9305      	str	r3, [sp, #20]
 8009d3c:	f108 0801 	add.w	r8, r8, #1
 8009d40:	2301      	movs	r3, #1
 8009d42:	9307      	str	r3, [sp, #28]
 8009d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d12a      	bne.n	8009da0 <_dtoa_r+0x818>
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	e030      	b.n	8009db0 <_dtoa_r+0x828>
 8009d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d54:	e795      	b.n	8009c82 <_dtoa_r+0x6fa>
 8009d56:	9b07      	ldr	r3, [sp, #28]
 8009d58:	f109 37ff 	add.w	r7, r9, #4294967295
 8009d5c:	42bb      	cmp	r3, r7
 8009d5e:	bfbf      	itttt	lt
 8009d60:	9b07      	ldrlt	r3, [sp, #28]
 8009d62:	9707      	strlt	r7, [sp, #28]
 8009d64:	1afa      	sublt	r2, r7, r3
 8009d66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009d68:	bfbb      	ittet	lt
 8009d6a:	189b      	addlt	r3, r3, r2
 8009d6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009d6e:	1bdf      	subge	r7, r3, r7
 8009d70:	2700      	movlt	r7, #0
 8009d72:	f1b9 0f00 	cmp.w	r9, #0
 8009d76:	bfb5      	itete	lt
 8009d78:	9b05      	ldrlt	r3, [sp, #20]
 8009d7a:	9d05      	ldrge	r5, [sp, #20]
 8009d7c:	eba3 0509 	sublt.w	r5, r3, r9
 8009d80:	464b      	movge	r3, r9
 8009d82:	bfb8      	it	lt
 8009d84:	2300      	movlt	r3, #0
 8009d86:	e77e      	b.n	8009c86 <_dtoa_r+0x6fe>
 8009d88:	9f07      	ldr	r7, [sp, #28]
 8009d8a:	9d05      	ldr	r5, [sp, #20]
 8009d8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009d8e:	e783      	b.n	8009c98 <_dtoa_r+0x710>
 8009d90:	9a07      	ldr	r2, [sp, #28]
 8009d92:	e7ab      	b.n	8009cec <_dtoa_r+0x764>
 8009d94:	2300      	movs	r3, #0
 8009d96:	e7d4      	b.n	8009d42 <_dtoa_r+0x7ba>
 8009d98:	9b00      	ldr	r3, [sp, #0]
 8009d9a:	e7d2      	b.n	8009d42 <_dtoa_r+0x7ba>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9307      	str	r3, [sp, #28]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009da6:	6918      	ldr	r0, [r3, #16]
 8009da8:	f000 fdc9 	bl	800a93e <__hi0bits>
 8009dac:	f1c0 0020 	rsb	r0, r0, #32
 8009db0:	4440      	add	r0, r8
 8009db2:	f010 001f 	ands.w	r0, r0, #31
 8009db6:	d047      	beq.n	8009e48 <_dtoa_r+0x8c0>
 8009db8:	f1c0 0320 	rsb	r3, r0, #32
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	dd3b      	ble.n	8009e38 <_dtoa_r+0x8b0>
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	f1c0 001c 	rsb	r0, r0, #28
 8009dc6:	4403      	add	r3, r0
 8009dc8:	9305      	str	r3, [sp, #20]
 8009dca:	4405      	add	r5, r0
 8009dcc:	4480      	add	r8, r0
 8009dce:	9b05      	ldr	r3, [sp, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dd05      	ble.n	8009de0 <_dtoa_r+0x858>
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	9904      	ldr	r1, [sp, #16]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 feeb 	bl	800abb4 <__lshift>
 8009dde:	9004      	str	r0, [sp, #16]
 8009de0:	f1b8 0f00 	cmp.w	r8, #0
 8009de4:	dd05      	ble.n	8009df2 <_dtoa_r+0x86a>
 8009de6:	4639      	mov	r1, r7
 8009de8:	4642      	mov	r2, r8
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fee2 	bl	800abb4 <__lshift>
 8009df0:	4607      	mov	r7, r0
 8009df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009df4:	b353      	cbz	r3, 8009e4c <_dtoa_r+0x8c4>
 8009df6:	4639      	mov	r1, r7
 8009df8:	9804      	ldr	r0, [sp, #16]
 8009dfa:	f000 ff2f 	bl	800ac5c <__mcmp>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	da24      	bge.n	8009e4c <_dtoa_r+0x8c4>
 8009e02:	2300      	movs	r3, #0
 8009e04:	220a      	movs	r2, #10
 8009e06:	9904      	ldr	r1, [sp, #16]
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fd1f 	bl	800a84c <__multadd>
 8009e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e10:	9004      	str	r0, [sp, #16]
 8009e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 814d 	beq.w	800a0b6 <_dtoa_r+0xb2e>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4631      	mov	r1, r6
 8009e20:	220a      	movs	r2, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fd12 	bl	800a84c <__multadd>
 8009e28:	9b02      	ldr	r3, [sp, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	dc4f      	bgt.n	8009ed0 <_dtoa_r+0x948>
 8009e30:	9b06      	ldr	r3, [sp, #24]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	dd4c      	ble.n	8009ed0 <_dtoa_r+0x948>
 8009e36:	e011      	b.n	8009e5c <_dtoa_r+0x8d4>
 8009e38:	d0c9      	beq.n	8009dce <_dtoa_r+0x846>
 8009e3a:	9a05      	ldr	r2, [sp, #20]
 8009e3c:	331c      	adds	r3, #28
 8009e3e:	441a      	add	r2, r3
 8009e40:	9205      	str	r2, [sp, #20]
 8009e42:	441d      	add	r5, r3
 8009e44:	4498      	add	r8, r3
 8009e46:	e7c2      	b.n	8009dce <_dtoa_r+0x846>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	e7f6      	b.n	8009e3a <_dtoa_r+0x8b2>
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	dc38      	bgt.n	8009ec4 <_dtoa_r+0x93c>
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	dd35      	ble.n	8009ec4 <_dtoa_r+0x93c>
 8009e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e5c:	9b02      	ldr	r3, [sp, #8]
 8009e5e:	b963      	cbnz	r3, 8009e7a <_dtoa_r+0x8f2>
 8009e60:	4639      	mov	r1, r7
 8009e62:	2205      	movs	r2, #5
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fcf1 	bl	800a84c <__multadd>
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	9804      	ldr	r0, [sp, #16]
 8009e70:	f000 fef4 	bl	800ac5c <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	f73f adcc 	bgt.w	8009a12 <_dtoa_r+0x48a>
 8009e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e7c:	465d      	mov	r5, fp
 8009e7e:	ea6f 0a03 	mvn.w	sl, r3
 8009e82:	f04f 0900 	mov.w	r9, #0
 8009e86:	4639      	mov	r1, r7
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f000 fcc8 	bl	800a81e <_Bfree>
 8009e8e:	2e00      	cmp	r6, #0
 8009e90:	f43f aeb7 	beq.w	8009c02 <_dtoa_r+0x67a>
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	d005      	beq.n	8009ea6 <_dtoa_r+0x91e>
 8009e9a:	45b1      	cmp	r9, r6
 8009e9c:	d003      	beq.n	8009ea6 <_dtoa_r+0x91e>
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fcbc 	bl	800a81e <_Bfree>
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fcb8 	bl	800a81e <_Bfree>
 8009eae:	e6a8      	b.n	8009c02 <_dtoa_r+0x67a>
 8009eb0:	2700      	movs	r7, #0
 8009eb2:	463e      	mov	r6, r7
 8009eb4:	e7e1      	b.n	8009e7a <_dtoa_r+0x8f2>
 8009eb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009eba:	463e      	mov	r6, r7
 8009ebc:	e5a9      	b.n	8009a12 <_dtoa_r+0x48a>
 8009ebe:	bf00      	nop
 8009ec0:	40240000 	.word	0x40240000
 8009ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 80fa 	beq.w	800a0c4 <_dtoa_r+0xb3c>
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	dd05      	ble.n	8009ee0 <_dtoa_r+0x958>
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 fe6b 	bl	800abb4 <__lshift>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	9b07      	ldr	r3, [sp, #28]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d04c      	beq.n	8009f80 <_dtoa_r+0x9f8>
 8009ee6:	6871      	ldr	r1, [r6, #4]
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 fc64 	bl	800a7b6 <_Balloc>
 8009eee:	6932      	ldr	r2, [r6, #16]
 8009ef0:	3202      	adds	r2, #2
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	0092      	lsls	r2, r2, #2
 8009ef6:	f106 010c 	add.w	r1, r6, #12
 8009efa:	300c      	adds	r0, #12
 8009efc:	f000 fc50 	bl	800a7a0 <memcpy>
 8009f00:	2201      	movs	r2, #1
 8009f02:	4629      	mov	r1, r5
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fe55 	bl	800abb4 <__lshift>
 8009f0a:	9b00      	ldr	r3, [sp, #0]
 8009f0c:	f8cd b014 	str.w	fp, [sp, #20]
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	46b1      	mov	r9, r6
 8009f16:	9307      	str	r3, [sp, #28]
 8009f18:	4606      	mov	r6, r0
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	9804      	ldr	r0, [sp, #16]
 8009f1e:	f7ff faa5 	bl	800946c <quorem>
 8009f22:	4649      	mov	r1, r9
 8009f24:	4605      	mov	r5, r0
 8009f26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f2a:	9804      	ldr	r0, [sp, #16]
 8009f2c:	f000 fe96 	bl	800ac5c <__mcmp>
 8009f30:	4632      	mov	r2, r6
 8009f32:	9000      	str	r0, [sp, #0]
 8009f34:	4639      	mov	r1, r7
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 feaa 	bl	800ac90 <__mdiff>
 8009f3c:	68c3      	ldr	r3, [r0, #12]
 8009f3e:	4602      	mov	r2, r0
 8009f40:	bb03      	cbnz	r3, 8009f84 <_dtoa_r+0x9fc>
 8009f42:	4601      	mov	r1, r0
 8009f44:	9008      	str	r0, [sp, #32]
 8009f46:	9804      	ldr	r0, [sp, #16]
 8009f48:	f000 fe88 	bl	800ac5c <__mcmp>
 8009f4c:	9a08      	ldr	r2, [sp, #32]
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4611      	mov	r1, r2
 8009f52:	4620      	mov	r0, r4
 8009f54:	9308      	str	r3, [sp, #32]
 8009f56:	f000 fc62 	bl	800a81e <_Bfree>
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	b9a3      	cbnz	r3, 8009f88 <_dtoa_r+0xa00>
 8009f5e:	9a06      	ldr	r2, [sp, #24]
 8009f60:	b992      	cbnz	r2, 8009f88 <_dtoa_r+0xa00>
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	b982      	cbnz	r2, 8009f88 <_dtoa_r+0xa00>
 8009f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f6a:	d029      	beq.n	8009fc0 <_dtoa_r+0xa38>
 8009f6c:	9b00      	ldr	r3, [sp, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dd01      	ble.n	8009f76 <_dtoa_r+0x9ee>
 8009f72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009f76:	9b05      	ldr	r3, [sp, #20]
 8009f78:	1c5d      	adds	r5, r3, #1
 8009f7a:	f883 8000 	strb.w	r8, [r3]
 8009f7e:	e782      	b.n	8009e86 <_dtoa_r+0x8fe>
 8009f80:	4630      	mov	r0, r6
 8009f82:	e7c2      	b.n	8009f0a <_dtoa_r+0x982>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e7e3      	b.n	8009f50 <_dtoa_r+0x9c8>
 8009f88:	9a00      	ldr	r2, [sp, #0]
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	db04      	blt.n	8009f98 <_dtoa_r+0xa10>
 8009f8e:	d125      	bne.n	8009fdc <_dtoa_r+0xa54>
 8009f90:	9a06      	ldr	r2, [sp, #24]
 8009f92:	bb1a      	cbnz	r2, 8009fdc <_dtoa_r+0xa54>
 8009f94:	9a07      	ldr	r2, [sp, #28]
 8009f96:	bb0a      	cbnz	r2, 8009fdc <_dtoa_r+0xa54>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	ddec      	ble.n	8009f76 <_dtoa_r+0x9ee>
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	9904      	ldr	r1, [sp, #16]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fe07 	bl	800abb4 <__lshift>
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	9004      	str	r0, [sp, #16]
 8009faa:	f000 fe57 	bl	800ac5c <__mcmp>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	dc03      	bgt.n	8009fba <_dtoa_r+0xa32>
 8009fb2:	d1e0      	bne.n	8009f76 <_dtoa_r+0x9ee>
 8009fb4:	f018 0f01 	tst.w	r8, #1
 8009fb8:	d0dd      	beq.n	8009f76 <_dtoa_r+0x9ee>
 8009fba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009fbe:	d1d8      	bne.n	8009f72 <_dtoa_r+0x9ea>
 8009fc0:	9b05      	ldr	r3, [sp, #20]
 8009fc2:	9a05      	ldr	r2, [sp, #20]
 8009fc4:	1c5d      	adds	r5, r3, #1
 8009fc6:	2339      	movs	r3, #57	; 0x39
 8009fc8:	7013      	strb	r3, [r2, #0]
 8009fca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fce:	2b39      	cmp	r3, #57	; 0x39
 8009fd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009fd4:	d04f      	beq.n	800a076 <_dtoa_r+0xaee>
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	7013      	strb	r3, [r2, #0]
 8009fda:	e754      	b.n	8009e86 <_dtoa_r+0x8fe>
 8009fdc:	9a05      	ldr	r2, [sp, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f102 0501 	add.w	r5, r2, #1
 8009fe4:	dd06      	ble.n	8009ff4 <_dtoa_r+0xa6c>
 8009fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009fea:	d0e9      	beq.n	8009fc0 <_dtoa_r+0xa38>
 8009fec:	f108 0801 	add.w	r8, r8, #1
 8009ff0:	9b05      	ldr	r3, [sp, #20]
 8009ff2:	e7c2      	b.n	8009f7a <_dtoa_r+0x9f2>
 8009ff4:	9a02      	ldr	r2, [sp, #8]
 8009ff6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009ffa:	eba5 030b 	sub.w	r3, r5, fp
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d021      	beq.n	800a046 <_dtoa_r+0xabe>
 800a002:	2300      	movs	r3, #0
 800a004:	220a      	movs	r2, #10
 800a006:	9904      	ldr	r1, [sp, #16]
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 fc1f 	bl	800a84c <__multadd>
 800a00e:	45b1      	cmp	r9, r6
 800a010:	9004      	str	r0, [sp, #16]
 800a012:	f04f 0300 	mov.w	r3, #0
 800a016:	f04f 020a 	mov.w	r2, #10
 800a01a:	4649      	mov	r1, r9
 800a01c:	4620      	mov	r0, r4
 800a01e:	d105      	bne.n	800a02c <_dtoa_r+0xaa4>
 800a020:	f000 fc14 	bl	800a84c <__multadd>
 800a024:	4681      	mov	r9, r0
 800a026:	4606      	mov	r6, r0
 800a028:	9505      	str	r5, [sp, #20]
 800a02a:	e776      	b.n	8009f1a <_dtoa_r+0x992>
 800a02c:	f000 fc0e 	bl	800a84c <__multadd>
 800a030:	4631      	mov	r1, r6
 800a032:	4681      	mov	r9, r0
 800a034:	2300      	movs	r3, #0
 800a036:	220a      	movs	r2, #10
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fc07 	bl	800a84c <__multadd>
 800a03e:	4606      	mov	r6, r0
 800a040:	e7f2      	b.n	800a028 <_dtoa_r+0xaa0>
 800a042:	f04f 0900 	mov.w	r9, #0
 800a046:	2201      	movs	r2, #1
 800a048:	9904      	ldr	r1, [sp, #16]
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 fdb2 	bl	800abb4 <__lshift>
 800a050:	4639      	mov	r1, r7
 800a052:	9004      	str	r0, [sp, #16]
 800a054:	f000 fe02 	bl	800ac5c <__mcmp>
 800a058:	2800      	cmp	r0, #0
 800a05a:	dcb6      	bgt.n	8009fca <_dtoa_r+0xa42>
 800a05c:	d102      	bne.n	800a064 <_dtoa_r+0xadc>
 800a05e:	f018 0f01 	tst.w	r8, #1
 800a062:	d1b2      	bne.n	8009fca <_dtoa_r+0xa42>
 800a064:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a068:	2b30      	cmp	r3, #48	; 0x30
 800a06a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a06e:	f47f af0a 	bne.w	8009e86 <_dtoa_r+0x8fe>
 800a072:	4615      	mov	r5, r2
 800a074:	e7f6      	b.n	800a064 <_dtoa_r+0xadc>
 800a076:	4593      	cmp	fp, r2
 800a078:	d105      	bne.n	800a086 <_dtoa_r+0xafe>
 800a07a:	2331      	movs	r3, #49	; 0x31
 800a07c:	f10a 0a01 	add.w	sl, sl, #1
 800a080:	f88b 3000 	strb.w	r3, [fp]
 800a084:	e6ff      	b.n	8009e86 <_dtoa_r+0x8fe>
 800a086:	4615      	mov	r5, r2
 800a088:	e79f      	b.n	8009fca <_dtoa_r+0xa42>
 800a08a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a0f0 <_dtoa_r+0xb68>
 800a08e:	e007      	b.n	800a0a0 <_dtoa_r+0xb18>
 800a090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a092:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a0f4 <_dtoa_r+0xb6c>
 800a096:	b11b      	cbz	r3, 800a0a0 <_dtoa_r+0xb18>
 800a098:	f10b 0308 	add.w	r3, fp, #8
 800a09c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a09e:	6013      	str	r3, [r2, #0]
 800a0a0:	4658      	mov	r0, fp
 800a0a2:	b017      	add	sp, #92	; 0x5c
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	9b06      	ldr	r3, [sp, #24]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	f77f ae35 	ble.w	8009d1a <_dtoa_r+0x792>
 800a0b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	e649      	b.n	8009d4a <_dtoa_r+0x7c2>
 800a0b6:	9b02      	ldr	r3, [sp, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc03      	bgt.n	800a0c4 <_dtoa_r+0xb3c>
 800a0bc:	9b06      	ldr	r3, [sp, #24]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	f73f aecc 	bgt.w	8009e5c <_dtoa_r+0x8d4>
 800a0c4:	465d      	mov	r5, fp
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	9804      	ldr	r0, [sp, #16]
 800a0ca:	f7ff f9cf 	bl	800946c <quorem>
 800a0ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a0d2:	f805 8b01 	strb.w	r8, [r5], #1
 800a0d6:	9a02      	ldr	r2, [sp, #8]
 800a0d8:	eba5 030b 	sub.w	r3, r5, fp
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	ddb0      	ble.n	800a042 <_dtoa_r+0xaba>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	220a      	movs	r2, #10
 800a0e4:	9904      	ldr	r1, [sp, #16]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f000 fbb0 	bl	800a84c <__multadd>
 800a0ec:	9004      	str	r0, [sp, #16]
 800a0ee:	e7ea      	b.n	800a0c6 <_dtoa_r+0xb3e>
 800a0f0:	0800b6cc 	.word	0x0800b6cc
 800a0f4:	0800b748 	.word	0x0800b748

0800a0f8 <rshift>:
 800a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fa:	6906      	ldr	r6, [r0, #16]
 800a0fc:	114b      	asrs	r3, r1, #5
 800a0fe:	429e      	cmp	r6, r3
 800a100:	f100 0414 	add.w	r4, r0, #20
 800a104:	dd30      	ble.n	800a168 <rshift+0x70>
 800a106:	f011 011f 	ands.w	r1, r1, #31
 800a10a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a10e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a112:	d108      	bne.n	800a126 <rshift+0x2e>
 800a114:	4621      	mov	r1, r4
 800a116:	42b2      	cmp	r2, r6
 800a118:	460b      	mov	r3, r1
 800a11a:	d211      	bcs.n	800a140 <rshift+0x48>
 800a11c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a120:	f841 3b04 	str.w	r3, [r1], #4
 800a124:	e7f7      	b.n	800a116 <rshift+0x1e>
 800a126:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a12a:	f1c1 0c20 	rsb	ip, r1, #32
 800a12e:	40cd      	lsrs	r5, r1
 800a130:	3204      	adds	r2, #4
 800a132:	4623      	mov	r3, r4
 800a134:	42b2      	cmp	r2, r6
 800a136:	4617      	mov	r7, r2
 800a138:	d30c      	bcc.n	800a154 <rshift+0x5c>
 800a13a:	601d      	str	r5, [r3, #0]
 800a13c:	b105      	cbz	r5, 800a140 <rshift+0x48>
 800a13e:	3304      	adds	r3, #4
 800a140:	1b1a      	subs	r2, r3, r4
 800a142:	42a3      	cmp	r3, r4
 800a144:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a148:	bf08      	it	eq
 800a14a:	2300      	moveq	r3, #0
 800a14c:	6102      	str	r2, [r0, #16]
 800a14e:	bf08      	it	eq
 800a150:	6143      	streq	r3, [r0, #20]
 800a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a154:	683f      	ldr	r7, [r7, #0]
 800a156:	fa07 f70c 	lsl.w	r7, r7, ip
 800a15a:	433d      	orrs	r5, r7
 800a15c:	f843 5b04 	str.w	r5, [r3], #4
 800a160:	f852 5b04 	ldr.w	r5, [r2], #4
 800a164:	40cd      	lsrs	r5, r1
 800a166:	e7e5      	b.n	800a134 <rshift+0x3c>
 800a168:	4623      	mov	r3, r4
 800a16a:	e7e9      	b.n	800a140 <rshift+0x48>

0800a16c <__hexdig_fun>:
 800a16c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a170:	2b09      	cmp	r3, #9
 800a172:	d802      	bhi.n	800a17a <__hexdig_fun+0xe>
 800a174:	3820      	subs	r0, #32
 800a176:	b2c0      	uxtb	r0, r0
 800a178:	4770      	bx	lr
 800a17a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a17e:	2b05      	cmp	r3, #5
 800a180:	d801      	bhi.n	800a186 <__hexdig_fun+0x1a>
 800a182:	3847      	subs	r0, #71	; 0x47
 800a184:	e7f7      	b.n	800a176 <__hexdig_fun+0xa>
 800a186:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	d801      	bhi.n	800a192 <__hexdig_fun+0x26>
 800a18e:	3827      	subs	r0, #39	; 0x27
 800a190:	e7f1      	b.n	800a176 <__hexdig_fun+0xa>
 800a192:	2000      	movs	r0, #0
 800a194:	4770      	bx	lr

0800a196 <__gethex>:
 800a196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	b08b      	sub	sp, #44	; 0x2c
 800a19c:	468a      	mov	sl, r1
 800a19e:	9002      	str	r0, [sp, #8]
 800a1a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a1a2:	9306      	str	r3, [sp, #24]
 800a1a4:	4690      	mov	r8, r2
 800a1a6:	f000 fad0 	bl	800a74a <__localeconv_l>
 800a1aa:	6803      	ldr	r3, [r0, #0]
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 f816 	bl	80001e0 <strlen>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	9001      	str	r0, [sp, #4]
 800a1b8:	4403      	add	r3, r0
 800a1ba:	f04f 0b00 	mov.w	fp, #0
 800a1be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a1c2:	9307      	str	r3, [sp, #28]
 800a1c4:	f8da 3000 	ldr.w	r3, [sl]
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	461f      	mov	r7, r3
 800a1cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1d0:	2830      	cmp	r0, #48	; 0x30
 800a1d2:	d06c      	beq.n	800a2ae <__gethex+0x118>
 800a1d4:	f7ff ffca 	bl	800a16c <__hexdig_fun>
 800a1d8:	4604      	mov	r4, r0
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d16a      	bne.n	800a2b4 <__gethex+0x11e>
 800a1de:	9a01      	ldr	r2, [sp, #4]
 800a1e0:	9903      	ldr	r1, [sp, #12]
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	f001 f8fe 	bl	800b3e4 <strncmp>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d166      	bne.n	800a2ba <__gethex+0x124>
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	5cf8      	ldrb	r0, [r7, r3]
 800a1f0:	18fe      	adds	r6, r7, r3
 800a1f2:	f7ff ffbb 	bl	800a16c <__hexdig_fun>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d062      	beq.n	800a2c0 <__gethex+0x12a>
 800a1fa:	4633      	mov	r3, r6
 800a1fc:	7818      	ldrb	r0, [r3, #0]
 800a1fe:	2830      	cmp	r0, #48	; 0x30
 800a200:	461f      	mov	r7, r3
 800a202:	f103 0301 	add.w	r3, r3, #1
 800a206:	d0f9      	beq.n	800a1fc <__gethex+0x66>
 800a208:	f7ff ffb0 	bl	800a16c <__hexdig_fun>
 800a20c:	fab0 f580 	clz	r5, r0
 800a210:	096d      	lsrs	r5, r5, #5
 800a212:	4634      	mov	r4, r6
 800a214:	f04f 0b01 	mov.w	fp, #1
 800a218:	463a      	mov	r2, r7
 800a21a:	4616      	mov	r6, r2
 800a21c:	3201      	adds	r2, #1
 800a21e:	7830      	ldrb	r0, [r6, #0]
 800a220:	f7ff ffa4 	bl	800a16c <__hexdig_fun>
 800a224:	2800      	cmp	r0, #0
 800a226:	d1f8      	bne.n	800a21a <__gethex+0x84>
 800a228:	9a01      	ldr	r2, [sp, #4]
 800a22a:	9903      	ldr	r1, [sp, #12]
 800a22c:	4630      	mov	r0, r6
 800a22e:	f001 f8d9 	bl	800b3e4 <strncmp>
 800a232:	b950      	cbnz	r0, 800a24a <__gethex+0xb4>
 800a234:	b954      	cbnz	r4, 800a24c <__gethex+0xb6>
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	18f4      	adds	r4, r6, r3
 800a23a:	4622      	mov	r2, r4
 800a23c:	4616      	mov	r6, r2
 800a23e:	3201      	adds	r2, #1
 800a240:	7830      	ldrb	r0, [r6, #0]
 800a242:	f7ff ff93 	bl	800a16c <__hexdig_fun>
 800a246:	2800      	cmp	r0, #0
 800a248:	d1f8      	bne.n	800a23c <__gethex+0xa6>
 800a24a:	b10c      	cbz	r4, 800a250 <__gethex+0xba>
 800a24c:	1ba4      	subs	r4, r4, r6
 800a24e:	00a4      	lsls	r4, r4, #2
 800a250:	7833      	ldrb	r3, [r6, #0]
 800a252:	2b50      	cmp	r3, #80	; 0x50
 800a254:	d001      	beq.n	800a25a <__gethex+0xc4>
 800a256:	2b70      	cmp	r3, #112	; 0x70
 800a258:	d140      	bne.n	800a2dc <__gethex+0x146>
 800a25a:	7873      	ldrb	r3, [r6, #1]
 800a25c:	2b2b      	cmp	r3, #43	; 0x2b
 800a25e:	d031      	beq.n	800a2c4 <__gethex+0x12e>
 800a260:	2b2d      	cmp	r3, #45	; 0x2d
 800a262:	d033      	beq.n	800a2cc <__gethex+0x136>
 800a264:	1c71      	adds	r1, r6, #1
 800a266:	f04f 0900 	mov.w	r9, #0
 800a26a:	7808      	ldrb	r0, [r1, #0]
 800a26c:	f7ff ff7e 	bl	800a16c <__hexdig_fun>
 800a270:	1e43      	subs	r3, r0, #1
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b18      	cmp	r3, #24
 800a276:	d831      	bhi.n	800a2dc <__gethex+0x146>
 800a278:	f1a0 0210 	sub.w	r2, r0, #16
 800a27c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a280:	f7ff ff74 	bl	800a16c <__hexdig_fun>
 800a284:	1e43      	subs	r3, r0, #1
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b18      	cmp	r3, #24
 800a28a:	d922      	bls.n	800a2d2 <__gethex+0x13c>
 800a28c:	f1b9 0f00 	cmp.w	r9, #0
 800a290:	d000      	beq.n	800a294 <__gethex+0xfe>
 800a292:	4252      	negs	r2, r2
 800a294:	4414      	add	r4, r2
 800a296:	f8ca 1000 	str.w	r1, [sl]
 800a29a:	b30d      	cbz	r5, 800a2e0 <__gethex+0x14a>
 800a29c:	f1bb 0f00 	cmp.w	fp, #0
 800a2a0:	bf0c      	ite	eq
 800a2a2:	2706      	moveq	r7, #6
 800a2a4:	2700      	movne	r7, #0
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	b00b      	add	sp, #44	; 0x2c
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	f10b 0b01 	add.w	fp, fp, #1
 800a2b2:	e78a      	b.n	800a1ca <__gethex+0x34>
 800a2b4:	2500      	movs	r5, #0
 800a2b6:	462c      	mov	r4, r5
 800a2b8:	e7ae      	b.n	800a218 <__gethex+0x82>
 800a2ba:	463e      	mov	r6, r7
 800a2bc:	2501      	movs	r5, #1
 800a2be:	e7c7      	b.n	800a250 <__gethex+0xba>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	e7fb      	b.n	800a2bc <__gethex+0x126>
 800a2c4:	f04f 0900 	mov.w	r9, #0
 800a2c8:	1cb1      	adds	r1, r6, #2
 800a2ca:	e7ce      	b.n	800a26a <__gethex+0xd4>
 800a2cc:	f04f 0901 	mov.w	r9, #1
 800a2d0:	e7fa      	b.n	800a2c8 <__gethex+0x132>
 800a2d2:	230a      	movs	r3, #10
 800a2d4:	fb03 0202 	mla	r2, r3, r2, r0
 800a2d8:	3a10      	subs	r2, #16
 800a2da:	e7cf      	b.n	800a27c <__gethex+0xe6>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	e7da      	b.n	800a296 <__gethex+0x100>
 800a2e0:	1bf3      	subs	r3, r6, r7
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	2b07      	cmp	r3, #7
 800a2e8:	dc49      	bgt.n	800a37e <__gethex+0x1e8>
 800a2ea:	9802      	ldr	r0, [sp, #8]
 800a2ec:	f000 fa63 	bl	800a7b6 <_Balloc>
 800a2f0:	9b01      	ldr	r3, [sp, #4]
 800a2f2:	f100 0914 	add.w	r9, r0, #20
 800a2f6:	f04f 0b00 	mov.w	fp, #0
 800a2fa:	f1c3 0301 	rsb	r3, r3, #1
 800a2fe:	4605      	mov	r5, r0
 800a300:	f8cd 9010 	str.w	r9, [sp, #16]
 800a304:	46da      	mov	sl, fp
 800a306:	9308      	str	r3, [sp, #32]
 800a308:	42b7      	cmp	r7, r6
 800a30a:	d33b      	bcc.n	800a384 <__gethex+0x1ee>
 800a30c:	9804      	ldr	r0, [sp, #16]
 800a30e:	f840 ab04 	str.w	sl, [r0], #4
 800a312:	eba0 0009 	sub.w	r0, r0, r9
 800a316:	1080      	asrs	r0, r0, #2
 800a318:	6128      	str	r0, [r5, #16]
 800a31a:	0147      	lsls	r7, r0, #5
 800a31c:	4650      	mov	r0, sl
 800a31e:	f000 fb0e 	bl	800a93e <__hi0bits>
 800a322:	f8d8 6000 	ldr.w	r6, [r8]
 800a326:	1a3f      	subs	r7, r7, r0
 800a328:	42b7      	cmp	r7, r6
 800a32a:	dd64      	ble.n	800a3f6 <__gethex+0x260>
 800a32c:	1bbf      	subs	r7, r7, r6
 800a32e:	4639      	mov	r1, r7
 800a330:	4628      	mov	r0, r5
 800a332:	f000 fe1d 	bl	800af70 <__any_on>
 800a336:	4682      	mov	sl, r0
 800a338:	b178      	cbz	r0, 800a35a <__gethex+0x1c4>
 800a33a:	1e7b      	subs	r3, r7, #1
 800a33c:	1159      	asrs	r1, r3, #5
 800a33e:	f003 021f 	and.w	r2, r3, #31
 800a342:	f04f 0a01 	mov.w	sl, #1
 800a346:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a34a:	fa0a f202 	lsl.w	r2, sl, r2
 800a34e:	420a      	tst	r2, r1
 800a350:	d003      	beq.n	800a35a <__gethex+0x1c4>
 800a352:	4553      	cmp	r3, sl
 800a354:	dc46      	bgt.n	800a3e4 <__gethex+0x24e>
 800a356:	f04f 0a02 	mov.w	sl, #2
 800a35a:	4639      	mov	r1, r7
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7ff fecb 	bl	800a0f8 <rshift>
 800a362:	443c      	add	r4, r7
 800a364:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a368:	42a3      	cmp	r3, r4
 800a36a:	da52      	bge.n	800a412 <__gethex+0x27c>
 800a36c:	4629      	mov	r1, r5
 800a36e:	9802      	ldr	r0, [sp, #8]
 800a370:	f000 fa55 	bl	800a81e <_Bfree>
 800a374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a376:	2300      	movs	r3, #0
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	27a3      	movs	r7, #163	; 0xa3
 800a37c:	e793      	b.n	800a2a6 <__gethex+0x110>
 800a37e:	3101      	adds	r1, #1
 800a380:	105b      	asrs	r3, r3, #1
 800a382:	e7b0      	b.n	800a2e6 <__gethex+0x150>
 800a384:	1e73      	subs	r3, r6, #1
 800a386:	9305      	str	r3, [sp, #20]
 800a388:	9a07      	ldr	r2, [sp, #28]
 800a38a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a38e:	4293      	cmp	r3, r2
 800a390:	d018      	beq.n	800a3c4 <__gethex+0x22e>
 800a392:	f1bb 0f20 	cmp.w	fp, #32
 800a396:	d107      	bne.n	800a3a8 <__gethex+0x212>
 800a398:	9b04      	ldr	r3, [sp, #16]
 800a39a:	f8c3 a000 	str.w	sl, [r3]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	f04f 0a00 	mov.w	sl, #0
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	46d3      	mov	fp, sl
 800a3a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a3ac:	f7ff fede 	bl	800a16c <__hexdig_fun>
 800a3b0:	f000 000f 	and.w	r0, r0, #15
 800a3b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a3bc:	f10b 0b04 	add.w	fp, fp, #4
 800a3c0:	9b05      	ldr	r3, [sp, #20]
 800a3c2:	e00d      	b.n	800a3e0 <__gethex+0x24a>
 800a3c4:	9b05      	ldr	r3, [sp, #20]
 800a3c6:	9a08      	ldr	r2, [sp, #32]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	42bb      	cmp	r3, r7
 800a3cc:	d3e1      	bcc.n	800a392 <__gethex+0x1fc>
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	9903      	ldr	r1, [sp, #12]
 800a3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d6:	f001 f805 	bl	800b3e4 <strncmp>
 800a3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d1d8      	bne.n	800a392 <__gethex+0x1fc>
 800a3e0:	461e      	mov	r6, r3
 800a3e2:	e791      	b.n	800a308 <__gethex+0x172>
 800a3e4:	1eb9      	subs	r1, r7, #2
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	f000 fdc2 	bl	800af70 <__any_on>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d0b2      	beq.n	800a356 <__gethex+0x1c0>
 800a3f0:	f04f 0a03 	mov.w	sl, #3
 800a3f4:	e7b1      	b.n	800a35a <__gethex+0x1c4>
 800a3f6:	da09      	bge.n	800a40c <__gethex+0x276>
 800a3f8:	1bf7      	subs	r7, r6, r7
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	463a      	mov	r2, r7
 800a3fe:	9802      	ldr	r0, [sp, #8]
 800a400:	f000 fbd8 	bl	800abb4 <__lshift>
 800a404:	1be4      	subs	r4, r4, r7
 800a406:	4605      	mov	r5, r0
 800a408:	f100 0914 	add.w	r9, r0, #20
 800a40c:	f04f 0a00 	mov.w	sl, #0
 800a410:	e7a8      	b.n	800a364 <__gethex+0x1ce>
 800a412:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a416:	42a0      	cmp	r0, r4
 800a418:	dd6a      	ble.n	800a4f0 <__gethex+0x35a>
 800a41a:	1b04      	subs	r4, r0, r4
 800a41c:	42a6      	cmp	r6, r4
 800a41e:	dc2e      	bgt.n	800a47e <__gethex+0x2e8>
 800a420:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d022      	beq.n	800a46e <__gethex+0x2d8>
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d024      	beq.n	800a476 <__gethex+0x2e0>
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d115      	bne.n	800a45c <__gethex+0x2c6>
 800a430:	42a6      	cmp	r6, r4
 800a432:	d113      	bne.n	800a45c <__gethex+0x2c6>
 800a434:	2e01      	cmp	r6, #1
 800a436:	dc0b      	bgt.n	800a450 <__gethex+0x2ba>
 800a438:	9a06      	ldr	r2, [sp, #24]
 800a43a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	2301      	movs	r3, #1
 800a442:	612b      	str	r3, [r5, #16]
 800a444:	f8c9 3000 	str.w	r3, [r9]
 800a448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a44a:	2762      	movs	r7, #98	; 0x62
 800a44c:	601d      	str	r5, [r3, #0]
 800a44e:	e72a      	b.n	800a2a6 <__gethex+0x110>
 800a450:	1e71      	subs	r1, r6, #1
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fd8c 	bl	800af70 <__any_on>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1ed      	bne.n	800a438 <__gethex+0x2a2>
 800a45c:	4629      	mov	r1, r5
 800a45e:	9802      	ldr	r0, [sp, #8]
 800a460:	f000 f9dd 	bl	800a81e <_Bfree>
 800a464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a466:	2300      	movs	r3, #0
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	2750      	movs	r7, #80	; 0x50
 800a46c:	e71b      	b.n	800a2a6 <__gethex+0x110>
 800a46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0e1      	beq.n	800a438 <__gethex+0x2a2>
 800a474:	e7f2      	b.n	800a45c <__gethex+0x2c6>
 800a476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1dd      	bne.n	800a438 <__gethex+0x2a2>
 800a47c:	e7ee      	b.n	800a45c <__gethex+0x2c6>
 800a47e:	1e67      	subs	r7, r4, #1
 800a480:	f1ba 0f00 	cmp.w	sl, #0
 800a484:	d131      	bne.n	800a4ea <__gethex+0x354>
 800a486:	b127      	cbz	r7, 800a492 <__gethex+0x2fc>
 800a488:	4639      	mov	r1, r7
 800a48a:	4628      	mov	r0, r5
 800a48c:	f000 fd70 	bl	800af70 <__any_on>
 800a490:	4682      	mov	sl, r0
 800a492:	117a      	asrs	r2, r7, #5
 800a494:	2301      	movs	r3, #1
 800a496:	f007 071f 	and.w	r7, r7, #31
 800a49a:	fa03 f707 	lsl.w	r7, r3, r7
 800a49e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	421f      	tst	r7, r3
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	bf18      	it	ne
 800a4aa:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4ae:	1b36      	subs	r6, r6, r4
 800a4b0:	f7ff fe22 	bl	800a0f8 <rshift>
 800a4b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a4b8:	2702      	movs	r7, #2
 800a4ba:	f1ba 0f00 	cmp.w	sl, #0
 800a4be:	d048      	beq.n	800a552 <__gethex+0x3bc>
 800a4c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d015      	beq.n	800a4f4 <__gethex+0x35e>
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d017      	beq.n	800a4fc <__gethex+0x366>
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d109      	bne.n	800a4e4 <__gethex+0x34e>
 800a4d0:	f01a 0f02 	tst.w	sl, #2
 800a4d4:	d006      	beq.n	800a4e4 <__gethex+0x34e>
 800a4d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a4da:	ea4a 0a03 	orr.w	sl, sl, r3
 800a4de:	f01a 0f01 	tst.w	sl, #1
 800a4e2:	d10e      	bne.n	800a502 <__gethex+0x36c>
 800a4e4:	f047 0710 	orr.w	r7, r7, #16
 800a4e8:	e033      	b.n	800a552 <__gethex+0x3bc>
 800a4ea:	f04f 0a01 	mov.w	sl, #1
 800a4ee:	e7d0      	b.n	800a492 <__gethex+0x2fc>
 800a4f0:	2701      	movs	r7, #1
 800a4f2:	e7e2      	b.n	800a4ba <__gethex+0x324>
 800a4f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4f6:	f1c3 0301 	rsb	r3, r3, #1
 800a4fa:	9315      	str	r3, [sp, #84]	; 0x54
 800a4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0f0      	beq.n	800a4e4 <__gethex+0x34e>
 800a502:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a506:	f105 0314 	add.w	r3, r5, #20
 800a50a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a50e:	eb03 010a 	add.w	r1, r3, sl
 800a512:	f04f 0c00 	mov.w	ip, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a520:	d01c      	beq.n	800a55c <__gethex+0x3c6>
 800a522:	3201      	adds	r2, #1
 800a524:	6002      	str	r2, [r0, #0]
 800a526:	2f02      	cmp	r7, #2
 800a528:	f105 0314 	add.w	r3, r5, #20
 800a52c:	d138      	bne.n	800a5a0 <__gethex+0x40a>
 800a52e:	f8d8 2000 	ldr.w	r2, [r8]
 800a532:	3a01      	subs	r2, #1
 800a534:	42b2      	cmp	r2, r6
 800a536:	d10a      	bne.n	800a54e <__gethex+0x3b8>
 800a538:	1171      	asrs	r1, r6, #5
 800a53a:	2201      	movs	r2, #1
 800a53c:	f006 061f 	and.w	r6, r6, #31
 800a540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a544:	fa02 f606 	lsl.w	r6, r2, r6
 800a548:	421e      	tst	r6, r3
 800a54a:	bf18      	it	ne
 800a54c:	4617      	movne	r7, r2
 800a54e:	f047 0720 	orr.w	r7, r7, #32
 800a552:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a554:	601d      	str	r5, [r3, #0]
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	601c      	str	r4, [r3, #0]
 800a55a:	e6a4      	b.n	800a2a6 <__gethex+0x110>
 800a55c:	4299      	cmp	r1, r3
 800a55e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a562:	d8d8      	bhi.n	800a516 <__gethex+0x380>
 800a564:	68ab      	ldr	r3, [r5, #8]
 800a566:	4599      	cmp	r9, r3
 800a568:	db12      	blt.n	800a590 <__gethex+0x3fa>
 800a56a:	6869      	ldr	r1, [r5, #4]
 800a56c:	9802      	ldr	r0, [sp, #8]
 800a56e:	3101      	adds	r1, #1
 800a570:	f000 f921 	bl	800a7b6 <_Balloc>
 800a574:	692a      	ldr	r2, [r5, #16]
 800a576:	3202      	adds	r2, #2
 800a578:	f105 010c 	add.w	r1, r5, #12
 800a57c:	4683      	mov	fp, r0
 800a57e:	0092      	lsls	r2, r2, #2
 800a580:	300c      	adds	r0, #12
 800a582:	f000 f90d 	bl	800a7a0 <memcpy>
 800a586:	4629      	mov	r1, r5
 800a588:	9802      	ldr	r0, [sp, #8]
 800a58a:	f000 f948 	bl	800a81e <_Bfree>
 800a58e:	465d      	mov	r5, fp
 800a590:	692b      	ldr	r3, [r5, #16]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a598:	612a      	str	r2, [r5, #16]
 800a59a:	2201      	movs	r2, #1
 800a59c:	615a      	str	r2, [r3, #20]
 800a59e:	e7c2      	b.n	800a526 <__gethex+0x390>
 800a5a0:	692a      	ldr	r2, [r5, #16]
 800a5a2:	454a      	cmp	r2, r9
 800a5a4:	dd0b      	ble.n	800a5be <__gethex+0x428>
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f7ff fda5 	bl	800a0f8 <rshift>
 800a5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	f6ff aed9 	blt.w	800a36c <__gethex+0x1d6>
 800a5ba:	2701      	movs	r7, #1
 800a5bc:	e7c7      	b.n	800a54e <__gethex+0x3b8>
 800a5be:	f016 061f 	ands.w	r6, r6, #31
 800a5c2:	d0fa      	beq.n	800a5ba <__gethex+0x424>
 800a5c4:	449a      	add	sl, r3
 800a5c6:	f1c6 0620 	rsb	r6, r6, #32
 800a5ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a5ce:	f000 f9b6 	bl	800a93e <__hi0bits>
 800a5d2:	42b0      	cmp	r0, r6
 800a5d4:	dbe7      	blt.n	800a5a6 <__gethex+0x410>
 800a5d6:	e7f0      	b.n	800a5ba <__gethex+0x424>

0800a5d8 <L_shift>:
 800a5d8:	f1c2 0208 	rsb	r2, r2, #8
 800a5dc:	0092      	lsls	r2, r2, #2
 800a5de:	b570      	push	{r4, r5, r6, lr}
 800a5e0:	f1c2 0620 	rsb	r6, r2, #32
 800a5e4:	6843      	ldr	r3, [r0, #4]
 800a5e6:	6804      	ldr	r4, [r0, #0]
 800a5e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a5ec:	432c      	orrs	r4, r5
 800a5ee:	40d3      	lsrs	r3, r2
 800a5f0:	6004      	str	r4, [r0, #0]
 800a5f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5f6:	4288      	cmp	r0, r1
 800a5f8:	d3f4      	bcc.n	800a5e4 <L_shift+0xc>
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}

0800a5fc <__match>:
 800a5fc:	b530      	push	{r4, r5, lr}
 800a5fe:	6803      	ldr	r3, [r0, #0]
 800a600:	3301      	adds	r3, #1
 800a602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a606:	b914      	cbnz	r4, 800a60e <__match+0x12>
 800a608:	6003      	str	r3, [r0, #0]
 800a60a:	2001      	movs	r0, #1
 800a60c:	bd30      	pop	{r4, r5, pc}
 800a60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a616:	2d19      	cmp	r5, #25
 800a618:	bf98      	it	ls
 800a61a:	3220      	addls	r2, #32
 800a61c:	42a2      	cmp	r2, r4
 800a61e:	d0f0      	beq.n	800a602 <__match+0x6>
 800a620:	2000      	movs	r0, #0
 800a622:	e7f3      	b.n	800a60c <__match+0x10>

0800a624 <__hexnan>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	680b      	ldr	r3, [r1, #0]
 800a62a:	6801      	ldr	r1, [r0, #0]
 800a62c:	115f      	asrs	r7, r3, #5
 800a62e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a632:	f013 031f 	ands.w	r3, r3, #31
 800a636:	b087      	sub	sp, #28
 800a638:	bf18      	it	ne
 800a63a:	3704      	addne	r7, #4
 800a63c:	2500      	movs	r5, #0
 800a63e:	1f3e      	subs	r6, r7, #4
 800a640:	4682      	mov	sl, r0
 800a642:	4690      	mov	r8, r2
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	f847 5c04 	str.w	r5, [r7, #-4]
 800a64a:	46b1      	mov	r9, r6
 800a64c:	4634      	mov	r4, r6
 800a64e:	9502      	str	r5, [sp, #8]
 800a650:	46ab      	mov	fp, r5
 800a652:	784a      	ldrb	r2, [r1, #1]
 800a654:	1c4b      	adds	r3, r1, #1
 800a656:	9303      	str	r3, [sp, #12]
 800a658:	b342      	cbz	r2, 800a6ac <__hexnan+0x88>
 800a65a:	4610      	mov	r0, r2
 800a65c:	9105      	str	r1, [sp, #20]
 800a65e:	9204      	str	r2, [sp, #16]
 800a660:	f7ff fd84 	bl	800a16c <__hexdig_fun>
 800a664:	2800      	cmp	r0, #0
 800a666:	d143      	bne.n	800a6f0 <__hexnan+0xcc>
 800a668:	9a04      	ldr	r2, [sp, #16]
 800a66a:	9905      	ldr	r1, [sp, #20]
 800a66c:	2a20      	cmp	r2, #32
 800a66e:	d818      	bhi.n	800a6a2 <__hexnan+0x7e>
 800a670:	9b02      	ldr	r3, [sp, #8]
 800a672:	459b      	cmp	fp, r3
 800a674:	dd13      	ble.n	800a69e <__hexnan+0x7a>
 800a676:	454c      	cmp	r4, r9
 800a678:	d206      	bcs.n	800a688 <__hexnan+0x64>
 800a67a:	2d07      	cmp	r5, #7
 800a67c:	dc04      	bgt.n	800a688 <__hexnan+0x64>
 800a67e:	462a      	mov	r2, r5
 800a680:	4649      	mov	r1, r9
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff ffa8 	bl	800a5d8 <L_shift>
 800a688:	4544      	cmp	r4, r8
 800a68a:	d944      	bls.n	800a716 <__hexnan+0xf2>
 800a68c:	2300      	movs	r3, #0
 800a68e:	f1a4 0904 	sub.w	r9, r4, #4
 800a692:	f844 3c04 	str.w	r3, [r4, #-4]
 800a696:	f8cd b008 	str.w	fp, [sp, #8]
 800a69a:	464c      	mov	r4, r9
 800a69c:	461d      	mov	r5, r3
 800a69e:	9903      	ldr	r1, [sp, #12]
 800a6a0:	e7d7      	b.n	800a652 <__hexnan+0x2e>
 800a6a2:	2a29      	cmp	r2, #41	; 0x29
 800a6a4:	d14a      	bne.n	800a73c <__hexnan+0x118>
 800a6a6:	3102      	adds	r1, #2
 800a6a8:	f8ca 1000 	str.w	r1, [sl]
 800a6ac:	f1bb 0f00 	cmp.w	fp, #0
 800a6b0:	d044      	beq.n	800a73c <__hexnan+0x118>
 800a6b2:	454c      	cmp	r4, r9
 800a6b4:	d206      	bcs.n	800a6c4 <__hexnan+0xa0>
 800a6b6:	2d07      	cmp	r5, #7
 800a6b8:	dc04      	bgt.n	800a6c4 <__hexnan+0xa0>
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	4649      	mov	r1, r9
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff ff8a 	bl	800a5d8 <L_shift>
 800a6c4:	4544      	cmp	r4, r8
 800a6c6:	d928      	bls.n	800a71a <__hexnan+0xf6>
 800a6c8:	4643      	mov	r3, r8
 800a6ca:	f854 2b04 	ldr.w	r2, [r4], #4
 800a6ce:	f843 2b04 	str.w	r2, [r3], #4
 800a6d2:	42a6      	cmp	r6, r4
 800a6d4:	d2f9      	bcs.n	800a6ca <__hexnan+0xa6>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f843 2b04 	str.w	r2, [r3], #4
 800a6dc:	429e      	cmp	r6, r3
 800a6de:	d2fb      	bcs.n	800a6d8 <__hexnan+0xb4>
 800a6e0:	6833      	ldr	r3, [r6, #0]
 800a6e2:	b91b      	cbnz	r3, 800a6ec <__hexnan+0xc8>
 800a6e4:	4546      	cmp	r6, r8
 800a6e6:	d127      	bne.n	800a738 <__hexnan+0x114>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	6033      	str	r3, [r6, #0]
 800a6ec:	2005      	movs	r0, #5
 800a6ee:	e026      	b.n	800a73e <__hexnan+0x11a>
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	2d08      	cmp	r5, #8
 800a6f4:	f10b 0b01 	add.w	fp, fp, #1
 800a6f8:	dd06      	ble.n	800a708 <__hexnan+0xe4>
 800a6fa:	4544      	cmp	r4, r8
 800a6fc:	d9cf      	bls.n	800a69e <__hexnan+0x7a>
 800a6fe:	2300      	movs	r3, #0
 800a700:	f844 3c04 	str.w	r3, [r4, #-4]
 800a704:	2501      	movs	r5, #1
 800a706:	3c04      	subs	r4, #4
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	f000 000f 	and.w	r0, r0, #15
 800a70e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a712:	6020      	str	r0, [r4, #0]
 800a714:	e7c3      	b.n	800a69e <__hexnan+0x7a>
 800a716:	2508      	movs	r5, #8
 800a718:	e7c1      	b.n	800a69e <__hexnan+0x7a>
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0df      	beq.n	800a6e0 <__hexnan+0xbc>
 800a720:	f04f 32ff 	mov.w	r2, #4294967295
 800a724:	f1c3 0320 	rsb	r3, r3, #32
 800a728:	fa22 f303 	lsr.w	r3, r2, r3
 800a72c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a730:	401a      	ands	r2, r3
 800a732:	f847 2c04 	str.w	r2, [r7, #-4]
 800a736:	e7d3      	b.n	800a6e0 <__hexnan+0xbc>
 800a738:	3e04      	subs	r6, #4
 800a73a:	e7d1      	b.n	800a6e0 <__hexnan+0xbc>
 800a73c:	2004      	movs	r0, #4
 800a73e:	b007      	add	sp, #28
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a744 <__locale_ctype_ptr_l>:
 800a744:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a748:	4770      	bx	lr

0800a74a <__localeconv_l>:
 800a74a:	30f0      	adds	r0, #240	; 0xf0
 800a74c:	4770      	bx	lr
	...

0800a750 <_localeconv_r>:
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <_localeconv_r+0x14>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6a18      	ldr	r0, [r3, #32]
 800a756:	4b04      	ldr	r3, [pc, #16]	; (800a768 <_localeconv_r+0x18>)
 800a758:	2800      	cmp	r0, #0
 800a75a:	bf08      	it	eq
 800a75c:	4618      	moveq	r0, r3
 800a75e:	30f0      	adds	r0, #240	; 0xf0
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000090 	.word	0x20000090
 800a768:	200000f4 	.word	0x200000f4

0800a76c <malloc>:
 800a76c:	4b02      	ldr	r3, [pc, #8]	; (800a778 <malloc+0xc>)
 800a76e:	4601      	mov	r1, r0
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f000 bc7b 	b.w	800b06c <_malloc_r>
 800a776:	bf00      	nop
 800a778:	20000090 	.word	0x20000090

0800a77c <__ascii_mbtowc>:
 800a77c:	b082      	sub	sp, #8
 800a77e:	b901      	cbnz	r1, 800a782 <__ascii_mbtowc+0x6>
 800a780:	a901      	add	r1, sp, #4
 800a782:	b142      	cbz	r2, 800a796 <__ascii_mbtowc+0x1a>
 800a784:	b14b      	cbz	r3, 800a79a <__ascii_mbtowc+0x1e>
 800a786:	7813      	ldrb	r3, [r2, #0]
 800a788:	600b      	str	r3, [r1, #0]
 800a78a:	7812      	ldrb	r2, [r2, #0]
 800a78c:	1c10      	adds	r0, r2, #0
 800a78e:	bf18      	it	ne
 800a790:	2001      	movne	r0, #1
 800a792:	b002      	add	sp, #8
 800a794:	4770      	bx	lr
 800a796:	4610      	mov	r0, r2
 800a798:	e7fb      	b.n	800a792 <__ascii_mbtowc+0x16>
 800a79a:	f06f 0001 	mvn.w	r0, #1
 800a79e:	e7f8      	b.n	800a792 <__ascii_mbtowc+0x16>

0800a7a0 <memcpy>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	1e43      	subs	r3, r0, #1
 800a7a4:	440a      	add	r2, r1
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	d100      	bne.n	800a7ac <memcpy+0xc>
 800a7aa:	bd10      	pop	{r4, pc}
 800a7ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b4:	e7f7      	b.n	800a7a6 <memcpy+0x6>

0800a7b6 <_Balloc>:
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460e      	mov	r6, r1
 800a7be:	b93d      	cbnz	r5, 800a7d0 <_Balloc+0x1a>
 800a7c0:	2010      	movs	r0, #16
 800a7c2:	f7ff ffd3 	bl	800a76c <malloc>
 800a7c6:	6260      	str	r0, [r4, #36]	; 0x24
 800a7c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7cc:	6005      	str	r5, [r0, #0]
 800a7ce:	60c5      	str	r5, [r0, #12]
 800a7d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a7d2:	68eb      	ldr	r3, [r5, #12]
 800a7d4:	b183      	cbz	r3, 800a7f8 <_Balloc+0x42>
 800a7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a7de:	b9b8      	cbnz	r0, 800a810 <_Balloc+0x5a>
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	fa01 f506 	lsl.w	r5, r1, r6
 800a7e6:	1d6a      	adds	r2, r5, #5
 800a7e8:	0092      	lsls	r2, r2, #2
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fbe1 	bl	800afb2 <_calloc_r>
 800a7f0:	b160      	cbz	r0, 800a80c <_Balloc+0x56>
 800a7f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a7f6:	e00e      	b.n	800a816 <_Balloc+0x60>
 800a7f8:	2221      	movs	r2, #33	; 0x21
 800a7fa:	2104      	movs	r1, #4
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fbd8 	bl	800afb2 <_calloc_r>
 800a802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a804:	60e8      	str	r0, [r5, #12]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e4      	bne.n	800a7d6 <_Balloc+0x20>
 800a80c:	2000      	movs	r0, #0
 800a80e:	bd70      	pop	{r4, r5, r6, pc}
 800a810:	6802      	ldr	r2, [r0, #0]
 800a812:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a816:	2300      	movs	r3, #0
 800a818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a81c:	e7f7      	b.n	800a80e <_Balloc+0x58>

0800a81e <_Bfree>:
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a822:	4606      	mov	r6, r0
 800a824:	460d      	mov	r5, r1
 800a826:	b93c      	cbnz	r4, 800a838 <_Bfree+0x1a>
 800a828:	2010      	movs	r0, #16
 800a82a:	f7ff ff9f 	bl	800a76c <malloc>
 800a82e:	6270      	str	r0, [r6, #36]	; 0x24
 800a830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a834:	6004      	str	r4, [r0, #0]
 800a836:	60c4      	str	r4, [r0, #12]
 800a838:	b13d      	cbz	r5, 800a84a <_Bfree+0x2c>
 800a83a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a83c:	686a      	ldr	r2, [r5, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a844:	6029      	str	r1, [r5, #0]
 800a846:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a84a:	bd70      	pop	{r4, r5, r6, pc}

0800a84c <__multadd>:
 800a84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a850:	690d      	ldr	r5, [r1, #16]
 800a852:	461f      	mov	r7, r3
 800a854:	4606      	mov	r6, r0
 800a856:	460c      	mov	r4, r1
 800a858:	f101 0c14 	add.w	ip, r1, #20
 800a85c:	2300      	movs	r3, #0
 800a85e:	f8dc 0000 	ldr.w	r0, [ip]
 800a862:	b281      	uxth	r1, r0
 800a864:	fb02 7101 	mla	r1, r2, r1, r7
 800a868:	0c0f      	lsrs	r7, r1, #16
 800a86a:	0c00      	lsrs	r0, r0, #16
 800a86c:	fb02 7000 	mla	r0, r2, r0, r7
 800a870:	b289      	uxth	r1, r1
 800a872:	3301      	adds	r3, #1
 800a874:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a878:	429d      	cmp	r5, r3
 800a87a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a87e:	f84c 1b04 	str.w	r1, [ip], #4
 800a882:	dcec      	bgt.n	800a85e <__multadd+0x12>
 800a884:	b1d7      	cbz	r7, 800a8bc <__multadd+0x70>
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	42ab      	cmp	r3, r5
 800a88a:	dc12      	bgt.n	800a8b2 <__multadd+0x66>
 800a88c:	6861      	ldr	r1, [r4, #4]
 800a88e:	4630      	mov	r0, r6
 800a890:	3101      	adds	r1, #1
 800a892:	f7ff ff90 	bl	800a7b6 <_Balloc>
 800a896:	6922      	ldr	r2, [r4, #16]
 800a898:	3202      	adds	r2, #2
 800a89a:	f104 010c 	add.w	r1, r4, #12
 800a89e:	4680      	mov	r8, r0
 800a8a0:	0092      	lsls	r2, r2, #2
 800a8a2:	300c      	adds	r0, #12
 800a8a4:	f7ff ff7c 	bl	800a7a0 <memcpy>
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f7ff ffb7 	bl	800a81e <_Bfree>
 800a8b0:	4644      	mov	r4, r8
 800a8b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8b6:	3501      	adds	r5, #1
 800a8b8:	615f      	str	r7, [r3, #20]
 800a8ba:	6125      	str	r5, [r4, #16]
 800a8bc:	4620      	mov	r0, r4
 800a8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8c2 <__s2b>:
 800a8c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	4615      	mov	r5, r2
 800a8ca:	461f      	mov	r7, r3
 800a8cc:	2209      	movs	r2, #9
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	2201      	movs	r2, #1
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	db20      	blt.n	800a920 <__s2b+0x5e>
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff ff69 	bl	800a7b6 <_Balloc>
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	6143      	str	r3, [r0, #20]
 800a8e8:	2d09      	cmp	r5, #9
 800a8ea:	f04f 0301 	mov.w	r3, #1
 800a8ee:	6103      	str	r3, [r0, #16]
 800a8f0:	dd19      	ble.n	800a926 <__s2b+0x64>
 800a8f2:	f104 0809 	add.w	r8, r4, #9
 800a8f6:	46c1      	mov	r9, r8
 800a8f8:	442c      	add	r4, r5
 800a8fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a8fe:	4601      	mov	r1, r0
 800a900:	3b30      	subs	r3, #48	; 0x30
 800a902:	220a      	movs	r2, #10
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff ffa1 	bl	800a84c <__multadd>
 800a90a:	45a1      	cmp	r9, r4
 800a90c:	d1f5      	bne.n	800a8fa <__s2b+0x38>
 800a90e:	eb08 0405 	add.w	r4, r8, r5
 800a912:	3c08      	subs	r4, #8
 800a914:	1b2d      	subs	r5, r5, r4
 800a916:	1963      	adds	r3, r4, r5
 800a918:	42bb      	cmp	r3, r7
 800a91a:	db07      	blt.n	800a92c <__s2b+0x6a>
 800a91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a920:	0052      	lsls	r2, r2, #1
 800a922:	3101      	adds	r1, #1
 800a924:	e7d9      	b.n	800a8da <__s2b+0x18>
 800a926:	340a      	adds	r4, #10
 800a928:	2509      	movs	r5, #9
 800a92a:	e7f3      	b.n	800a914 <__s2b+0x52>
 800a92c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a930:	4601      	mov	r1, r0
 800a932:	3b30      	subs	r3, #48	; 0x30
 800a934:	220a      	movs	r2, #10
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff88 	bl	800a84c <__multadd>
 800a93c:	e7eb      	b.n	800a916 <__s2b+0x54>

0800a93e <__hi0bits>:
 800a93e:	0c02      	lsrs	r2, r0, #16
 800a940:	0412      	lsls	r2, r2, #16
 800a942:	4603      	mov	r3, r0
 800a944:	b9b2      	cbnz	r2, 800a974 <__hi0bits+0x36>
 800a946:	0403      	lsls	r3, r0, #16
 800a948:	2010      	movs	r0, #16
 800a94a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a94e:	bf04      	itt	eq
 800a950:	021b      	lsleq	r3, r3, #8
 800a952:	3008      	addeq	r0, #8
 800a954:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a958:	bf04      	itt	eq
 800a95a:	011b      	lsleq	r3, r3, #4
 800a95c:	3004      	addeq	r0, #4
 800a95e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a962:	bf04      	itt	eq
 800a964:	009b      	lsleq	r3, r3, #2
 800a966:	3002      	addeq	r0, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	db06      	blt.n	800a97a <__hi0bits+0x3c>
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	d503      	bpl.n	800a978 <__hi0bits+0x3a>
 800a970:	3001      	adds	r0, #1
 800a972:	4770      	bx	lr
 800a974:	2000      	movs	r0, #0
 800a976:	e7e8      	b.n	800a94a <__hi0bits+0xc>
 800a978:	2020      	movs	r0, #32
 800a97a:	4770      	bx	lr

0800a97c <__lo0bits>:
 800a97c:	6803      	ldr	r3, [r0, #0]
 800a97e:	f013 0207 	ands.w	r2, r3, #7
 800a982:	4601      	mov	r1, r0
 800a984:	d00b      	beq.n	800a99e <__lo0bits+0x22>
 800a986:	07da      	lsls	r2, r3, #31
 800a988:	d423      	bmi.n	800a9d2 <__lo0bits+0x56>
 800a98a:	0798      	lsls	r0, r3, #30
 800a98c:	bf49      	itett	mi
 800a98e:	085b      	lsrmi	r3, r3, #1
 800a990:	089b      	lsrpl	r3, r3, #2
 800a992:	2001      	movmi	r0, #1
 800a994:	600b      	strmi	r3, [r1, #0]
 800a996:	bf5c      	itt	pl
 800a998:	600b      	strpl	r3, [r1, #0]
 800a99a:	2002      	movpl	r0, #2
 800a99c:	4770      	bx	lr
 800a99e:	b298      	uxth	r0, r3
 800a9a0:	b9a8      	cbnz	r0, 800a9ce <__lo0bits+0x52>
 800a9a2:	0c1b      	lsrs	r3, r3, #16
 800a9a4:	2010      	movs	r0, #16
 800a9a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9aa:	bf04      	itt	eq
 800a9ac:	0a1b      	lsreq	r3, r3, #8
 800a9ae:	3008      	addeq	r0, #8
 800a9b0:	071a      	lsls	r2, r3, #28
 800a9b2:	bf04      	itt	eq
 800a9b4:	091b      	lsreq	r3, r3, #4
 800a9b6:	3004      	addeq	r0, #4
 800a9b8:	079a      	lsls	r2, r3, #30
 800a9ba:	bf04      	itt	eq
 800a9bc:	089b      	lsreq	r3, r3, #2
 800a9be:	3002      	addeq	r0, #2
 800a9c0:	07da      	lsls	r2, r3, #31
 800a9c2:	d402      	bmi.n	800a9ca <__lo0bits+0x4e>
 800a9c4:	085b      	lsrs	r3, r3, #1
 800a9c6:	d006      	beq.n	800a9d6 <__lo0bits+0x5a>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	600b      	str	r3, [r1, #0]
 800a9cc:	4770      	bx	lr
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	e7e9      	b.n	800a9a6 <__lo0bits+0x2a>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	4770      	bx	lr
 800a9d6:	2020      	movs	r0, #32
 800a9d8:	4770      	bx	lr

0800a9da <__i2b>:
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	460c      	mov	r4, r1
 800a9de:	2101      	movs	r1, #1
 800a9e0:	f7ff fee9 	bl	800a7b6 <_Balloc>
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	6144      	str	r4, [r0, #20]
 800a9e8:	6102      	str	r2, [r0, #16]
 800a9ea:	bd10      	pop	{r4, pc}

0800a9ec <__multiply>:
 800a9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	690a      	ldr	r2, [r1, #16]
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	bfb8      	it	lt
 800a9fa:	460b      	movlt	r3, r1
 800a9fc:	4688      	mov	r8, r1
 800a9fe:	bfbc      	itt	lt
 800aa00:	46a0      	movlt	r8, r4
 800aa02:	461c      	movlt	r4, r3
 800aa04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aa0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa14:	eb07 0609 	add.w	r6, r7, r9
 800aa18:	42b3      	cmp	r3, r6
 800aa1a:	bfb8      	it	lt
 800aa1c:	3101      	addlt	r1, #1
 800aa1e:	f7ff feca 	bl	800a7b6 <_Balloc>
 800aa22:	f100 0514 	add.w	r5, r0, #20
 800aa26:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4573      	cmp	r3, lr
 800aa30:	d316      	bcc.n	800aa60 <__multiply+0x74>
 800aa32:	f104 0214 	add.w	r2, r4, #20
 800aa36:	f108 0114 	add.w	r1, r8, #20
 800aa3a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aa3e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	9201      	str	r2, [sp, #4]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d80c      	bhi.n	800aa66 <__multiply+0x7a>
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	dd03      	ble.n	800aa58 <__multiply+0x6c>
 800aa50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d05d      	beq.n	800ab14 <__multiply+0x128>
 800aa58:	6106      	str	r6, [r0, #16]
 800aa5a:	b003      	add	sp, #12
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	f843 2b04 	str.w	r2, [r3], #4
 800aa64:	e7e3      	b.n	800aa2e <__multiply+0x42>
 800aa66:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa6a:	f1bb 0f00 	cmp.w	fp, #0
 800aa6e:	d023      	beq.n	800aab8 <__multiply+0xcc>
 800aa70:	4689      	mov	r9, r1
 800aa72:	46ac      	mov	ip, r5
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa7c:	f8dc a000 	ldr.w	sl, [ip]
 800aa80:	b2a3      	uxth	r3, r4
 800aa82:	fa1f fa8a 	uxth.w	sl, sl
 800aa86:	fb0b a303 	mla	r3, fp, r3, sl
 800aa8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa8e:	f8dc 4000 	ldr.w	r4, [ip]
 800aa92:	4443      	add	r3, r8
 800aa94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa98:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aaa0:	46e2      	mov	sl, ip
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aaa8:	454f      	cmp	r7, r9
 800aaaa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aaae:	f84a 3b04 	str.w	r3, [sl], #4
 800aab2:	d82b      	bhi.n	800ab0c <__multiply+0x120>
 800aab4:	f8cc 8004 	str.w	r8, [ip, #4]
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aabe:	3204      	adds	r2, #4
 800aac0:	f1ba 0f00 	cmp.w	sl, #0
 800aac4:	d020      	beq.n	800ab08 <__multiply+0x11c>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	4689      	mov	r9, r1
 800aaca:	46a8      	mov	r8, r5
 800aacc:	f04f 0b00 	mov.w	fp, #0
 800aad0:	f8b9 c000 	ldrh.w	ip, [r9]
 800aad4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aad8:	fb0a 440c 	mla	r4, sl, ip, r4
 800aadc:	445c      	add	r4, fp
 800aade:	46c4      	mov	ip, r8
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aae6:	f84c 3b04 	str.w	r3, [ip], #4
 800aaea:	f859 3b04 	ldr.w	r3, [r9], #4
 800aaee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aaf2:	0c1b      	lsrs	r3, r3, #16
 800aaf4:	fb0a b303 	mla	r3, sl, r3, fp
 800aaf8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aafc:	454f      	cmp	r7, r9
 800aafe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ab02:	d805      	bhi.n	800ab10 <__multiply+0x124>
 800ab04:	f8c8 3004 	str.w	r3, [r8, #4]
 800ab08:	3504      	adds	r5, #4
 800ab0a:	e79b      	b.n	800aa44 <__multiply+0x58>
 800ab0c:	46d4      	mov	ip, sl
 800ab0e:	e7b3      	b.n	800aa78 <__multiply+0x8c>
 800ab10:	46e0      	mov	r8, ip
 800ab12:	e7dd      	b.n	800aad0 <__multiply+0xe4>
 800ab14:	3e01      	subs	r6, #1
 800ab16:	e799      	b.n	800aa4c <__multiply+0x60>

0800ab18 <__pow5mult>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	f012 0203 	ands.w	r2, r2, #3
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	d007      	beq.n	800ab38 <__pow5mult+0x20>
 800ab28:	3a01      	subs	r2, #1
 800ab2a:	4c21      	ldr	r4, [pc, #132]	; (800abb0 <__pow5mult+0x98>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab32:	f7ff fe8b 	bl	800a84c <__multadd>
 800ab36:	4607      	mov	r7, r0
 800ab38:	10ad      	asrs	r5, r5, #2
 800ab3a:	d035      	beq.n	800aba8 <__pow5mult+0x90>
 800ab3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab3e:	b93c      	cbnz	r4, 800ab50 <__pow5mult+0x38>
 800ab40:	2010      	movs	r0, #16
 800ab42:	f7ff fe13 	bl	800a76c <malloc>
 800ab46:	6270      	str	r0, [r6, #36]	; 0x24
 800ab48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab4c:	6004      	str	r4, [r0, #0]
 800ab4e:	60c4      	str	r4, [r0, #12]
 800ab50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab58:	b94c      	cbnz	r4, 800ab6e <__pow5mult+0x56>
 800ab5a:	f240 2171 	movw	r1, #625	; 0x271
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ff3b 	bl	800a9da <__i2b>
 800ab64:	2300      	movs	r3, #0
 800ab66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	f04f 0800 	mov.w	r8, #0
 800ab72:	07eb      	lsls	r3, r5, #31
 800ab74:	d50a      	bpl.n	800ab8c <__pow5mult+0x74>
 800ab76:	4639      	mov	r1, r7
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7ff ff36 	bl	800a9ec <__multiply>
 800ab80:	4639      	mov	r1, r7
 800ab82:	4681      	mov	r9, r0
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7ff fe4a 	bl	800a81e <_Bfree>
 800ab8a:	464f      	mov	r7, r9
 800ab8c:	106d      	asrs	r5, r5, #1
 800ab8e:	d00b      	beq.n	800aba8 <__pow5mult+0x90>
 800ab90:	6820      	ldr	r0, [r4, #0]
 800ab92:	b938      	cbnz	r0, 800aba4 <__pow5mult+0x8c>
 800ab94:	4622      	mov	r2, r4
 800ab96:	4621      	mov	r1, r4
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff ff27 	bl	800a9ec <__multiply>
 800ab9e:	6020      	str	r0, [r4, #0]
 800aba0:	f8c0 8000 	str.w	r8, [r0]
 800aba4:	4604      	mov	r4, r0
 800aba6:	e7e4      	b.n	800ab72 <__pow5mult+0x5a>
 800aba8:	4638      	mov	r0, r7
 800abaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abae:	bf00      	nop
 800abb0:	0800b850 	.word	0x0800b850

0800abb4 <__lshift>:
 800abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	6849      	ldr	r1, [r1, #4]
 800abc2:	eb0a 0903 	add.w	r9, sl, r3
 800abc6:	68a3      	ldr	r3, [r4, #8]
 800abc8:	4607      	mov	r7, r0
 800abca:	4616      	mov	r6, r2
 800abcc:	f109 0501 	add.w	r5, r9, #1
 800abd0:	42ab      	cmp	r3, r5
 800abd2:	db32      	blt.n	800ac3a <__lshift+0x86>
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff fdee 	bl	800a7b6 <_Balloc>
 800abda:	2300      	movs	r3, #0
 800abdc:	4680      	mov	r8, r0
 800abde:	f100 0114 	add.w	r1, r0, #20
 800abe2:	461a      	mov	r2, r3
 800abe4:	4553      	cmp	r3, sl
 800abe6:	db2b      	blt.n	800ac40 <__lshift+0x8c>
 800abe8:	6920      	ldr	r0, [r4, #16]
 800abea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abee:	f104 0314 	add.w	r3, r4, #20
 800abf2:	f016 021f 	ands.w	r2, r6, #31
 800abf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abfa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abfe:	d025      	beq.n	800ac4c <__lshift+0x98>
 800ac00:	f1c2 0e20 	rsb	lr, r2, #32
 800ac04:	2000      	movs	r0, #0
 800ac06:	681e      	ldr	r6, [r3, #0]
 800ac08:	468a      	mov	sl, r1
 800ac0a:	4096      	lsls	r6, r2
 800ac0c:	4330      	orrs	r0, r6
 800ac0e:	f84a 0b04 	str.w	r0, [sl], #4
 800ac12:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac16:	459c      	cmp	ip, r3
 800ac18:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac1c:	d814      	bhi.n	800ac48 <__lshift+0x94>
 800ac1e:	6048      	str	r0, [r1, #4]
 800ac20:	b108      	cbz	r0, 800ac26 <__lshift+0x72>
 800ac22:	f109 0502 	add.w	r5, r9, #2
 800ac26:	3d01      	subs	r5, #1
 800ac28:	4638      	mov	r0, r7
 800ac2a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f7ff fdf5 	bl	800a81e <_Bfree>
 800ac34:	4640      	mov	r0, r8
 800ac36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3a:	3101      	adds	r1, #1
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	e7c7      	b.n	800abd0 <__lshift+0x1c>
 800ac40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ac44:	3301      	adds	r3, #1
 800ac46:	e7cd      	b.n	800abe4 <__lshift+0x30>
 800ac48:	4651      	mov	r1, sl
 800ac4a:	e7dc      	b.n	800ac06 <__lshift+0x52>
 800ac4c:	3904      	subs	r1, #4
 800ac4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac52:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac56:	459c      	cmp	ip, r3
 800ac58:	d8f9      	bhi.n	800ac4e <__lshift+0x9a>
 800ac5a:	e7e4      	b.n	800ac26 <__lshift+0x72>

0800ac5c <__mcmp>:
 800ac5c:	6903      	ldr	r3, [r0, #16]
 800ac5e:	690a      	ldr	r2, [r1, #16]
 800ac60:	1a9b      	subs	r3, r3, r2
 800ac62:	b530      	push	{r4, r5, lr}
 800ac64:	d10c      	bne.n	800ac80 <__mcmp+0x24>
 800ac66:	0092      	lsls	r2, r2, #2
 800ac68:	3014      	adds	r0, #20
 800ac6a:	3114      	adds	r1, #20
 800ac6c:	1884      	adds	r4, r0, r2
 800ac6e:	4411      	add	r1, r2
 800ac70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac78:	4295      	cmp	r5, r2
 800ac7a:	d003      	beq.n	800ac84 <__mcmp+0x28>
 800ac7c:	d305      	bcc.n	800ac8a <__mcmp+0x2e>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4618      	mov	r0, r3
 800ac82:	bd30      	pop	{r4, r5, pc}
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d3f3      	bcc.n	800ac70 <__mcmp+0x14>
 800ac88:	e7fa      	b.n	800ac80 <__mcmp+0x24>
 800ac8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8e:	e7f7      	b.n	800ac80 <__mcmp+0x24>

0800ac90 <__mdiff>:
 800ac90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac94:	460d      	mov	r5, r1
 800ac96:	4607      	mov	r7, r0
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	4614      	mov	r4, r2
 800ac9e:	f7ff ffdd 	bl	800ac5c <__mcmp>
 800aca2:	1e06      	subs	r6, r0, #0
 800aca4:	d108      	bne.n	800acb8 <__mdiff+0x28>
 800aca6:	4631      	mov	r1, r6
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff fd84 	bl	800a7b6 <_Balloc>
 800acae:	2301      	movs	r3, #1
 800acb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800acb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb8:	bfa4      	itt	ge
 800acba:	4623      	movge	r3, r4
 800acbc:	462c      	movge	r4, r5
 800acbe:	4638      	mov	r0, r7
 800acc0:	6861      	ldr	r1, [r4, #4]
 800acc2:	bfa6      	itte	ge
 800acc4:	461d      	movge	r5, r3
 800acc6:	2600      	movge	r6, #0
 800acc8:	2601      	movlt	r6, #1
 800acca:	f7ff fd74 	bl	800a7b6 <_Balloc>
 800acce:	692b      	ldr	r3, [r5, #16]
 800acd0:	60c6      	str	r6, [r0, #12]
 800acd2:	6926      	ldr	r6, [r4, #16]
 800acd4:	f105 0914 	add.w	r9, r5, #20
 800acd8:	f104 0214 	add.w	r2, r4, #20
 800acdc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ace0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ace4:	f100 0514 	add.w	r5, r0, #20
 800ace8:	f04f 0e00 	mov.w	lr, #0
 800acec:	f852 ab04 	ldr.w	sl, [r2], #4
 800acf0:	f859 4b04 	ldr.w	r4, [r9], #4
 800acf4:	fa1e f18a 	uxtah	r1, lr, sl
 800acf8:	b2a3      	uxth	r3, r4
 800acfa:	1ac9      	subs	r1, r1, r3
 800acfc:	0c23      	lsrs	r3, r4, #16
 800acfe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ad02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ad06:	b289      	uxth	r1, r1
 800ad08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ad0c:	45c8      	cmp	r8, r9
 800ad0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ad12:	4694      	mov	ip, r2
 800ad14:	f845 3b04 	str.w	r3, [r5], #4
 800ad18:	d8e8      	bhi.n	800acec <__mdiff+0x5c>
 800ad1a:	45bc      	cmp	ip, r7
 800ad1c:	d304      	bcc.n	800ad28 <__mdiff+0x98>
 800ad1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad22:	b183      	cbz	r3, 800ad46 <__mdiff+0xb6>
 800ad24:	6106      	str	r6, [r0, #16]
 800ad26:	e7c5      	b.n	800acb4 <__mdiff+0x24>
 800ad28:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad2c:	fa1e f381 	uxtah	r3, lr, r1
 800ad30:	141a      	asrs	r2, r3, #16
 800ad32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ad40:	f845 3b04 	str.w	r3, [r5], #4
 800ad44:	e7e9      	b.n	800ad1a <__mdiff+0x8a>
 800ad46:	3e01      	subs	r6, #1
 800ad48:	e7e9      	b.n	800ad1e <__mdiff+0x8e>
	...

0800ad4c <__ulp>:
 800ad4c:	4b12      	ldr	r3, [pc, #72]	; (800ad98 <__ulp+0x4c>)
 800ad4e:	ee10 2a90 	vmov	r2, s1
 800ad52:	401a      	ands	r2, r3
 800ad54:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dd04      	ble.n	800ad66 <__ulp+0x1a>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	4619      	mov	r1, r3
 800ad60:	ec41 0b10 	vmov	d0, r0, r1
 800ad64:	4770      	bx	lr
 800ad66:	425b      	negs	r3, r3
 800ad68:	151b      	asrs	r3, r3, #20
 800ad6a:	2b13      	cmp	r3, #19
 800ad6c:	f04f 0000 	mov.w	r0, #0
 800ad70:	f04f 0100 	mov.w	r1, #0
 800ad74:	dc04      	bgt.n	800ad80 <__ulp+0x34>
 800ad76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ad7a:	fa42 f103 	asr.w	r1, r2, r3
 800ad7e:	e7ef      	b.n	800ad60 <__ulp+0x14>
 800ad80:	3b14      	subs	r3, #20
 800ad82:	2b1e      	cmp	r3, #30
 800ad84:	f04f 0201 	mov.w	r2, #1
 800ad88:	bfda      	itte	le
 800ad8a:	f1c3 031f 	rsble	r3, r3, #31
 800ad8e:	fa02 f303 	lslle.w	r3, r2, r3
 800ad92:	4613      	movgt	r3, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	e7e3      	b.n	800ad60 <__ulp+0x14>
 800ad98:	7ff00000 	.word	0x7ff00000

0800ad9c <__b2d>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	6905      	ldr	r5, [r0, #16]
 800ada0:	f100 0714 	add.w	r7, r0, #20
 800ada4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ada8:	1f2e      	subs	r6, r5, #4
 800adaa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800adae:	4620      	mov	r0, r4
 800adb0:	f7ff fdc5 	bl	800a93e <__hi0bits>
 800adb4:	f1c0 0320 	rsb	r3, r0, #32
 800adb8:	280a      	cmp	r0, #10
 800adba:	600b      	str	r3, [r1, #0]
 800adbc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ae34 <__b2d+0x98>
 800adc0:	dc14      	bgt.n	800adec <__b2d+0x50>
 800adc2:	f1c0 0e0b 	rsb	lr, r0, #11
 800adc6:	fa24 f10e 	lsr.w	r1, r4, lr
 800adca:	42b7      	cmp	r7, r6
 800adcc:	ea41 030c 	orr.w	r3, r1, ip
 800add0:	bf34      	ite	cc
 800add2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800add6:	2100      	movcs	r1, #0
 800add8:	3015      	adds	r0, #21
 800adda:	fa04 f000 	lsl.w	r0, r4, r0
 800adde:	fa21 f10e 	lsr.w	r1, r1, lr
 800ade2:	ea40 0201 	orr.w	r2, r0, r1
 800ade6:	ec43 2b10 	vmov	d0, r2, r3
 800adea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adec:	42b7      	cmp	r7, r6
 800adee:	bf3a      	itte	cc
 800adf0:	f1a5 0608 	subcc.w	r6, r5, #8
 800adf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800adf8:	2100      	movcs	r1, #0
 800adfa:	380b      	subs	r0, #11
 800adfc:	d015      	beq.n	800ae2a <__b2d+0x8e>
 800adfe:	4084      	lsls	r4, r0
 800ae00:	f1c0 0520 	rsb	r5, r0, #32
 800ae04:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ae08:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ae0c:	42be      	cmp	r6, r7
 800ae0e:	fa21 fc05 	lsr.w	ip, r1, r5
 800ae12:	ea44 030c 	orr.w	r3, r4, ip
 800ae16:	bf8c      	ite	hi
 800ae18:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae1c:	2400      	movls	r4, #0
 800ae1e:	fa01 f000 	lsl.w	r0, r1, r0
 800ae22:	40ec      	lsrs	r4, r5
 800ae24:	ea40 0204 	orr.w	r2, r0, r4
 800ae28:	e7dd      	b.n	800ade6 <__b2d+0x4a>
 800ae2a:	ea44 030c 	orr.w	r3, r4, ip
 800ae2e:	460a      	mov	r2, r1
 800ae30:	e7d9      	b.n	800ade6 <__b2d+0x4a>
 800ae32:	bf00      	nop
 800ae34:	3ff00000 	.word	0x3ff00000

0800ae38 <__d2b>:
 800ae38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	460e      	mov	r6, r1
 800ae3e:	2101      	movs	r1, #1
 800ae40:	ec59 8b10 	vmov	r8, r9, d0
 800ae44:	4615      	mov	r5, r2
 800ae46:	f7ff fcb6 	bl	800a7b6 <_Balloc>
 800ae4a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ae4e:	4607      	mov	r7, r0
 800ae50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae54:	bb34      	cbnz	r4, 800aea4 <__d2b+0x6c>
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	f1b8 0300 	subs.w	r3, r8, #0
 800ae5c:	d027      	beq.n	800aeae <__d2b+0x76>
 800ae5e:	a802      	add	r0, sp, #8
 800ae60:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ae64:	f7ff fd8a 	bl	800a97c <__lo0bits>
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	b1f0      	cbz	r0, 800aeaa <__d2b+0x72>
 800ae6c:	9a01      	ldr	r2, [sp, #4]
 800ae6e:	f1c0 0320 	rsb	r3, r0, #32
 800ae72:	fa02 f303 	lsl.w	r3, r2, r3
 800ae76:	430b      	orrs	r3, r1
 800ae78:	40c2      	lsrs	r2, r0
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bf14      	ite	ne
 800ae86:	2102      	movne	r1, #2
 800ae88:	2101      	moveq	r1, #1
 800ae8a:	6139      	str	r1, [r7, #16]
 800ae8c:	b1c4      	cbz	r4, 800aec0 <__d2b+0x88>
 800ae8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ae92:	4404      	add	r4, r0
 800ae94:	6034      	str	r4, [r6, #0]
 800ae96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae9a:	6028      	str	r0, [r5, #0]
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	b003      	add	sp, #12
 800aea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aea8:	e7d5      	b.n	800ae56 <__d2b+0x1e>
 800aeaa:	6179      	str	r1, [r7, #20]
 800aeac:	e7e7      	b.n	800ae7e <__d2b+0x46>
 800aeae:	a801      	add	r0, sp, #4
 800aeb0:	f7ff fd64 	bl	800a97c <__lo0bits>
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	2101      	movs	r1, #1
 800aeba:	6139      	str	r1, [r7, #16]
 800aebc:	3020      	adds	r0, #32
 800aebe:	e7e5      	b.n	800ae8c <__d2b+0x54>
 800aec0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800aec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aec8:	6030      	str	r0, [r6, #0]
 800aeca:	6918      	ldr	r0, [r3, #16]
 800aecc:	f7ff fd37 	bl	800a93e <__hi0bits>
 800aed0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aed4:	e7e1      	b.n	800ae9a <__d2b+0x62>

0800aed6 <__ratio>:
 800aed6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	4688      	mov	r8, r1
 800aedc:	4669      	mov	r1, sp
 800aede:	4681      	mov	r9, r0
 800aee0:	f7ff ff5c 	bl	800ad9c <__b2d>
 800aee4:	a901      	add	r1, sp, #4
 800aee6:	4640      	mov	r0, r8
 800aee8:	ec57 6b10 	vmov	r6, r7, d0
 800aeec:	f7ff ff56 	bl	800ad9c <__b2d>
 800aef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aef4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aef8:	eba3 0c02 	sub.w	ip, r3, r2
 800aefc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800af06:	ec5b ab10 	vmov	sl, fp, d0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bfce      	itee	gt
 800af0e:	463a      	movgt	r2, r7
 800af10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af14:	465a      	movle	r2, fp
 800af16:	4659      	mov	r1, fp
 800af18:	463d      	mov	r5, r7
 800af1a:	bfd4      	ite	le
 800af1c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800af20:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800af24:	4630      	mov	r0, r6
 800af26:	ee10 2a10 	vmov	r2, s0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4629      	mov	r1, r5
 800af2e:	f7f5 fc95 	bl	800085c <__aeabi_ddiv>
 800af32:	ec41 0b10 	vmov	d0, r0, r1
 800af36:	b003      	add	sp, #12
 800af38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af3c <__copybits>:
 800af3c:	3901      	subs	r1, #1
 800af3e:	b510      	push	{r4, lr}
 800af40:	1149      	asrs	r1, r1, #5
 800af42:	6914      	ldr	r4, [r2, #16]
 800af44:	3101      	adds	r1, #1
 800af46:	f102 0314 	add.w	r3, r2, #20
 800af4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af52:	42a3      	cmp	r3, r4
 800af54:	4602      	mov	r2, r0
 800af56:	d303      	bcc.n	800af60 <__copybits+0x24>
 800af58:	2300      	movs	r3, #0
 800af5a:	428a      	cmp	r2, r1
 800af5c:	d305      	bcc.n	800af6a <__copybits+0x2e>
 800af5e:	bd10      	pop	{r4, pc}
 800af60:	f853 2b04 	ldr.w	r2, [r3], #4
 800af64:	f840 2b04 	str.w	r2, [r0], #4
 800af68:	e7f3      	b.n	800af52 <__copybits+0x16>
 800af6a:	f842 3b04 	str.w	r3, [r2], #4
 800af6e:	e7f4      	b.n	800af5a <__copybits+0x1e>

0800af70 <__any_on>:
 800af70:	f100 0214 	add.w	r2, r0, #20
 800af74:	6900      	ldr	r0, [r0, #16]
 800af76:	114b      	asrs	r3, r1, #5
 800af78:	4298      	cmp	r0, r3
 800af7a:	b510      	push	{r4, lr}
 800af7c:	db11      	blt.n	800afa2 <__any_on+0x32>
 800af7e:	dd0a      	ble.n	800af96 <__any_on+0x26>
 800af80:	f011 011f 	ands.w	r1, r1, #31
 800af84:	d007      	beq.n	800af96 <__any_on+0x26>
 800af86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af8a:	fa24 f001 	lsr.w	r0, r4, r1
 800af8e:	fa00 f101 	lsl.w	r1, r0, r1
 800af92:	428c      	cmp	r4, r1
 800af94:	d10b      	bne.n	800afae <__any_on+0x3e>
 800af96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d803      	bhi.n	800afa6 <__any_on+0x36>
 800af9e:	2000      	movs	r0, #0
 800afa0:	bd10      	pop	{r4, pc}
 800afa2:	4603      	mov	r3, r0
 800afa4:	e7f7      	b.n	800af96 <__any_on+0x26>
 800afa6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afaa:	2900      	cmp	r1, #0
 800afac:	d0f5      	beq.n	800af9a <__any_on+0x2a>
 800afae:	2001      	movs	r0, #1
 800afb0:	e7f6      	b.n	800afa0 <__any_on+0x30>

0800afb2 <_calloc_r>:
 800afb2:	b538      	push	{r3, r4, r5, lr}
 800afb4:	fb02 f401 	mul.w	r4, r2, r1
 800afb8:	4621      	mov	r1, r4
 800afba:	f000 f857 	bl	800b06c <_malloc_r>
 800afbe:	4605      	mov	r5, r0
 800afc0:	b118      	cbz	r0, 800afca <_calloc_r+0x18>
 800afc2:	4622      	mov	r2, r4
 800afc4:	2100      	movs	r1, #0
 800afc6:	f7fc fd35 	bl	8007a34 <memset>
 800afca:	4628      	mov	r0, r5
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800afd0 <_free_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4605      	mov	r5, r0
 800afd4:	2900      	cmp	r1, #0
 800afd6:	d045      	beq.n	800b064 <_free_r+0x94>
 800afd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afdc:	1f0c      	subs	r4, r1, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfb8      	it	lt
 800afe2:	18e4      	addlt	r4, r4, r3
 800afe4:	f000 fa36 	bl	800b454 <__malloc_lock>
 800afe8:	4a1f      	ldr	r2, [pc, #124]	; (800b068 <_free_r+0x98>)
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	4610      	mov	r0, r2
 800afee:	b933      	cbnz	r3, 800affe <_free_r+0x2e>
 800aff0:	6063      	str	r3, [r4, #4]
 800aff2:	6014      	str	r4, [r2, #0]
 800aff4:	4628      	mov	r0, r5
 800aff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800affa:	f000 ba2c 	b.w	800b456 <__malloc_unlock>
 800affe:	42a3      	cmp	r3, r4
 800b000:	d90c      	bls.n	800b01c <_free_r+0x4c>
 800b002:	6821      	ldr	r1, [r4, #0]
 800b004:	1862      	adds	r2, r4, r1
 800b006:	4293      	cmp	r3, r2
 800b008:	bf04      	itt	eq
 800b00a:	681a      	ldreq	r2, [r3, #0]
 800b00c:	685b      	ldreq	r3, [r3, #4]
 800b00e:	6063      	str	r3, [r4, #4]
 800b010:	bf04      	itt	eq
 800b012:	1852      	addeq	r2, r2, r1
 800b014:	6022      	streq	r2, [r4, #0]
 800b016:	6004      	str	r4, [r0, #0]
 800b018:	e7ec      	b.n	800aff4 <_free_r+0x24>
 800b01a:	4613      	mov	r3, r2
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	b10a      	cbz	r2, 800b024 <_free_r+0x54>
 800b020:	42a2      	cmp	r2, r4
 800b022:	d9fa      	bls.n	800b01a <_free_r+0x4a>
 800b024:	6819      	ldr	r1, [r3, #0]
 800b026:	1858      	adds	r0, r3, r1
 800b028:	42a0      	cmp	r0, r4
 800b02a:	d10b      	bne.n	800b044 <_free_r+0x74>
 800b02c:	6820      	ldr	r0, [r4, #0]
 800b02e:	4401      	add	r1, r0
 800b030:	1858      	adds	r0, r3, r1
 800b032:	4282      	cmp	r2, r0
 800b034:	6019      	str	r1, [r3, #0]
 800b036:	d1dd      	bne.n	800aff4 <_free_r+0x24>
 800b038:	6810      	ldr	r0, [r2, #0]
 800b03a:	6852      	ldr	r2, [r2, #4]
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	4401      	add	r1, r0
 800b040:	6019      	str	r1, [r3, #0]
 800b042:	e7d7      	b.n	800aff4 <_free_r+0x24>
 800b044:	d902      	bls.n	800b04c <_free_r+0x7c>
 800b046:	230c      	movs	r3, #12
 800b048:	602b      	str	r3, [r5, #0]
 800b04a:	e7d3      	b.n	800aff4 <_free_r+0x24>
 800b04c:	6820      	ldr	r0, [r4, #0]
 800b04e:	1821      	adds	r1, r4, r0
 800b050:	428a      	cmp	r2, r1
 800b052:	bf04      	itt	eq
 800b054:	6811      	ldreq	r1, [r2, #0]
 800b056:	6852      	ldreq	r2, [r2, #4]
 800b058:	6062      	str	r2, [r4, #4]
 800b05a:	bf04      	itt	eq
 800b05c:	1809      	addeq	r1, r1, r0
 800b05e:	6021      	streq	r1, [r4, #0]
 800b060:	605c      	str	r4, [r3, #4]
 800b062:	e7c7      	b.n	800aff4 <_free_r+0x24>
 800b064:	bd38      	pop	{r3, r4, r5, pc}
 800b066:	bf00      	nop
 800b068:	200002c8 	.word	0x200002c8

0800b06c <_malloc_r>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	1ccd      	adds	r5, r1, #3
 800b070:	f025 0503 	bic.w	r5, r5, #3
 800b074:	3508      	adds	r5, #8
 800b076:	2d0c      	cmp	r5, #12
 800b078:	bf38      	it	cc
 800b07a:	250c      	movcc	r5, #12
 800b07c:	2d00      	cmp	r5, #0
 800b07e:	4606      	mov	r6, r0
 800b080:	db01      	blt.n	800b086 <_malloc_r+0x1a>
 800b082:	42a9      	cmp	r1, r5
 800b084:	d903      	bls.n	800b08e <_malloc_r+0x22>
 800b086:	230c      	movs	r3, #12
 800b088:	6033      	str	r3, [r6, #0]
 800b08a:	2000      	movs	r0, #0
 800b08c:	bd70      	pop	{r4, r5, r6, pc}
 800b08e:	f000 f9e1 	bl	800b454 <__malloc_lock>
 800b092:	4a21      	ldr	r2, [pc, #132]	; (800b118 <_malloc_r+0xac>)
 800b094:	6814      	ldr	r4, [r2, #0]
 800b096:	4621      	mov	r1, r4
 800b098:	b991      	cbnz	r1, 800b0c0 <_malloc_r+0x54>
 800b09a:	4c20      	ldr	r4, [pc, #128]	; (800b11c <_malloc_r+0xb0>)
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	b91b      	cbnz	r3, 800b0a8 <_malloc_r+0x3c>
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f98f 	bl	800b3c4 <_sbrk_r>
 800b0a6:	6020      	str	r0, [r4, #0]
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f000 f98a 	bl	800b3c4 <_sbrk_r>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d124      	bne.n	800b0fe <_malloc_r+0x92>
 800b0b4:	230c      	movs	r3, #12
 800b0b6:	6033      	str	r3, [r6, #0]
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 f9cc 	bl	800b456 <__malloc_unlock>
 800b0be:	e7e4      	b.n	800b08a <_malloc_r+0x1e>
 800b0c0:	680b      	ldr	r3, [r1, #0]
 800b0c2:	1b5b      	subs	r3, r3, r5
 800b0c4:	d418      	bmi.n	800b0f8 <_malloc_r+0x8c>
 800b0c6:	2b0b      	cmp	r3, #11
 800b0c8:	d90f      	bls.n	800b0ea <_malloc_r+0x7e>
 800b0ca:	600b      	str	r3, [r1, #0]
 800b0cc:	50cd      	str	r5, [r1, r3]
 800b0ce:	18cc      	adds	r4, r1, r3
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 f9c0 	bl	800b456 <__malloc_unlock>
 800b0d6:	f104 000b 	add.w	r0, r4, #11
 800b0da:	1d23      	adds	r3, r4, #4
 800b0dc:	f020 0007 	bic.w	r0, r0, #7
 800b0e0:	1ac3      	subs	r3, r0, r3
 800b0e2:	d0d3      	beq.n	800b08c <_malloc_r+0x20>
 800b0e4:	425a      	negs	r2, r3
 800b0e6:	50e2      	str	r2, [r4, r3]
 800b0e8:	e7d0      	b.n	800b08c <_malloc_r+0x20>
 800b0ea:	428c      	cmp	r4, r1
 800b0ec:	684b      	ldr	r3, [r1, #4]
 800b0ee:	bf16      	itet	ne
 800b0f0:	6063      	strne	r3, [r4, #4]
 800b0f2:	6013      	streq	r3, [r2, #0]
 800b0f4:	460c      	movne	r4, r1
 800b0f6:	e7eb      	b.n	800b0d0 <_malloc_r+0x64>
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	6849      	ldr	r1, [r1, #4]
 800b0fc:	e7cc      	b.n	800b098 <_malloc_r+0x2c>
 800b0fe:	1cc4      	adds	r4, r0, #3
 800b100:	f024 0403 	bic.w	r4, r4, #3
 800b104:	42a0      	cmp	r0, r4
 800b106:	d005      	beq.n	800b114 <_malloc_r+0xa8>
 800b108:	1a21      	subs	r1, r4, r0
 800b10a:	4630      	mov	r0, r6
 800b10c:	f000 f95a 	bl	800b3c4 <_sbrk_r>
 800b110:	3001      	adds	r0, #1
 800b112:	d0cf      	beq.n	800b0b4 <_malloc_r+0x48>
 800b114:	6025      	str	r5, [r4, #0]
 800b116:	e7db      	b.n	800b0d0 <_malloc_r+0x64>
 800b118:	200002c8 	.word	0x200002c8
 800b11c:	200002cc 	.word	0x200002cc

0800b120 <__ssputs_r>:
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	688e      	ldr	r6, [r1, #8]
 800b126:	429e      	cmp	r6, r3
 800b128:	4682      	mov	sl, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	4690      	mov	r8, r2
 800b12e:	4699      	mov	r9, r3
 800b130:	d837      	bhi.n	800b1a2 <__ssputs_r+0x82>
 800b132:	898a      	ldrh	r2, [r1, #12]
 800b134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b138:	d031      	beq.n	800b19e <__ssputs_r+0x7e>
 800b13a:	6825      	ldr	r5, [r4, #0]
 800b13c:	6909      	ldr	r1, [r1, #16]
 800b13e:	1a6f      	subs	r7, r5, r1
 800b140:	6965      	ldr	r5, [r4, #20]
 800b142:	2302      	movs	r3, #2
 800b144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b148:	fb95 f5f3 	sdiv	r5, r5, r3
 800b14c:	f109 0301 	add.w	r3, r9, #1
 800b150:	443b      	add	r3, r7
 800b152:	429d      	cmp	r5, r3
 800b154:	bf38      	it	cc
 800b156:	461d      	movcc	r5, r3
 800b158:	0553      	lsls	r3, r2, #21
 800b15a:	d530      	bpl.n	800b1be <__ssputs_r+0x9e>
 800b15c:	4629      	mov	r1, r5
 800b15e:	f7ff ff85 	bl	800b06c <_malloc_r>
 800b162:	4606      	mov	r6, r0
 800b164:	b950      	cbnz	r0, 800b17c <__ssputs_r+0x5c>
 800b166:	230c      	movs	r3, #12
 800b168:	f8ca 3000 	str.w	r3, [sl]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17c:	463a      	mov	r2, r7
 800b17e:	6921      	ldr	r1, [r4, #16]
 800b180:	f7ff fb0e 	bl	800a7a0 <memcpy>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	6126      	str	r6, [r4, #16]
 800b192:	6165      	str	r5, [r4, #20]
 800b194:	443e      	add	r6, r7
 800b196:	1bed      	subs	r5, r5, r7
 800b198:	6026      	str	r6, [r4, #0]
 800b19a:	60a5      	str	r5, [r4, #8]
 800b19c:	464e      	mov	r6, r9
 800b19e:	454e      	cmp	r6, r9
 800b1a0:	d900      	bls.n	800b1a4 <__ssputs_r+0x84>
 800b1a2:	464e      	mov	r6, r9
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	4641      	mov	r1, r8
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	f000 f93a 	bl	800b422 <memmove>
 800b1ae:	68a3      	ldr	r3, [r4, #8]
 800b1b0:	1b9b      	subs	r3, r3, r6
 800b1b2:	60a3      	str	r3, [r4, #8]
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	441e      	add	r6, r3
 800b1b8:	6026      	str	r6, [r4, #0]
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	e7dc      	b.n	800b178 <__ssputs_r+0x58>
 800b1be:	462a      	mov	r2, r5
 800b1c0:	f000 f94a 	bl	800b458 <_realloc_r>
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d1e2      	bne.n	800b190 <__ssputs_r+0x70>
 800b1ca:	6921      	ldr	r1, [r4, #16]
 800b1cc:	4650      	mov	r0, sl
 800b1ce:	f7ff feff 	bl	800afd0 <_free_r>
 800b1d2:	e7c8      	b.n	800b166 <__ssputs_r+0x46>

0800b1d4 <_svfiprintf_r>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	461d      	mov	r5, r3
 800b1da:	898b      	ldrh	r3, [r1, #12]
 800b1dc:	061f      	lsls	r7, r3, #24
 800b1de:	b09d      	sub	sp, #116	; 0x74
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	d50f      	bpl.n	800b208 <_svfiprintf_r+0x34>
 800b1e8:	690b      	ldr	r3, [r1, #16]
 800b1ea:	b96b      	cbnz	r3, 800b208 <_svfiprintf_r+0x34>
 800b1ec:	2140      	movs	r1, #64	; 0x40
 800b1ee:	f7ff ff3d 	bl	800b06c <_malloc_r>
 800b1f2:	6020      	str	r0, [r4, #0]
 800b1f4:	6120      	str	r0, [r4, #16]
 800b1f6:	b928      	cbnz	r0, 800b204 <_svfiprintf_r+0x30>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	f8c8 3000 	str.w	r3, [r8]
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b202:	e0c8      	b.n	800b396 <_svfiprintf_r+0x1c2>
 800b204:	2340      	movs	r3, #64	; 0x40
 800b206:	6163      	str	r3, [r4, #20]
 800b208:	2300      	movs	r3, #0
 800b20a:	9309      	str	r3, [sp, #36]	; 0x24
 800b20c:	2320      	movs	r3, #32
 800b20e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b212:	2330      	movs	r3, #48	; 0x30
 800b214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b218:	9503      	str	r5, [sp, #12]
 800b21a:	f04f 0b01 	mov.w	fp, #1
 800b21e:	4637      	mov	r7, r6
 800b220:	463d      	mov	r5, r7
 800b222:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b226:	b10b      	cbz	r3, 800b22c <_svfiprintf_r+0x58>
 800b228:	2b25      	cmp	r3, #37	; 0x25
 800b22a:	d13e      	bne.n	800b2aa <_svfiprintf_r+0xd6>
 800b22c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b230:	d00b      	beq.n	800b24a <_svfiprintf_r+0x76>
 800b232:	4653      	mov	r3, sl
 800b234:	4632      	mov	r2, r6
 800b236:	4621      	mov	r1, r4
 800b238:	4640      	mov	r0, r8
 800b23a:	f7ff ff71 	bl	800b120 <__ssputs_r>
 800b23e:	3001      	adds	r0, #1
 800b240:	f000 80a4 	beq.w	800b38c <_svfiprintf_r+0x1b8>
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	4453      	add	r3, sl
 800b248:	9309      	str	r3, [sp, #36]	; 0x24
 800b24a:	783b      	ldrb	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 809d 	beq.w	800b38c <_svfiprintf_r+0x1b8>
 800b252:	2300      	movs	r3, #0
 800b254:	f04f 32ff 	mov.w	r2, #4294967295
 800b258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b25c:	9304      	str	r3, [sp, #16]
 800b25e:	9307      	str	r3, [sp, #28]
 800b260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b264:	931a      	str	r3, [sp, #104]	; 0x68
 800b266:	462f      	mov	r7, r5
 800b268:	2205      	movs	r2, #5
 800b26a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b26e:	4850      	ldr	r0, [pc, #320]	; (800b3b0 <_svfiprintf_r+0x1dc>)
 800b270:	f7f4 ffbe 	bl	80001f0 <memchr>
 800b274:	9b04      	ldr	r3, [sp, #16]
 800b276:	b9d0      	cbnz	r0, 800b2ae <_svfiprintf_r+0xda>
 800b278:	06d9      	lsls	r1, r3, #27
 800b27a:	bf44      	itt	mi
 800b27c:	2220      	movmi	r2, #32
 800b27e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b282:	071a      	lsls	r2, r3, #28
 800b284:	bf44      	itt	mi
 800b286:	222b      	movmi	r2, #43	; 0x2b
 800b288:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b28c:	782a      	ldrb	r2, [r5, #0]
 800b28e:	2a2a      	cmp	r2, #42	; 0x2a
 800b290:	d015      	beq.n	800b2be <_svfiprintf_r+0xea>
 800b292:	9a07      	ldr	r2, [sp, #28]
 800b294:	462f      	mov	r7, r5
 800b296:	2000      	movs	r0, #0
 800b298:	250a      	movs	r5, #10
 800b29a:	4639      	mov	r1, r7
 800b29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a0:	3b30      	subs	r3, #48	; 0x30
 800b2a2:	2b09      	cmp	r3, #9
 800b2a4:	d94d      	bls.n	800b342 <_svfiprintf_r+0x16e>
 800b2a6:	b1b8      	cbz	r0, 800b2d8 <_svfiprintf_r+0x104>
 800b2a8:	e00f      	b.n	800b2ca <_svfiprintf_r+0xf6>
 800b2aa:	462f      	mov	r7, r5
 800b2ac:	e7b8      	b.n	800b220 <_svfiprintf_r+0x4c>
 800b2ae:	4a40      	ldr	r2, [pc, #256]	; (800b3b0 <_svfiprintf_r+0x1dc>)
 800b2b0:	1a80      	subs	r0, r0, r2
 800b2b2:	fa0b f000 	lsl.w	r0, fp, r0
 800b2b6:	4318      	orrs	r0, r3
 800b2b8:	9004      	str	r0, [sp, #16]
 800b2ba:	463d      	mov	r5, r7
 800b2bc:	e7d3      	b.n	800b266 <_svfiprintf_r+0x92>
 800b2be:	9a03      	ldr	r2, [sp, #12]
 800b2c0:	1d11      	adds	r1, r2, #4
 800b2c2:	6812      	ldr	r2, [r2, #0]
 800b2c4:	9103      	str	r1, [sp, #12]
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	db01      	blt.n	800b2ce <_svfiprintf_r+0xfa>
 800b2ca:	9207      	str	r2, [sp, #28]
 800b2cc:	e004      	b.n	800b2d8 <_svfiprintf_r+0x104>
 800b2ce:	4252      	negs	r2, r2
 800b2d0:	f043 0302 	orr.w	r3, r3, #2
 800b2d4:	9207      	str	r2, [sp, #28]
 800b2d6:	9304      	str	r3, [sp, #16]
 800b2d8:	783b      	ldrb	r3, [r7, #0]
 800b2da:	2b2e      	cmp	r3, #46	; 0x2e
 800b2dc:	d10c      	bne.n	800b2f8 <_svfiprintf_r+0x124>
 800b2de:	787b      	ldrb	r3, [r7, #1]
 800b2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e2:	d133      	bne.n	800b34c <_svfiprintf_r+0x178>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	1d1a      	adds	r2, r3, #4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	9203      	str	r2, [sp, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	bfb8      	it	lt
 800b2f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2f4:	3702      	adds	r7, #2
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	4d2e      	ldr	r5, [pc, #184]	; (800b3b4 <_svfiprintf_r+0x1e0>)
 800b2fa:	7839      	ldrb	r1, [r7, #0]
 800b2fc:	2203      	movs	r2, #3
 800b2fe:	4628      	mov	r0, r5
 800b300:	f7f4 ff76 	bl	80001f0 <memchr>
 800b304:	b138      	cbz	r0, 800b316 <_svfiprintf_r+0x142>
 800b306:	2340      	movs	r3, #64	; 0x40
 800b308:	1b40      	subs	r0, r0, r5
 800b30a:	fa03 f000 	lsl.w	r0, r3, r0
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	4303      	orrs	r3, r0
 800b312:	3701      	adds	r7, #1
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	7839      	ldrb	r1, [r7, #0]
 800b318:	4827      	ldr	r0, [pc, #156]	; (800b3b8 <_svfiprintf_r+0x1e4>)
 800b31a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b31e:	2206      	movs	r2, #6
 800b320:	1c7e      	adds	r6, r7, #1
 800b322:	f7f4 ff65 	bl	80001f0 <memchr>
 800b326:	2800      	cmp	r0, #0
 800b328:	d038      	beq.n	800b39c <_svfiprintf_r+0x1c8>
 800b32a:	4b24      	ldr	r3, [pc, #144]	; (800b3bc <_svfiprintf_r+0x1e8>)
 800b32c:	bb13      	cbnz	r3, 800b374 <_svfiprintf_r+0x1a0>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	3307      	adds	r3, #7
 800b332:	f023 0307 	bic.w	r3, r3, #7
 800b336:	3308      	adds	r3, #8
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33c:	444b      	add	r3, r9
 800b33e:	9309      	str	r3, [sp, #36]	; 0x24
 800b340:	e76d      	b.n	800b21e <_svfiprintf_r+0x4a>
 800b342:	fb05 3202 	mla	r2, r5, r2, r3
 800b346:	2001      	movs	r0, #1
 800b348:	460f      	mov	r7, r1
 800b34a:	e7a6      	b.n	800b29a <_svfiprintf_r+0xc6>
 800b34c:	2300      	movs	r3, #0
 800b34e:	3701      	adds	r7, #1
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	4619      	mov	r1, r3
 800b354:	250a      	movs	r5, #10
 800b356:	4638      	mov	r0, r7
 800b358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35c:	3a30      	subs	r2, #48	; 0x30
 800b35e:	2a09      	cmp	r2, #9
 800b360:	d903      	bls.n	800b36a <_svfiprintf_r+0x196>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0c8      	beq.n	800b2f8 <_svfiprintf_r+0x124>
 800b366:	9105      	str	r1, [sp, #20]
 800b368:	e7c6      	b.n	800b2f8 <_svfiprintf_r+0x124>
 800b36a:	fb05 2101 	mla	r1, r5, r1, r2
 800b36e:	2301      	movs	r3, #1
 800b370:	4607      	mov	r7, r0
 800b372:	e7f0      	b.n	800b356 <_svfiprintf_r+0x182>
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	4622      	mov	r2, r4
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <_svfiprintf_r+0x1ec>)
 800b37c:	a904      	add	r1, sp, #16
 800b37e:	4640      	mov	r0, r8
 800b380:	f7fc fbf4 	bl	8007b6c <_printf_float>
 800b384:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b388:	4681      	mov	r9, r0
 800b38a:	d1d6      	bne.n	800b33a <_svfiprintf_r+0x166>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	065b      	lsls	r3, r3, #25
 800b390:	f53f af35 	bmi.w	800b1fe <_svfiprintf_r+0x2a>
 800b394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b396:	b01d      	add	sp, #116	; 0x74
 800b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	ab03      	add	r3, sp, #12
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <_svfiprintf_r+0x1ec>)
 800b3a4:	a904      	add	r1, sp, #16
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	f7fc fe96 	bl	80080d8 <_printf_i>
 800b3ac:	e7ea      	b.n	800b384 <_svfiprintf_r+0x1b0>
 800b3ae:	bf00      	nop
 800b3b0:	0800b85c 	.word	0x0800b85c
 800b3b4:	0800b862 	.word	0x0800b862
 800b3b8:	0800b866 	.word	0x0800b866
 800b3bc:	08007b6d 	.word	0x08007b6d
 800b3c0:	0800b121 	.word	0x0800b121

0800b3c4 <_sbrk_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4c06      	ldr	r4, [pc, #24]	; (800b3e0 <_sbrk_r+0x1c>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	f7f7 feb6 	bl	8003140 <_sbrk>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_sbrk_r+0x1a>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_sbrk_r+0x1a>
 800b3dc:	602b      	str	r3, [r5, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	2000050c 	.word	0x2000050c

0800b3e4 <strncmp>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	b16a      	cbz	r2, 800b404 <strncmp+0x20>
 800b3e8:	3901      	subs	r1, #1
 800b3ea:	1884      	adds	r4, r0, r2
 800b3ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d103      	bne.n	800b400 <strncmp+0x1c>
 800b3f8:	42a0      	cmp	r0, r4
 800b3fa:	d001      	beq.n	800b400 <strncmp+0x1c>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1f5      	bne.n	800b3ec <strncmp+0x8>
 800b400:	1a98      	subs	r0, r3, r2
 800b402:	bd10      	pop	{r4, pc}
 800b404:	4610      	mov	r0, r2
 800b406:	e7fc      	b.n	800b402 <strncmp+0x1e>

0800b408 <__ascii_wctomb>:
 800b408:	b149      	cbz	r1, 800b41e <__ascii_wctomb+0x16>
 800b40a:	2aff      	cmp	r2, #255	; 0xff
 800b40c:	bf85      	ittet	hi
 800b40e:	238a      	movhi	r3, #138	; 0x8a
 800b410:	6003      	strhi	r3, [r0, #0]
 800b412:	700a      	strbls	r2, [r1, #0]
 800b414:	f04f 30ff 	movhi.w	r0, #4294967295
 800b418:	bf98      	it	ls
 800b41a:	2001      	movls	r0, #1
 800b41c:	4770      	bx	lr
 800b41e:	4608      	mov	r0, r1
 800b420:	4770      	bx	lr

0800b422 <memmove>:
 800b422:	4288      	cmp	r0, r1
 800b424:	b510      	push	{r4, lr}
 800b426:	eb01 0302 	add.w	r3, r1, r2
 800b42a:	d807      	bhi.n	800b43c <memmove+0x1a>
 800b42c:	1e42      	subs	r2, r0, #1
 800b42e:	4299      	cmp	r1, r3
 800b430:	d00a      	beq.n	800b448 <memmove+0x26>
 800b432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b436:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b43a:	e7f8      	b.n	800b42e <memmove+0xc>
 800b43c:	4283      	cmp	r3, r0
 800b43e:	d9f5      	bls.n	800b42c <memmove+0xa>
 800b440:	1881      	adds	r1, r0, r2
 800b442:	1ad2      	subs	r2, r2, r3
 800b444:	42d3      	cmn	r3, r2
 800b446:	d100      	bne.n	800b44a <memmove+0x28>
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b44e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b452:	e7f7      	b.n	800b444 <memmove+0x22>

0800b454 <__malloc_lock>:
 800b454:	4770      	bx	lr

0800b456 <__malloc_unlock>:
 800b456:	4770      	bx	lr

0800b458 <_realloc_r>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	4607      	mov	r7, r0
 800b45c:	4614      	mov	r4, r2
 800b45e:	460e      	mov	r6, r1
 800b460:	b921      	cbnz	r1, 800b46c <_realloc_r+0x14>
 800b462:	4611      	mov	r1, r2
 800b464:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b468:	f7ff be00 	b.w	800b06c <_malloc_r>
 800b46c:	b922      	cbnz	r2, 800b478 <_realloc_r+0x20>
 800b46e:	f7ff fdaf 	bl	800afd0 <_free_r>
 800b472:	4625      	mov	r5, r4
 800b474:	4628      	mov	r0, r5
 800b476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b478:	f000 f814 	bl	800b4a4 <_malloc_usable_size_r>
 800b47c:	42a0      	cmp	r0, r4
 800b47e:	d20f      	bcs.n	800b4a0 <_realloc_r+0x48>
 800b480:	4621      	mov	r1, r4
 800b482:	4638      	mov	r0, r7
 800b484:	f7ff fdf2 	bl	800b06c <_malloc_r>
 800b488:	4605      	mov	r5, r0
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d0f2      	beq.n	800b474 <_realloc_r+0x1c>
 800b48e:	4631      	mov	r1, r6
 800b490:	4622      	mov	r2, r4
 800b492:	f7ff f985 	bl	800a7a0 <memcpy>
 800b496:	4631      	mov	r1, r6
 800b498:	4638      	mov	r0, r7
 800b49a:	f7ff fd99 	bl	800afd0 <_free_r>
 800b49e:	e7e9      	b.n	800b474 <_realloc_r+0x1c>
 800b4a0:	4635      	mov	r5, r6
 800b4a2:	e7e7      	b.n	800b474 <_realloc_r+0x1c>

0800b4a4 <_malloc_usable_size_r>:
 800b4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a8:	1f18      	subs	r0, r3, #4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bfbc      	itt	lt
 800b4ae:	580b      	ldrlt	r3, [r1, r0]
 800b4b0:	18c0      	addlt	r0, r0, r3
 800b4b2:	4770      	bx	lr

0800b4b4 <_init>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_fini>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr
