
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800aea0  0800aea0  0001aea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b308  0800b308  00020284  2**0
                  CONTENTS
  4 .ARM          00000008  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b310  0800b310  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0800b318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000284  0800b59c  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800b59c  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ebe  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000343a  00000000  00000000  00038172  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003c940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001979d  00000000  00000000  0003db30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123d2  00000000  00000000  000572cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095800  00000000  00000000  0006969f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fee9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d40  00000000  00000000  000fef1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae84 	.word	0x0800ae84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	0800ae84 	.word	0x0800ae84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <rtc_set_time>:
uint8_t uart_rx_data;
/* UART */


void rtc_set_time ()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	get_Time();
 8000f9e:	f002 f83b 	bl	8003018 <get_Time>

	uint8_t hour = time.hour;
 8000fa2:	4b61      	ldr	r3, [pc, #388]	; (8001128 <rtc_set_time+0x190>)
 8000fa4:	789b      	ldrb	r3, [r3, #2]
 8000fa6:	77fb      	strb	r3, [r7, #31]
	uint8_t min = time.minutes;
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <rtc_set_time+0x190>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	77bb      	strb	r3, [r7, #30]
	uint8_t sec = time.seconds;
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <rtc_set_time+0x190>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	777b      	strb	r3, [r7, #29]

	uint8_t day = time.dayofmonth;
 8000fb4:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <rtc_set_time+0x190>)
 8000fb6:	791b      	ldrb	r3, [r3, #4]
 8000fb8:	773b      	strb	r3, [r7, #28]
	uint8_t year = time.year;
 8000fba:	4b5b      	ldr	r3, [pc, #364]	; (8001128 <rtc_set_time+0x190>)
 8000fbc:	799b      	ldrb	r3, [r3, #6]
 8000fbe:	76fb      	strb	r3, [r7, #27]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 ff9a 	bl	8002efc <decToBcd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = decToBcd(min);
 8000fcc:	7fbb      	ldrb	r3, [r7, #30]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 ff94 	bl	8002efc <decToBcd>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = decToBcd(sec);
 8000fd8:	7f7b      	ldrb	r3, [r7, #29]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 ff8e 	bl	8002efc <decToBcd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71bb      	strb	r3, [r7, #6]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484e      	ldr	r0, [pc, #312]	; (800112c <rtc_set_time+0x194>)
 8000ff4:	f004 fbf7 	bl	80057e6 <HAL_RTC_SetTime>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <rtc_set_time+0x6a>
	{
	  Error_Handler();
 8000ffe:	f001 faab 	bl	8002558 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <rtc_set_time+0x190>)
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	3b01      	subs	r3, #1
 8001008:	2b06      	cmp	r3, #6
 800100a:	d826      	bhi.n	800105a <rtc_set_time+0xc2>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <rtc_set_time+0x7c>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001031 	.word	0x08001031
 8001018:	08001037 	.word	0x08001037
 800101c:	0800103d 	.word	0x0800103d
 8001020:	08001043 	.word	0x08001043
 8001024:	08001049 	.word	0x08001049
 8001028:	0800104f 	.word	0x0800104f
 800102c:	08001055 	.word	0x08001055

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001030:	2301      	movs	r3, #1
 8001032:	703b      	strb	r3, [r7, #0]
		break;
 8001034:	e011      	b.n	800105a <rtc_set_time+0xc2>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001036:	2302      	movs	r3, #2
 8001038:	703b      	strb	r3, [r7, #0]
		break;
 800103a:	e00e      	b.n	800105a <rtc_set_time+0xc2>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800103c:	2303      	movs	r3, #3
 800103e:	703b      	strb	r3, [r7, #0]
		break;
 8001040:	e00b      	b.n	800105a <rtc_set_time+0xc2>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001042:	2304      	movs	r3, #4
 8001044:	703b      	strb	r3, [r7, #0]
		break;
 8001046:	e008      	b.n	800105a <rtc_set_time+0xc2>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001048:	2305      	movs	r3, #5
 800104a:	703b      	strb	r3, [r7, #0]
		break;
 800104c:	e005      	b.n	800105a <rtc_set_time+0xc2>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800104e:	2306      	movs	r3, #6
 8001050:	703b      	strb	r3, [r7, #0]
		break;
 8001052:	e002      	b.n	800105a <rtc_set_time+0xc2>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001054:	2307      	movs	r3, #7
 8001056:	703b      	strb	r3, [r7, #0]
		break;
 8001058:	bf00      	nop

	}


	switch( (int) time.month) {
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <rtc_set_time+0x190>)
 800105c:	795b      	ldrb	r3, [r3, #5]
 800105e:	3b01      	subs	r3, #1
 8001060:	2b0b      	cmp	r3, #11
 8001062:	d83f      	bhi.n	80010e4 <rtc_set_time+0x14c>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <rtc_set_time+0xd4>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	0800109d 	.word	0x0800109d
 8001070:	080010a3 	.word	0x080010a3
 8001074:	080010a9 	.word	0x080010a9
 8001078:	080010af 	.word	0x080010af
 800107c:	080010b5 	.word	0x080010b5
 8001080:	080010bb 	.word	0x080010bb
 8001084:	080010c1 	.word	0x080010c1
 8001088:	080010c7 	.word	0x080010c7
 800108c:	080010cd 	.word	0x080010cd
 8001090:	080010d3 	.word	0x080010d3
 8001094:	080010d9 	.word	0x080010d9
 8001098:	080010df 	.word	0x080010df

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 800109c:	2301      	movs	r3, #1
 800109e:	707b      	strb	r3, [r7, #1]
		  break;
 80010a0:	e020      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 80010a2:	2302      	movs	r3, #2
 80010a4:	707b      	strb	r3, [r7, #1]
		  break;
 80010a6:	e01d      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	707b      	strb	r3, [r7, #1]
		  break;
 80010ac:	e01a      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 80010ae:	2304      	movs	r3, #4
 80010b0:	707b      	strb	r3, [r7, #1]
		  break;
 80010b2:	e017      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 80010b4:	2305      	movs	r3, #5
 80010b6:	707b      	strb	r3, [r7, #1]
		  break;
 80010b8:	e014      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80010ba:	2306      	movs	r3, #6
 80010bc:	707b      	strb	r3, [r7, #1]
		  break;
 80010be:	e011      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80010c0:	2307      	movs	r3, #7
 80010c2:	707b      	strb	r3, [r7, #1]
		  break;
 80010c4:	e00e      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80010c6:	2308      	movs	r3, #8
 80010c8:	707b      	strb	r3, [r7, #1]
		  break;
 80010ca:	e00b      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 80010cc:	2309      	movs	r3, #9
 80010ce:	707b      	strb	r3, [r7, #1]
		  break;
 80010d0:	e008      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 80010d2:	2310      	movs	r3, #16
 80010d4:	707b      	strb	r3, [r7, #1]
		  break;
 80010d6:	e005      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 80010d8:	2311      	movs	r3, #17
 80010da:	707b      	strb	r3, [r7, #1]
		  break;
 80010dc:	e002      	b.n	80010e4 <rtc_set_time+0x14c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 80010de:	2312      	movs	r3, #18
 80010e0:	707b      	strb	r3, [r7, #1]
		  break;
 80010e2:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 80010e4:	7f3b      	ldrb	r3, [r7, #28]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 ff08 	bl	8002efc <decToBcd>
 80010ec:	4603      	mov	r3, r0
 80010ee:	70bb      	strb	r3, [r7, #2]
	sDate.Year = decToBcd(year);
 80010f0:	7efb      	ldrb	r3, [r7, #27]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 ff02 	bl	8002efc <decToBcd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	70fb      	strb	r3, [r7, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <rtc_set_time+0x194>)
 8001104:	f004 fc2c 	bl	8005960 <HAL_RTC_SetDate>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <rtc_set_time+0x17a>
	{
		Error_Handler();
 800110e:	f001 fa23 	bl	8002558 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 8001112:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001116:	2101      	movs	r1, #1
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <rtc_set_time+0x194>)
 800111a:	f004 ffff 	bl	800611c <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000308 	.word	0x20000308
 800112c:	200003cc 	.word	0x200003cc

08001130 <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość godzin, minut, sekund oraz dni, pozostałych do włączenia alarmu
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08f      	sub	sp, #60	; 0x3c
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	4603      	mov	r3, r0
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	460b      	mov	r3, r1
 8001148:	717b      	strb	r3, [r7, #5]
 800114a:	4613      	mov	r3, r2
 800114c:	713b      	strb	r3, [r7, #4]
	get_Time();
 800114e:	f001 ff63 	bl	8003018 <get_Time>

	temp_sec = time.seconds + sec;
 8001152:	4b71      	ldr	r3, [pc, #452]	; (8001318 <rtc_set_alarm+0x1e8>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b6f      	ldr	r3, [pc, #444]	; (800131c <rtc_set_alarm+0x1ec>)
 800115e:	701a      	strb	r2, [r3, #0]
	temp_mins = time.minutes + min;
 8001160:	4b6d      	ldr	r3, [pc, #436]	; (8001318 <rtc_set_alarm+0x1e8>)
 8001162:	785a      	ldrb	r2, [r3, #1]
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	4413      	add	r3, r2
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <rtc_set_alarm+0x1f0>)
 800116c:	701a      	strb	r2, [r3, #0]
	temp_hours = time.hour + hour;
 800116e:	4b6a      	ldr	r3, [pc, #424]	; (8001318 <rtc_set_alarm+0x1e8>)
 8001170:	789a      	ldrb	r2, [r3, #2]
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	4413      	add	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <rtc_set_alarm+0x1f4>)
 800117a:	701a      	strb	r2, [r3, #0]
	temp_days = time.dayofmonth + day;
 800117c:	4b66      	ldr	r3, [pc, #408]	; (8001318 <rtc_set_alarm+0x1e8>)
 800117e:	791a      	ldrb	r2, [r3, #4]
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4413      	add	r3, r2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b68      	ldr	r3, [pc, #416]	; (8001328 <rtc_set_alarm+0x1f8>)
 8001188:	701a      	strb	r2, [r3, #0]

	if(temp_sec > 59) {
 800118a:	4b64      	ldr	r3, [pc, #400]	; (800131c <rtc_set_alarm+0x1ec>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b3b      	cmp	r3, #59	; 0x3b
 8001190:	d970      	bls.n	8001274 <rtc_set_alarm+0x144>

		add_sec = temp_sec % 60;
 8001192:	4b62      	ldr	r3, [pc, #392]	; (800131c <rtc_set_alarm+0x1ec>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <rtc_set_alarm+0x1fc>)
 8001198:	fba3 1302 	umull	r1, r3, r3, r2
 800119c:	0959      	lsrs	r1, r3, #5
 800119e:	460b      	mov	r3, r1
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b61      	ldr	r3, [pc, #388]	; (8001330 <rtc_set_alarm+0x200>)
 80011ac:	701a      	strb	r2, [r3, #0]
		add_mins = temp_sec / 60;
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <rtc_set_alarm+0x1ec>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4a5e      	ldr	r2, [pc, #376]	; (800132c <rtc_set_alarm+0x1fc>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <rtc_set_alarm+0x204>)
 80011be:	701a      	strb	r2, [r3, #0]

		temp_sec = add_sec;
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <rtc_set_alarm+0x200>)
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b55      	ldr	r3, [pc, #340]	; (800131c <rtc_set_alarm+0x1ec>)
 80011c6:	701a      	strb	r2, [r3, #0]
		temp_mins += add_mins;
 80011c8:	4b55      	ldr	r3, [pc, #340]	; (8001320 <rtc_set_alarm+0x1f0>)
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <rtc_set_alarm+0x204>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <rtc_set_alarm+0x1f0>)
 80011d6:	701a      	strb	r2, [r3, #0]

		if(temp_mins > 59) {
 80011d8:	4b51      	ldr	r3, [pc, #324]	; (8001320 <rtc_set_alarm+0x1f0>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b3b      	cmp	r3, #59	; 0x3b
 80011de:	d949      	bls.n	8001274 <rtc_set_alarm+0x144>

			add_mins = temp_mins % 60;
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <rtc_set_alarm+0x1f0>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b51      	ldr	r3, [pc, #324]	; (800132c <rtc_set_alarm+0x1fc>)
 80011e6:	fba3 1302 	umull	r1, r3, r3, r2
 80011ea:	0959      	lsrs	r1, r3, #5
 80011ec:	460b      	mov	r3, r1
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <rtc_set_alarm+0x204>)
 80011fa:	701a      	strb	r2, [r3, #0]
			add_hours = temp_mins / 60;
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <rtc_set_alarm+0x1f0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4a4a      	ldr	r2, [pc, #296]	; (800132c <rtc_set_alarm+0x1fc>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <rtc_set_alarm+0x208>)
 800120c:	701a      	strb	r2, [r3, #0]

			temp_mins = add_mins;
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <rtc_set_alarm+0x204>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <rtc_set_alarm+0x1f0>)
 8001214:	701a      	strb	r2, [r3, #0]
			temp_hours += add_hours;
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <rtc_set_alarm+0x1f4>)
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <rtc_set_alarm+0x208>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <rtc_set_alarm+0x1f4>)
 8001224:	701a      	strb	r2, [r3, #0]

			if(temp_hours > 23) {
 8001226:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <rtc_set_alarm+0x1f4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b17      	cmp	r3, #23
 800122c:	d922      	bls.n	8001274 <rtc_set_alarm+0x144>

				add_hours = temp_hours % 24;
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <rtc_set_alarm+0x1f4>)
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <rtc_set_alarm+0x20c>)
 8001234:	fba3 1302 	umull	r1, r3, r3, r2
 8001238:	0919      	lsrs	r1, r3, #4
 800123a:	460b      	mov	r3, r1
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	440b      	add	r3, r1
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <rtc_set_alarm+0x208>)
 8001248:	701a      	strb	r2, [r3, #0]
				add_days = temp_hours / 24;
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <rtc_set_alarm+0x1f4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4a3b      	ldr	r2, [pc, #236]	; (800133c <rtc_set_alarm+0x20c>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <rtc_set_alarm+0x210>)
 800125a:	701a      	strb	r2, [r3, #0]

				temp_hours = add_hours;
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <rtc_set_alarm+0x208>)
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <rtc_set_alarm+0x1f4>)
 8001262:	701a      	strb	r2, [r3, #0]
				temp_days += add_days;
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <rtc_set_alarm+0x1f8>)
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <rtc_set_alarm+0x210>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4413      	add	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <rtc_set_alarm+0x1f8>)
 8001272:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	uint8_t alarm_day = temp_days;
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <rtc_set_alarm+0x1f8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t alarm_hour = temp_hours;
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <rtc_set_alarm+0x1f4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarm_min = temp_mins;
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <rtc_set_alarm+0x1f0>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t alarm_sec = temp_sec;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <rtc_set_alarm+0x1ec>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
	sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 8001294:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe2f 	bl	8002efc <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	733b      	strb	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 80012a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fe28 	bl	8002efc <decToBcd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	737b      	strb	r3, [r7, #13]
	sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec - 2);
 80012b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fe20 	bl	8002efc <decToBcd>
 80012bc:	4603      	mov	r3, r0
 80012be:	73bb      	strb	r3, [r7, #14]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80012d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fe0d 	bl	8002efc <decToBcd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 80012e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	4813      	ldr	r0, [pc, #76]	; (8001344 <rtc_set_alarm+0x214>)
 80012f8:	f004 fbda 	bl	8005ab0 <HAL_RTC_SetAlarm_IT>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <rtc_set_alarm+0x1d6>
	{
		Error_Handler();
 8001302:	f001 f929 	bl	8002558 <Error_Handler>
	}

	HAL_NVIC_SetPriority(EXTI_LINE_17, 0, 1);	// alarm A ma drugi najwyższy priorytet w układzie
 8001306:	2201      	movs	r2, #1
 8001308:	2100      	movs	r1, #0
 800130a:	2011      	movs	r0, #17
 800130c:	f002 f8ff 	bl	800350e <HAL_NVIC_SetPriority>
//	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_set_msg, strlen(alarm_set_msg));

  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 8001310:	bf00      	nop
 8001312:	373c      	adds	r7, #60	; 0x3c
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000308 	.word	0x20000308
 800131c:	200002fe 	.word	0x200002fe
 8001320:	20000305 	.word	0x20000305
 8001324:	2000030f 	.word	0x2000030f
 8001328:	20000304 	.word	0x20000304
 800132c:	88888889 	.word	0x88888889
 8001330:	20000301 	.word	0x20000301
 8001334:	20000302 	.word	0x20000302
 8001338:	20000311 	.word	0x20000311
 800133c:	aaaaaaab 	.word	0xaaaaaaab
 8001340:	20000312 	.word	0x20000312
 8001344:	200003cc 	.word	0x200003cc

08001348 <activate_time>:

// Funkcja sygnalizująca, że użytkownik ustawia nową godzinę na zegarku
void activate_time () {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

	if(uart_rx_data == 't' || uart_rx_data == 'T') {
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <activate_time+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b74      	cmp	r3, #116	; 0x74
 8001352:	d003      	beq.n	800135c <activate_time+0x14>
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <activate_time+0x6c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b54      	cmp	r3, #84	; 0x54
 800135a:	d10b      	bne.n	8001374 <activate_time+0x2c>

		date_activated_flag = 0;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <activate_time+0x70>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <activate_time+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <activate_time+0x78>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
		time_activated_flag = 1;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <activate_time+0x7c>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
	}

	if(time_activated_flag) {
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <activate_time+0x7c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <activate_time+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <activate_time+0x78>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <activate_time+0x6c>)
 8001384:	7819      	ldrb	r1, [r3, #0]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <activate_time+0x80>)
 8001388:	5499      	strb	r1, [r3, r2]

		++global_counter;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <activate_time+0x78>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <activate_time+0x78>)
 8001394:	701a      	strb	r2, [r3, #0]

		if(global_counter == 3) {
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <activate_time+0x78>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d102      	bne.n	80013a4 <activate_time+0x5c>
			time_set_flag = 1;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <activate_time+0x84>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4903      	ldr	r1, [pc, #12]	; (80013b4 <activate_time+0x6c>)
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <activate_time+0x88>)
 80013aa:	f005 f9fb 	bl	80067a4 <HAL_UART_Receive_IT>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000313 	.word	0x20000313
 80013b8:	200002f5 	.word	0x200002f5
 80013bc:	200002f4 	.word	0x200002f4
 80013c0:	200002a0 	.word	0x200002a0
 80013c4:	200002fd 	.word	0x200002fd
 80013c8:	200002f8 	.word	0x200002f8
 80013cc:	20000300 	.word	0x20000300
 80013d0:	2000045c 	.word	0x2000045c

080013d4 <activate_date>:

// Funkcja sygnalizująca, że użytkownik ustawia nową datę na zegarku
void activate_date () {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'd' || uart_rx_data == 'D') {
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <activate_date+0x6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d003      	beq.n	80013e8 <activate_date+0x14>
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <activate_date+0x6c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b44      	cmp	r3, #68	; 0x44
 80013e6:	d10b      	bne.n	8001400 <activate_date+0x2c>

		time_activated_flag = 0;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <activate_date+0x70>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <activate_date+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <activate_date+0x78>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 1;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <activate_date+0x7c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
	}

	if(date_activated_flag) {
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <activate_date+0x7c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <activate_date+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <activate_date+0x78>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <activate_date+0x6c>)
 8001410:	7819      	ldrb	r1, [r3, #0]
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <activate_date+0x80>)
 8001414:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <activate_date+0x78>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <activate_date+0x78>)
 8001420:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <activate_date+0x78>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d102      	bne.n	8001430 <activate_date+0x5c>
			date_set_flag = 1;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <activate_date+0x84>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	4903      	ldr	r1, [pc, #12]	; (8001440 <activate_date+0x6c>)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <activate_date+0x88>)
 8001436:	f005 f9b5 	bl	80067a4 <HAL_UART_Receive_IT>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000313 	.word	0x20000313
 8001444:	200002fd 	.word	0x200002fd
 8001448:	200002f4 	.word	0x200002f4
 800144c:	200002a0 	.word	0x200002a0
 8001450:	200002f5 	.word	0x200002f5
 8001454:	200002f8 	.word	0x200002f8
 8001458:	200002ff 	.word	0x200002ff
 800145c:	2000045c 	.word	0x2000045c

08001460 <activate_alarm>:

// Funkcja sygnalizująca, że użytkownik ustawia nowy alarm
void activate_alarm () {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'a' || uart_rx_data == 'A') {
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <activate_alarm+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b61      	cmp	r3, #97	; 0x61
 800146a:	d003      	beq.n	8001474 <activate_alarm+0x14>
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <activate_alarm+0x6c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b41      	cmp	r3, #65	; 0x41
 8001472:	d10b      	bne.n	800148c <activate_alarm+0x2c>

		time_activated_flag = 0;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <activate_alarm+0x70>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 0;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <activate_alarm+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <activate_alarm+0x78>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 1;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <activate_alarm+0x7c>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <activate_alarm+0x7c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <activate_alarm+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <activate_alarm+0x78>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <activate_alarm+0x6c>)
 800149c:	7819      	ldrb	r1, [r3, #0]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <activate_alarm+0x80>)
 80014a0:	5499      	strb	r1, [r3, r2]

		++global_counter;
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <activate_alarm+0x78>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <activate_alarm+0x78>)
 80014ac:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <activate_alarm+0x78>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	d102      	bne.n	80014bc <activate_alarm+0x5c>
			alarm_set_flag = 1;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <activate_alarm+0x84>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	4903      	ldr	r1, [pc, #12]	; (80014cc <activate_alarm+0x6c>)
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <activate_alarm+0x88>)
 80014c2:	f005 f96f 	bl	80067a4 <HAL_UART_Receive_IT>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000313 	.word	0x20000313
 80014d0:	200002fd 	.word	0x200002fd
 80014d4:	200002f5 	.word	0x200002f5
 80014d8:	200002a0 	.word	0x200002a0
 80014dc:	200002f4 	.word	0x200002f4
 80014e0:	200002f8 	.word	0x200002f8
 80014e4:	20000310 	.word	0x20000310
 80014e8:	2000045c 	.word	0x2000045c

080014ec <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000303 	.word	0x20000303

0800150c <to_do_on_alarm>:

void to_do_on_alarm() {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <to_do_on_alarm+0x2c>)
 8001516:	f002 f9ed 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_on_msg, strlen(alarm_on_msg));
 800151a:	4808      	ldr	r0, [pc, #32]	; (800153c <to_do_on_alarm+0x30>)
 800151c:	f7fe fe60 	bl	80001e0 <strlen>
 8001520:	4603      	mov	r3, r0
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4905      	ldr	r1, [pc, #20]	; (800153c <to_do_on_alarm+0x30>)
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <to_do_on_alarm+0x34>)
 800152a:	f005 f8f6 	bl	800671a <HAL_UART_Transmit_IT>
	lcd_send_alarm_on_msg();
 800152e:	f000 fe13 	bl	8002158 <lcd_send_alarm_on_msg>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020000 	.word	0x40020000
 800153c:	20000000 	.word	0x20000000
 8001540:	2000045c 	.word	0x2000045c

08001544 <to_do_on_alarm_off>:

void to_do_on_alarm_off() {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_off_msg, strlen(alarm_off_msg));
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <to_do_on_alarm_off+0x20>)
 800154a:	f7fe fe49 	bl	80001e0 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	4903      	ldr	r1, [pc, #12]	; (8001564 <to_do_on_alarm_off+0x20>)
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <to_do_on_alarm_off+0x24>)
 8001558:	f005 f8df 	bl	800671a <HAL_UART_Transmit_IT>
	lcd_send_alarm_off_msg();
 800155c:	f000 fe16 	bl	800218c <lcd_send_alarm_off_msg>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000014 	.word	0x20000014
 8001568:	2000045c 	.word	0x2000045c

0800156c <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800157c:	d107      	bne.n	800158e <HAL_GPIO_EXTI_Callback+0x22>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2140      	movs	r1, #64	; 0x40
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001584:	f002 f9b6 	bl	80038f4 <HAL_GPIO_WritePin>
		alarm_flag = 0;
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_GPIO_EXTI_Callback+0x30>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
	}
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40020000 	.word	0x40020000
 800159c:	20000303 	.word	0x20000303

080015a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <MX_GPIO_Init+0x150>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <MX_GPIO_Init+0x150>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2160      	movs	r1, #96	; 0x60
 800160e:	4839      	ldr	r0, [pc, #228]	; (80016f4 <MX_GPIO_Init+0x154>)
 8001610:	f002 f970 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4837      	ldr	r0, [pc, #220]	; (80016f8 <MX_GPIO_Init+0x158>)
 800161a:	f002 f96b 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C2_Pin|C3_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001624:	4833      	ldr	r0, [pc, #204]	; (80016f4 <MX_GPIO_Init+0x154>)
 8001626:	f002 f965 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2110      	movs	r1, #16
 800162e:	4833      	ldr	r0, [pc, #204]	; (80016fc <MX_GPIO_Init+0x15c>)
 8001630:	f002 f960 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <MX_GPIO_Init+0x160>)
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	482b      	ldr	r0, [pc, #172]	; (80016f8 <MX_GPIO_Init+0x158>)
 800164a:	f001 ffb9 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin|C2_Pin|C3_Pin;
 800164e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4823      	ldr	r0, [pc, #140]	; (80016f4 <MX_GPIO_Init+0x154>)
 8001668:	f001 ffaa 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R4_Pin;
 800166c:	f246 0320 	movw	r3, #24608	; 0x6020
 8001670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001676:	2302      	movs	r3, #2
 8001678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <MX_GPIO_Init+0x15c>)
 8001682:	f001 ff9d 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C4_Pin;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4816      	ldr	r0, [pc, #88]	; (80016f8 <MX_GPIO_Init+0x158>)
 800169e:	f001 ff8f 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R3_Pin;
 80016a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ac:	2302      	movs	r3, #2
 80016ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <MX_GPIO_Init+0x154>)
 80016b8:	f001 ff82 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C1_Pin;
 80016bc:	2310      	movs	r3, #16
 80016be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	480a      	ldr	r0, [pc, #40]	; (80016fc <MX_GPIO_Init+0x15c>)
 80016d4:	f001 ff74 	bl	80035c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2028      	movs	r0, #40	; 0x28
 80016de:	f001 ff16 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e2:	2028      	movs	r0, #40	; 0x28
 80016e4:	f001 ff2f 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020400 	.word	0x40020400
 8001700:	10210000 	.word	0x10210000

08001704 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_I2C1_Init+0x50>)
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_I2C1_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_I2C1_Init+0x50>)
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_I2C1_Init+0x58>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_I2C1_Init+0x50>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_I2C1_Init+0x50>)
 8001742:	f002 f923 	bl	800398c <HAL_I2C_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800174c:	f000 ff04 	bl	8002558 <Error_Handler>
  }

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000314 	.word	0x20000314
 8001758:	40005400 	.word	0x40005400
 800175c:	000186a0 	.word	0x000186a0

08001760 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_I2C2_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C2_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_I2C2_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_I2C2_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_I2C2_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_I2C2_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_I2C2_Init+0x50>)
 800179e:	f002 f8f5 	bl	800398c <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f000 fed6 	bl	8002558 <Error_Handler>
  }

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000368 	.word	0x20000368
 80017b4:	40005800 	.word	0x40005800
 80017b8:	000186a0 	.word	0x000186a0

080017bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a3b      	ldr	r2, [pc, #236]	; (80018c8 <HAL_I2C_MspInit+0x10c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12d      	bne.n	800183a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_I2C_MspInit+0x110>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a39      	ldr	r2, [pc, #228]	; (80018cc <HAL_I2C_MspInit+0x110>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_I2C_MspInit+0x110>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	2312      	movs	r3, #18
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180c:	2304      	movs	r3, #4
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	482e      	ldr	r0, [pc, #184]	; (80018d0 <HAL_I2C_MspInit+0x114>)
 8001818:	f001 fed2 	bl	80035c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_I2C_MspInit+0x110>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_I2C_MspInit+0x110>)
 8001826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_I2C_MspInit+0x110>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001838:	e041      	b.n	80018be <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_I2C_MspInit+0x118>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d13c      	bne.n	80018be <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_I2C_MspInit+0x110>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_I2C_MspInit+0x110>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_I2C_MspInit+0x110>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001872:	2304      	movs	r3, #4
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4814      	ldr	r0, [pc, #80]	; (80018d0 <HAL_I2C_MspInit+0x114>)
 800187e:	f001 fe9f 	bl	80035c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001882:	2308      	movs	r3, #8
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001892:	2309      	movs	r3, #9
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <HAL_I2C_MspInit+0x114>)
 800189e:	f001 fe8f 	bl	80035c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_I2C_MspInit+0x110>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_I2C_MspInit+0x110>)
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_I2C_MspInit+0x110>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	bf00      	nop
 80018c0:	3730      	adds	r7, #48	; 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40005800 	.word	0x40005800

080018d8 <keypad4x4_Init>:
	"#",
	"D"
};

void keypad4x4_Init(Keypad_Wires_TypeDef  *KeypadWiringStruct)
{
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	KeypadStruct = *KeypadWiringStruct;
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <keypad4x4_Init+0x6c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// znalezienie pinów 4 kolumn
	keypad4x4_FindPins_positions();
 80018f8:	f000 f826 	bl	8001948 <keypad4x4_FindPins_positions>

	// ustawienie pinów wszystkich kolumn na stan wysoki
	HAL_GPIO_WritePin(KeypadStruct.C1_Port, KeypadStruct.C1_pin, GPIO_PIN_SET);
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <keypad4x4_Init+0x6c>)
 80018fe:	6918      	ldr	r0, [r3, #16]
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <keypad4x4_Init+0x6c>)
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	f001 fff4 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C2_Port, KeypadStruct.C2_pin, GPIO_PIN_SET);
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <keypad4x4_Init+0x6c>)
 800190e:	6958      	ldr	r0, [r3, #20]
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <keypad4x4_Init+0x6c>)
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	2201      	movs	r2, #1
 8001916:	4619      	mov	r1, r3
 8001918:	f001 ffec 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C3_Port, KeypadStruct.C3_pin, GPIO_PIN_SET);
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <keypad4x4_Init+0x6c>)
 800191e:	6998      	ldr	r0, [r3, #24]
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <keypad4x4_Init+0x6c>)
 8001922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001924:	2201      	movs	r2, #1
 8001926:	4619      	mov	r1, r3
 8001928:	f001 ffe4 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C4_Port, KeypadStruct.C4_pin, GPIO_PIN_SET);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <keypad4x4_Init+0x6c>)
 800192e:	69d8      	ldr	r0, [r3, #28]
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <keypad4x4_Init+0x6c>)
 8001932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001934:	2201      	movs	r2, #1
 8001936:	4619      	mov	r1, r3
 8001938:	f001 ffdc 	bl	80038f4 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bdb0      	pop	{r4, r5, r7, pc}
 8001944:	200002a4 	.word	0x200002a4

08001948 <keypad4x4_FindPins_positions>:

static void keypad4x4_FindPins_positions(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
	uint8_t idx=0;
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
	for(idx=0; idx<16; idx++)
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	e036      	b.n	80019c6 <keypad4x4_FindPins_positions+0x7e>
	{
		if(((KeypadStruct.C1_pin >> idx) & 0x0001) == 0x0001)
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <keypad4x4_FindPins_positions+0x90>)
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	461a      	mov	r2, r3
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	fa42 f303 	asr.w	r3, r2, r3
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <keypad4x4_FindPins_positions+0x2a>
		{
			ColumnsPositions[0] = idx;
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <keypad4x4_FindPins_positions+0x94>)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	7013      	strb	r3, [r2, #0]
		}
		if(((KeypadStruct.C2_pin >> idx) & 0x0001) == 0x0001)
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <keypad4x4_FindPins_positions+0x90>)
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	461a      	mov	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	fa42 f303 	asr.w	r3, r2, r3
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <keypad4x4_FindPins_positions+0x44>
		{
			ColumnsPositions[1] = idx;
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <keypad4x4_FindPins_positions+0x94>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	7053      	strb	r3, [r2, #1]
		}
		if(((KeypadStruct.C3_pin >> idx) & 0x0001) == 0x0001)
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <keypad4x4_FindPins_positions+0x90>)
 800198e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001990:	461a      	mov	r2, r3
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	fa42 f303 	asr.w	r3, r2, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <keypad4x4_FindPins_positions+0x5e>
		{
			ColumnsPositions[2] = idx;
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <keypad4x4_FindPins_positions+0x94>)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	7093      	strb	r3, [r2, #2]
		}
		if(((KeypadStruct.C4_pin >> idx) & 0x0001) == 0x0001)
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <keypad4x4_FindPins_positions+0x90>)
 80019a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019aa:	461a      	mov	r2, r3
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	fa42 f303 	asr.w	r3, r2, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <keypad4x4_FindPins_positions+0x78>
		{
			ColumnsPositions[3] = idx;
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <keypad4x4_FindPins_positions+0x94>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	70d3      	strb	r3, [r2, #3]
	for(idx=0; idx<16; idx++)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	3301      	adds	r3, #1
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d9c5      	bls.n	8001958 <keypad4x4_FindPins_positions+0x10>
		}
	}
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	200002a4 	.word	0x200002a4
 80019dc:	200002d4 	.word	0x200002d4

080019e0 <keypad4x4_ChangeColumn>:

//Function(3): Change colomn number
static void keypad4x4_ChangeColumn(uint8_t col_num)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	if(col_num == 1)
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d134      	bne.n	8001a5a <keypad4x4_ChangeColumn+0x7a>
	{
		//Set selected column
		KeypadStruct.C1_Port->OTYPER &= ~(1UL << ColumnsPositions[0]);
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	2301      	movs	r3, #1
 80019fe:	4093      	lsls	r3, r2
 8001a00:	43da      	mvns	r2, r3
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	400a      	ands	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]

		//Make other columns floating
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	461a      	mov	r2, r3
 8001a16:	2301      	movs	r3, #1
 8001a18:	fa03 f202 	lsl.w	r2, r3, r2
 8001a1c:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001a24:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	6859      	ldr	r1, [r3, #4]
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001a2c:	789b      	ldrb	r3, [r3, #2]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2301      	movs	r3, #1
 8001a32:	fa03 f202 	lsl.w	r2, r3, r2
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001a3e:	4b5d      	ldr	r3, [pc, #372]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	fa03 f202 	lsl.w	r2, r3, r2
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]
		//Make other columns floating
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
	}
}
 8001a58:	e0a6      	b.n	8001ba8 <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 2)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d134      	bne.n	8001aca <keypad4x4_ChangeColumn+0xea>
		KeypadStruct.C2_Port->OTYPER &= ~(1UL << ColumnsPositions[1]);
 8001a60:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	43da      	mvns	r2, r3
 8001a72:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	400a      	ands	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	2301      	movs	r3, #1
 8001a88:	fa03 f202 	lsl.w	r2, r3, r2
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001a94:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001a9c:	789b      	ldrb	r3, [r3, #2]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	fa03 f202 	lsl.w	r2, r3, r2
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001ab6:	78db      	ldrb	r3, [r3, #3]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2301      	movs	r3, #1
 8001abc:	fa03 f202 	lsl.w	r2, r3, r2
 8001ac0:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
}
 8001ac8:	e06e      	b.n	8001ba8 <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 3)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d134      	bne.n	8001b3a <keypad4x4_ChangeColumn+0x15a>
		KeypadStruct.C3_Port->OTYPER &= ~(1UL << ColumnsPositions[2]);
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001ad8:	789b      	ldrb	r3, [r3, #2]
 8001ada:	461a      	mov	r2, r3
 8001adc:	2301      	movs	r3, #1
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	2301      	movs	r3, #1
 8001af8:	fa03 f202 	lsl.w	r2, r3, r2
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2301      	movs	r3, #1
 8001b12:	fa03 f202 	lsl.w	r2, r3, r2
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001b26:	78db      	ldrb	r3, [r3, #3]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	fa03 f202 	lsl.w	r2, r3, r2
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]
}
 8001b38:	e036      	b.n	8001ba8 <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 4)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d133      	bne.n	8001ba8 <keypad4x4_ChangeColumn+0x1c8>
		KeypadStruct.C4_Port->OTYPER &= ~(1UL << ColumnsPositions[3]);
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001b48:	78db      	ldrb	r3, [r3, #3]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	43da      	mvns	r2, r3
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	400a      	ands	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	2301      	movs	r3, #1
 8001b68:	fa03 f202 	lsl.w	r2, r3, r2
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2301      	movs	r3, #1
 8001b82:	fa03 f202 	lsl.w	r2, r3, r2
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <keypad4x4_ChangeColumn+0x1d8>)
 8001b96:	789b      	ldrb	r3, [r3, #2]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	fa03 f202 	lsl.w	r2, r3, r2
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <keypad4x4_ChangeColumn+0x1d4>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	200002a4 	.word	0x200002a4
 8001bb8:	200002d4 	.word	0x200002d4

08001bbc <keypad4x4_ReadKeypad>:

void keypad4x4_ReadKeypad(bool keys[16])
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	// Ustawienie pierwszej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff ff0b 	bl	80019e0 <keypad4x4_ChangeColumn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001bca:	4b95      	ldr	r3, [pc, #596]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b94      	ldr	r3, [pc, #592]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001bd0:	8c1b      	ldrh	r3, [r3, #32]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f001 fe75 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001bf0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f001 fe65 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2201      	movne	r2, #1
 8001c08:	2200      	moveq	r2, #0
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001c0e:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f001 fe53 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3308      	adds	r3, #8
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2201      	movne	r2, #1
 8001c2c:	2200      	moveq	r2, #0
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001c32:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f001 fe41 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2201      	movne	r2, #1
 8001c50:	2200      	moveq	r2, #0
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

	// Ustawienie drugiej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(2);
 8001c56:	2002      	movs	r0, #2
 8001c58:	f7ff fec2 	bl	80019e0 <keypad4x4_ChangeColumn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001c5c:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c62:	8c1b      	ldrh	r3, [r3, #32]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f001 fe2c 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2201      	movne	r2, #1
 8001c7a:	2200      	moveq	r2, #0
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001c80:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001c86:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f001 fe1a 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3305      	adds	r3, #5
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2201      	movne	r2, #1
 8001c9e:	2200      	moveq	r2, #0
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001caa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f001 fe08 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3309      	adds	r3, #9
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2201      	movne	r2, #1
 8001cc2:	2200      	moveq	r2, #0
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f001 fdf6 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	330d      	adds	r3, #13
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2201      	movne	r2, #1
 8001ce6:	2200      	moveq	r2, #0
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]

	// Ustawienie trzeciej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(3);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7ff fe77 	bl	80019e0 <keypad4x4_ChangeColumn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001cf8:	8c1b      	ldrh	r3, [r3, #32]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f001 fde1 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3302      	adds	r3, #2
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	bf14      	ite	ne
 8001d0e:	2201      	movne	r2, #1
 8001d10:	2200      	moveq	r2, #0
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4610      	mov	r0, r2
 8001d22:	f001 fdcf 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2201      	movne	r2, #1
 8001d34:	2200      	moveq	r2, #0
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f001 fdbd 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	330a      	adds	r3, #10
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2201      	movne	r2, #1
 8001d58:	2200      	moveq	r2, #0
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f001 fdab 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	330e      	adds	r3, #14
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2201      	movne	r2, #1
 8001d7c:	2200      	moveq	r2, #0
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

	// Ustawienie czwartej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(4);
 8001d82:	2004      	movs	r0, #4
 8001d84:	f7ff fe2c 	bl	80019e0 <keypad4x4_ChangeColumn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001d8e:	8c1b      	ldrh	r3, [r3, #32]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f001 fd96 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2201      	movne	r2, #1
 8001da6:	2200      	moveq	r2, #0
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001db2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f001 fd84 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3307      	adds	r3, #7
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2201      	movne	r2, #1
 8001dca:	2200      	moveq	r2, #0
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f001 fd72 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	330b      	adds	r3, #11
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2201      	movne	r2, #1
 8001dee:	2200      	moveq	r2, #0
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <keypad4x4_ReadKeypad+0x264>)
 8001dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f001 fd60 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	330f      	adds	r3, #15
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2201      	movne	r2, #1
 8001e12:	2200      	moveq	r2, #0
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200002a4 	.word	0x200002a4

08001e24 <keypad4x4_GetChar>:

char* keypad4x4_GetChar(uint8_t keypad_char_index)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	return keypad_keys[keypad_char_index];
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <keypad4x4_GetChar+0x20>)
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000028 	.word	0x20000028

08001e48 <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	/* sekwencja z dokumentacji inicjalizująca wyświetlacz*/
	HAL_Delay(40);
 8001e4c:	2028      	movs	r0, #40	; 0x28
 8001e4e:	f001 fa61 	bl	8003314 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8001e52:	2030      	movs	r0, #48	; 0x30
 8001e54:	f000 f8c4 	bl	8001fe0 <lcd_write_command>
	HAL_Delay(5);
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f001 fa5b 	bl	8003314 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8001e5e:	2030      	movs	r0, #48	; 0x30
 8001e60:	f000 f8be 	bl	8001fe0 <lcd_write_command>
	HAL_Delay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f001 fa55 	bl	8003314 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8001e6a:	2030      	movs	r0, #48	; 0x30
 8001e6c:	f000 f8b8 	bl	8001fe0 <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f000 f8b5 	bl	8001fe0 <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8001e76:	200c      	movs	r0, #12
 8001e78:	f000 f8b2 	bl	8001fe0 <lcd_write_command>

	HAL_Delay(5);
 8001e7c:	2005      	movs	r0, #5
 8001e7e:	f001 fa49 	bl	8003314 <HAL_Delay>

	lcd_generate_own_chars();
 8001e82:	f000 f99f 	bl	80021c4 <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8001e86:	f000 f849 	bl	8001f1c <lcd_clear>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <lcd_display_refresh>:

// Funkcja odpowiedzialna za aktualizowanie i wyświetlanie na bieżąco wszystkich danych na wyświetlaczu LCD
void lcd_display_refresh() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af02      	add	r7, sp, #8

	get_Time();
 8001e96:	f001 f8bf 	bl	8003018 <get_Time>

	// wyświetlanie godziny na LCD
	lcd_first_line();
 8001e9a:	f000 f88c 	bl	8001fb6 <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <lcd_display_refresh+0x78>)
 8001ea0:	789b      	ldrb	r3, [r3, #2]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <lcd_display_refresh+0x78>)
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <lcd_display_refresh+0x78>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4916      	ldr	r1, [pc, #88]	; (8001f0c <lcd_display_refresh+0x7c>)
 8001eb4:	4816      	ldr	r0, [pc, #88]	; (8001f10 <lcd_display_refresh+0x80>)
 8001eb6:	f006 f8f3 	bl	80080a0 <siprintf>
	lcd_send_string(time_date_buffer);
 8001eba:	4815      	ldr	r0, [pc, #84]	; (8001f10 <lcd_display_refresh+0x80>)
 8001ebc:	f000 f934 	bl	8002128 <lcd_send_string>

	//wyświetlenie poziomu baterii
	battery_level = 100;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <lcd_display_refresh+0x84>)
 8001ec2:	2264      	movs	r2, #100	; 0x64
 8001ec4:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <lcd_display_refresh+0x84>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa3e 	bl	800234c <lcd_show_battery_level>

	// wyświetlanie daty na LCD
	lcd_second_line();
 8001ed0:	f000 f87b 	bl	8001fca <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <lcd_display_refresh+0x78>)
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <lcd_display_refresh+0x78>)
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <lcd_display_refresh+0x78>)
 8001ee2:	799b      	ldrb	r3, [r3, #6]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	490b      	ldr	r1, [pc, #44]	; (8001f18 <lcd_display_refresh+0x88>)
 8001eea:	4809      	ldr	r0, [pc, #36]	; (8001f10 <lcd_display_refresh+0x80>)
 8001eec:	f006 f8d8 	bl	80080a0 <siprintf>
	lcd_send_string(time_date_buffer);
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <lcd_display_refresh+0x80>)
 8001ef2:	f000 f919 	bl	8002128 <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_show_week_day_name(time.dayofweek);
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <lcd_display_refresh+0x78>)
 8001ef8:	78db      	ldrb	r3, [r3, #3]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f9da 	bl	80022b4 <lcd_show_week_day_name>
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000308 	.word	0x20000308
 8001f0c:	0800aee0 	.word	0x0800aee0
 8001f10:	200003bc 	.word	0x200003bc
 8001f14:	200003c9 	.word	0x200003c9
 8001f18:	0800aef0 	.word	0x0800aef0

08001f1c <lcd_clear>:

void lcd_clear(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f000 f85d 	bl	8001fe0 <lcd_write_command>
	HAL_Delay(5);
 8001f26:	2005      	movs	r0, #5
 8001f28:	f001 f9f4 	bl	8003314 <HAL_Delay>
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <lcd_back_light_on>:

// Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD
void lcd_back_light_on(void) {
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
	BL = 0x08;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <lcd_back_light_on+0x14>)
 8001f36:	2208      	movs	r2, #8
 8001f38:	701a      	strb	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	200003ca 	.word	0x200003ca

08001f48 <lcd_back_light_off>:

// Funkcja odpowiadająca za wyłączenie podświetlenia wyświetlacza LCD
void lcd_back_light_off(void) {
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	BL = 0x00;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <lcd_back_light_off+0x14>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	200003ca 	.word	0x200003ca

08001f60 <lcd_set_cursor>:

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	460a      	mov	r2, r1
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 8001f70:	79bb      	ldrb	r3, [r7, #6]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <lcd_set_cursor+0x24>
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d009      	beq.n	8001f96 <lcd_set_cursor+0x36>
 8001f82:	e011      	b.n	8001fa8 <lcd_set_cursor+0x48>

		case 0:
			col_number |= (0x80);
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f8a:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f826 	bl	8001fe0 <lcd_write_command>
			break;
 8001f94:	e008      	b.n	8001fa8 <lcd_set_cursor+0x48>

		case 1:
			col_number |= (0xc0);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001f9c:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f81d 	bl	8001fe0 <lcd_write_command>
			break;
 8001fa6:	bf00      	nop
	}

	HAL_Delay(5);
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f001 f9b3 	bl	8003314 <HAL_Delay>
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 8001fba:	2080      	movs	r0, #128	; 0x80
 8001fbc:	f000 f810 	bl	8001fe0 <lcd_write_command>
	HAL_Delay(5);
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f001 f9a7 	bl	8003314 <HAL_Delay>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 8001fce:	20c0      	movs	r0, #192	; 0xc0
 8001fd0:	f000 f806 	bl	8001fe0 <lcd_write_command>
	HAL_Delay(5);
 8001fd4:	2005      	movs	r0, #5
 8001fd6:	f001 f99d 	bl	8003314 <HAL_Delay>
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8001fea:	234e      	movs	r3, #78	; 0x4e
 8001fec:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		// EN = 1, RS = 0
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f023 030f 	bic.w	r3, r3, #15
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <lcd_write_command+0x8c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	b2db      	uxtb	r3, r3
 8002004:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	f023 030f 	bic.w	r3, r3, #15
 800200e:	b25a      	sxtb	r2, r3
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <lcd_write_command+0x8c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b25b      	sxtb	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		// EN = 1, RS = 0
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <lcd_write_command+0x8c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	b2db      	uxtb	r3, r3
 8002032:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	b25a      	sxtb	r2, r3
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <lcd_write_command+0x8c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b25b      	sxtb	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b25b      	sxtb	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	b299      	uxth	r1, r3
 800204c:	f107 0208 	add.w	r2, r7, #8
 8002050:	2364      	movs	r3, #100	; 0x64
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2304      	movs	r3, #4
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <lcd_write_command+0x90>)
 8002058:	f001 fdd0 	bl	8003bfc <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 800205c:	2005      	movs	r0, #5
 800205e:	f001 f959 	bl	8003314 <HAL_Delay>
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200003ca 	.word	0x200003ca
 8002070:	20000314 	.word	0x20000314

08002074 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af02      	add	r7, sp, #8
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 800207e:	234e      	movs	r3, #78	; 0x4e
 8002080:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 8002082:	2301      	movs	r3, #1
 8002084:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f023 030f 	bic.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	4313      	orrs	r3, r2
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <lcd_write_data+0xac>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	f023 030f 	bic.w	r3, r3, #15
 80020ac:	b25a      	sxtb	r2, r3
 80020ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b25a      	sxtb	r2, r3
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <lcd_write_data+0xac>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b25b      	sxtb	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		// EN = 1, RS = 1
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <lcd_write_data+0xac>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	b25a      	sxtb	r2, r3
 80020e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b25a      	sxtb	r2, r3
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <lcd_write_data+0xac>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	b299      	uxth	r1, r3
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	2364      	movs	r3, #100	; 0x64
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2304      	movs	r3, #4
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <lcd_write_data+0xb0>)
 800210c:	f001 fd76 	bl	8003bfc <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002110:	2005      	movs	r0, #5
 8002112:	f001 f8ff 	bl	8003314 <HAL_Delay>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200003ca 	.word	0x200003ca
 8002124:	20000314 	.word	0x20000314

08002128 <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	while(*string)
 8002130:	e006      	b.n	8002140 <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff9a 	bl	8002074 <lcd_write_data>
	while(*string)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f4      	bne.n	8002132 <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8002148:	2005      	movs	r0, #5
 800214a:	f001 f8e3 	bl	8003314 <HAL_Delay>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

	lcd_clear();
 800215c:	f7ff fede 	bl	8001f1c <lcd_clear>
	lcd_send_string("Wy");
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <lcd_send_alarm_on_msg+0x2c>)
 8002162:	f7ff ffe1 	bl	8002128 <lcd_send_string>
	lcd_send_own_char(3);
 8002166:	2003      	movs	r0, #3
 8002168:	f000 f854 	bl	8002214 <lcd_send_own_char>
	lcd_send_own_char(8);
 800216c:	2008      	movs	r0, #8
 800216e:	f000 f851 	bl	8002214 <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <lcd_send_alarm_on_msg+0x30>)
 8002174:	f7ff ffd8 	bl	8002128 <lcd_send_string>
	HAL_Delay(1000);
 8002178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800217c:	f001 f8ca 	bl	8003314 <HAL_Delay>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	0800af04 	.word	0x0800af04
 8002188:	0800af08 	.word	0x0800af08

0800218c <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0

	lcd_clear();
 8002190:	f7ff fec4 	bl	8001f1c <lcd_clear>
	lcd_send_string("Alarm wy");
 8002194:	4809      	ldr	r0, [pc, #36]	; (80021bc <lcd_send_alarm_off_msg+0x30>)
 8002196:	f7ff ffc7 	bl	8002128 <lcd_send_string>
	lcd_send_own_char(3);
 800219a:	2003      	movs	r0, #3
 800219c:	f000 f83a 	bl	8002214 <lcd_send_own_char>
	lcd_send_own_char(8);
 80021a0:	2008      	movs	r0, #8
 80021a2:	f000 f837 	bl	8002214 <lcd_send_own_char>
	lcd_send_string("czony");
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <lcd_send_alarm_off_msg+0x34>)
 80021a8:	f7ff ffbe 	bl	8002128 <lcd_send_string>
	HAL_Delay(2000);
 80021ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021b0:	f001 f8b0 	bl	8003314 <HAL_Delay>
	lcd_clear();
 80021b4:	f7ff feb2 	bl	8001f1c <lcd_clear>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	0800af18 	.word	0x0800af18
 80021c0:	0800af24 	.word	0x0800af24

080021c4 <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 80021ca:	2040      	movs	r0, #64	; 0x40
 80021cc:	f7ff ff08 	bl	8001fe0 <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	e015      	b.n	8002202 <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 80021d6:	2300      	movs	r3, #0
 80021d8:	71bb      	strb	r3, [r7, #6]
 80021da:	e00c      	b.n	80021f6 <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 80021dc:	79fa      	ldrb	r2, [r7, #7]
 80021de:	79bb      	ldrb	r3, [r7, #6]
 80021e0:	490b      	ldr	r1, [pc, #44]	; (8002210 <lcd_generate_own_chars+0x4c>)
 80021e2:	00d2      	lsls	r2, r2, #3
 80021e4:	440a      	add	r2, r1
 80021e6:	4413      	add	r3, r2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff42 	bl	8002074 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	3301      	adds	r3, #1
 80021f4:	71bb      	strb	r3, [r7, #6]
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	d9ef      	bls.n	80021dc <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	3301      	adds	r3, #1
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b07      	cmp	r3, #7
 8002206:	d9e6      	bls.n	80021d6 <lcd_generate_own_chars+0x12>
		}
	}
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000068 	.word	0x20000068

08002214 <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3b01      	subs	r3, #1
 8002222:	2b07      	cmp	r3, #7
 8002224:	d832      	bhi.n	800228c <lcd_send_own_char+0x78>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <lcd_send_own_char+0x18>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800224d 	.word	0x0800224d
 8002230:	08002255 	.word	0x08002255
 8002234:	0800225d 	.word	0x0800225d
 8002238:	08002265 	.word	0x08002265
 800223c:	0800226d 	.word	0x0800226d
 8002240:	08002275 	.word	0x08002275
 8002244:	0800227d 	.word	0x0800227d
 8002248:	08002285 	.word	0x08002285

		case 1:
			lcd_send_string("\x1");
 800224c:	4811      	ldr	r0, [pc, #68]	; (8002294 <lcd_send_own_char+0x80>)
 800224e:	f7ff ff6b 	bl	8002128 <lcd_send_string>
			break;
 8002252:	e01b      	b.n	800228c <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8002254:	4810      	ldr	r0, [pc, #64]	; (8002298 <lcd_send_own_char+0x84>)
 8002256:	f7ff ff67 	bl	8002128 <lcd_send_string>
			break;
 800225a:	e017      	b.n	800228c <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 800225c:	480f      	ldr	r0, [pc, #60]	; (800229c <lcd_send_own_char+0x88>)
 800225e:	f7ff ff63 	bl	8002128 <lcd_send_string>
			break;
 8002262:	e013      	b.n	800228c <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 8002264:	480e      	ldr	r0, [pc, #56]	; (80022a0 <lcd_send_own_char+0x8c>)
 8002266:	f7ff ff5f 	bl	8002128 <lcd_send_string>
			break;
 800226a:	e00f      	b.n	800228c <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <lcd_send_own_char+0x90>)
 800226e:	f7ff ff5b 	bl	8002128 <lcd_send_string>
			break;
 8002272:	e00b      	b.n	800228c <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <lcd_send_own_char+0x94>)
 8002276:	f7ff ff57 	bl	8002128 <lcd_send_string>
			break;
 800227a:	e007      	b.n	800228c <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <lcd_send_own_char+0x98>)
 800227e:	f7ff ff53 	bl	8002128 <lcd_send_string>
			break;
 8002282:	e003      	b.n	800228c <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <lcd_send_own_char+0x9c>)
 8002286:	f7ff ff4f 	bl	8002128 <lcd_send_string>
			break;
 800228a:	bf00      	nop
	}
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	0800af2c 	.word	0x0800af2c
 8002298:	0800af30 	.word	0x0800af30
 800229c:	0800af34 	.word	0x0800af34
 80022a0:	0800af38 	.word	0x0800af38
 80022a4:	0800af3c 	.word	0x0800af3c
 80022a8:	0800af40 	.word	0x0800af40
 80022ac:	0800af44 	.word	0x0800af44
 80022b0:	0800af48 	.word	0x0800af48

080022b4 <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 80022be:	210c      	movs	r1, #12
 80022c0:	2001      	movs	r0, #1
 80022c2:	f7ff fe4d 	bl	8001f60 <lcd_set_cursor>

	switch(day_number) {
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d82c      	bhi.n	8002328 <lcd_show_week_day_name+0x74>
 80022ce:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <lcd_show_week_day_name+0x20>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	080022f1 	.word	0x080022f1
 80022d8:	080022f9 	.word	0x080022f9
 80022dc:	08002301 	.word	0x08002301
 80022e0:	08002309 	.word	0x08002309
 80022e4:	08002311 	.word	0x08002311
 80022e8:	08002319 	.word	0x08002319
 80022ec:	08002321 	.word	0x08002321

		case 1:
			lcd_send_string("pon.");
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <lcd_show_week_day_name+0x7c>)
 80022f2:	f7ff ff19 	bl	8002128 <lcd_send_string>
			break;
 80022f6:	e017      	b.n	8002328 <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 80022f8:	480e      	ldr	r0, [pc, #56]	; (8002334 <lcd_show_week_day_name+0x80>)
 80022fa:	f7ff ff15 	bl	8002128 <lcd_send_string>
			break;
 80022fe:	e013      	b.n	8002328 <lcd_show_week_day_name+0x74>

		case 3:
			//lcd_send_own_char(6);
			lcd_send_string("sr.");
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <lcd_show_week_day_name+0x84>)
 8002302:	f7ff ff11 	bl	8002128 <lcd_send_string>
			break;
 8002306:	e00f      	b.n	8002328 <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <lcd_show_week_day_name+0x88>)
 800230a:	f7ff ff0d 	bl	8002128 <lcd_send_string>
			break;
 800230e:	e00b      	b.n	8002328 <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <lcd_show_week_day_name+0x8c>)
 8002312:	f7ff ff09 	bl	8002128 <lcd_send_string>
			break;
 8002316:	e007      	b.n	8002328 <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 8002318:	480a      	ldr	r0, [pc, #40]	; (8002344 <lcd_show_week_day_name+0x90>)
 800231a:	f7ff ff05 	bl	8002128 <lcd_send_string>
			break;
 800231e:	e003      	b.n	8002328 <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <lcd_show_week_day_name+0x94>)
 8002322:	f7ff ff01 	bl	8002128 <lcd_send_string>
			break;
 8002326:	bf00      	nop
	}
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	0800af4c 	.word	0x0800af4c
 8002334:	0800af54 	.word	0x0800af54
 8002338:	0800af58 	.word	0x0800af58
 800233c:	0800af5c 	.word	0x0800af5c
 8002340:	0800af64 	.word	0x0800af64
 8002344:	0800af68 	.word	0x0800af68
 8002348:	0800af70 	.word	0x0800af70

0800234c <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 8002356:	210b      	movs	r1, #11
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff fe01 	bl	8001f60 <lcd_set_cursor>
	lcd_send_own_char(6);
 800235e:	2006      	movs	r0, #6
 8002360:	f7ff ff58 	bl	8002214 <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <lcd_show_battery_level+0x40>)
 800236c:	4618      	mov	r0, r3
 800236e:	f005 fe97 	bl	80080a0 <siprintf>

	lcd_send_string(battery_level);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fed6 	bl	8002128 <lcd_send_string>
	lcd_send_string("%");
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <lcd_show_battery_level+0x44>)
 800237e:	f7ff fed3 	bl	8002128 <lcd_send_string>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	0800af78 	.word	0x0800af78
 8002390:	0800af7c 	.word	0x0800af7c

08002394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002398:	f000 ff4a 	bl	8003230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239c:	f000 f83a 	bl	8002414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a0:	f7ff f8fe 	bl	80015a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80023a4:	f7ff f9ae 	bl	8001704 <MX_I2C1_Init>
  MX_RTC_Init();
 80023a8:	f000 f8de 	bl	8002568 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80023ac:	f000 fe9c 	bl	80030e8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80023b0:	f7ff f9d6 	bl	8001760 <MX_I2C2_Init>
  MX_TIM1_Init();
 80023b4:	f000 fd2e 	bl	8002e14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2140      	movs	r1, #64	; 0x40
 80023bc:	4811      	ldr	r0, [pc, #68]	; (8002404 <main+0x70>)
 80023be:	f001 fa99 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2120      	movs	r1, #32
 80023c6:	480f      	ldr	r0, [pc, #60]	; (8002404 <main+0x70>)
 80023c8:	f001 fa94 	bl	80038f4 <HAL_GPIO_WritePin>

	/****************** LCD BEGIN ******************/
	lcd_init();
 80023cc:	f7ff fd3c 	bl	8001e48 <lcd_init>
	/****************** LCD END ******************/

	//set_Time(0, 0, 10, 3, 25, 11, 20);
	rtc_set_time();	// Wpisanie do rejestru RTC, czasu i daty pobranych z DS3231, aby czas w RTC był aktualny
 80023d0:	f7fe fde2 	bl	8000f98 <rtc_set_time>

	/****************** UART BEGIN ******************/
	// Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
	// Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback HAL_UART_RxCpltCallback.
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	490c      	ldr	r1, [pc, #48]	; (8002408 <main+0x74>)
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <main+0x78>)
 80023da:	f004 f9e3 	bl	80067a4 <HAL_UART_Receive_IT>

	// wystąpienie przerwania po ukończeniu transmisji danych (TC - Transmition Complete)
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <main+0x78>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <main+0x78>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ec:	60da      	str	r2, [r3, #12]
	/****************** UART END ******************/

	/****************** TIMER BEGIN ******************/
	HAL_TIM_Base_Start_IT(&htim1);
 80023ee:	4808      	ldr	r0, [pc, #32]	; (8002410 <main+0x7c>)
 80023f0:	f003 fee3 	bl	80061ba <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		to_do_after_wake_up_from_standby();
 80023f4:	f000 f972 	bl	80026dc <to_do_after_wake_up_from_standby>

		to_do_before_going_to_standby();
 80023f8:	f000 fa12 	bl	8002820 <to_do_before_going_to_standby>

		go_to_standby();
 80023fc:	f000 fbd0 	bl	8002ba0 <go_to_standby>
		to_do_after_wake_up_from_standby();
 8002400:	e7f8      	b.n	80023f4 <main+0x60>
 8002402:	bf00      	nop
 8002404:	40020000 	.word	0x40020000
 8002408:	20000313 	.word	0x20000313
 800240c:	2000045c 	.word	0x2000045c
 8002410:	2000041c 	.word	0x2000041c

08002414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b098      	sub	sp, #96	; 0x60
 8002418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800241e:	2230      	movs	r2, #48	; 0x30
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fff0 	bl	8007408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <SystemClock_Config+0x100>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <SystemClock_Config+0x100>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	; 0x40
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <SystemClock_Config+0x100>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <SystemClock_Config+0x104>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <SystemClock_Config+0x104>)
 8002472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <SystemClock_Config+0x104>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002484:	230a      	movs	r3, #10
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002488:	2301      	movs	r3, #1
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800248c:	2310      	movs	r3, #16
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002490:	2301      	movs	r3, #1
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002494:	2302      	movs	r3, #2
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002498:	2300      	movs	r3, #0
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800249c:	2308      	movs	r3, #8
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80024a0:	233c      	movs	r3, #60	; 0x3c
 80024a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a4:	2302      	movs	r3, #2
 80024a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024a8:	2304      	movs	r3, #4
 80024aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fbdd 	bl	8004c70 <HAL_RCC_OscConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80024bc:	f000 f84c 	bl	8002558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c0:	230f      	movs	r3, #15
 80024c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024d6:	f107 031c 	add.w	r3, r7, #28
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 fe37 	bl	8005150 <HAL_RCC_ClockConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80024e8:	f000 f836 	bl	8002558 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024ec:	2302      	movs	r3, #2
 80024ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fff4 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002506:	f000 f827 	bl	8002558 <Error_Handler>
  }
}
 800250a:	bf00      	nop
 800250c:	3760      	adds	r7, #96	; 0x60
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart2, a nie coś innego
	if (huart->Instance == USART2) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_UART_RxCpltCallback+0x30>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10a      	bne.n	8002544 <HAL_UART_RxCpltCallback+0x28>
		activate_time();
 800252e:	f7fe ff0b 	bl	8001348 <activate_time>
		activate_date();
 8002532:	f7fe ff4f 	bl	80013d4 <activate_date>
		activate_alarm();
 8002536:	f7fe ff93 	bl	8001460 <activate_alarm>

		// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800253a:	2201      	movs	r2, #1
 800253c:	4904      	ldr	r1, [pc, #16]	; (8002550 <HAL_UART_RxCpltCallback+0x34>)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <HAL_UART_RxCpltCallback+0x38>)
 8002540:	f004 f930 	bl	80067a4 <HAL_UART_Receive_IT>
	}

}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40004400 	.word	0x40004400
 8002550:	20000313 	.word	0x20000313
 8002554:	2000045c 	.word	0x2000045c

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b090      	sub	sp, #64	; 0x40
 800256c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002582:	463b      	mov	r3, r7
 8002584:	2228      	movs	r2, #40	; 0x28
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f004 ff3d 	bl	8007408 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <MX_RTC_Init+0x124>)
 8002590:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <MX_RTC_Init+0x128>)
 8002592:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <MX_RTC_Init+0x124>)
 8002596:	2200      	movs	r2, #0
 8002598:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800259a:	4b3c      	ldr	r3, [pc, #240]	; (800268c <MX_RTC_Init+0x124>)
 800259c:	227f      	movs	r2, #127	; 0x7f
 800259e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80025a0:	4b3a      	ldr	r3, [pc, #232]	; (800268c <MX_RTC_Init+0x124>)
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <MX_RTC_Init+0x124>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <MX_RTC_Init+0x124>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <MX_RTC_Init+0x124>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025b8:	4834      	ldr	r0, [pc, #208]	; (800268c <MX_RTC_Init+0x124>)
 80025ba:	f003 f883 	bl	80056c4 <HAL_RTC_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80025c4:	f7ff ffc8 	bl	8002558 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x46;
 80025ce:	2346      	movs	r3, #70	; 0x46
 80025d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 80025d4:	2345      	movs	r3, #69	; 0x45
 80025d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80025e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e6:	2201      	movs	r2, #1
 80025e8:	4619      	mov	r1, r3
 80025ea:	4828      	ldr	r0, [pc, #160]	; (800268c <MX_RTC_Init+0x124>)
 80025ec:	f003 f8fb 	bl	80057e6 <HAL_RTC_SetTime>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80025f6:	f7ff ffaf 	bl	8002558 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 8002600:	2310      	movs	r3, #16
 8002602:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x24;
 8002606:	2324      	movs	r3, #36	; 0x24
 8002608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 800260c:	2320      	movs	r3, #32
 800260e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002616:	2201      	movs	r2, #1
 8002618:	4619      	mov	r1, r3
 800261a:	481c      	ldr	r0, [pc, #112]	; (800268c <MX_RTC_Init+0x124>)
 800261c:	f003 f9a0 	bl	8005960 <HAL_RTC_SetDate>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002626:	f7ff ff97 	bl	8002558 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 800262a:	2319      	movs	r3, #25
 800262c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 800262e:	2323      	movs	r3, #35	; 0x23
 8002630:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8002632:	2310      	movs	r3, #16
 8002634:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 800264e:	2312      	movs	r3, #18
 8002650:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800265a:	463b      	mov	r3, r7
 800265c:	2201      	movs	r2, #1
 800265e:	4619      	mov	r1, r3
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <MX_RTC_Init+0x124>)
 8002662:	f003 fa25 	bl	8005ab0 <HAL_RTC_SetAlarm_IT>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800266c:	f7ff ff74 	bl	8002558 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002670:	2200      	movs	r2, #0
 8002672:	2105      	movs	r1, #5
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_RTC_Init+0x124>)
 8002676:	f003 fc0b 	bl	8005e90 <HAL_RTCEx_SetWakeUpTimer_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8002680:	f7ff ff6a 	bl	8002558 <Error_Handler>
  }

}
 8002684:	bf00      	nop
 8002686:	3740      	adds	r7, #64	; 0x40
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200003cc 	.word	0x200003cc
 8002690:	40002800 	.word	0x40002800

08002694 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RTC_MspInit+0x40>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d112      	bne.n	80026cc <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_RTC_MspInit+0x44>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 ff2c 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80026b6:	2003      	movs	r0, #3
 80026b8:	f000 ff45 	bl	8003546 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2029      	movs	r0, #41	; 0x29
 80026c2:	f000 ff24 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80026c6:	2029      	movs	r0, #41	; 0x29
 80026c8:	f000 ff3d 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40002800 	.word	0x40002800
 80026d8:	42470e3c 	.word	0x42470e3c

080026dc <to_do_after_wake_up_from_standby>:
bool keypadSwitches[16] = {0};
Keypad_Wires_TypeDef keypadStruct;
/*	keypad	*/


void to_do_after_wake_up_from_standby(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0

	lcd_back_light_on();
 80026e2:	f7ff fc25 	bl	8001f30 <lcd_back_light_on>

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 80026e6:	4b45      	ldr	r3, [pc, #276]	; (80027fc <to_do_after_wake_up_from_standby+0x120>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <to_do_after_wake_up_from_standby+0x24>

		while (alarm_flag) {
 80026ee:	e001      	b.n	80026f4 <to_do_after_wake_up_from_standby+0x18>
			to_do_on_alarm();
 80026f0:	f7fe ff0c 	bl	800150c <to_do_on_alarm>
		while (alarm_flag) {
 80026f4:	4b41      	ldr	r3, [pc, #260]	; (80027fc <to_do_after_wake_up_from_standby+0x120>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f9      	bne.n	80026f0 <to_do_after_wake_up_from_standby+0x14>
		}

		to_do_on_alarm_off();
 80026fc:	f7fe ff22 	bl	8001544 <to_do_on_alarm_off>

	// Flaga SBF (Standby flag) mówi o tym, czy MCU wybudził się ze stanu standby
	// SBF = 1 -> MCU wybudził się ze standby

	// na początku sprawdzamy czy nie jest ustawiona flaga SBF
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <to_do_after_wake_up_from_standby+0x124>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d13a      	bne.n	8002782 <to_do_after_wake_up_from_standby+0xa6>

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);	// wyszyszczenie flagi SBF, aby upewnić się że nie jesteśmy w trybie stanby
 800270c:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <to_do_after_wake_up_from_standby+0x124>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <to_do_after_wake_up_from_standby+0x124>)
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	6013      	str	r3, [r2, #0]

	  for(int i=0; i<15; i++) {
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	e009      	b.n	8002732 <to_do_after_wake_up_from_standby+0x56>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 800271e:	2120      	movs	r1, #32
 8002720:	4838      	ldr	r0, [pc, #224]	; (8002804 <to_do_after_wake_up_from_standby+0x128>)
 8002722:	f001 f900 	bl	8003926 <HAL_GPIO_TogglePin>
		  HAL_Delay(80);
 8002726:	2050      	movs	r0, #80	; 0x50
 8002728:	f000 fdf4 	bl	8003314 <HAL_Delay>
	  for(int i=0; i<15; i++) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3301      	adds	r3, #1
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0e      	cmp	r3, #14
 8002736:	ddf2      	ble.n	800271e <to_do_after_wake_up_from_standby+0x42>
	  }

	  if(!alarm_flag) {
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <to_do_after_wake_up_from_standby+0x120>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d118      	bne.n	8002772 <to_do_after_wake_up_from_standby+0x96>
		  lcd_clear();
 8002740:	f7ff fbec 	bl	8001f1c <lcd_clear>
		  lcd_set_cursor(0, 2);
 8002744:	2102      	movs	r1, #2
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff fc0a 	bl	8001f60 <lcd_set_cursor>
		  lcd_send_string("Wake up from");
 800274c:	482e      	ldr	r0, [pc, #184]	; (8002808 <to_do_after_wake_up_from_standby+0x12c>)
 800274e:	f7ff fceb 	bl	8002128 <lcd_send_string>
		  lcd_second_line();
 8002752:	f7ff fc3a 	bl	8001fca <lcd_second_line>
		  lcd_set_cursor(1, 2);
 8002756:	2102      	movs	r1, #2
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff fc01 	bl	8001f60 <lcd_set_cursor>
		  lcd_send_string("STANDBY MODE");
 800275e:	482b      	ldr	r0, [pc, #172]	; (800280c <to_do_after_wake_up_from_standby+0x130>)
 8002760:	f7ff fce2 	bl	8002128 <lcd_send_string>
		  HAL_Delay(1000);
 8002764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002768:	f000 fdd4 	bl	8003314 <HAL_Delay>
		  lcd_clear();
 800276c:	f7ff fbd6 	bl	8001f1c <lcd_clear>
 8002770:	e001      	b.n	8002776 <to_do_after_wake_up_from_standby+0x9a>
	  } else {
		  to_do_on_alarm();
 8002772:	f7fe fecb 	bl	800150c <to_do_on_alarm>
	  }

	  // Wyłączenie pinu WAKE UP
	  HAL_PWR_DisableWakeUpPin(WakeUp_PIN_Pin);
 8002776:	2001      	movs	r0, #1
 8002778:	f002 fa4e 	bl	8004c18 <HAL_PWR_DisableWakeUpPin>

	  // Wyłączenie Wake up timer
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800277c:	4824      	ldr	r0, [pc, #144]	; (8002810 <to_do_after_wake_up_from_standby+0x134>)
 800277e:	f003 fc47 	bl	8006010 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	// Keypad ports
	keypadStruct.R1_Port = R1_GPIO_Port;
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <to_do_after_wake_up_from_standby+0x13c>)
 8002786:	601a      	str	r2, [r3, #0]
	keypadStruct.R2_Port = R2_GPIO_Port;
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 800278a:	4a23      	ldr	r2, [pc, #140]	; (8002818 <to_do_after_wake_up_from_standby+0x13c>)
 800278c:	605a      	str	r2, [r3, #4]
	keypadStruct.R3_Port = R3_GPIO_Port;
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <to_do_after_wake_up_from_standby+0x128>)
 8002792:	609a      	str	r2, [r3, #8]
	keypadStruct.R4_Port = R4_GPIO_Port;
 8002794:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 8002796:	4a20      	ldr	r2, [pc, #128]	; (8002818 <to_do_after_wake_up_from_standby+0x13c>)
 8002798:	60da      	str	r2, [r3, #12]

	keypadStruct.C1_Port = C1_GPIO_Port;
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 800279c:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <to_do_after_wake_up_from_standby+0x13c>)
 800279e:	611a      	str	r2, [r3, #16]
	keypadStruct.C2_Port = C2_GPIO_Port;
 80027a0:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027a2:	4a18      	ldr	r2, [pc, #96]	; (8002804 <to_do_after_wake_up_from_standby+0x128>)
 80027a4:	615a      	str	r2, [r3, #20]
	keypadStruct.C3_Port = C3_GPIO_Port;
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <to_do_after_wake_up_from_standby+0x128>)
 80027aa:	619a      	str	r2, [r3, #24]
	keypadStruct.C4_Port = C4_GPIO_Port;
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <to_do_after_wake_up_from_standby+0x140>)
 80027b0:	61da      	str	r2, [r3, #28]

	// Keypad pins
	keypadStruct.R1_pin = R1_Pin;
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b8:	841a      	strh	r2, [r3, #32]
	keypadStruct.R2_pin = R2_Pin;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027c0:	845a      	strh	r2, [r3, #34]	; 0x22
	keypadStruct.R3_pin = R3_Pin;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c8:	849a      	strh	r2, [r3, #36]	; 0x24
	keypadStruct.R4_pin = R4_Pin;
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027cc:	2220      	movs	r2, #32
 80027ce:	84da      	strh	r2, [r3, #38]	; 0x26

	keypadStruct.C1_pin = C1_Pin;
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027d2:	2210      	movs	r2, #16
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
	keypadStruct.C2_pin = C2_Pin;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
	keypadStruct.C3_pin = C3_Pin;
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e4:	859a      	strh	r2, [r3, #44]	; 0x2c
	keypadStruct.C4_pin = C4_Pin;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	85da      	strh	r2, [r3, #46]	; 0x2e

	keypad4x4_Init(&keypadStruct);
 80027ec:	4809      	ldr	r0, [pc, #36]	; (8002814 <to_do_after_wake_up_from_standby+0x138>)
 80027ee:	f7ff f873 	bl	80018d8 <keypad4x4_Init>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000303 	.word	0x20000303
 8002800:	40007000 	.word	0x40007000
 8002804:	40020000 	.word	0x40020000
 8002808:	0800af80 	.word	0x0800af80
 800280c:	0800af90 	.word	0x0800af90
 8002810:	200003cc 	.word	0x200003cc
 8002814:	200003ec 	.word	0x200003ec
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800

08002820 <to_do_before_going_to_standby>:

void to_do_before_going_to_standby(void) {
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b095      	sub	sp, #84	; 0x54
 8002824:	af04      	add	r7, sp, #16

	for(int i=0; i<300; i++) {
 8002826:	2300      	movs	r3, #0
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282a:	e18a      	b.n	8002b42 <to_do_before_going_to_standby+0x322>

		keypad4x4_ReadKeypad(keypadSwitches);
 800282c:	48c9      	ldr	r0, [pc, #804]	; (8002b54 <to_do_before_going_to_standby+0x334>)
 800282e:	f7ff f9c5 	bl	8001bbc <keypad4x4_ReadKeypad>

		for(int j=0; j<16; j++) {
 8002832:	2300      	movs	r3, #0
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
 8002836:	e01f      	b.n	8002878 <to_do_before_going_to_standby+0x58>

			if(keypadSwitches[j]) {
 8002838:	4ac6      	ldr	r2, [pc, #792]	; (8002b54 <to_do_before_going_to_standby+0x334>)
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <to_do_before_going_to_standby+0x52>
				lcd_clear();
 8002844:	f7ff fb6a 	bl	8001f1c <lcd_clear>
				HAL_Delay(5);
 8002848:	2005      	movs	r0, #5
 800284a:	f000 fd63 	bl	8003314 <HAL_Delay>
				lcd_send_string("Przycisk: ");
 800284e:	48c2      	ldr	r0, [pc, #776]	; (8002b58 <to_do_before_going_to_standby+0x338>)
 8002850:	f7ff fc6a 	bl	8002128 <lcd_send_string>
				lcd_send_string(keypad4x4_GetChar(j));
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fae3 	bl	8001e24 <keypad4x4_GetChar>
 800285e:	4603      	mov	r3, r0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fc61 	bl	8002128 <lcd_send_string>
				delay(1000);
 8002866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286a:	f000 fc25 	bl	80030b8 <delay>
				lcd_clear();
 800286e:	f7ff fb55 	bl	8001f1c <lcd_clear>
		for(int j=0; j<16; j++) {
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	3301      	adds	r3, #1
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	2b0f      	cmp	r3, #15
 800287c:	dddc      	ble.n	8002838 <to_do_before_going_to_standby+0x18>
			}

		}

		lcd_display_refresh();
 800287e:	f7ff fb07 	bl	8001e90 <lcd_display_refresh>

		// wykonaj jeśli zaczął się alarm
		if(alarm_flag) {
 8002882:	4bb6      	ldr	r3, [pc, #728]	; (8002b5c <to_do_before_going_to_standby+0x33c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <to_do_before_going_to_standby+0x7c>

			while (alarm_flag) {
 800288a:	e001      	b.n	8002890 <to_do_before_going_to_standby+0x70>
				to_do_on_alarm();
 800288c:	f7fe fe3e 	bl	800150c <to_do_on_alarm>
			while (alarm_flag) {
 8002890:	4bb2      	ldr	r3, [pc, #712]	; (8002b5c <to_do_before_going_to_standby+0x33c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <to_do_before_going_to_standby+0x6c>
			}

			to_do_on_alarm_off();
 8002898:	f7fe fe54 	bl	8001544 <to_do_on_alarm_off>
		}

		// wykonaj jeśli użytkownik ustawił nową godzinę
		if(time_set_flag) {
 800289c:	4bb0      	ldr	r3, [pc, #704]	; (8002b60 <to_do_before_going_to_standby+0x340>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d079      	beq.n	8002998 <to_do_before_going_to_standby+0x178>

			uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
			char new_time_details_msg[12];

			new_sec = time.seconds;
 80028a4:	4baf      	ldr	r3, [pc, #700]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			new_min = global_buffer[2];
 80028ac:	4bae      	ldr	r3, [pc, #696]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 80028ae:	789b      	ldrb	r3, [r3, #2]
 80028b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			new_hour = global_buffer[1];
 80028b4:	4bac      	ldr	r3, [pc, #688]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 80028b6:	785b      	ldrb	r3, [r3, #1]
 80028b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			new_dow = time.dayofweek;
 80028bc:	4ba9      	ldr	r3, [pc, #676]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			new_dom = time.dayofmonth;
 80028c4:	4ba7      	ldr	r3, [pc, #668]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			new_month = time.month;
 80028cc:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80028ce:	795b      	ldrb	r3, [r3, #5]
 80028d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			new_year = time.year;
 80028d4:	4ba3      	ldr	r3, [pc, #652]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80028d6:	799b      	ldrb	r3, [r3, #6]
 80028d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

			if( (new_hour > 23 || new_hour < 0 || new_min > 59 || new_min < 0) && time_set_flag) {
 80028dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80028e0:	2b17      	cmp	r3, #23
 80028e2:	d803      	bhi.n	80028ec <to_do_before_going_to_standby+0xcc>
 80028e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80028e8:	2b3b      	cmp	r3, #59	; 0x3b
 80028ea:	d91f      	bls.n	800292c <to_do_before_going_to_standby+0x10c>
 80028ec:	4b9c      	ldr	r3, [pc, #624]	; (8002b60 <to_do_before_going_to_standby+0x340>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <to_do_before_going_to_standby+0x10c>
				lcd_clear();
 80028f4:	f7ff fb12 	bl	8001f1c <lcd_clear>
				lcd_set_cursor(0, 2);
 80028f8:	2102      	movs	r1, #2
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7ff fb30 	bl	8001f60 <lcd_set_cursor>
				lcd_send_string("B");
 8002900:	489a      	ldr	r0, [pc, #616]	; (8002b6c <to_do_before_going_to_standby+0x34c>)
 8002902:	f7ff fc11 	bl	8002128 <lcd_send_string>
				lcd_send_own_char(3);
 8002906:	2003      	movs	r0, #3
 8002908:	f7ff fc84 	bl	8002214 <lcd_send_own_char>
				lcd_send_own_char(2);
 800290c:	2002      	movs	r0, #2
 800290e:	f7ff fc81 	bl	8002214 <lcd_send_own_char>
				lcd_send_string("dny czas!");
 8002912:	4897      	ldr	r0, [pc, #604]	; (8002b70 <to_do_before_going_to_standby+0x350>)
 8002914:	f7ff fc08 	bl	8002128 <lcd_send_string>
				HAL_Delay(1000);
 8002918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800291c:	f000 fcfa 	bl	8003314 <HAL_Delay>
				lcd_clear();
 8002920:	f7ff fafc 	bl	8001f1c <lcd_clear>

				time_set_flag = 0;
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <to_do_before_going_to_standby+0x340>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e035      	b.n	8002998 <to_do_before_going_to_standby+0x178>
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 800292c:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8002930:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002934:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002938:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800293c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	f000 fb12 	bl	8002f78 <set_Time>

				lcd_clear();
 8002954:	f7ff fae2 	bl	8001f1c <lcd_clear>
				sprintf(new_time_details_msg, "%02d:%02d:%02d", new_hour, new_min, new_sec);
 8002958:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800295c:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002964:	f107 0018 	add.w	r0, r7, #24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	460b      	mov	r3, r1
 800296c:	4981      	ldr	r1, [pc, #516]	; (8002b74 <to_do_before_going_to_standby+0x354>)
 800296e:	f005 fb97 	bl	80080a0 <siprintf>
				lcd_send_string("Ustawiony czas:");
 8002972:	4881      	ldr	r0, [pc, #516]	; (8002b78 <to_do_before_going_to_standby+0x358>)
 8002974:	f7ff fbd8 	bl	8002128 <lcd_send_string>
				lcd_second_line();
 8002978:	f7ff fb27 	bl	8001fca <lcd_second_line>
				lcd_send_string(new_time_details_msg);
 800297c:	f107 0318 	add.w	r3, r7, #24
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fbd1 	bl	8002128 <lcd_send_string>
				HAL_Delay(2000);
 8002986:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800298a:	f000 fcc3 	bl	8003314 <HAL_Delay>
				lcd_clear();
 800298e:	f7ff fac5 	bl	8001f1c <lcd_clear>

				time_set_flag = 0;
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <to_do_before_going_to_standby+0x340>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
			}

		}

		// wykonaj jeśli użytkownik ustawił nową datę
		if(date_set_flag) {
 8002998:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <to_do_before_going_to_standby+0x35c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 808a 	beq.w	8002ab6 <to_do_before_going_to_standby+0x296>

			uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
			char new_date_details_msg[12];

			new_sec = time.seconds;
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			new_min = time.minutes;
 80029aa:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			new_hour = time.hour;
 80029b2:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <to_do_before_going_to_standby+0x344>)
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			new_dow = global_buffer[1];
 80029ba:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			new_dom = global_buffer[2];
 80029c2:	4b69      	ldr	r3, [pc, #420]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 80029c4:	789b      	ldrb	r3, [r3, #2]
 80029c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			new_month = global_buffer[3];
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			new_year = global_buffer[4];
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

			if( (new_dow > 7 || new_dow < 1 || new_dom > 31 || new_dom < 1 || new_month > 12 || new_month < 1) && date_set_flag) {
 80029da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d813      	bhi.n	8002a0a <to_do_before_going_to_standby+0x1ea>
 80029e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00f      	beq.n	8002a0a <to_do_before_going_to_standby+0x1ea>
 80029ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029ee:	2b1f      	cmp	r3, #31
 80029f0:	d80b      	bhi.n	8002a0a <to_do_before_going_to_standby+0x1ea>
 80029f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <to_do_before_going_to_standby+0x1ea>
 80029fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d803      	bhi.n	8002a0a <to_do_before_going_to_standby+0x1ea>
 8002a02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <to_do_before_going_to_standby+0x22a>
 8002a0a:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <to_do_before_going_to_standby+0x35c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01b      	beq.n	8002a4a <to_do_before_going_to_standby+0x22a>
				lcd_clear();
 8002a12:	f7ff fa83 	bl	8001f1c <lcd_clear>
				lcd_set_cursor(0, 2);
 8002a16:	2102      	movs	r1, #2
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff faa1 	bl	8001f60 <lcd_set_cursor>
				lcd_send_string("B");
 8002a1e:	4853      	ldr	r0, [pc, #332]	; (8002b6c <to_do_before_going_to_standby+0x34c>)
 8002a20:	f7ff fb82 	bl	8002128 <lcd_send_string>
				lcd_send_own_char(3);
 8002a24:	2003      	movs	r0, #3
 8002a26:	f7ff fbf5 	bl	8002214 <lcd_send_own_char>
				lcd_send_own_char(2);
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f7ff fbf2 	bl	8002214 <lcd_send_own_char>
				lcd_send_string("dna data!");
 8002a30:	4853      	ldr	r0, [pc, #332]	; (8002b80 <to_do_before_going_to_standby+0x360>)
 8002a32:	f7ff fb79 	bl	8002128 <lcd_send_string>
				HAL_Delay(1000);
 8002a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a3a:	f000 fc6b 	bl	8003314 <HAL_Delay>
				lcd_clear();
 8002a3e:	f7ff fa6d 	bl	8001f1c <lcd_clear>

				date_set_flag = 0;
 8002a42:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <to_do_before_going_to_standby+0x35c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e035      	b.n	8002ab6 <to_do_before_going_to_standby+0x296>
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 8002a4a:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 8002a4e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002a52:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002a56:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 8002a5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	f000 fa83 	bl	8002f78 <set_Time>

				lcd_clear();
 8002a72:	f7ff fa53 	bl	8001f1c <lcd_clear>
				sprintf(new_date_details_msg, "%02d-%02d-20%02d", new_dom, new_month, new_year);
 8002a76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002a7a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002a7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a82:	f107 000c 	add.w	r0, r7, #12
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	493e      	ldr	r1, [pc, #248]	; (8002b84 <to_do_before_going_to_standby+0x364>)
 8002a8c:	f005 fb08 	bl	80080a0 <siprintf>
				lcd_send_string("Ustawiona data:");
 8002a90:	483d      	ldr	r0, [pc, #244]	; (8002b88 <to_do_before_going_to_standby+0x368>)
 8002a92:	f7ff fb49 	bl	8002128 <lcd_send_string>
				lcd_second_line();
 8002a96:	f7ff fa98 	bl	8001fca <lcd_second_line>
				lcd_send_string(new_date_details_msg);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fb42 	bl	8002128 <lcd_send_string>
				HAL_Delay(2000);
 8002aa4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002aa8:	f000 fc34 	bl	8003314 <HAL_Delay>
				lcd_clear();
 8002aac:	f7ff fa36 	bl	8001f1c <lcd_clear>

				date_set_flag = 0;
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <to_do_before_going_to_standby+0x35c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
			}

		}

		// wykonaj jeśli użytkownik ustawił nowy czas alarmu
		if(alarm_set_flag) {
 8002ab6:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <to_do_before_going_to_standby+0x36c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03b      	beq.n	8002b36 <to_do_before_going_to_standby+0x316>

			uint8_t days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm;
			char alarm_details_msg[9];

			days_to_alarm = global_buffer[1];	// dni to drugi element, ponieważ pierwszy to literka a
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
												// mówiąca o tym, że ustawiamy alarm.
			hours_to_alarm = global_buffer[2];
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 8002ac8:	789b      	ldrb	r3, [r3, #2]
 8002aca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			minutes_to_alarm = global_buffer[3];
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			seconds_to_alarm = global_buffer[4];
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <to_do_before_going_to_standby+0x348>)
 8002ad8:	791b      	ldrb	r3, [r3, #4]
 8002ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				lcd_clear();

				alarm_set_flag = 0;
			}
			else {
				rtc_set_alarm(days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm);
 8002ade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ae2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ae6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002aea:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8002aee:	f7fe fb1f 	bl	8001130 <rtc_set_alarm>

				lcd_clear();
 8002af2:	f7ff fa13 	bl	8001f1c <lcd_clear>
				sprintf(alarm_details_msg, "%02d:%02d:%02d", temp_hours, temp_mins, temp_sec);
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <to_do_before_going_to_standby+0x370>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <to_do_before_going_to_standby+0x374>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <to_do_before_going_to_standby+0x378>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	4638      	mov	r0, r7
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4919      	ldr	r1, [pc, #100]	; (8002b74 <to_do_before_going_to_standby+0x354>)
 8002b0e:	f005 fac7 	bl	80080a0 <siprintf>
				lcd_send_string("Alarm na godz.:");
 8002b12:	4822      	ldr	r0, [pc, #136]	; (8002b9c <to_do_before_going_to_standby+0x37c>)
 8002b14:	f7ff fb08 	bl	8002128 <lcd_send_string>
				lcd_second_line();
 8002b18:	f7ff fa57 	bl	8001fca <lcd_second_line>
				lcd_send_string(alarm_details_msg);
 8002b1c:	463b      	mov	r3, r7
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fb02 	bl	8002128 <lcd_send_string>
				HAL_Delay(2000);
 8002b24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b28:	f000 fbf4 	bl	8003314 <HAL_Delay>
				lcd_clear();
 8002b2c:	f7ff f9f6 	bl	8001f1c <lcd_clear>

				alarm_set_flag = 0;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <to_do_before_going_to_standby+0x36c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
			}

		}

		HAL_Delay(100);
 8002b36:	2064      	movs	r0, #100	; 0x64
 8002b38:	f000 fbec 	bl	8003314 <HAL_Delay>
	for(int i=0; i<300; i++) {
 8002b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3e:	3301      	adds	r3, #1
 8002b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b48:	f6ff ae70 	blt.w	800282c <to_do_before_going_to_standby+0xc>
	}

}
 8002b4c:	bf00      	nop
 8002b4e:	3744      	adds	r7, #68	; 0x44
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	200002d8 	.word	0x200002d8
 8002b58:	0800afa0 	.word	0x0800afa0
 8002b5c:	20000303 	.word	0x20000303
 8002b60:	20000300 	.word	0x20000300
 8002b64:	20000308 	.word	0x20000308
 8002b68:	200002f8 	.word	0x200002f8
 8002b6c:	0800afac 	.word	0x0800afac
 8002b70:	0800afb0 	.word	0x0800afb0
 8002b74:	0800afbc 	.word	0x0800afbc
 8002b78:	0800afcc 	.word	0x0800afcc
 8002b7c:	200002ff 	.word	0x200002ff
 8002b80:	0800afdc 	.word	0x0800afdc
 8002b84:	0800afe8 	.word	0x0800afe8
 8002b88:	0800affc 	.word	0x0800affc
 8002b8c:	20000310 	.word	0x20000310
 8002b90:	2000030f 	.word	0x2000030f
 8002b94:	20000305 	.word	0x20000305
 8002b98:	200002fe 	.word	0x200002fe
 8002b9c:	0800b00c 	.word	0x0800b00c

08002ba0 <go_to_standby>:

void go_to_standby(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <go_to_standby+0xc4>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <go_to_standby+0x1e>

		while (alarm_flag) {
 8002bac:	e001      	b.n	8002bb2 <go_to_standby+0x12>
			to_do_on_alarm();
 8002bae:	f7fe fcad 	bl	800150c <to_do_on_alarm>
		while (alarm_flag) {
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <go_to_standby+0xc4>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <go_to_standby+0xe>
		}

		to_do_on_alarm_off();
 8002bba:	f7fe fcc3 	bl	8001544 <to_do_on_alarm_off>
	}

	// Przed wejściem w tryb STANDBY, musimy wyczyścić flagę WU (Wake up)
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <go_to_standby+0xc8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <go_to_standby+0xc8>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6013      	str	r3, [r2, #0]

	// Jeśli urzywamy RTC do wybudzenia MCU, w tym projekcie wybudza ALARM A, musimy wyczyścić też flagę RTC Wake up
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002bca:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <go_to_standby+0xcc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <go_to_standby+0xcc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002bda:	60da      	str	r2, [r3, #12]

	lcd_clear();
 8002bdc:	f7ff f99e 	bl	8001f1c <lcd_clear>
	lcd_set_cursor(0, 2);
 8002be0:	2102      	movs	r1, #2
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff f9bc 	bl	8001f60 <lcd_set_cursor>
	lcd_send_string("Entering to");
 8002be8:	4821      	ldr	r0, [pc, #132]	; (8002c70 <go_to_standby+0xd0>)
 8002bea:	f7ff fa9d 	bl	8002128 <lcd_send_string>
	lcd_second_line();
 8002bee:	f7ff f9ec 	bl	8001fca <lcd_second_line>
	lcd_send_string("STANDBY MODE...");
 8002bf2:	4820      	ldr	r0, [pc, #128]	; (8002c74 <go_to_standby+0xd4>)
 8002bf4:	f7ff fa98 	bl	8002128 <lcd_send_string>
	HAL_Delay(1000);
 8002bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bfc:	f000 fb8a 	bl	8003314 <HAL_Delay>
	lcd_clear();
 8002c00:	f7ff f98c 	bl	8001f1c <lcd_clear>

	// Przed wejściem w tryb STANDBY, musimy włączyć pin Wake up, aby mógł nas potem wybudzić z tego stanu
	HAL_PWR_EnableWakeUpPin(WakeUp_PIN_Pin);
 8002c04:	2001      	movs	r0, #1
 8002c06:	f001 fff5 	bl	8004bf4 <HAL_PWR_EnableWakeUpPin>


	// Wybudzanie układu z trybu STANDBY, defaultowo co 30 sekund

	// Włączenie RTC Wake up			  0x1D4C0 = 120_000 = 30 sekund,	4000 = 1s
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x1D4C0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	491a      	ldr	r1, [pc, #104]	; (8002c78 <go_to_standby+0xd8>)
 8002c0e:	4817      	ldr	r0, [pc, #92]	; (8002c6c <go_to_standby+0xcc>)
 8002c10:	f003 f93e 	bl	8005e90 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <go_to_standby+0x7e>
		Error_Handler();
 8002c1a:	f7ff fc9d 	bl	8002558 <Error_Handler>
	}

	lcd_clear();
 8002c1e:	f7ff f97d 	bl	8001f1c <lcd_clear>
	lcd_set_cursor(0, 2);
 8002c22:	2102      	movs	r1, #2
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff f99b 	bl	8001f60 <lcd_set_cursor>
	lcd_send_string("STANDBY MODE");
 8002c2a:	4814      	ldr	r0, [pc, #80]	; (8002c7c <go_to_standby+0xdc>)
 8002c2c:	f7ff fa7c 	bl	8002128 <lcd_send_string>
	lcd_second_line();
 8002c30:	f7ff f9cb 	bl	8001fca <lcd_second_line>
	lcd_set_cursor(1, 7);
 8002c34:	2107      	movs	r1, #7
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7ff f992 	bl	8001f60 <lcd_set_cursor>
	lcd_send_string("ON");
 8002c3c:	4810      	ldr	r0, [pc, #64]	; (8002c80 <go_to_standby+0xe0>)
 8002c3e:	f7ff fa73 	bl	8002128 <lcd_send_string>
	HAL_Delay(1000);
 8002c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c46:	f000 fb65 	bl	8003314 <HAL_Delay>
	lcd_back_light_off();
 8002c4a:	f7ff f97d 	bl	8001f48 <lcd_back_light_off>
	lcd_clear();
 8002c4e:	f7ff f965 	bl	8001f1c <lcd_clear>

	HAL_NVIC_SetPriority(EXTI_LINE_22, 0, 0);	// Wybudzenie z trybu STANDBY ma najwyższy priorytet w układzie
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2016      	movs	r0, #22
 8002c58:	f000 fc59 	bl	800350e <HAL_NVIC_SetPriority>

	// Finalnie wchodzimy w tryb STANDBY
	HAL_PWR_EnterSTANDBYMode();
 8002c5c:	f001 fff0 	bl	8004c40 <HAL_PWR_EnterSTANDBYMode>
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000303 	.word	0x20000303
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	200003cc 	.word	0x200003cc
 8002c70:	0800b01c 	.word	0x0800b01c
 8002c74:	0800b028 	.word	0x0800b028
 8002c78:	0001d4c0 	.word	0x0001d4c0
 8002c7c:	0800af90 	.word	0x0800af90
 8002c80:	0800b038 	.word	0x0800b038

08002c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_MspInit+0x4c>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_MspInit+0x4c>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_MspInit+0x4c>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_MspInit+0x4c>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_MspInit+0x4c>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_MspInit+0x4c>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <MemManage_Handler+0x4>

08002cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d28:	f000 fad4 	bl	80032d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <RTC_WKUP_IRQHandler+0x10>)
 8002d36:	f003 f9c3 	bl	80060c0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200003cc 	.word	0x200003cc

08002d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <USART2_IRQHandler+0x10>)
 8002d4a:	f003 fd81 	bl	8006850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	2000045c 	.word	0x2000045c

08002d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d60:	f000 fdfc 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <RTC_Alarm_IRQHandler+0x10>)
 8002d6e:	f002 ffd7 	bl	8005d20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200003cc 	.word	0x200003cc

08002d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <_sbrk+0x5c>)
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_sbrk+0x60>)
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <_sbrk+0x64>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <_sbrk+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d207      	bcs.n	8002dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dac:	f004 fb02 	bl	80073b4 <__errno>
 8002db0:	4602      	mov	r2, r0
 8002db2:	230c      	movs	r3, #12
 8002db4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	e009      	b.n	8002dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <_sbrk+0x64>)
 8002dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20018000 	.word	0x20018000
 8002ddc:	00000400 	.word	0x00000400
 8002de0:	200002e8 	.word	0x200002e8
 8002de4:	200004a8 	.word	0x200004a8

08002de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <SystemInit+0x28>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <SystemInit+0x28>)
 8002df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <SystemInit+0x28>)
 8002dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e02:	609a      	str	r2, [r3, #8]
#endif
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e32:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <MX_TIM1_Init+0xa0>)
 8002e34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000;
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e38:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002e3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e5e:	4814      	ldr	r0, [pc, #80]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e60:	f003 f980 	bl	8006164 <HAL_TIM_Base_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002e6a:	f7ff fb75 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	4619      	mov	r1, r3
 8002e7a:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e7c:	f003 f9c1 	bl	8006202 <HAL_TIM_ConfigClockSource>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002e86:	f7ff fb67 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e92:	463b      	mov	r3, r7
 8002e94:	4619      	mov	r1, r3
 8002e96:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e98:	f003 fb84 	bl	80065a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002ea2:	f7ff fb59 	bl	8002558 <Error_Handler>
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000041c 	.word	0x2000041c
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_TIM_Base_MspInit+0x40>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_TIM_Base_MspInit+0x40>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_TIM_Base_MspInit+0x40>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	40023800 	.word	0x40023800

08002efc <decToBcd>:
#define DS3231_ADDRESS 0xD0

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <decToBcd+0x48>)
 8002f08:	fb82 1203 	smull	r1, r2, r2, r3
 8002f0c:	1092      	asrs	r2, r2, #2
 8002f0e:	17db      	asrs	r3, r3, #31
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	b2d8      	uxtb	r0, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <decToBcd+0x48>)
 8002f1c:	fb83 1302 	smull	r1, r3, r3, r2
 8002f20:	1099      	asrs	r1, r3, #2
 8002f22:	17d3      	asrs	r3, r2, #31
 8002f24:	1ac9      	subs	r1, r1, r3
 8002f26:	460b      	mov	r3, r1
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	1ad1      	subs	r1, r2, r3
 8002f30:	b2cb      	uxtb	r3, r1
 8002f32:	4403      	add	r3, r0
 8002f34:	b2db      	uxtb	r3, r3
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	66666667 	.word	0x66666667

08002f48 <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	4413      	add	r3, r2
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <set_Time>:
TIME time;

// Metoda odpowiedzialna za ustawienie czasu i daty
// set_Time(sec, min, hour, dow, dom, month, year)
void set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af04      	add	r7, sp, #16
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	71fb      	strb	r3, [r7, #7]
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71bb      	strb	r3, [r7, #6]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	717b      	strb	r3, [r7, #5]
 8002f92:	4613      	mov	r3, r2
 8002f94:	713b      	strb	r3, [r7, #4]
	uint8_t time_to_write[7];

	time_to_write[0] = decToBcd(sec);
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ffaf 	bl	8002efc <decToBcd>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	723b      	strb	r3, [r7, #8]
	time_to_write[1] = decToBcd(min);
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ffa9 	bl	8002efc <decToBcd>
 8002faa:	4603      	mov	r3, r0
 8002fac:	727b      	strb	r3, [r7, #9]
	time_to_write[2] = decToBcd(hour);
 8002fae:	797b      	ldrb	r3, [r7, #5]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ffa3 	bl	8002efc <decToBcd>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	72bb      	strb	r3, [r7, #10]
	time_to_write[3] = decToBcd(dow);
 8002fba:	793b      	ldrb	r3, [r7, #4]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff9d 	bl	8002efc <decToBcd>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	72fb      	strb	r3, [r7, #11]
	time_to_write[4] = decToBcd(dom);
 8002fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff96 	bl	8002efc <decToBcd>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	733b      	strb	r3, [r7, #12]
	time_to_write[5] = decToBcd(month);
 8002fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff8f 	bl	8002efc <decToBcd>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	737b      	strb	r3, [r7, #13]
	time_to_write[6] = decToBcd(year);
 8002fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff88 	bl	8002efc <decToBcd>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
 8002ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	f107 0308 	add.w	r3, r7, #8
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2301      	movs	r3, #1
 8003002:	2200      	movs	r2, #0
 8003004:	21d0      	movs	r1, #208	; 0xd0
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <set_Time+0x9c>)
 8003008:	f000 fef6 	bl	8003df8 <HAL_I2C_Mem_Write>
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	20000368 	.word	0x20000368

08003018 <get_Time>:

void get_Time (void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af04      	add	r7, sp, #16
	uint8_t time_to_read[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_read, 7, 1000);
 800301e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003022:	9302      	str	r3, [sp, #8]
 8003024:	2307      	movs	r3, #7
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	463b      	mov	r3, r7
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2301      	movs	r3, #1
 800302e:	2200      	movs	r2, #0
 8003030:	21d0      	movs	r1, #208	; 0xd0
 8003032:	481f      	ldr	r0, [pc, #124]	; (80030b0 <get_Time+0x98>)
 8003034:	f000 ffda 	bl	8003fec <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_read[0]);
 8003038:	783b      	ldrb	r3, [r7, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff84 	bl	8002f48 <bcdToDec>
 8003040:	4603      	mov	r3, r0
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <get_Time+0x9c>)
 8003046:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_read[1]);
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff7c 	bl	8002f48 <bcdToDec>
 8003050:	4603      	mov	r3, r0
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <get_Time+0x9c>)
 8003056:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_read[2]);
 8003058:	78bb      	ldrb	r3, [r7, #2]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff74 	bl	8002f48 <bcdToDec>
 8003060:	4603      	mov	r3, r0
 8003062:	b2da      	uxtb	r2, r3
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <get_Time+0x9c>)
 8003066:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_read[3]);
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff6c 	bl	8002f48 <bcdToDec>
 8003070:	4603      	mov	r3, r0
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <get_Time+0x9c>)
 8003076:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_read[4]);
 8003078:	793b      	ldrb	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff64 	bl	8002f48 <bcdToDec>
 8003080:	4603      	mov	r3, r0
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <get_Time+0x9c>)
 8003086:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_read[5]);
 8003088:	797b      	ldrb	r3, [r7, #5]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff5c 	bl	8002f48 <bcdToDec>
 8003090:	4603      	mov	r3, r0
 8003092:	b2da      	uxtb	r2, r3
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <get_Time+0x9c>)
 8003096:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_read[6]);
 8003098:	79bb      	ldrb	r3, [r7, #6]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff54 	bl	8002f48 <bcdToDec>
 80030a0:	4603      	mov	r3, r0
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <get_Time+0x9c>)
 80030a6:	719a      	strb	r2, [r3, #6]
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000368 	.word	0x20000368
 80030b4:	20000308 	.word	0x20000308

080030b8 <delay>:

void delay(uint16_t delay) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <delay+0x2c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80030ca:	bf00      	nop
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <delay+0x2c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3f9      	bcc.n	80030cc <delay+0x14>
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	2000041c 	.word	0x2000041c

080030e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <MX_USART2_UART_Init+0x50>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 80030f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003120:	f003 faae 	bl	8006680 <HAL_UART_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800312a:	f7ff fa15 	bl	8002558 <Error_Handler>
  }

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000045c 	.word	0x2000045c
 8003138:	40004400 	.word	0x40004400

0800313c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_UART_MspInit+0x94>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d133      	bne.n	80031c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_UART_MspInit+0x98>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_UART_MspInit+0x98>)
 8003168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_UART_MspInit+0x98>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_UART_MspInit+0x98>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_UART_MspInit+0x98>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_UART_MspInit+0x98>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003196:	230c      	movs	r3, #12
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80031a2:	2301      	movs	r3, #1
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031a6:	2307      	movs	r3, #7
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <HAL_UART_MspInit+0x9c>)
 80031b2:	f000 fa05 	bl	80035c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	2026      	movs	r0, #38	; 0x26
 80031bc:	f000 f9a7 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031c0:	2026      	movs	r0, #38	; 0x26
 80031c2:	f000 f9c0 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40004400 	.word	0x40004400
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020000 	.word	0x40020000

080031dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003214 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031e2:	e003      	b.n	80031ec <LoopCopyDataInit>

080031e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031ea:	3104      	adds	r1, #4

080031ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031ec:	480b      	ldr	r0, [pc, #44]	; (800321c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031f4:	d3f6      	bcc.n	80031e4 <CopyDataInit>
  ldr  r2, =_sbss
 80031f6:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031f8:	e002      	b.n	8003200 <LoopFillZerobss>

080031fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031fc:	f842 3b04 	str.w	r3, [r2], #4

08003200 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003202:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003204:	d3f9      	bcc.n	80031fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003206:	f7ff fdef 	bl	8002de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800320a:	f004 f8d9 	bl	80073c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800320e:	f7ff f8c1 	bl	8002394 <main>
  bx  lr    
 8003212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003214:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003218:	0800b318 	.word	0x0800b318
  ldr  r0, =_sdata
 800321c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003220:	20000284 	.word	0x20000284
  ldr  r2, =_sbss
 8003224:	20000284 	.word	0x20000284
  ldr  r3, = _ebss
 8003228:	200004a4 	.word	0x200004a4

0800322c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800322c:	e7fe      	b.n	800322c <ADC_IRQHandler>
	...

08003230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_Init+0x40>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <HAL_Init+0x40>)
 800323a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800323e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_Init+0x40>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_Init+0x40>)
 8003246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a07      	ldr	r2, [pc, #28]	; (8003270 <HAL_Init+0x40>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003258:	2003      	movs	r0, #3
 800325a:	f000 f94d 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800325e:	2000      	movs	r0, #0
 8003260:	f000 f808 	bl	8003274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003264:	f7ff fd0e 	bl	8002c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00

08003274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_InitTick+0x54>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_InitTick+0x58>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	4619      	mov	r1, r3
 8003286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328a:	fbb3 f3f1 	udiv	r3, r3, r1
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f965 	bl	8003562 <HAL_SYSTICK_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e00e      	b.n	80032c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b0f      	cmp	r3, #15
 80032a6:	d80a      	bhi.n	80032be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a8:	2200      	movs	r2, #0
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f000 f92d 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b4:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <HAL_InitTick+0x5c>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200000a8 	.word	0x200000a8
 80032cc:	200000b0 	.word	0x200000b0
 80032d0:	200000ac 	.word	0x200000ac

080032d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_IncTick+0x20>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x24>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_IncTick+0x24>)
 80032e6:	6013      	str	r3, [r2, #0]
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200000b0 	.word	0x200000b0
 80032f8:	2000049c 	.word	0x2000049c

080032fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_GetTick+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000049c 	.word	0x2000049c

08003314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800331c:	f7ff ffee 	bl	80032fc <HAL_GetTick>
 8003320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d005      	beq.n	800333a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_Delay+0x40>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800333a:	bf00      	nop
 800333c:	f7ff ffde 	bl	80032fc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	429a      	cmp	r2, r3
 800334a:	d8f7      	bhi.n	800333c <HAL_Delay+0x28>
  {
  }
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200000b0 	.word	0x200000b0

08003358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	60d3      	str	r3, [r2, #12]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__NVIC_GetPriorityGrouping+0x18>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 0307 	and.w	r3, r3, #7
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0b      	blt.n	80033e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <__NVIC_EnableIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	; (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	; (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff29 	bl	8003358 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff3e 	bl	80033a0 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff8e 	bl	800344c <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff31 	bl	80033bc <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa2 	bl	80034b4 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d004      	beq.n	8003598 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e00c      	b.n	80035b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2205      	movs	r2, #5
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e159      	b.n	8003890 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035dc:	2201      	movs	r2, #1
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	f040 8148 	bne.w	800388a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d00b      	beq.n	800361a <HAL_GPIO_Init+0x5a>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d007      	beq.n	800361a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800360e:	2b11      	cmp	r3, #17
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b12      	cmp	r3, #18
 8003618:	d130      	bne.n	800367c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2203      	movs	r2, #3
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 0201 	and.w	r2, r3, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0xfc>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b12      	cmp	r3, #18
 80036ba:	d123      	bne.n	8003704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	08da      	lsrs	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3208      	adds	r2, #8
 80036fe:	69b9      	ldr	r1, [r7, #24]
 8003700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a2 	beq.w	800388a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <HAL_GPIO_Init+0x2e4>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a55      	ldr	r2, [pc, #340]	; (80038a4 <HAL_GPIO_Init+0x2e4>)
 8003750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_GPIO_Init+0x2e4>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003762:	4a51      	ldr	r2, [pc, #324]	; (80038a8 <HAL_GPIO_Init+0x2e8>)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	220f      	movs	r2, #15
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a48      	ldr	r2, [pc, #288]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x202>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a47      	ldr	r2, [pc, #284]	; (80038b0 <HAL_GPIO_Init+0x2f0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x1fe>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a46      	ldr	r2, [pc, #280]	; (80038b4 <HAL_GPIO_Init+0x2f4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x1fa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a45      	ldr	r2, [pc, #276]	; (80038b8 <HAL_GPIO_Init+0x2f8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x1f6>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a44      	ldr	r2, [pc, #272]	; (80038bc <HAL_GPIO_Init+0x2fc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x1f2>
 80037ae:	2304      	movs	r3, #4
 80037b0:	e008      	b.n	80037c4 <HAL_GPIO_Init+0x204>
 80037b2:	2307      	movs	r3, #7
 80037b4:	e006      	b.n	80037c4 <HAL_GPIO_Init+0x204>
 80037b6:	2303      	movs	r3, #3
 80037b8:	e004      	b.n	80037c4 <HAL_GPIO_Init+0x204>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e002      	b.n	80037c4 <HAL_GPIO_Init+0x204>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_GPIO_Init+0x204>
 80037c2:	2300      	movs	r3, #0
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f002 0203 	and.w	r2, r2, #3
 80037ca:	0092      	lsls	r2, r2, #2
 80037cc:	4093      	lsls	r3, r2
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d4:	4934      	ldr	r1, [pc, #208]	; (80038a8 <HAL_GPIO_Init+0x2e8>)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	3302      	adds	r3, #2
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_GPIO_Init+0x300>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003806:	4a2e      	ldr	r2, [pc, #184]	; (80038c0 <HAL_GPIO_Init+0x300>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800380c:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <HAL_GPIO_Init+0x300>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003830:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <HAL_GPIO_Init+0x300>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_GPIO_Init+0x300>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_GPIO_Init+0x300>)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_GPIO_Init+0x300>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003884:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_GPIO_Init+0x300>)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3301      	adds	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	f67f aea2 	bls.w	80035dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3724      	adds	r7, #36	; 0x24
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40020000 	.word	0x40020000
 80038b0:	40020400 	.word	0x40020400
 80038b4:	40020800 	.word	0x40020800
 80038b8:	40020c00 	.word	0x40020c00
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e001      	b.n	80038e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	401a      	ands	r2, r3
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	429a      	cmp	r2, r3
 800393e:	d104      	bne.n	800394a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003940:	887b      	ldrh	r3, [r7, #2]
 8003942:	041a      	lsls	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003948:	e002      	b.n	8003950 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fdf6 	bl	800156c <HAL_GPIO_EXTI_Callback>
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e11f      	b.n	8003bde <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd ff02 	bl	80017bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f0:	f001 fd52 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4a7b      	ldr	r2, [pc, #492]	; (8003be8 <HAL_I2C_Init+0x25c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d807      	bhi.n	8003a10 <HAL_I2C_Init+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a7a      	ldr	r2, [pc, #488]	; (8003bec <HAL_I2C_Init+0x260>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e006      	b.n	8003a1e <HAL_I2C_Init+0x92>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a77      	ldr	r2, [pc, #476]	; (8003bf0 <HAL_I2C_Init+0x264>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0db      	b.n	8003bde <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a72      	ldr	r2, [pc, #456]	; (8003bf4 <HAL_I2C_Init+0x268>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a64      	ldr	r2, [pc, #400]	; (8003be8 <HAL_I2C_Init+0x25c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d802      	bhi.n	8003a60 <HAL_I2C_Init+0xd4>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	e009      	b.n	8003a74 <HAL_I2C_Init+0xe8>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a63      	ldr	r2, [pc, #396]	; (8003bf8 <HAL_I2C_Init+0x26c>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	3301      	adds	r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4956      	ldr	r1, [pc, #344]	; (8003be8 <HAL_I2C_Init+0x25c>)
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d80d      	bhi.n	8003ab0 <HAL_I2C_Init+0x124>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e59      	subs	r1, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	bf38      	it	cc
 8003aac:	2304      	movcc	r3, #4
 8003aae:	e04f      	b.n	8003b50 <HAL_I2C_Init+0x1c4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <HAL_I2C_Init+0x150>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e012      	b.n	8003b02 <HAL_I2C_Init+0x176>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	0099      	lsls	r1, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Init+0x17e>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e022      	b.n	8003b50 <HAL_I2C_Init+0x1c4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <HAL_I2C_Init+0x1a4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1e58      	subs	r0, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	440b      	add	r3, r1
 8003b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2e:	e00f      	b.n	8003b50 <HAL_I2C_Init+0x1c4>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	0099      	lsls	r1, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	6809      	ldr	r1, [r1, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6911      	ldr	r1, [r2, #16]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	000186a0 	.word	0x000186a0
 8003bec:	001e847f 	.word	0x001e847f
 8003bf0:	003d08ff 	.word	0x003d08ff
 8003bf4:	431bde83 	.word	0x431bde83
 8003bf8:	10624dd3 	.word	0x10624dd3

08003bfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	460b      	mov	r3, r1
 8003c0a:	817b      	strh	r3, [r7, #10]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff fb74 	bl	80032fc <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f040 80e0 	bne.w	8003de4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2319      	movs	r3, #25
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4970      	ldr	r1, [pc, #448]	; (8003df0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fe02 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e0d3      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2C_Master_Transmit+0x50>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0cc      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d007      	beq.n	8003c72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2221      	movs	r2, #33	; 0x21
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	893a      	ldrh	r2, [r7, #8]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a50      	ldr	r2, [pc, #320]	; (8003df4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fbbc 	bl	8004438 <I2C_MasterRequestWrite>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e08d      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ce0:	e066      	b.n	8003db0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fe7c 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d107      	bne.n	8003d0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e06b      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11b      	bne.n	8003d84 <HAL_I2C_Master_Transmit+0x188>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d017      	beq.n	8003d84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	6a39      	ldr	r1, [r7, #32]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fe6c 	bl	8004a66 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d107      	bne.n	8003dac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e01a      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d194      	bne.n	8003ce2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	00100002 	.word	0x00100002
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e12:	f7ff fa73 	bl	80032fc <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	f040 80d9 	bne.w	8003fd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2319      	movs	r3, #25
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	496d      	ldr	r1, [pc, #436]	; (8003fe4 <HAL_I2C_Mem_Write+0x1ec>)
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fd01 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e0cc      	b.n	8003fda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_I2C_Mem_Write+0x56>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e0c5      	b.n	8003fda <HAL_I2C_Mem_Write+0x1e2>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d007      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2221      	movs	r2, #33	; 0x21
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2240      	movs	r2, #64	; 0x40
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <HAL_I2C_Mem_Write+0x1f0>)
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eb6:	88f8      	ldrh	r0, [r7, #6]
 8003eb8:	893a      	ldrh	r2, [r7, #8]
 8003eba:	8979      	ldrh	r1, [r7, #10]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fb38 	bl	800453c <I2C_RequestMemoryWrite>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d052      	beq.n	8003f78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e081      	b.n	8003fda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fd82 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e06b      	b.n	8003fda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d11b      	bne.n	8003f78 <HAL_I2C_Mem_Write+0x180>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d017      	beq.n	8003f78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1aa      	bne.n	8003ed6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fd6e 	bl	8004a66 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d107      	bne.n	8003fa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e016      	b.n	8003fda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	00100002 	.word	0x00100002
 8003fe8:	ffff0000 	.word	0xffff0000

08003fec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08c      	sub	sp, #48	; 0x30
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	817b      	strh	r3, [r7, #10]
 8003ffe:	460b      	mov	r3, r1
 8004000:	813b      	strh	r3, [r7, #8]
 8004002:	4613      	mov	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004006:	f7ff f979 	bl	80032fc <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b20      	cmp	r3, #32
 8004016:	f040 8208 	bne.w	800442a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2319      	movs	r3, #25
 8004020:	2201      	movs	r2, #1
 8004022:	497b      	ldr	r1, [pc, #492]	; (8004210 <HAL_I2C_Mem_Read+0x224>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fc07 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
 8004032:	e1fb      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2C_Mem_Read+0x56>
 800403e:	2302      	movs	r3, #2
 8004040:	e1f4      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2222      	movs	r2, #34	; 0x22
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a5b      	ldr	r2, [pc, #364]	; (8004214 <HAL_I2C_Mem_Read+0x228>)
 80040a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040aa:	88f8      	ldrh	r0, [r7, #6]
 80040ac:	893a      	ldrh	r2, [r7, #8]
 80040ae:	8979      	ldrh	r1, [r7, #10]
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4603      	mov	r3, r0
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fad4 	bl	8004668 <I2C_RequestMemoryRead>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e1b0      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d113      	bne.n	80040fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d2:	2300      	movs	r3, #0
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e184      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d11b      	bne.n	800413a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e164      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	2b02      	cmp	r3, #2
 8004140:	d11b      	bne.n	800417a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	e144      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004190:	e138      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	2b03      	cmp	r3, #3
 8004198:	f200 80f1 	bhi.w	800437e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d123      	bne.n	80041ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fc9d 	bl	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e139      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ea:	e10b      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d14e      	bne.n	8004292 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2200      	movs	r2, #0
 80041fc:	4906      	ldr	r1, [pc, #24]	; (8004218 <HAL_I2C_Mem_Read+0x22c>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fb1a 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e10e      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
 800420e:	bf00      	nop
 8004210:	00100002 	.word	0x00100002
 8004214:	ffff0000 	.word	0xffff0000
 8004218:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004290:	e0b8      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2200      	movs	r2, #0
 800429a:	4966      	ldr	r1, [pc, #408]	; (8004434 <HAL_I2C_Mem_Read+0x448>)
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 facb 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0bf      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2200      	movs	r2, #0
 80042f6:	494f      	ldr	r1, [pc, #316]	; (8004434 <HAL_I2C_Mem_Read+0x448>)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fa9d 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e091      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437c:	e042      	b.n	8004404 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fbb0 	bl	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e04c      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d118      	bne.n	8004404 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	2b00      	cmp	r3, #0
 800440a:	f47f aec2 	bne.w	8004192 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	00010004 	.word	0x00010004

08004438 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d006      	beq.n	8004462 <I2C_MasterRequestWrite+0x2a>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d003      	beq.n	8004462 <I2C_MasterRequestWrite+0x2a>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004460:	d108      	bne.n	8004474 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e00b      	b.n	800448c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	2b12      	cmp	r3, #18
 800447a:	d107      	bne.n	800448c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f9cd 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d103      	bne.n	80044bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e035      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c8:	d108      	bne.n	80044dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d8:	611a      	str	r2, [r3, #16]
 80044da:	e01b      	b.n	8004514 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044dc:	897b      	ldrh	r3, [r7, #10]
 80044de:	11db      	asrs	r3, r3, #7
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f063 030f 	orn	r3, r3, #15
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <I2C_MasterRequestWrite+0xfc>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f9f3 	bl	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e010      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4907      	ldr	r1, [pc, #28]	; (8004538 <I2C_MasterRequestWrite+0x100>)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f9e3 	bl	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	00010008 	.word	0x00010008
 8004538:	00010002 	.word	0x00010002

0800453c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	460b      	mov	r3, r1
 8004550:	813b      	strh	r3, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004564:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2200      	movs	r2, #0
 800456e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f960 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458c:	d103      	bne.n	8004596 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e05f      	b.n	800465a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800459a:	897b      	ldrh	r3, [r7, #10]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	492d      	ldr	r1, [pc, #180]	; (8004664 <I2C_RequestMemoryWrite+0x128>)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f998 	bl	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e04c      	b.n	800465a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	6a39      	ldr	r1, [r7, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa02 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d107      	bne.n	80045fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e02b      	b.n	800465a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d105      	bne.n	8004614 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]
 8004612:	e021      	b.n	8004658 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	b29b      	uxth	r3, r3
 800461a:	b2da      	uxtb	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004624:	6a39      	ldr	r1, [r7, #32]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f9dc 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b04      	cmp	r3, #4
 8004638:	d107      	bne.n	800464a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e005      	b.n	800465a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800464e:	893b      	ldrh	r3, [r7, #8]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	00010002 	.word	0x00010002

08004668 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004690:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8c2 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c8:	d103      	bne.n	80046d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0aa      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046d6:	897b      	ldrh	r3, [r7, #10]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	4952      	ldr	r1, [pc, #328]	; (8004834 <I2C_RequestMemoryRead+0x1cc>)
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f8fa 	bl	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e097      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	6a39      	ldr	r1, [r7, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f964 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b04      	cmp	r3, #4
 8004728:	d107      	bne.n	800473a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004738:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e076      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004744:	893b      	ldrh	r3, [r7, #8]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	e021      	b.n	8004794 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004750:	893b      	ldrh	r3, [r7, #8]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	b29b      	uxth	r3, r3
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	6a39      	ldr	r1, [r7, #32]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f93e 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b04      	cmp	r3, #4
 8004774:	d107      	bne.n	8004786 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004784:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e050      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800478a:	893b      	ldrh	r3, [r7, #8]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004796:	6a39      	ldr	r1, [r7, #32]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f923 	bl	80049e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d107      	bne.n	80047bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e035      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f82b 	bl	8004838 <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d103      	bne.n	8004800 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e013      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	6a3a      	ldr	r2, [r7, #32]
 8004818:	4906      	ldr	r1, [pc, #24]	; (8004834 <I2C_RequestMemoryRead+0x1cc>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f863 	bl	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	00010002 	.word	0x00010002

08004838 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004848:	e025      	b.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d021      	beq.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004852:	f7fe fd53 	bl	80032fc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d302      	bcc.n	8004868 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d116      	bne.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e023      	b.n	80048de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10d      	bne.n	80048bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	e00c      	b.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	43da      	mvns	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d0b6      	beq.n	800484a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f4:	e051      	b.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004904:	d123      	bne.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004914:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800491e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0204 	orr.w	r2, r3, #4
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e046      	b.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d021      	beq.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fe fcd1 	bl	80032fc <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d116      	bne.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e020      	b.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10c      	bne.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e00b      	b.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d18d      	bne.n	80048f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f0:	e02d      	b.n	8004a4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f8ce 	bl	8004b94 <I2C_IsAcknowledgeFailed>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e02d      	b.n	8004a5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d021      	beq.n	8004a4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0a:	f7fe fc77 	bl	80032fc <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e007      	b.n	8004a5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a58:	2b80      	cmp	r3, #128	; 0x80
 8004a5a:	d1ca      	bne.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a72:	e02d      	b.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f88d 	bl	8004b94 <I2C_IsAcknowledgeFailed>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e02d      	b.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d021      	beq.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8c:	f7fe fc36 	bl	80032fc <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d116      	bne.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e007      	b.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d1ca      	bne.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af4:	e042      	b.n	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d119      	bne.n	8004b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e029      	b.n	8004b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fe fbe0 	bl	80032fc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f043 0220 	orr.w	r2, r3, #32
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e007      	b.n	8004b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d1b5      	bne.n	8004af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004baa:	d11b      	bne.n	8004be4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_PWR_EnableWakeUpPin+0x20>)
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	4904      	ldr	r1, [pc, #16]	; (8004c14 <HAL_PWR_EnableWakeUpPin+0x20>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40007000 	.word	0x40007000

08004c18 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_PWR_DisableWakeUpPin+0x24>)
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	4904      	ldr	r1, [pc, #16]	; (8004c3c <HAL_PWR_DisableWakeUpPin+0x24>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004c4a:	f043 0302 	orr.w	r3, r3, #2
 8004c4e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004c56:	f043 0304 	orr.w	r3, r3, #4
 8004c5a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004c5c:	bf30      	wfi
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40007000 	.word	0x40007000
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e25b      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d075      	beq.n	8004d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8e:	4ba3      	ldr	r3, [pc, #652]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d00c      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4ba0      	ldr	r3, [pc, #640]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d112      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca6:	4b9d      	ldr	r3, [pc, #628]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb2:	d10b      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	4b99      	ldr	r3, [pc, #612]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05b      	beq.n	8004d78 <HAL_RCC_OscConfig+0x108>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d157      	bne.n	8004d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e236      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x74>
 8004cd6:	4b91      	ldr	r3, [pc, #580]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a90      	ldr	r2, [pc, #576]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e01d      	b.n	8004d20 <HAL_RCC_OscConfig+0xb0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x98>
 8004cee:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a8a      	ldr	r2, [pc, #552]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_OscConfig+0xb0>
 8004d08:	4b84      	ldr	r3, [pc, #528]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a83      	ldr	r2, [pc, #524]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b81      	ldr	r3, [pc, #516]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a80      	ldr	r2, [pc, #512]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fe fae8 	bl	80032fc <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d30:	f7fe fae4 	bl	80032fc <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	; 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e1fb      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0xc0>
 8004d4e:	e014      	b.n	8004d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fe fad4 	bl	80032fc <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fe fad0 	bl	80032fc <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1e7      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6a:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0xe8>
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d063      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d86:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d92:	4b62      	ldr	r3, [pc, #392]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d11c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d116      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004daa:	4b5c      	ldr	r3, [pc, #368]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x152>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d001      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e1bb      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc2:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4952      	ldr	r1, [pc, #328]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	e03a      	b.n	8004e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de0:	4b4f      	ldr	r3, [pc, #316]	; (8004f20 <HAL_RCC_OscConfig+0x2b0>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fe fa89 	bl	80032fc <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dee:	f7fe fa85 	bl	80032fc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e19c      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e00:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0c:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4940      	ldr	r1, [pc, #256]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
 8004e20:	e015      	b.n	8004e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e22:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <HAL_RCC_OscConfig+0x2b0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fe fa68 	bl	80032fc <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fe fa64 	bl	80032fc <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e17b      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e42:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d030      	beq.n	8004ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e62:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <HAL_RCC_OscConfig+0x2b4>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fe fa48 	bl	80032fc <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fe fa44 	bl	80032fc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e15b      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x200>
 8004e8e:	e015      	b.n	8004ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e90:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <HAL_RCC_OscConfig+0x2b4>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e96:	f7fe fa31 	bl	80032fc <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9e:	f7fe fa2d 	bl	80032fc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e144      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80a0 	beq.w	800500a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_OscConfig+0x2b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d121      	bne.n	8004f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCC_OscConfig+0x2b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a07      	ldr	r2, [pc, #28]	; (8004f28 <HAL_RCC_OscConfig+0x2b8>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f12:	f7fe f9f3 	bl	80032fc <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	e011      	b.n	8004f3e <HAL_RCC_OscConfig+0x2ce>
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	42470000 	.word	0x42470000
 8004f24:	42470e80 	.word	0x42470e80
 8004f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2c:	f7fe f9e6 	bl	80032fc <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0fd      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b81      	ldr	r3, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x4d4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d106      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2f0>
 8004f52:	4b7d      	ldr	r3, [pc, #500]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a7c      	ldr	r2, [pc, #496]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5e:	e01c      	b.n	8004f9a <HAL_RCC_OscConfig+0x32a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCC_OscConfig+0x312>
 8004f68:	4b77      	ldr	r3, [pc, #476]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a76      	ldr	r2, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f6e:	f043 0304 	orr.w	r3, r3, #4
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	4b74      	ldr	r3, [pc, #464]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a73      	ldr	r2, [pc, #460]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f80:	e00b      	b.n	8004f9a <HAL_RCC_OscConfig+0x32a>
 8004f82:	4b71      	ldr	r3, [pc, #452]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a70      	ldr	r2, [pc, #448]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	4b6e      	ldr	r3, [pc, #440]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a6d      	ldr	r2, [pc, #436]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d015      	beq.n	8004fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fe f9ab 	bl	80032fc <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fe f9a7 	bl	80032fc <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0bc      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ee      	beq.n	8004faa <HAL_RCC_OscConfig+0x33a>
 8004fcc:	e014      	b.n	8004ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fce:	f7fe f995 	bl	80032fc <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fe f991 	bl	80032fc <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0a6      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fec:	4b56      	ldr	r3, [pc, #344]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ee      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	4b52      	ldr	r3, [pc, #328]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	4a51      	ldr	r2, [pc, #324]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8005004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8092 	beq.w	8005138 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005014:	4b4c      	ldr	r3, [pc, #304]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d05c      	beq.n	80050da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d141      	bne.n	80050ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005028:	4b48      	ldr	r3, [pc, #288]	; (800514c <HAL_RCC_OscConfig+0x4dc>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fe f965 	bl	80032fc <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005036:	f7fe f961 	bl	80032fc <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e078      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005048:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	019b      	lsls	r3, r3, #6
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	3b01      	subs	r3, #1
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	4933      	ldr	r1, [pc, #204]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800507e:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCC_OscConfig+0x4dc>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fe f93a 	bl	80032fc <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508c:	f7fe f936 	bl	80032fc <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e04d      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509e:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x41c>
 80050aa:	e045      	b.n	8005138 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <HAL_RCC_OscConfig+0x4dc>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fe f923 	bl	80032fc <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fe f91f 	bl	80032fc <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e036      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0x44a>
 80050d8:	e02e      	b.n	8005138 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e029      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e6:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_RCC_OscConfig+0x4d8>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d11c      	bne.n	8005134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d115      	bne.n	8005134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005114:	4293      	cmp	r3, r2
 8005116:	d10d      	bne.n	8005134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d106      	bne.n	8005134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40007000 	.word	0x40007000
 8005148:	40023800 	.word	0x40023800
 800514c:	42470060 	.word	0x42470060

08005150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0cc      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005164:	4b68      	ldr	r3, [pc, #416]	; (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d90c      	bls.n	800518c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b63      	ldr	r3, [pc, #396]	; (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0b8      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d020      	beq.n	80051da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a58      	ldr	r2, [pc, #352]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051bc:	4b53      	ldr	r3, [pc, #332]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4a52      	ldr	r2, [pc, #328]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c8:	4b50      	ldr	r3, [pc, #320]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	494d      	ldr	r1, [pc, #308]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d044      	beq.n	8005270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b47      	ldr	r3, [pc, #284]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d119      	bne.n	800522e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e07f      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d003      	beq.n	800520e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520a:	2b03      	cmp	r3, #3
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e06f      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	4b3b      	ldr	r3, [pc, #236]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e067      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522e:	4b37      	ldr	r3, [pc, #220]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f023 0203 	bic.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4934      	ldr	r1, [pc, #208]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005240:	f7fe f85c 	bl	80032fc <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005246:	e00a      	b.n	800525e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005248:	f7fe f858 	bl	80032fc <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e04f      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 020c 	and.w	r2, r3, #12
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	429a      	cmp	r2, r3
 800526e:	d1eb      	bne.n	8005248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005270:	4b25      	ldr	r3, [pc, #148]	; (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d20c      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b20      	ldr	r3, [pc, #128]	; (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e032      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4916      	ldr	r1, [pc, #88]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	490e      	ldr	r1, [pc, #56]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052d6:	f000 f821 	bl	800531c <HAL_RCC_GetSysClockFreq>
 80052da:	4601      	mov	r1, r0
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	5cd3      	ldrb	r3, [r2, r3]
 80052ea:	fa21 f303 	lsr.w	r3, r1, r3
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052f2:	4b09      	ldr	r3, [pc, #36]	; (8005318 <HAL_RCC_ClockConfig+0x1c8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fd ffbc 	bl	8003274 <HAL_InitTick>

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40023c00 	.word	0x40023c00
 800530c:	40023800 	.word	0x40023800
 8005310:	0800b03c 	.word	0x0800b03c
 8005314:	200000a8 	.word	0x200000a8
 8005318:	200000ac 	.word	0x200000ac

0800531c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005332:	4b50      	ldr	r3, [pc, #320]	; (8005474 <HAL_RCC_GetSysClockFreq+0x158>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b04      	cmp	r3, #4
 800533c:	d007      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x32>
 800533e:	2b08      	cmp	r3, #8
 8005340:	d008      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x38>
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 808d 	bne.w	8005462 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005348:	4b4b      	ldr	r3, [pc, #300]	; (8005478 <HAL_RCC_GetSysClockFreq+0x15c>)
 800534a:	60bb      	str	r3, [r7, #8]
       break;
 800534c:	e08c      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800534e:	4b4b      	ldr	r3, [pc, #300]	; (800547c <HAL_RCC_GetSysClockFreq+0x160>)
 8005350:	60bb      	str	r3, [r7, #8]
      break;
 8005352:	e089      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005354:	4b47      	ldr	r3, [pc, #284]	; (8005474 <HAL_RCC_GetSysClockFreq+0x158>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800535e:	4b45      	ldr	r3, [pc, #276]	; (8005474 <HAL_RCC_GetSysClockFreq+0x158>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d023      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536a:	4b42      	ldr	r3, [pc, #264]	; (8005474 <HAL_RCC_GetSysClockFreq+0x158>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	099b      	lsrs	r3, r3, #6
 8005370:	f04f 0400 	mov.w	r4, #0
 8005374:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	ea03 0501 	and.w	r5, r3, r1
 8005380:	ea04 0602 	and.w	r6, r4, r2
 8005384:	4a3d      	ldr	r2, [pc, #244]	; (800547c <HAL_RCC_GetSysClockFreq+0x160>)
 8005386:	fb02 f106 	mul.w	r1, r2, r6
 800538a:	2200      	movs	r2, #0
 800538c:	fb02 f205 	mul.w	r2, r2, r5
 8005390:	440a      	add	r2, r1
 8005392:	493a      	ldr	r1, [pc, #232]	; (800547c <HAL_RCC_GetSysClockFreq+0x160>)
 8005394:	fba5 0101 	umull	r0, r1, r5, r1
 8005398:	1853      	adds	r3, r2, r1
 800539a:	4619      	mov	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f04f 0400 	mov.w	r4, #0
 80053a2:	461a      	mov	r2, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	f7fb fc77 	bl	8000c98 <__aeabi_uldivmod>
 80053aa:	4603      	mov	r3, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e049      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b2:	4b30      	ldr	r3, [pc, #192]	; (8005474 <HAL_RCC_GetSysClockFreq+0x158>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	ea03 0501 	and.w	r5, r3, r1
 80053c8:	ea04 0602 	and.w	r6, r4, r2
 80053cc:	4629      	mov	r1, r5
 80053ce:	4632      	mov	r2, r6
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	0154      	lsls	r4, r2, #5
 80053da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053de:	014b      	lsls	r3, r1, #5
 80053e0:	4619      	mov	r1, r3
 80053e2:	4622      	mov	r2, r4
 80053e4:	1b49      	subs	r1, r1, r5
 80053e6:	eb62 0206 	sbc.w	r2, r2, r6
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	f04f 0400 	mov.w	r4, #0
 80053f2:	0194      	lsls	r4, r2, #6
 80053f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053f8:	018b      	lsls	r3, r1, #6
 80053fa:	1a5b      	subs	r3, r3, r1
 80053fc:	eb64 0402 	sbc.w	r4, r4, r2
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	00e2      	lsls	r2, r4, #3
 800540a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800540e:	00d9      	lsls	r1, r3, #3
 8005410:	460b      	mov	r3, r1
 8005412:	4614      	mov	r4, r2
 8005414:	195b      	adds	r3, r3, r5
 8005416:	eb44 0406 	adc.w	r4, r4, r6
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	02a2      	lsls	r2, r4, #10
 8005424:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005428:	0299      	lsls	r1, r3, #10
 800542a:	460b      	mov	r3, r1
 800542c:	4614      	mov	r4, r2
 800542e:	4618      	mov	r0, r3
 8005430:	4621      	mov	r1, r4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	461a      	mov	r2, r3
 800543a:	4623      	mov	r3, r4
 800543c:	f7fb fc2c 	bl	8000c98 <__aeabi_uldivmod>
 8005440:	4603      	mov	r3, r0
 8005442:	460c      	mov	r4, r1
 8005444:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_RCC_GetSysClockFreq+0x158>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	3301      	adds	r3, #1
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	60bb      	str	r3, [r7, #8]
      break;
 8005460:	e002      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005464:	60bb      	str	r3, [r7, #8]
      break;
 8005466:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005468:	68bb      	ldr	r3, [r7, #8]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	00f42400 	.word	0x00f42400
 800547c:	017d7840 	.word	0x017d7840

08005480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005484:	4b03      	ldr	r3, [pc, #12]	; (8005494 <HAL_RCC_GetHCLKFreq+0x14>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	200000a8 	.word	0x200000a8

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff0 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054a0:	4601      	mov	r1, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0a9b      	lsrs	r3, r3, #10
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4a03      	ldr	r2, [pc, #12]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0800b04c 	.word	0x0800b04c

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054c4:	f7ff ffdc 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054c8:	4601      	mov	r1, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0b5b      	lsrs	r3, r3, #13
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d6:	5cd3      	ldrb	r3, [r2, r3]
 80054d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	0800b04c 	.word	0x0800b04c

080054e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800550c:	2b00      	cmp	r3, #0
 800550e:	d035      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005510:	4b67      	ldr	r3, [pc, #412]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005516:	f7fd fef1 	bl	80032fc <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800551e:	f7fd feed 	bl	80032fc <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e0ba      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005530:	4b60      	ldr	r3, [pc, #384]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	019a      	lsls	r2, r3, #6
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	071b      	lsls	r3, r3, #28
 8005548:	495a      	ldr	r1, [pc, #360]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005550:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005556:	f7fd fed1 	bl	80032fc <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800555e:	f7fd fecd 	bl	80032fc <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e09a      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005570:	4b50      	ldr	r3, [pc, #320]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8083 	beq.w	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a48      	ldr	r2, [pc, #288]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b46      	ldr	r3, [pc, #280]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055a6:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a43      	ldr	r2, [pc, #268]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055b2:	f7fd fea3 	bl	80032fc <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055ba:	f7fd fe9f 	bl	80032fc <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e06c      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055cc:	4b3a      	ldr	r3, [pc, #232]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055d8:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d02f      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d028      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055f6:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005600:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005606:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005612:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d114      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800561e:	f7fd fe6d 	bl	80032fc <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fd fe69 	bl	80032fc <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e034      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563c:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ee      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005654:	d10d      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	4912      	ldr	r1, [pc, #72]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]
 8005670:	e005      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005678:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800567c:	6093      	str	r3, [r2, #8]
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005680:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568a:	490a      	ldr	r1, [pc, #40]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800568c:	4313      	orrs	r3, r2
 800568e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	7c1a      	ldrb	r2, [r3, #16]
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056a2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	42470068 	.word	0x42470068
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40007000 	.word	0x40007000
 80056bc:	42470e40 	.word	0x42470e40
 80056c0:	424711e0 	.word	0x424711e0

080056c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e083      	b.n	80057de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7f5b      	ldrb	r3, [r3, #29]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc ffd4 	bl	8002694 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22ca      	movs	r2, #202	; 0xca
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2253      	movs	r2, #83	; 0x53
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fb7a 	bl	8005dfc <RTC_EnterInitMode>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	22ff      	movs	r2, #255	; 0xff
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2204      	movs	r2, #4
 800571a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e05e      	b.n	80057de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800572e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005732:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6899      	ldr	r1, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68d2      	ldr	r2, [r2, #12]
 800575a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6919      	ldr	r1, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	041a      	lsls	r2, r3, #16
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800577e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fb0c 	bl	8005dac <HAL_RTC_WaitForSynchro>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2204      	movs	r2, #4
 80057a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e018      	b.n	80057de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	22ff      	movs	r2, #255	; 0xff
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
  }
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057e6:	b590      	push	{r4, r7, lr}
 80057e8:	b087      	sub	sp, #28
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7f1b      	ldrb	r3, [r3, #28]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_RTC_SetTime+0x1c>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0aa      	b.n	8005958 <HAL_RTC_SetTime+0x172>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2202      	movs	r2, #2
 800580c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d126      	bne.n	8005862 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fb11 	bl	8005e54 <RTC_ByteToBcd2>
 8005832:	4603      	mov	r3, r0
 8005834:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fb0a 	bl	8005e54 <RTC_ByteToBcd2>
 8005840:	4603      	mov	r3, r0
 8005842:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005844:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	789b      	ldrb	r3, [r3, #2]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fb02 	bl	8005e54 <RTC_ByteToBcd2>
 8005850:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005852:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	78db      	ldrb	r3, [r3, #3]
 800585a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e018      	b.n	8005894 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005882:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005888:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	78db      	ldrb	r3, [r3, #3]
 800588e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	22ca      	movs	r2, #202	; 0xca
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2253      	movs	r2, #83	; 0x53
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 faa9 	bl	8005dfc <RTC_EnterInitMode>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2204      	movs	r2, #4
 80058bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e047      	b.n	8005958 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6899      	ldr	r1, [r3, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800590e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d111      	bne.n	8005942 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fa44 	bl	8005dac <HAL_RTC_WaitForSynchro>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2204      	movs	r2, #4
 8005936:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e00a      	b.n	8005958 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005956:	2300      	movs	r3, #0
  }
}
 8005958:	4618      	mov	r0, r3
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	bd90      	pop	{r4, r7, pc}

08005960 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7f1b      	ldrb	r3, [r3, #28]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_RTC_SetDate+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e094      	b.n	8005aa6 <HAL_RTC_SetDate+0x146>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2202      	movs	r2, #2
 8005986:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <HAL_RTC_SetDate+0x4c>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d008      	beq.n	80059ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	330a      	adds	r3, #10
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11c      	bne.n	80059ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	78db      	ldrb	r3, [r3, #3]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fa4c 	bl	8005e54 <RTC_ByteToBcd2>
 80059bc:	4603      	mov	r3, r0
 80059be:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fa45 	bl	8005e54 <RTC_ByteToBcd2>
 80059ca:	4603      	mov	r3, r0
 80059cc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059ce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	789b      	ldrb	r3, [r3, #2]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fa3d 	bl	8005e54 <RTC_ByteToBcd2>
 80059da:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80059dc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e00e      	b.n	8005a0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	78db      	ldrb	r3, [r3, #3]
 80059f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80059fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	22ca      	movs	r2, #202	; 0xca
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2253      	movs	r2, #83	; 0x53
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f9ee 	bl	8005dfc <RTC_EnterInitMode>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2204      	movs	r2, #4
 8005a32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e033      	b.n	8005aa6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d111      	bne.n	8005a90 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f99d 	bl	8005dac <HAL_RTC_WaitForSynchro>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2204      	movs	r2, #4
 8005a84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd90      	pop	{r4, r7, pc}
	...

08005ab0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005ac4:	4b93      	ldr	r3, [pc, #588]	; (8005d14 <HAL_RTC_SetAlarm_IT+0x264>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a93      	ldr	r2, [pc, #588]	; (8005d18 <HAL_RTC_SetAlarm_IT+0x268>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0adb      	lsrs	r3, r3, #11
 8005ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	7f1b      	ldrb	r3, [r3, #28]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RTC_SetAlarm_IT+0x36>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e111      	b.n	8005d0a <HAL_RTC_SetAlarm_IT+0x25a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d137      	bne.n	8005b68 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f99f 	bl	8005e54 <RTC_ByteToBcd2>
 8005b16:	4603      	mov	r3, r0
 8005b18:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f998 	bl	8005e54 <RTC_ByteToBcd2>
 8005b24:	4603      	mov	r3, r0
 8005b26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b28:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	789b      	ldrb	r3, [r3, #2]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f990 	bl	8005e54 <RTC_ByteToBcd2>
 8005b34:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b36:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	78db      	ldrb	r3, [r3, #3]
 8005b3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b40:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f982 	bl	8005e54 <RTC_ByteToBcd2>
 8005b50:	4603      	mov	r3, r0
 8005b52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b54:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e023      	b.n	8005bb0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b88:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	78db      	ldrb	r3, [r3, #3]
 8005b94:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b9e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ba0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ba6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	22ca      	movs	r2, #202	; 0xca
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2253      	movs	r2, #83	; 0x53
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd4:	d141      	bne.n	8005c5a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005bf6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	617a      	str	r2, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e077      	b.n	8005d0a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0e7      	beq.n	8005bf8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	e040      	b.n	8005cdc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c68:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c7a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	617a      	str	r2, [r7, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	22ff      	movs	r2, #255	; 0xff
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2203      	movs	r2, #3
 8005c92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e035      	b.n	8005d0a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0e7      	beq.n	8005c7c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x26c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x26c>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce6:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x26c>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <HAL_RTC_SetAlarm_IT+0x26c>)
 8005cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	22ff      	movs	r2, #255	; 0xff
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3724      	adds	r7, #36	; 0x24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200000a8 	.word	0x200000a8
 8005d18:	10624dd3 	.word	0x10624dd3
 8005d1c:	40013c00 	.word	0x40013c00

08005d20 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d012      	beq.n	8005d5c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fb fbd1 	bl	80014ec <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d012      	beq.n	8005d90 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f9e9 	bl	8006150 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d96:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	775a      	strb	r2, [r3, #29]
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40013c00 	.word	0x40013c00

08005dac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc8:	f7fd fa98 	bl	80032fc <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005dce:	e009      	b.n	8005de4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005dd0:	f7fd fa94 	bl	80032fc <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dde:	d901      	bls.n	8005de4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e007      	b.n	8005df4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0ee      	beq.n	8005dd0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d119      	bne.n	8005e4a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e20:	f7fd fa6c 	bl	80032fc <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e26:	e009      	b.n	8005e3c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e28:	f7fd fa68 	bl	80032fc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e36:	d901      	bls.n	8005e3c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e007      	b.n	8005e4c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0ee      	beq.n	8005e28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005e62:	e005      	b.n	8005e70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	3b0a      	subs	r3, #10
 8005e6e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	d8f6      	bhi.n	8005e64 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b2db      	uxtb	r3, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	7f1b      	ldrb	r3, [r3, #28]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0a6      	b.n	8005ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	22ca      	movs	r2, #202	; 0xca
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2253      	movs	r2, #83	; 0x53
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d022      	beq.n	8005f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005ed2:	4b4c      	ldr	r3, [pc, #304]	; (8006004 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a4c      	ldr	r2, [pc, #304]	; (8006008 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	0adb      	lsrs	r3, r3, #11
 8005ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1e5a      	subs	r2, r3, #1
 8005eec:	617a      	str	r2, [r7, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2203      	movs	r2, #3
 8005efe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e075      	b.n	8005ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e7      	bne.n	8005ee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f26:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005f28:	4b36      	ldr	r3, [pc, #216]	; (8006004 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a36      	ldr	r2, [pc, #216]	; (8006008 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	0adb      	lsrs	r3, r3, #11
 8005f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1e5a      	subs	r2, r3, #1
 8005f42:	617a      	str	r2, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2203      	movs	r2, #3
 8005f54:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e04a      	b.n	8005ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0e7      	beq.n	8005f3e <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0207 	bic.w	r2, r2, #7
 8005f84:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6899      	ldr	r1, [r3, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	; (800600c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fa0:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8005fa2:	4b1a      	ldr	r3, [pc, #104]	; (800600c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	4a19      	ldr	r2, [pc, #100]	; (800600c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fac:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fce:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fde:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	200000a8 	.word	0x200000a8
 8006008:	10624dd3 	.word	0x10624dd3
 800600c:	40013c00 	.word	0x40013c00

08006010 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7f1b      	ldrb	r3, [r3, #28]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e047      	b.n	80060b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	22ca      	movs	r2, #202	; 0xca
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2253      	movs	r2, #83	; 0x53
 8006042:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006052:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006062:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006064:	f7fd f94a 	bl	80032fc <HAL_GetTick>
 8006068:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800606a:	e013      	b.n	8006094 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800606c:	f7fd f946 	bl	80032fc <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800607a:	d90b      	bls.n	8006094 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e011      	b.n	80060b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0e4      	beq.n	800606c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	22ff      	movs	r2, #255	; 0xff
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00b      	beq.n	80060ee <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f816 	bl	8006108 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060ec:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80060f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80060f4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	775a      	strb	r2, [r3, #29]
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40013c00 	.word	0x40013c00

08006108 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3350      	adds	r3, #80	; 0x50
 8006132:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e01d      	b.n	80061b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fc fe94 	bl	8002eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f000 f8e4 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d007      	beq.n	80061f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_TIM_ConfigClockSource+0x18>
 8006216:	2302      	movs	r3, #2
 8006218:	e0a6      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x166>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006238:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006240:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d067      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x120>
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d80b      	bhi.n	800626e <HAL_TIM_ConfigClockSource+0x6c>
 8006256:	2b10      	cmp	r3, #16
 8006258:	d073      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x140>
 800625a:	2b10      	cmp	r3, #16
 800625c:	d802      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x62>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06f      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006262:	e078      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006264:	2b20      	cmp	r3, #32
 8006266:	d06c      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x140>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d06a      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800626c:	e073      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800626e:	2b70      	cmp	r3, #112	; 0x70
 8006270:	d00d      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x8c>
 8006272:	2b70      	cmp	r3, #112	; 0x70
 8006274:	d804      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x7e>
 8006276:	2b50      	cmp	r3, #80	; 0x50
 8006278:	d033      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0xe0>
 800627a:	2b60      	cmp	r3, #96	; 0x60
 800627c:	d041      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800627e:	e06a      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d066      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0x152>
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	d017      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800628c:	e063      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6899      	ldr	r1, [r3, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f000 f961 	bl	8006564 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	609a      	str	r2, [r3, #8]
      break;
 80062ba:	e04c      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	6899      	ldr	r1, [r3, #8]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f000 f94a 	bl	8006564 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062de:	609a      	str	r2, [r3, #8]
      break;
 80062e0:	e039      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f000 f8be 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2150      	movs	r1, #80	; 0x50
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f917 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8006300:	e029      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6859      	ldr	r1, [r3, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	461a      	mov	r2, r3
 8006310:	f000 f8dd 	bl	80064ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2160      	movs	r1, #96	; 0x60
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f907 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8006320:	e019      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	461a      	mov	r2, r3
 8006330:	f000 f89e 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2140      	movs	r1, #64	; 0x40
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f8f7 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8006340:	e009      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f000 f8ee 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8006352:	e000      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006354:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a34      	ldr	r2, [pc, #208]	; (8006454 <TIM_Base_SetConfig+0xe4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00f      	beq.n	80063a8 <TIM_Base_SetConfig+0x38>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d00b      	beq.n	80063a8 <TIM_Base_SetConfig+0x38>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a31      	ldr	r2, [pc, #196]	; (8006458 <TIM_Base_SetConfig+0xe8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_Base_SetConfig+0x38>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a30      	ldr	r2, [pc, #192]	; (800645c <TIM_Base_SetConfig+0xec>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_Base_SetConfig+0x38>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <TIM_Base_SetConfig+0xf0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <TIM_Base_SetConfig+0xe4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01b      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d017      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a22      	ldr	r2, [pc, #136]	; (8006458 <TIM_Base_SetConfig+0xe8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a21      	ldr	r2, [pc, #132]	; (800645c <TIM_Base_SetConfig+0xec>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00f      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a20      	ldr	r2, [pc, #128]	; (8006460 <TIM_Base_SetConfig+0xf0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <TIM_Base_SetConfig+0xf4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <TIM_Base_SetConfig+0xf8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_Base_SetConfig+0x8a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a1d      	ldr	r2, [pc, #116]	; (800646c <TIM_Base_SetConfig+0xfc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a08      	ldr	r2, [pc, #32]	; (8006454 <TIM_Base_SetConfig+0xe4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d103      	bne.n	8006440 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	615a      	str	r2, [r3, #20]
}
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40010000 	.word	0x40010000
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800

08006470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 030a 	bic.w	r3, r3, #10
 80064ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0210 	bic.w	r2, r3, #16
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800650a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	f043 0307 	orr.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	021a      	lsls	r2, r3, #8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	431a      	orrs	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4313      	orrs	r3, r2
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e050      	b.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1c      	ldr	r2, [pc, #112]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006608:	d013      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a18      	ldr	r2, [pc, #96]	; (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a16      	ldr	r2, [pc, #88]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a15      	ldr	r2, [pc, #84]	; (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a13      	ldr	r2, [pc, #76]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10c      	bne.n	800664c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4313      	orrs	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40010000 	.word	0x40010000
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40014000 	.word	0x40014000

08006680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e03f      	b.n	8006712 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc fd48 	bl	800313c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2224      	movs	r2, #36	; 0x24
 80066b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 faf9 	bl	8006cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b20      	cmp	r3, #32
 8006732:	d130      	bne.n	8006796 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_UART_Transmit_IT+0x26>
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e029      	b.n	8006798 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_UART_Transmit_IT+0x38>
 800674e:	2302      	movs	r3, #2
 8006750:	e022      	b.n	8006798 <HAL_UART_Transmit_IT+0x7e>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2221      	movs	r2, #33	; 0x21
 8006776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006790:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	e000      	b.n	8006798 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006796:	2302      	movs	r3, #2
  }
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d140      	bne.n	8006840 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_UART_Receive_IT+0x26>
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e039      	b.n	8006842 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_UART_Receive_IT+0x38>
 80067d8:	2302      	movs	r3, #2
 80067da:	e032      	b.n	8006842 <HAL_UART_Receive_IT+0x9e>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2222      	movs	r2, #34	; 0x22
 8006800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0220 	orr.w	r2, r2, #32
 800683a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e000      	b.n	8006842 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006840:	2302      	movs	r3, #2
  }
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d008      	beq.n	80068a2 <HAL_UART_IRQHandler+0x52>
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f98c 	bl	8006bb8 <UART_Receive_IT>
      return;
 80068a0:	e0d1      	b.n	8006a46 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80b0 	beq.w	8006a0a <HAL_UART_IRQHandler+0x1ba>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <HAL_UART_IRQHandler+0x70>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80a5 	beq.w	8006a0a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_UART_IRQHandler+0x90>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d8:	f043 0201 	orr.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <HAL_UART_IRQHandler+0xb0>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	f043 0202 	orr.w	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_UART_IRQHandler+0xd0>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006918:	f043 0204 	orr.w	r2, r3, #4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00f      	beq.n	800694a <HAL_UART_IRQHandler+0xfa>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_UART_IRQHandler+0xee>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	f043 0208 	orr.w	r2, r3, #8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d078      	beq.n	8006a44 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <HAL_UART_IRQHandler+0x11c>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f926 	bl	8006bb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <HAL_UART_IRQHandler+0x144>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d031      	beq.n	80069f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f86f 	bl	8006a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d123      	bne.n	80069f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <HAL_UART_IRQHandler+0x1fc>)
 80069c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fc fdd4 	bl	800357a <HAL_DMA_Abort_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d016      	beq.n	8006a06 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069e2:	4610      	mov	r0, r2
 80069e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e6:	e00e      	b.n	8006a06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f83b 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ee:	e00a      	b.n	8006a06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f837 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f6:	e006      	b.n	8006a06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f833 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006a04:	e01e      	b.n	8006a44 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a06:	bf00      	nop
    return;
 8006a08:	e01c      	b.n	8006a44 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_UART_IRQHandler+0x1d6>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f85c 	bl	8006adc <UART_Transmit_IT>
    return;
 8006a24:	e00f      	b.n	8006a46 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <HAL_UART_IRQHandler+0x1f6>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8a4 	bl	8006b88 <UART_EndTransmit_IT>
    return;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006a44:	bf00      	nop
  }
}
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	08006ab5 	.word	0x08006ab5

08006a50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff ffc8 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b21      	cmp	r3, #33	; 0x21
 8006aee:	d144      	bne.n	8006b7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af8:	d11a      	bne.n	8006b30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d105      	bne.n	8006b24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	621a      	str	r2, [r3, #32]
 8006b22:	e00e      	b.n	8006b42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]
 8006b2e:	e008      	b.n	8006b42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	1c59      	adds	r1, r3, #1
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6211      	str	r1, [r2, #32]
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e000      	b.n	8006b7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff51 	bl	8006a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b22      	cmp	r3, #34	; 0x22
 8006bca:	d171      	bne.n	8006cb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd4:	d123      	bne.n	8006c1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10e      	bne.n	8006c02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	1c9a      	adds	r2, r3, #2
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8006c00:	e029      	b.n	8006c56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c1c:	e01b      	b.n	8006c56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6858      	ldr	r0, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	1c59      	adds	r1, r3, #1
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6291      	str	r1, [r2, #40]	; 0x28
 8006c36:	b2c2      	uxtb	r2, r0
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e00c      	b.n	8006c56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	1c58      	adds	r0, r3, #1
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	6288      	str	r0, [r1, #40]	; 0x28
 8006c4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d120      	bne.n	8006cac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0220 	bic.w	r2, r2, #32
 8006c78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695a      	ldr	r2, [r3, #20]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fb fc3a 	bl	800251c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e002      	b.n	8006cb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e000      	b.n	8006cb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
  }
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006cfe:	f023 030c 	bic.w	r3, r3, #12
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	68f9      	ldr	r1, [r7, #12]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2a:	f040 818b 	bne.w	8007044 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4ac1      	ldr	r2, [pc, #772]	; (8007038 <UART_SetConfig+0x37c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d005      	beq.n	8006d44 <UART_SetConfig+0x88>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4abf      	ldr	r2, [pc, #764]	; (800703c <UART_SetConfig+0x380>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f040 80bd 	bne.w	8006ebe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d44:	f7fe fbbc 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8006d48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	461d      	mov	r5, r3
 8006d4e:	f04f 0600 	mov.w	r6, #0
 8006d52:	46a8      	mov	r8, r5
 8006d54:	46b1      	mov	r9, r6
 8006d56:	eb18 0308 	adds.w	r3, r8, r8
 8006d5a:	eb49 0409 	adc.w	r4, r9, r9
 8006d5e:	4698      	mov	r8, r3
 8006d60:	46a1      	mov	r9, r4
 8006d62:	eb18 0805 	adds.w	r8, r8, r5
 8006d66:	eb49 0906 	adc.w	r9, r9, r6
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d7e:	4688      	mov	r8, r1
 8006d80:	4691      	mov	r9, r2
 8006d82:	eb18 0005 	adds.w	r0, r8, r5
 8006d86:	eb49 0106 	adc.w	r1, r9, r6
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	461d      	mov	r5, r3
 8006d90:	f04f 0600 	mov.w	r6, #0
 8006d94:	196b      	adds	r3, r5, r5
 8006d96:	eb46 0406 	adc.w	r4, r6, r6
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4623      	mov	r3, r4
 8006d9e:	f7f9 ff7b 	bl	8000c98 <__aeabi_uldivmod>
 8006da2:	4603      	mov	r3, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	461a      	mov	r2, r3
 8006da8:	4ba5      	ldr	r3, [pc, #660]	; (8007040 <UART_SetConfig+0x384>)
 8006daa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	461d      	mov	r5, r3
 8006db8:	f04f 0600 	mov.w	r6, #0
 8006dbc:	46a9      	mov	r9, r5
 8006dbe:	46b2      	mov	sl, r6
 8006dc0:	eb19 0309 	adds.w	r3, r9, r9
 8006dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8006dc8:	4699      	mov	r9, r3
 8006dca:	46a2      	mov	sl, r4
 8006dcc:	eb19 0905 	adds.w	r9, r9, r5
 8006dd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dd4:	f04f 0100 	mov.w	r1, #0
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006de8:	4689      	mov	r9, r1
 8006dea:	4692      	mov	sl, r2
 8006dec:	eb19 0005 	adds.w	r0, r9, r5
 8006df0:	eb4a 0106 	adc.w	r1, sl, r6
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f04f 0600 	mov.w	r6, #0
 8006dfe:	196b      	adds	r3, r5, r5
 8006e00:	eb46 0406 	adc.w	r4, r6, r6
 8006e04:	461a      	mov	r2, r3
 8006e06:	4623      	mov	r3, r4
 8006e08:	f7f9 ff46 	bl	8000c98 <__aeabi_uldivmod>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b8b      	ldr	r3, [pc, #556]	; (8007040 <UART_SetConfig+0x384>)
 8006e14:	fba3 1302 	umull	r1, r3, r3, r2
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	2164      	movs	r1, #100	; 0x64
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	3332      	adds	r3, #50	; 0x32
 8006e26:	4a86      	ldr	r2, [pc, #536]	; (8007040 <UART_SetConfig+0x384>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e34:	4498      	add	r8, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	461d      	mov	r5, r3
 8006e3a:	f04f 0600 	mov.w	r6, #0
 8006e3e:	46a9      	mov	r9, r5
 8006e40:	46b2      	mov	sl, r6
 8006e42:	eb19 0309 	adds.w	r3, r9, r9
 8006e46:	eb4a 040a 	adc.w	r4, sl, sl
 8006e4a:	4699      	mov	r9, r3
 8006e4c:	46a2      	mov	sl, r4
 8006e4e:	eb19 0905 	adds.w	r9, r9, r5
 8006e52:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e6a:	4689      	mov	r9, r1
 8006e6c:	4692      	mov	sl, r2
 8006e6e:	eb19 0005 	adds.w	r0, r9, r5
 8006e72:	eb4a 0106 	adc.w	r1, sl, r6
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	f04f 0600 	mov.w	r6, #0
 8006e80:	196b      	adds	r3, r5, r5
 8006e82:	eb46 0406 	adc.w	r4, r6, r6
 8006e86:	461a      	mov	r2, r3
 8006e88:	4623      	mov	r3, r4
 8006e8a:	f7f9 ff05 	bl	8000c98 <__aeabi_uldivmod>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	461a      	mov	r2, r3
 8006e94:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <UART_SetConfig+0x384>)
 8006e96:	fba3 1302 	umull	r1, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	2164      	movs	r1, #100	; 0x64
 8006e9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	3332      	adds	r3, #50	; 0x32
 8006ea8:	4a65      	ldr	r2, [pc, #404]	; (8007040 <UART_SetConfig+0x384>)
 8006eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	f003 0207 	and.w	r2, r3, #7
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4442      	add	r2, r8
 8006eba:	609a      	str	r2, [r3, #8]
 8006ebc:	e26f      	b.n	800739e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ebe:	f7fe faeb 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8006ec2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	f04f 0600 	mov.w	r6, #0
 8006ecc:	46a8      	mov	r8, r5
 8006ece:	46b1      	mov	r9, r6
 8006ed0:	eb18 0308 	adds.w	r3, r8, r8
 8006ed4:	eb49 0409 	adc.w	r4, r9, r9
 8006ed8:	4698      	mov	r8, r3
 8006eda:	46a1      	mov	r9, r4
 8006edc:	eb18 0805 	adds.w	r8, r8, r5
 8006ee0:	eb49 0906 	adc.w	r9, r9, r6
 8006ee4:	f04f 0100 	mov.w	r1, #0
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ef0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ef4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ef8:	4688      	mov	r8, r1
 8006efa:	4691      	mov	r9, r2
 8006efc:	eb18 0005 	adds.w	r0, r8, r5
 8006f00:	eb49 0106 	adc.w	r1, r9, r6
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	461d      	mov	r5, r3
 8006f0a:	f04f 0600 	mov.w	r6, #0
 8006f0e:	196b      	adds	r3, r5, r5
 8006f10:	eb46 0406 	adc.w	r4, r6, r6
 8006f14:	461a      	mov	r2, r3
 8006f16:	4623      	mov	r3, r4
 8006f18:	f7f9 febe 	bl	8000c98 <__aeabi_uldivmod>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	461a      	mov	r2, r3
 8006f22:	4b47      	ldr	r3, [pc, #284]	; (8007040 <UART_SetConfig+0x384>)
 8006f24:	fba3 2302 	umull	r2, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	461d      	mov	r5, r3
 8006f32:	f04f 0600 	mov.w	r6, #0
 8006f36:	46a9      	mov	r9, r5
 8006f38:	46b2      	mov	sl, r6
 8006f3a:	eb19 0309 	adds.w	r3, r9, r9
 8006f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8006f42:	4699      	mov	r9, r3
 8006f44:	46a2      	mov	sl, r4
 8006f46:	eb19 0905 	adds.w	r9, r9, r5
 8006f4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f62:	4689      	mov	r9, r1
 8006f64:	4692      	mov	sl, r2
 8006f66:	eb19 0005 	adds.w	r0, r9, r5
 8006f6a:	eb4a 0106 	adc.w	r1, sl, r6
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	461d      	mov	r5, r3
 8006f74:	f04f 0600 	mov.w	r6, #0
 8006f78:	196b      	adds	r3, r5, r5
 8006f7a:	eb46 0406 	adc.w	r4, r6, r6
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4623      	mov	r3, r4
 8006f82:	f7f9 fe89 	bl	8000c98 <__aeabi_uldivmod>
 8006f86:	4603      	mov	r3, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4b2c      	ldr	r3, [pc, #176]	; (8007040 <UART_SetConfig+0x384>)
 8006f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	2164      	movs	r1, #100	; 0x64
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	3332      	adds	r3, #50	; 0x32
 8006fa0:	4a27      	ldr	r2, [pc, #156]	; (8007040 <UART_SetConfig+0x384>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fae:	4498      	add	r8, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	f04f 0600 	mov.w	r6, #0
 8006fb8:	46a9      	mov	r9, r5
 8006fba:	46b2      	mov	sl, r6
 8006fbc:	eb19 0309 	adds.w	r3, r9, r9
 8006fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8006fc4:	4699      	mov	r9, r3
 8006fc6:	46a2      	mov	sl, r4
 8006fc8:	eb19 0905 	adds.w	r9, r9, r5
 8006fcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006fd0:	f04f 0100 	mov.w	r1, #0
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fe4:	4689      	mov	r9, r1
 8006fe6:	4692      	mov	sl, r2
 8006fe8:	eb19 0005 	adds.w	r0, r9, r5
 8006fec:	eb4a 0106 	adc.w	r1, sl, r6
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	f04f 0600 	mov.w	r6, #0
 8006ffa:	196b      	adds	r3, r5, r5
 8006ffc:	eb46 0406 	adc.w	r4, r6, r6
 8007000:	461a      	mov	r2, r3
 8007002:	4623      	mov	r3, r4
 8007004:	f7f9 fe48 	bl	8000c98 <__aeabi_uldivmod>
 8007008:	4603      	mov	r3, r0
 800700a:	460c      	mov	r4, r1
 800700c:	461a      	mov	r2, r3
 800700e:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <UART_SetConfig+0x384>)
 8007010:	fba3 1302 	umull	r1, r3, r3, r2
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	2164      	movs	r1, #100	; 0x64
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	3332      	adds	r3, #50	; 0x32
 8007022:	4a07      	ldr	r2, [pc, #28]	; (8007040 <UART_SetConfig+0x384>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	f003 0207 	and.w	r2, r3, #7
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4442      	add	r2, r8
 8007034:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007036:	e1b2      	b.n	800739e <UART_SetConfig+0x6e2>
 8007038:	40011000 	.word	0x40011000
 800703c:	40011400 	.word	0x40011400
 8007040:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4ad7      	ldr	r2, [pc, #860]	; (80073a8 <UART_SetConfig+0x6ec>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d005      	beq.n	800705a <UART_SetConfig+0x39e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4ad6      	ldr	r2, [pc, #856]	; (80073ac <UART_SetConfig+0x6f0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	f040 80d1 	bne.w	80071fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800705a:	f7fe fa31 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 800705e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	469a      	mov	sl, r3
 8007064:	f04f 0b00 	mov.w	fp, #0
 8007068:	46d0      	mov	r8, sl
 800706a:	46d9      	mov	r9, fp
 800706c:	eb18 0308 	adds.w	r3, r8, r8
 8007070:	eb49 0409 	adc.w	r4, r9, r9
 8007074:	4698      	mov	r8, r3
 8007076:	46a1      	mov	r9, r4
 8007078:	eb18 080a 	adds.w	r8, r8, sl
 800707c:	eb49 090b 	adc.w	r9, r9, fp
 8007080:	f04f 0100 	mov.w	r1, #0
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800708c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007090:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007094:	4688      	mov	r8, r1
 8007096:	4691      	mov	r9, r2
 8007098:	eb1a 0508 	adds.w	r5, sl, r8
 800709c:	eb4b 0609 	adc.w	r6, fp, r9
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	4619      	mov	r1, r3
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	f04f 0400 	mov.w	r4, #0
 80070b2:	0094      	lsls	r4, r2, #2
 80070b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070b8:	008b      	lsls	r3, r1, #2
 80070ba:	461a      	mov	r2, r3
 80070bc:	4623      	mov	r3, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	4631      	mov	r1, r6
 80070c2:	f7f9 fde9 	bl	8000c98 <__aeabi_uldivmod>
 80070c6:	4603      	mov	r3, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	461a      	mov	r2, r3
 80070cc:	4bb8      	ldr	r3, [pc, #736]	; (80073b0 <UART_SetConfig+0x6f4>)
 80070ce:	fba3 2302 	umull	r2, r3, r3, r2
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	469b      	mov	fp, r3
 80070dc:	f04f 0c00 	mov.w	ip, #0
 80070e0:	46d9      	mov	r9, fp
 80070e2:	46e2      	mov	sl, ip
 80070e4:	eb19 0309 	adds.w	r3, r9, r9
 80070e8:	eb4a 040a 	adc.w	r4, sl, sl
 80070ec:	4699      	mov	r9, r3
 80070ee:	46a2      	mov	sl, r4
 80070f0:	eb19 090b 	adds.w	r9, r9, fp
 80070f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070f8:	f04f 0100 	mov.w	r1, #0
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800710c:	4689      	mov	r9, r1
 800710e:	4692      	mov	sl, r2
 8007110:	eb1b 0509 	adds.w	r5, fp, r9
 8007114:	eb4c 060a 	adc.w	r6, ip, sl
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4619      	mov	r1, r3
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	f04f 0400 	mov.w	r4, #0
 800712a:	0094      	lsls	r4, r2, #2
 800712c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007130:	008b      	lsls	r3, r1, #2
 8007132:	461a      	mov	r2, r3
 8007134:	4623      	mov	r3, r4
 8007136:	4628      	mov	r0, r5
 8007138:	4631      	mov	r1, r6
 800713a:	f7f9 fdad 	bl	8000c98 <__aeabi_uldivmod>
 800713e:	4603      	mov	r3, r0
 8007140:	460c      	mov	r4, r1
 8007142:	461a      	mov	r2, r3
 8007144:	4b9a      	ldr	r3, [pc, #616]	; (80073b0 <UART_SetConfig+0x6f4>)
 8007146:	fba3 1302 	umull	r1, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2164      	movs	r1, #100	; 0x64
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	3332      	adds	r3, #50	; 0x32
 8007158:	4a95      	ldr	r2, [pc, #596]	; (80073b0 <UART_SetConfig+0x6f4>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007164:	4498      	add	r8, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	469b      	mov	fp, r3
 800716a:	f04f 0c00 	mov.w	ip, #0
 800716e:	46d9      	mov	r9, fp
 8007170:	46e2      	mov	sl, ip
 8007172:	eb19 0309 	adds.w	r3, r9, r9
 8007176:	eb4a 040a 	adc.w	r4, sl, sl
 800717a:	4699      	mov	r9, r3
 800717c:	46a2      	mov	sl, r4
 800717e:	eb19 090b 	adds.w	r9, r9, fp
 8007182:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007186:	f04f 0100 	mov.w	r1, #0
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800719a:	4689      	mov	r9, r1
 800719c:	4692      	mov	sl, r2
 800719e:	eb1b 0509 	adds.w	r5, fp, r9
 80071a2:	eb4c 060a 	adc.w	r6, ip, sl
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	f04f 0400 	mov.w	r4, #0
 80071b8:	0094      	lsls	r4, r2, #2
 80071ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071be:	008b      	lsls	r3, r1, #2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	4631      	mov	r1, r6
 80071c8:	f7f9 fd66 	bl	8000c98 <__aeabi_uldivmod>
 80071cc:	4603      	mov	r3, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	461a      	mov	r2, r3
 80071d2:	4b77      	ldr	r3, [pc, #476]	; (80073b0 <UART_SetConfig+0x6f4>)
 80071d4:	fba3 1302 	umull	r1, r3, r3, r2
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	2164      	movs	r1, #100	; 0x64
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	3332      	adds	r3, #50	; 0x32
 80071e6:	4a72      	ldr	r2, [pc, #456]	; (80073b0 <UART_SetConfig+0x6f4>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	f003 020f 	and.w	r2, r3, #15
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4442      	add	r2, r8
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	e0d0      	b.n	800739e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80071fc:	f7fe f94c 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8007200:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	469a      	mov	sl, r3
 8007206:	f04f 0b00 	mov.w	fp, #0
 800720a:	46d0      	mov	r8, sl
 800720c:	46d9      	mov	r9, fp
 800720e:	eb18 0308 	adds.w	r3, r8, r8
 8007212:	eb49 0409 	adc.w	r4, r9, r9
 8007216:	4698      	mov	r8, r3
 8007218:	46a1      	mov	r9, r4
 800721a:	eb18 080a 	adds.w	r8, r8, sl
 800721e:	eb49 090b 	adc.w	r9, r9, fp
 8007222:	f04f 0100 	mov.w	r1, #0
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800722e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007232:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007236:	4688      	mov	r8, r1
 8007238:	4691      	mov	r9, r2
 800723a:	eb1a 0508 	adds.w	r5, sl, r8
 800723e:	eb4b 0609 	adc.w	r6, fp, r9
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4619      	mov	r1, r3
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	f04f 0400 	mov.w	r4, #0
 8007254:	0094      	lsls	r4, r2, #2
 8007256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800725a:	008b      	lsls	r3, r1, #2
 800725c:	461a      	mov	r2, r3
 800725e:	4623      	mov	r3, r4
 8007260:	4628      	mov	r0, r5
 8007262:	4631      	mov	r1, r6
 8007264:	f7f9 fd18 	bl	8000c98 <__aeabi_uldivmod>
 8007268:	4603      	mov	r3, r0
 800726a:	460c      	mov	r4, r1
 800726c:	461a      	mov	r2, r3
 800726e:	4b50      	ldr	r3, [pc, #320]	; (80073b0 <UART_SetConfig+0x6f4>)
 8007270:	fba3 2302 	umull	r2, r3, r3, r2
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	469b      	mov	fp, r3
 800727e:	f04f 0c00 	mov.w	ip, #0
 8007282:	46d9      	mov	r9, fp
 8007284:	46e2      	mov	sl, ip
 8007286:	eb19 0309 	adds.w	r3, r9, r9
 800728a:	eb4a 040a 	adc.w	r4, sl, sl
 800728e:	4699      	mov	r9, r3
 8007290:	46a2      	mov	sl, r4
 8007292:	eb19 090b 	adds.w	r9, r9, fp
 8007296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800729a:	f04f 0100 	mov.w	r1, #0
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072ae:	4689      	mov	r9, r1
 80072b0:	4692      	mov	sl, r2
 80072b2:	eb1b 0509 	adds.w	r5, fp, r9
 80072b6:	eb4c 060a 	adc.w	r6, ip, sl
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	f04f 0400 	mov.w	r4, #0
 80072cc:	0094      	lsls	r4, r2, #2
 80072ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072d2:	008b      	lsls	r3, r1, #2
 80072d4:	461a      	mov	r2, r3
 80072d6:	4623      	mov	r3, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	4631      	mov	r1, r6
 80072dc:	f7f9 fcdc 	bl	8000c98 <__aeabi_uldivmod>
 80072e0:	4603      	mov	r3, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	461a      	mov	r2, r3
 80072e6:	4b32      	ldr	r3, [pc, #200]	; (80073b0 <UART_SetConfig+0x6f4>)
 80072e8:	fba3 1302 	umull	r1, r3, r3, r2
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	2164      	movs	r1, #100	; 0x64
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	3332      	adds	r3, #50	; 0x32
 80072fa:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <UART_SetConfig+0x6f4>)
 80072fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007306:	4498      	add	r8, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	469b      	mov	fp, r3
 800730c:	f04f 0c00 	mov.w	ip, #0
 8007310:	46d9      	mov	r9, fp
 8007312:	46e2      	mov	sl, ip
 8007314:	eb19 0309 	adds.w	r3, r9, r9
 8007318:	eb4a 040a 	adc.w	r4, sl, sl
 800731c:	4699      	mov	r9, r3
 800731e:	46a2      	mov	sl, r4
 8007320:	eb19 090b 	adds.w	r9, r9, fp
 8007324:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007328:	f04f 0100 	mov.w	r1, #0
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800733c:	4689      	mov	r9, r1
 800733e:	4692      	mov	sl, r2
 8007340:	eb1b 0509 	adds.w	r5, fp, r9
 8007344:	eb4c 060a 	adc.w	r6, ip, sl
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	4619      	mov	r1, r3
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	f04f 0400 	mov.w	r4, #0
 800735a:	0094      	lsls	r4, r2, #2
 800735c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007360:	008b      	lsls	r3, r1, #2
 8007362:	461a      	mov	r2, r3
 8007364:	4623      	mov	r3, r4
 8007366:	4628      	mov	r0, r5
 8007368:	4631      	mov	r1, r6
 800736a:	f7f9 fc95 	bl	8000c98 <__aeabi_uldivmod>
 800736e:	4603      	mov	r3, r0
 8007370:	460c      	mov	r4, r1
 8007372:	461a      	mov	r2, r3
 8007374:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <UART_SetConfig+0x6f4>)
 8007376:	fba3 1302 	umull	r1, r3, r3, r2
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2164      	movs	r1, #100	; 0x64
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	3332      	adds	r3, #50	; 0x32
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <UART_SetConfig+0x6f4>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4442      	add	r2, r8
 800739a:	609a      	str	r2, [r3, #8]
}
 800739c:	e7ff      	b.n	800739e <UART_SetConfig+0x6e2>
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	40011000 	.word	0x40011000
 80073ac:	40011400 	.word	0x40011400
 80073b0:	51eb851f 	.word	0x51eb851f

080073b4 <__errno>:
 80073b4:	4b01      	ldr	r3, [pc, #4]	; (80073bc <__errno+0x8>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	200000b4 	.word	0x200000b4

080073c0 <__libc_init_array>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4e0d      	ldr	r6, [pc, #52]	; (80073f8 <__libc_init_array+0x38>)
 80073c4:	4c0d      	ldr	r4, [pc, #52]	; (80073fc <__libc_init_array+0x3c>)
 80073c6:	1ba4      	subs	r4, r4, r6
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	2500      	movs	r5, #0
 80073cc:	42a5      	cmp	r5, r4
 80073ce:	d109      	bne.n	80073e4 <__libc_init_array+0x24>
 80073d0:	4e0b      	ldr	r6, [pc, #44]	; (8007400 <__libc_init_array+0x40>)
 80073d2:	4c0c      	ldr	r4, [pc, #48]	; (8007404 <__libc_init_array+0x44>)
 80073d4:	f003 fd56 	bl	800ae84 <_init>
 80073d8:	1ba4      	subs	r4, r4, r6
 80073da:	10a4      	asrs	r4, r4, #2
 80073dc:	2500      	movs	r5, #0
 80073de:	42a5      	cmp	r5, r4
 80073e0:	d105      	bne.n	80073ee <__libc_init_array+0x2e>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073e8:	4798      	blx	r3
 80073ea:	3501      	adds	r5, #1
 80073ec:	e7ee      	b.n	80073cc <__libc_init_array+0xc>
 80073ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f2:	4798      	blx	r3
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7f2      	b.n	80073de <__libc_init_array+0x1e>
 80073f8:	0800b310 	.word	0x0800b310
 80073fc:	0800b310 	.word	0x0800b310
 8007400:	0800b310 	.word	0x0800b310
 8007404:	0800b314 	.word	0x0800b314

08007408 <memset>:
 8007408:	4402      	add	r2, r0
 800740a:	4603      	mov	r3, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <__cvt>:
 8007418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	ec55 4b10 	vmov	r4, r5, d0
 8007420:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007422:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007426:	2d00      	cmp	r5, #0
 8007428:	460e      	mov	r6, r1
 800742a:	4691      	mov	r9, r2
 800742c:	4619      	mov	r1, r3
 800742e:	bfb8      	it	lt
 8007430:	4622      	movlt	r2, r4
 8007432:	462b      	mov	r3, r5
 8007434:	f027 0720 	bic.w	r7, r7, #32
 8007438:	bfbb      	ittet	lt
 800743a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800743e:	461d      	movlt	r5, r3
 8007440:	2300      	movge	r3, #0
 8007442:	232d      	movlt	r3, #45	; 0x2d
 8007444:	bfb8      	it	lt
 8007446:	4614      	movlt	r4, r2
 8007448:	2f46      	cmp	r7, #70	; 0x46
 800744a:	700b      	strb	r3, [r1, #0]
 800744c:	d004      	beq.n	8007458 <__cvt+0x40>
 800744e:	2f45      	cmp	r7, #69	; 0x45
 8007450:	d100      	bne.n	8007454 <__cvt+0x3c>
 8007452:	3601      	adds	r6, #1
 8007454:	2102      	movs	r1, #2
 8007456:	e000      	b.n	800745a <__cvt+0x42>
 8007458:	2103      	movs	r1, #3
 800745a:	ab03      	add	r3, sp, #12
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	ab02      	add	r3, sp, #8
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	4632      	mov	r2, r6
 8007464:	4653      	mov	r3, sl
 8007466:	ec45 4b10 	vmov	d0, r4, r5
 800746a:	f001 fd75 	bl	8008f58 <_dtoa_r>
 800746e:	2f47      	cmp	r7, #71	; 0x47
 8007470:	4680      	mov	r8, r0
 8007472:	d102      	bne.n	800747a <__cvt+0x62>
 8007474:	f019 0f01 	tst.w	r9, #1
 8007478:	d026      	beq.n	80074c8 <__cvt+0xb0>
 800747a:	2f46      	cmp	r7, #70	; 0x46
 800747c:	eb08 0906 	add.w	r9, r8, r6
 8007480:	d111      	bne.n	80074a6 <__cvt+0x8e>
 8007482:	f898 3000 	ldrb.w	r3, [r8]
 8007486:	2b30      	cmp	r3, #48	; 0x30
 8007488:	d10a      	bne.n	80074a0 <__cvt+0x88>
 800748a:	2200      	movs	r2, #0
 800748c:	2300      	movs	r3, #0
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	f7f9 fb21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007496:	b918      	cbnz	r0, 80074a0 <__cvt+0x88>
 8007498:	f1c6 0601 	rsb	r6, r6, #1
 800749c:	f8ca 6000 	str.w	r6, [sl]
 80074a0:	f8da 3000 	ldr.w	r3, [sl]
 80074a4:	4499      	add	r9, r3
 80074a6:	2200      	movs	r2, #0
 80074a8:	2300      	movs	r3, #0
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f9 fb13 	bl	8000ad8 <__aeabi_dcmpeq>
 80074b2:	b938      	cbnz	r0, 80074c4 <__cvt+0xac>
 80074b4:	2230      	movs	r2, #48	; 0x30
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	454b      	cmp	r3, r9
 80074ba:	d205      	bcs.n	80074c8 <__cvt+0xb0>
 80074bc:	1c59      	adds	r1, r3, #1
 80074be:	9103      	str	r1, [sp, #12]
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	e7f8      	b.n	80074b6 <__cvt+0x9e>
 80074c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074cc:	eba3 0308 	sub.w	r3, r3, r8
 80074d0:	4640      	mov	r0, r8
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	b004      	add	sp, #16
 80074d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080074da <__exponent>:
 80074da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074dc:	2900      	cmp	r1, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	bfba      	itte	lt
 80074e2:	4249      	neglt	r1, r1
 80074e4:	232d      	movlt	r3, #45	; 0x2d
 80074e6:	232b      	movge	r3, #43	; 0x2b
 80074e8:	2909      	cmp	r1, #9
 80074ea:	f804 2b02 	strb.w	r2, [r4], #2
 80074ee:	7043      	strb	r3, [r0, #1]
 80074f0:	dd20      	ble.n	8007534 <__exponent+0x5a>
 80074f2:	f10d 0307 	add.w	r3, sp, #7
 80074f6:	461f      	mov	r7, r3
 80074f8:	260a      	movs	r6, #10
 80074fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80074fe:	fb06 1115 	mls	r1, r6, r5, r1
 8007502:	3130      	adds	r1, #48	; 0x30
 8007504:	2d09      	cmp	r5, #9
 8007506:	f803 1c01 	strb.w	r1, [r3, #-1]
 800750a:	f103 32ff 	add.w	r2, r3, #4294967295
 800750e:	4629      	mov	r1, r5
 8007510:	dc09      	bgt.n	8007526 <__exponent+0x4c>
 8007512:	3130      	adds	r1, #48	; 0x30
 8007514:	3b02      	subs	r3, #2
 8007516:	f802 1c01 	strb.w	r1, [r2, #-1]
 800751a:	42bb      	cmp	r3, r7
 800751c:	4622      	mov	r2, r4
 800751e:	d304      	bcc.n	800752a <__exponent+0x50>
 8007520:	1a10      	subs	r0, r2, r0
 8007522:	b003      	add	sp, #12
 8007524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007526:	4613      	mov	r3, r2
 8007528:	e7e7      	b.n	80074fa <__exponent+0x20>
 800752a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800752e:	f804 2b01 	strb.w	r2, [r4], #1
 8007532:	e7f2      	b.n	800751a <__exponent+0x40>
 8007534:	2330      	movs	r3, #48	; 0x30
 8007536:	4419      	add	r1, r3
 8007538:	7083      	strb	r3, [r0, #2]
 800753a:	1d02      	adds	r2, r0, #4
 800753c:	70c1      	strb	r1, [r0, #3]
 800753e:	e7ef      	b.n	8007520 <__exponent+0x46>

08007540 <_printf_float>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b08d      	sub	sp, #52	; 0x34
 8007546:	460c      	mov	r4, r1
 8007548:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800754c:	4616      	mov	r6, r2
 800754e:	461f      	mov	r7, r3
 8007550:	4605      	mov	r5, r0
 8007552:	f002 fde5 	bl	800a120 <_localeconv_r>
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	4618      	mov	r0, r3
 800755c:	f7f8 fe40 	bl	80001e0 <strlen>
 8007560:	2300      	movs	r3, #0
 8007562:	930a      	str	r3, [sp, #40]	; 0x28
 8007564:	f8d8 3000 	ldr.w	r3, [r8]
 8007568:	9005      	str	r0, [sp, #20]
 800756a:	3307      	adds	r3, #7
 800756c:	f023 0307 	bic.w	r3, r3, #7
 8007570:	f103 0208 	add.w	r2, r3, #8
 8007574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007578:	f8d4 b000 	ldr.w	fp, [r4]
 800757c:	f8c8 2000 	str.w	r2, [r8]
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007588:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800758c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007590:	9307      	str	r3, [sp, #28]
 8007592:	f8cd 8018 	str.w	r8, [sp, #24]
 8007596:	f04f 32ff 	mov.w	r2, #4294967295
 800759a:	4ba7      	ldr	r3, [pc, #668]	; (8007838 <_printf_float+0x2f8>)
 800759c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a0:	f7f9 facc 	bl	8000b3c <__aeabi_dcmpun>
 80075a4:	bb70      	cbnz	r0, 8007604 <_printf_float+0xc4>
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	4ba3      	ldr	r3, [pc, #652]	; (8007838 <_printf_float+0x2f8>)
 80075ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075b0:	f7f9 faa6 	bl	8000b00 <__aeabi_dcmple>
 80075b4:	bb30      	cbnz	r0, 8007604 <_printf_float+0xc4>
 80075b6:	2200      	movs	r2, #0
 80075b8:	2300      	movs	r3, #0
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	f7f9 fa95 	bl	8000aec <__aeabi_dcmplt>
 80075c2:	b110      	cbz	r0, 80075ca <_printf_float+0x8a>
 80075c4:	232d      	movs	r3, #45	; 0x2d
 80075c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ca:	4a9c      	ldr	r2, [pc, #624]	; (800783c <_printf_float+0x2fc>)
 80075cc:	4b9c      	ldr	r3, [pc, #624]	; (8007840 <_printf_float+0x300>)
 80075ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075d2:	bf8c      	ite	hi
 80075d4:	4690      	movhi	r8, r2
 80075d6:	4698      	movls	r8, r3
 80075d8:	2303      	movs	r3, #3
 80075da:	f02b 0204 	bic.w	r2, fp, #4
 80075de:	6123      	str	r3, [r4, #16]
 80075e0:	6022      	str	r2, [r4, #0]
 80075e2:	f04f 0900 	mov.w	r9, #0
 80075e6:	9700      	str	r7, [sp, #0]
 80075e8:	4633      	mov	r3, r6
 80075ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80075ec:	4621      	mov	r1, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 f9e6 	bl	80079c0 <_printf_common>
 80075f4:	3001      	adds	r0, #1
 80075f6:	f040 808d 	bne.w	8007714 <_printf_float+0x1d4>
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	b00d      	add	sp, #52	; 0x34
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	4642      	mov	r2, r8
 8007606:	464b      	mov	r3, r9
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f9 fa96 	bl	8000b3c <__aeabi_dcmpun>
 8007610:	b110      	cbz	r0, 8007618 <_printf_float+0xd8>
 8007612:	4a8c      	ldr	r2, [pc, #560]	; (8007844 <_printf_float+0x304>)
 8007614:	4b8c      	ldr	r3, [pc, #560]	; (8007848 <_printf_float+0x308>)
 8007616:	e7da      	b.n	80075ce <_printf_float+0x8e>
 8007618:	6861      	ldr	r1, [r4, #4]
 800761a:	1c4b      	adds	r3, r1, #1
 800761c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007620:	a80a      	add	r0, sp, #40	; 0x28
 8007622:	d13e      	bne.n	80076a2 <_printf_float+0x162>
 8007624:	2306      	movs	r3, #6
 8007626:	6063      	str	r3, [r4, #4]
 8007628:	2300      	movs	r3, #0
 800762a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800762e:	ab09      	add	r3, sp, #36	; 0x24
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	ec49 8b10 	vmov	d0, r8, r9
 8007636:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	f8cd a004 	str.w	sl, [sp, #4]
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	4628      	mov	r0, r5
 8007644:	f7ff fee8 	bl	8007418 <__cvt>
 8007648:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800764c:	2b47      	cmp	r3, #71	; 0x47
 800764e:	4680      	mov	r8, r0
 8007650:	d109      	bne.n	8007666 <_printf_float+0x126>
 8007652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007654:	1cd8      	adds	r0, r3, #3
 8007656:	db02      	blt.n	800765e <_printf_float+0x11e>
 8007658:	6862      	ldr	r2, [r4, #4]
 800765a:	4293      	cmp	r3, r2
 800765c:	dd47      	ble.n	80076ee <_printf_float+0x1ae>
 800765e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007662:	fa5f fa8a 	uxtb.w	sl, sl
 8007666:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800766a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800766c:	d824      	bhi.n	80076b8 <_printf_float+0x178>
 800766e:	3901      	subs	r1, #1
 8007670:	4652      	mov	r2, sl
 8007672:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007676:	9109      	str	r1, [sp, #36]	; 0x24
 8007678:	f7ff ff2f 	bl	80074da <__exponent>
 800767c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800767e:	1813      	adds	r3, r2, r0
 8007680:	2a01      	cmp	r2, #1
 8007682:	4681      	mov	r9, r0
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	dc02      	bgt.n	800768e <_printf_float+0x14e>
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	07d1      	lsls	r1, r2, #31
 800768c:	d501      	bpl.n	8007692 <_printf_float+0x152>
 800768e:	3301      	adds	r3, #1
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0a5      	beq.n	80075e6 <_printf_float+0xa6>
 800769a:	232d      	movs	r3, #45	; 0x2d
 800769c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a0:	e7a1      	b.n	80075e6 <_printf_float+0xa6>
 80076a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80076a6:	f000 8177 	beq.w	8007998 <_printf_float+0x458>
 80076aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80076ae:	d1bb      	bne.n	8007628 <_printf_float+0xe8>
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d1b9      	bne.n	8007628 <_printf_float+0xe8>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e7b6      	b.n	8007626 <_printf_float+0xe6>
 80076b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80076bc:	d119      	bne.n	80076f2 <_printf_float+0x1b2>
 80076be:	2900      	cmp	r1, #0
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	dd0c      	ble.n	80076de <_printf_float+0x19e>
 80076c4:	6121      	str	r1, [r4, #16]
 80076c6:	b913      	cbnz	r3, 80076ce <_printf_float+0x18e>
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	07d2      	lsls	r2, r2, #31
 80076cc:	d502      	bpl.n	80076d4 <_printf_float+0x194>
 80076ce:	3301      	adds	r3, #1
 80076d0:	440b      	add	r3, r1
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	e7d9      	b.n	8007692 <_printf_float+0x152>
 80076de:	b913      	cbnz	r3, 80076e6 <_printf_float+0x1a6>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	07d0      	lsls	r0, r2, #31
 80076e4:	d501      	bpl.n	80076ea <_printf_float+0x1aa>
 80076e6:	3302      	adds	r3, #2
 80076e8:	e7f3      	b.n	80076d2 <_printf_float+0x192>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7f1      	b.n	80076d2 <_printf_float+0x192>
 80076ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80076f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80076f6:	4293      	cmp	r3, r2
 80076f8:	db05      	blt.n	8007706 <_printf_float+0x1c6>
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	07d1      	lsls	r1, r2, #31
 8007700:	d5e8      	bpl.n	80076d4 <_printf_float+0x194>
 8007702:	3301      	adds	r3, #1
 8007704:	e7e5      	b.n	80076d2 <_printf_float+0x192>
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfd4      	ite	le
 800770a:	f1c3 0302 	rsble	r3, r3, #2
 800770e:	2301      	movgt	r3, #1
 8007710:	4413      	add	r3, r2
 8007712:	e7de      	b.n	80076d2 <_printf_float+0x192>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	055a      	lsls	r2, r3, #21
 8007718:	d407      	bmi.n	800772a <_printf_float+0x1ea>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	4642      	mov	r2, r8
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	d12b      	bne.n	8007780 <_printf_float+0x240>
 8007728:	e767      	b.n	80075fa <_printf_float+0xba>
 800772a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800772e:	f240 80dc 	bls.w	80078ea <_printf_float+0x3aa>
 8007732:	2200      	movs	r2, #0
 8007734:	2300      	movs	r3, #0
 8007736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800773a:	f7f9 f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800773e:	2800      	cmp	r0, #0
 8007740:	d033      	beq.n	80077aa <_printf_float+0x26a>
 8007742:	2301      	movs	r3, #1
 8007744:	4a41      	ldr	r2, [pc, #260]	; (800784c <_printf_float+0x30c>)
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f af54 	beq.w	80075fa <_printf_float+0xba>
 8007752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007756:	429a      	cmp	r2, r3
 8007758:	db02      	blt.n	8007760 <_printf_float+0x220>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	07d8      	lsls	r0, r3, #31
 800775e:	d50f      	bpl.n	8007780 <_printf_float+0x240>
 8007760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af45 	beq.w	80075fa <_printf_float+0xba>
 8007770:	f04f 0800 	mov.w	r8, #0
 8007774:	f104 091a 	add.w	r9, r4, #26
 8007778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777a:	3b01      	subs	r3, #1
 800777c:	4543      	cmp	r3, r8
 800777e:	dc09      	bgt.n	8007794 <_printf_float+0x254>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	079b      	lsls	r3, r3, #30
 8007784:	f100 8103 	bmi.w	800798e <_printf_float+0x44e>
 8007788:	68e0      	ldr	r0, [r4, #12]
 800778a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778c:	4298      	cmp	r0, r3
 800778e:	bfb8      	it	lt
 8007790:	4618      	movlt	r0, r3
 8007792:	e734      	b.n	80075fe <_printf_float+0xbe>
 8007794:	2301      	movs	r3, #1
 8007796:	464a      	mov	r2, r9
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af2b 	beq.w	80075fa <_printf_float+0xba>
 80077a4:	f108 0801 	add.w	r8, r8, #1
 80077a8:	e7e6      	b.n	8007778 <_printf_float+0x238>
 80077aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	dc2b      	bgt.n	8007808 <_printf_float+0x2c8>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4a26      	ldr	r2, [pc, #152]	; (800784c <_printf_float+0x30c>)
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f af1d 	beq.w	80075fa <_printf_float+0xba>
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	b923      	cbnz	r3, 80077ce <_printf_float+0x28e>
 80077c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c6:	b913      	cbnz	r3, 80077ce <_printf_float+0x28e>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	07d9      	lsls	r1, r3, #31
 80077cc:	d5d8      	bpl.n	8007780 <_printf_float+0x240>
 80077ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f af0e 	beq.w	80075fa <_printf_float+0xba>
 80077de:	f04f 0900 	mov.w	r9, #0
 80077e2:	f104 0a1a 	add.w	sl, r4, #26
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	425b      	negs	r3, r3
 80077ea:	454b      	cmp	r3, r9
 80077ec:	dc01      	bgt.n	80077f2 <_printf_float+0x2b2>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	e794      	b.n	800771c <_printf_float+0x1dc>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4652      	mov	r2, sl
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f aefc 	beq.w	80075fa <_printf_float+0xba>
 8007802:	f109 0901 	add.w	r9, r9, #1
 8007806:	e7ee      	b.n	80077e6 <_printf_float+0x2a6>
 8007808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800780c:	429a      	cmp	r2, r3
 800780e:	bfa8      	it	ge
 8007810:	461a      	movge	r2, r3
 8007812:	2a00      	cmp	r2, #0
 8007814:	4691      	mov	r9, r2
 8007816:	dd07      	ble.n	8007828 <_printf_float+0x2e8>
 8007818:	4613      	mov	r3, r2
 800781a:	4631      	mov	r1, r6
 800781c:	4642      	mov	r2, r8
 800781e:	4628      	mov	r0, r5
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	f43f aee9 	beq.w	80075fa <_printf_float+0xba>
 8007828:	f104 031a 	add.w	r3, r4, #26
 800782c:	f04f 0b00 	mov.w	fp, #0
 8007830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007834:	9306      	str	r3, [sp, #24]
 8007836:	e015      	b.n	8007864 <_printf_float+0x324>
 8007838:	7fefffff 	.word	0x7fefffff
 800783c:	0800b058 	.word	0x0800b058
 8007840:	0800b054 	.word	0x0800b054
 8007844:	0800b060 	.word	0x0800b060
 8007848:	0800b05c 	.word	0x0800b05c
 800784c:	0800b064 	.word	0x0800b064
 8007850:	2301      	movs	r3, #1
 8007852:	9a06      	ldr	r2, [sp, #24]
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f aecd 	beq.w	80075fa <_printf_float+0xba>
 8007860:	f10b 0b01 	add.w	fp, fp, #1
 8007864:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007868:	ebaa 0309 	sub.w	r3, sl, r9
 800786c:	455b      	cmp	r3, fp
 800786e:	dcef      	bgt.n	8007850 <_printf_float+0x310>
 8007870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007874:	429a      	cmp	r2, r3
 8007876:	44d0      	add	r8, sl
 8007878:	db15      	blt.n	80078a6 <_printf_float+0x366>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	07da      	lsls	r2, r3, #31
 800787e:	d412      	bmi.n	80078a6 <_printf_float+0x366>
 8007880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007884:	eba3 020a 	sub.w	r2, r3, sl
 8007888:	eba3 0a01 	sub.w	sl, r3, r1
 800788c:	4592      	cmp	sl, r2
 800788e:	bfa8      	it	ge
 8007890:	4692      	movge	sl, r2
 8007892:	f1ba 0f00 	cmp.w	sl, #0
 8007896:	dc0e      	bgt.n	80078b6 <_printf_float+0x376>
 8007898:	f04f 0800 	mov.w	r8, #0
 800789c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078a0:	f104 091a 	add.w	r9, r4, #26
 80078a4:	e019      	b.n	80078da <_printf_float+0x39a>
 80078a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	d1e5      	bne.n	8007880 <_printf_float+0x340>
 80078b4:	e6a1      	b.n	80075fa <_printf_float+0xba>
 80078b6:	4653      	mov	r3, sl
 80078b8:	4642      	mov	r2, r8
 80078ba:	4631      	mov	r1, r6
 80078bc:	4628      	mov	r0, r5
 80078be:	47b8      	blx	r7
 80078c0:	3001      	adds	r0, #1
 80078c2:	d1e9      	bne.n	8007898 <_printf_float+0x358>
 80078c4:	e699      	b.n	80075fa <_printf_float+0xba>
 80078c6:	2301      	movs	r3, #1
 80078c8:	464a      	mov	r2, r9
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	f43f ae92 	beq.w	80075fa <_printf_float+0xba>
 80078d6:	f108 0801 	add.w	r8, r8, #1
 80078da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	eba3 030a 	sub.w	r3, r3, sl
 80078e4:	4543      	cmp	r3, r8
 80078e6:	dcee      	bgt.n	80078c6 <_printf_float+0x386>
 80078e8:	e74a      	b.n	8007780 <_printf_float+0x240>
 80078ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ec:	2a01      	cmp	r2, #1
 80078ee:	dc01      	bgt.n	80078f4 <_printf_float+0x3b4>
 80078f0:	07db      	lsls	r3, r3, #31
 80078f2:	d53a      	bpl.n	800796a <_printf_float+0x42a>
 80078f4:	2301      	movs	r3, #1
 80078f6:	4642      	mov	r2, r8
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f ae7b 	beq.w	80075fa <_printf_float+0xba>
 8007904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f108 0801 	add.w	r8, r8, #1
 8007914:	f43f ae71 	beq.w	80075fa <_printf_float+0xba>
 8007918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791a:	2200      	movs	r2, #0
 800791c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007924:	2300      	movs	r3, #0
 8007926:	f7f9 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800792a:	b9c8      	cbnz	r0, 8007960 <_printf_float+0x420>
 800792c:	4653      	mov	r3, sl
 800792e:	4642      	mov	r2, r8
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	d10e      	bne.n	8007958 <_printf_float+0x418>
 800793a:	e65e      	b.n	80075fa <_printf_float+0xba>
 800793c:	2301      	movs	r3, #1
 800793e:	4652      	mov	r2, sl
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f ae57 	beq.w	80075fa <_printf_float+0xba>
 800794c:	f108 0801 	add.w	r8, r8, #1
 8007950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007952:	3b01      	subs	r3, #1
 8007954:	4543      	cmp	r3, r8
 8007956:	dcf1      	bgt.n	800793c <_printf_float+0x3fc>
 8007958:	464b      	mov	r3, r9
 800795a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800795e:	e6de      	b.n	800771e <_printf_float+0x1de>
 8007960:	f04f 0800 	mov.w	r8, #0
 8007964:	f104 0a1a 	add.w	sl, r4, #26
 8007968:	e7f2      	b.n	8007950 <_printf_float+0x410>
 800796a:	2301      	movs	r3, #1
 800796c:	e7df      	b.n	800792e <_printf_float+0x3ee>
 800796e:	2301      	movs	r3, #1
 8007970:	464a      	mov	r2, r9
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae3e 	beq.w	80075fa <_printf_float+0xba>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	4543      	cmp	r3, r8
 800798a:	dcf0      	bgt.n	800796e <_printf_float+0x42e>
 800798c:	e6fc      	b.n	8007788 <_printf_float+0x248>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	f104 0919 	add.w	r9, r4, #25
 8007996:	e7f4      	b.n	8007982 <_printf_float+0x442>
 8007998:	2900      	cmp	r1, #0
 800799a:	f43f ae8b 	beq.w	80076b4 <_printf_float+0x174>
 800799e:	2300      	movs	r3, #0
 80079a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80079a4:	ab09      	add	r3, sp, #36	; 0x24
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	ec49 8b10 	vmov	d0, r8, r9
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	f8cd a004 	str.w	sl, [sp, #4]
 80079b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079b6:	4628      	mov	r0, r5
 80079b8:	f7ff fd2e 	bl	8007418 <__cvt>
 80079bc:	4680      	mov	r8, r0
 80079be:	e648      	b.n	8007652 <_printf_float+0x112>

080079c0 <_printf_common>:
 80079c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	4691      	mov	r9, r2
 80079c6:	461f      	mov	r7, r3
 80079c8:	688a      	ldr	r2, [r1, #8]
 80079ca:	690b      	ldr	r3, [r1, #16]
 80079cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	bfb8      	it	lt
 80079d4:	4613      	movlt	r3, r2
 80079d6:	f8c9 3000 	str.w	r3, [r9]
 80079da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079de:	4606      	mov	r6, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	b112      	cbz	r2, 80079ea <_printf_common+0x2a>
 80079e4:	3301      	adds	r3, #1
 80079e6:	f8c9 3000 	str.w	r3, [r9]
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	0699      	lsls	r1, r3, #26
 80079ee:	bf42      	ittt	mi
 80079f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079f4:	3302      	addmi	r3, #2
 80079f6:	f8c9 3000 	strmi.w	r3, [r9]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d107      	bne.n	8007a12 <_printf_common+0x52>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	f8d9 2000 	ldr.w	r2, [r9]
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	dc28      	bgt.n	8007a64 <_printf_common+0xa4>
 8007a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	3300      	adds	r3, #0
 8007a1a:	bf18      	it	ne
 8007a1c:	2301      	movne	r3, #1
 8007a1e:	0692      	lsls	r2, r2, #26
 8007a20:	d42d      	bmi.n	8007a7e <_printf_common+0xbe>
 8007a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a26:	4639      	mov	r1, r7
 8007a28:	4630      	mov	r0, r6
 8007a2a:	47c0      	blx	r8
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d020      	beq.n	8007a72 <_printf_common+0xb2>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	68e5      	ldr	r5, [r4, #12]
 8007a34:	f8d9 2000 	ldr.w	r2, [r9]
 8007a38:	f003 0306 	and.w	r3, r3, #6
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	bf08      	it	eq
 8007a40:	1aad      	subeq	r5, r5, r2
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	bf0c      	ite	eq
 8007a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a4c:	2500      	movne	r5, #0
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	bfc4      	itt	gt
 8007a52:	1a9b      	subgt	r3, r3, r2
 8007a54:	18ed      	addgt	r5, r5, r3
 8007a56:	f04f 0900 	mov.w	r9, #0
 8007a5a:	341a      	adds	r4, #26
 8007a5c:	454d      	cmp	r5, r9
 8007a5e:	d11a      	bne.n	8007a96 <_printf_common+0xd6>
 8007a60:	2000      	movs	r0, #0
 8007a62:	e008      	b.n	8007a76 <_printf_common+0xb6>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4652      	mov	r2, sl
 8007a68:	4639      	mov	r1, r7
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	47c0      	blx	r8
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d103      	bne.n	8007a7a <_printf_common+0xba>
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	3501      	adds	r5, #1
 8007a7c:	e7c3      	b.n	8007a06 <_printf_common+0x46>
 8007a7e:	18e1      	adds	r1, r4, r3
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	2030      	movs	r0, #48	; 0x30
 8007a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a88:	4422      	add	r2, r4
 8007a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a92:	3302      	adds	r3, #2
 8007a94:	e7c5      	b.n	8007a22 <_printf_common+0x62>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4622      	mov	r2, r4
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	47c0      	blx	r8
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0e6      	beq.n	8007a72 <_printf_common+0xb2>
 8007aa4:	f109 0901 	add.w	r9, r9, #1
 8007aa8:	e7d8      	b.n	8007a5c <_printf_common+0x9c>
	...

08007aac <_printf_i>:
 8007aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ab0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	7e09      	ldrb	r1, [r1, #24]
 8007ab8:	b085      	sub	sp, #20
 8007aba:	296e      	cmp	r1, #110	; 0x6e
 8007abc:	4617      	mov	r7, r2
 8007abe:	4606      	mov	r6, r0
 8007ac0:	4698      	mov	r8, r3
 8007ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac4:	f000 80b3 	beq.w	8007c2e <_printf_i+0x182>
 8007ac8:	d822      	bhi.n	8007b10 <_printf_i+0x64>
 8007aca:	2963      	cmp	r1, #99	; 0x63
 8007acc:	d036      	beq.n	8007b3c <_printf_i+0x90>
 8007ace:	d80a      	bhi.n	8007ae6 <_printf_i+0x3a>
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	f000 80b9 	beq.w	8007c48 <_printf_i+0x19c>
 8007ad6:	2958      	cmp	r1, #88	; 0x58
 8007ad8:	f000 8083 	beq.w	8007be2 <_printf_i+0x136>
 8007adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ae4:	e032      	b.n	8007b4c <_printf_i+0xa0>
 8007ae6:	2964      	cmp	r1, #100	; 0x64
 8007ae8:	d001      	beq.n	8007aee <_printf_i+0x42>
 8007aea:	2969      	cmp	r1, #105	; 0x69
 8007aec:	d1f6      	bne.n	8007adc <_printf_i+0x30>
 8007aee:	6820      	ldr	r0, [r4, #0]
 8007af0:	6813      	ldr	r3, [r2, #0]
 8007af2:	0605      	lsls	r5, r0, #24
 8007af4:	f103 0104 	add.w	r1, r3, #4
 8007af8:	d52a      	bpl.n	8007b50 <_printf_i+0xa4>
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da03      	bge.n	8007b0a <_printf_i+0x5e>
 8007b02:	222d      	movs	r2, #45	; 0x2d
 8007b04:	425b      	negs	r3, r3
 8007b06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b0a:	486f      	ldr	r0, [pc, #444]	; (8007cc8 <_printf_i+0x21c>)
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	e039      	b.n	8007b84 <_printf_i+0xd8>
 8007b10:	2973      	cmp	r1, #115	; 0x73
 8007b12:	f000 809d 	beq.w	8007c50 <_printf_i+0x1a4>
 8007b16:	d808      	bhi.n	8007b2a <_printf_i+0x7e>
 8007b18:	296f      	cmp	r1, #111	; 0x6f
 8007b1a:	d020      	beq.n	8007b5e <_printf_i+0xb2>
 8007b1c:	2970      	cmp	r1, #112	; 0x70
 8007b1e:	d1dd      	bne.n	8007adc <_printf_i+0x30>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	f043 0320 	orr.w	r3, r3, #32
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	e003      	b.n	8007b32 <_printf_i+0x86>
 8007b2a:	2975      	cmp	r1, #117	; 0x75
 8007b2c:	d017      	beq.n	8007b5e <_printf_i+0xb2>
 8007b2e:	2978      	cmp	r1, #120	; 0x78
 8007b30:	d1d4      	bne.n	8007adc <_printf_i+0x30>
 8007b32:	2378      	movs	r3, #120	; 0x78
 8007b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b38:	4864      	ldr	r0, [pc, #400]	; (8007ccc <_printf_i+0x220>)
 8007b3a:	e055      	b.n	8007be8 <_printf_i+0x13c>
 8007b3c:	6813      	ldr	r3, [r2, #0]
 8007b3e:	1d19      	adds	r1, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6011      	str	r1, [r2, #0]
 8007b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e08c      	b.n	8007c6a <_printf_i+0x1be>
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6011      	str	r1, [r2, #0]
 8007b54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b58:	bf18      	it	ne
 8007b5a:	b21b      	sxthne	r3, r3
 8007b5c:	e7cf      	b.n	8007afe <_printf_i+0x52>
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	1d18      	adds	r0, r3, #4
 8007b64:	6010      	str	r0, [r2, #0]
 8007b66:	0628      	lsls	r0, r5, #24
 8007b68:	d501      	bpl.n	8007b6e <_printf_i+0xc2>
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	e002      	b.n	8007b74 <_printf_i+0xc8>
 8007b6e:	0668      	lsls	r0, r5, #25
 8007b70:	d5fb      	bpl.n	8007b6a <_printf_i+0xbe>
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	4854      	ldr	r0, [pc, #336]	; (8007cc8 <_printf_i+0x21c>)
 8007b76:	296f      	cmp	r1, #111	; 0x6f
 8007b78:	bf14      	ite	ne
 8007b7a:	220a      	movne	r2, #10
 8007b7c:	2208      	moveq	r2, #8
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b84:	6865      	ldr	r5, [r4, #4]
 8007b86:	60a5      	str	r5, [r4, #8]
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	f2c0 8095 	blt.w	8007cb8 <_printf_i+0x20c>
 8007b8e:	6821      	ldr	r1, [r4, #0]
 8007b90:	f021 0104 	bic.w	r1, r1, #4
 8007b94:	6021      	str	r1, [r4, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d13d      	bne.n	8007c16 <_printf_i+0x16a>
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	f040 808e 	bne.w	8007cbc <_printf_i+0x210>
 8007ba0:	4665      	mov	r5, ip
 8007ba2:	2a08      	cmp	r2, #8
 8007ba4:	d10b      	bne.n	8007bbe <_printf_i+0x112>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	07db      	lsls	r3, r3, #31
 8007baa:	d508      	bpl.n	8007bbe <_printf_i+0x112>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	bfde      	ittt	le
 8007bb4:	2330      	movle	r3, #48	; 0x30
 8007bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bbe:	ebac 0305 	sub.w	r3, ip, r5
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	f8cd 8000 	str.w	r8, [sp]
 8007bc8:	463b      	mov	r3, r7
 8007bca:	aa03      	add	r2, sp, #12
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff fef6 	bl	80079c0 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d14d      	bne.n	8007c74 <_printf_i+0x1c8>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b005      	add	sp, #20
 8007bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be2:	4839      	ldr	r0, [pc, #228]	; (8007cc8 <_printf_i+0x21c>)
 8007be4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007be8:	6813      	ldr	r3, [r2, #0]
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	1d1d      	adds	r5, r3, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6015      	str	r5, [r2, #0]
 8007bf2:	060a      	lsls	r2, r1, #24
 8007bf4:	d50b      	bpl.n	8007c0e <_printf_i+0x162>
 8007bf6:	07ca      	lsls	r2, r1, #31
 8007bf8:	bf44      	itt	mi
 8007bfa:	f041 0120 	orrmi.w	r1, r1, #32
 8007bfe:	6021      	strmi	r1, [r4, #0]
 8007c00:	b91b      	cbnz	r3, 8007c0a <_printf_i+0x15e>
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	f022 0220 	bic.w	r2, r2, #32
 8007c08:	6022      	str	r2, [r4, #0]
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	e7b7      	b.n	8007b7e <_printf_i+0xd2>
 8007c0e:	064d      	lsls	r5, r1, #25
 8007c10:	bf48      	it	mi
 8007c12:	b29b      	uxthmi	r3, r3
 8007c14:	e7ef      	b.n	8007bf6 <_printf_i+0x14a>
 8007c16:	4665      	mov	r5, ip
 8007c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c1c:	fb02 3311 	mls	r3, r2, r1, r3
 8007c20:	5cc3      	ldrb	r3, [r0, r3]
 8007c22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c26:	460b      	mov	r3, r1
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d1f5      	bne.n	8007c18 <_printf_i+0x16c>
 8007c2c:	e7b9      	b.n	8007ba2 <_printf_i+0xf6>
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	6825      	ldr	r5, [r4, #0]
 8007c32:	6961      	ldr	r1, [r4, #20]
 8007c34:	1d18      	adds	r0, r3, #4
 8007c36:	6010      	str	r0, [r2, #0]
 8007c38:	0628      	lsls	r0, r5, #24
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	d501      	bpl.n	8007c42 <_printf_i+0x196>
 8007c3e:	6019      	str	r1, [r3, #0]
 8007c40:	e002      	b.n	8007c48 <_printf_i+0x19c>
 8007c42:	066a      	lsls	r2, r5, #25
 8007c44:	d5fb      	bpl.n	8007c3e <_printf_i+0x192>
 8007c46:	8019      	strh	r1, [r3, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	4665      	mov	r5, ip
 8007c4e:	e7b9      	b.n	8007bc4 <_printf_i+0x118>
 8007c50:	6813      	ldr	r3, [r2, #0]
 8007c52:	1d19      	adds	r1, r3, #4
 8007c54:	6011      	str	r1, [r2, #0]
 8007c56:	681d      	ldr	r5, [r3, #0]
 8007c58:	6862      	ldr	r2, [r4, #4]
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7f8 fac7 	bl	80001f0 <memchr>
 8007c62:	b108      	cbz	r0, 8007c68 <_printf_i+0x1bc>
 8007c64:	1b40      	subs	r0, r0, r5
 8007c66:	6060      	str	r0, [r4, #4]
 8007c68:	6863      	ldr	r3, [r4, #4]
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c72:	e7a7      	b.n	8007bc4 <_printf_i+0x118>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	462a      	mov	r2, r5
 8007c78:	4639      	mov	r1, r7
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	47c0      	blx	r8
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d0aa      	beq.n	8007bd8 <_printf_i+0x12c>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	079b      	lsls	r3, r3, #30
 8007c86:	d413      	bmi.n	8007cb0 <_printf_i+0x204>
 8007c88:	68e0      	ldr	r0, [r4, #12]
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	4298      	cmp	r0, r3
 8007c8e:	bfb8      	it	lt
 8007c90:	4618      	movlt	r0, r3
 8007c92:	e7a3      	b.n	8007bdc <_printf_i+0x130>
 8007c94:	2301      	movs	r3, #1
 8007c96:	464a      	mov	r2, r9
 8007c98:	4639      	mov	r1, r7
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	47c0      	blx	r8
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d09a      	beq.n	8007bd8 <_printf_i+0x12c>
 8007ca2:	3501      	adds	r5, #1
 8007ca4:	68e3      	ldr	r3, [r4, #12]
 8007ca6:	9a03      	ldr	r2, [sp, #12]
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	42ab      	cmp	r3, r5
 8007cac:	dcf2      	bgt.n	8007c94 <_printf_i+0x1e8>
 8007cae:	e7eb      	b.n	8007c88 <_printf_i+0x1dc>
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	f104 0919 	add.w	r9, r4, #25
 8007cb6:	e7f5      	b.n	8007ca4 <_printf_i+0x1f8>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1ac      	bne.n	8007c16 <_printf_i+0x16a>
 8007cbc:	7803      	ldrb	r3, [r0, #0]
 8007cbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc6:	e76c      	b.n	8007ba2 <_printf_i+0xf6>
 8007cc8:	0800b066 	.word	0x0800b066
 8007ccc:	0800b077 	.word	0x0800b077

08007cd0 <_scanf_float>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	469a      	mov	sl, r3
 8007cd6:	688b      	ldr	r3, [r1, #8]
 8007cd8:	4616      	mov	r6, r2
 8007cda:	1e5a      	subs	r2, r3, #1
 8007cdc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	bf83      	ittte	hi
 8007ce4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007ce8:	189b      	addhi	r3, r3, r2
 8007cea:	9301      	strhi	r3, [sp, #4]
 8007cec:	2300      	movls	r3, #0
 8007cee:	bf86      	itte	hi
 8007cf0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cf4:	608b      	strhi	r3, [r1, #8]
 8007cf6:	9301      	strls	r3, [sp, #4]
 8007cf8:	680b      	ldr	r3, [r1, #0]
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	f04f 0b00 	mov.w	fp, #0
 8007d00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d04:	f848 3b1c 	str.w	r3, [r8], #28
 8007d08:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4645      	mov	r5, r8
 8007d12:	465a      	mov	r2, fp
 8007d14:	46d9      	mov	r9, fp
 8007d16:	f8cd b008 	str.w	fp, [sp, #8]
 8007d1a:	68a1      	ldr	r1, [r4, #8]
 8007d1c:	b181      	cbz	r1, 8007d40 <_scanf_float+0x70>
 8007d1e:	6833      	ldr	r3, [r6, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b49      	cmp	r3, #73	; 0x49
 8007d24:	d071      	beq.n	8007e0a <_scanf_float+0x13a>
 8007d26:	d84d      	bhi.n	8007dc4 <_scanf_float+0xf4>
 8007d28:	2b39      	cmp	r3, #57	; 0x39
 8007d2a:	d840      	bhi.n	8007dae <_scanf_float+0xde>
 8007d2c:	2b31      	cmp	r3, #49	; 0x31
 8007d2e:	f080 8088 	bcs.w	8007e42 <_scanf_float+0x172>
 8007d32:	2b2d      	cmp	r3, #45	; 0x2d
 8007d34:	f000 8090 	beq.w	8007e58 <_scanf_float+0x188>
 8007d38:	d815      	bhi.n	8007d66 <_scanf_float+0x96>
 8007d3a:	2b2b      	cmp	r3, #43	; 0x2b
 8007d3c:	f000 808c 	beq.w	8007e58 <_scanf_float+0x188>
 8007d40:	f1b9 0f00 	cmp.w	r9, #0
 8007d44:	d003      	beq.n	8007d4e <_scanf_float+0x7e>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	3a01      	subs	r2, #1
 8007d50:	2a01      	cmp	r2, #1
 8007d52:	f200 80ea 	bhi.w	8007f2a <_scanf_float+0x25a>
 8007d56:	4545      	cmp	r5, r8
 8007d58:	f200 80dc 	bhi.w	8007f14 <_scanf_float+0x244>
 8007d5c:	2601      	movs	r6, #1
 8007d5e:	4630      	mov	r0, r6
 8007d60:	b007      	add	sp, #28
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	2b2e      	cmp	r3, #46	; 0x2e
 8007d68:	f000 809f 	beq.w	8007eaa <_scanf_float+0x1da>
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d1e7      	bne.n	8007d40 <_scanf_float+0x70>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007d76:	d064      	beq.n	8007e42 <_scanf_float+0x172>
 8007d78:	9b01      	ldr	r3, [sp, #4]
 8007d7a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f109 0901 	add.w	r9, r9, #1
 8007d84:	b11b      	cbz	r3, 8007d8e <_scanf_float+0xbe>
 8007d86:	3b01      	subs	r3, #1
 8007d88:	3101      	adds	r1, #1
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	60a1      	str	r1, [r4, #8]
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	3301      	adds	r3, #1
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	6873      	ldr	r3, [r6, #4]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	6073      	str	r3, [r6, #4]
 8007da2:	f340 80ac 	ble.w	8007efe <_scanf_float+0x22e>
 8007da6:	6833      	ldr	r3, [r6, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	6033      	str	r3, [r6, #0]
 8007dac:	e7b5      	b.n	8007d1a <_scanf_float+0x4a>
 8007dae:	2b45      	cmp	r3, #69	; 0x45
 8007db0:	f000 8085 	beq.w	8007ebe <_scanf_float+0x1ee>
 8007db4:	2b46      	cmp	r3, #70	; 0x46
 8007db6:	d06a      	beq.n	8007e8e <_scanf_float+0x1be>
 8007db8:	2b41      	cmp	r3, #65	; 0x41
 8007dba:	d1c1      	bne.n	8007d40 <_scanf_float+0x70>
 8007dbc:	2a01      	cmp	r2, #1
 8007dbe:	d1bf      	bne.n	8007d40 <_scanf_float+0x70>
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	e046      	b.n	8007e52 <_scanf_float+0x182>
 8007dc4:	2b65      	cmp	r3, #101	; 0x65
 8007dc6:	d07a      	beq.n	8007ebe <_scanf_float+0x1ee>
 8007dc8:	d818      	bhi.n	8007dfc <_scanf_float+0x12c>
 8007dca:	2b54      	cmp	r3, #84	; 0x54
 8007dcc:	d066      	beq.n	8007e9c <_scanf_float+0x1cc>
 8007dce:	d811      	bhi.n	8007df4 <_scanf_float+0x124>
 8007dd0:	2b4e      	cmp	r3, #78	; 0x4e
 8007dd2:	d1b5      	bne.n	8007d40 <_scanf_float+0x70>
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d146      	bne.n	8007e66 <_scanf_float+0x196>
 8007dd8:	f1b9 0f00 	cmp.w	r9, #0
 8007ddc:	d145      	bne.n	8007e6a <_scanf_float+0x19a>
 8007dde:	6821      	ldr	r1, [r4, #0]
 8007de0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007de4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007de8:	d13f      	bne.n	8007e6a <_scanf_float+0x19a>
 8007dea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007dee:	6021      	str	r1, [r4, #0]
 8007df0:	2201      	movs	r2, #1
 8007df2:	e02e      	b.n	8007e52 <_scanf_float+0x182>
 8007df4:	2b59      	cmp	r3, #89	; 0x59
 8007df6:	d01e      	beq.n	8007e36 <_scanf_float+0x166>
 8007df8:	2b61      	cmp	r3, #97	; 0x61
 8007dfa:	e7de      	b.n	8007dba <_scanf_float+0xea>
 8007dfc:	2b6e      	cmp	r3, #110	; 0x6e
 8007dfe:	d0e9      	beq.n	8007dd4 <_scanf_float+0x104>
 8007e00:	d815      	bhi.n	8007e2e <_scanf_float+0x15e>
 8007e02:	2b66      	cmp	r3, #102	; 0x66
 8007e04:	d043      	beq.n	8007e8e <_scanf_float+0x1be>
 8007e06:	2b69      	cmp	r3, #105	; 0x69
 8007e08:	d19a      	bne.n	8007d40 <_scanf_float+0x70>
 8007e0a:	f1bb 0f00 	cmp.w	fp, #0
 8007e0e:	d138      	bne.n	8007e82 <_scanf_float+0x1b2>
 8007e10:	f1b9 0f00 	cmp.w	r9, #0
 8007e14:	d197      	bne.n	8007d46 <_scanf_float+0x76>
 8007e16:	6821      	ldr	r1, [r4, #0]
 8007e18:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007e1c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007e20:	d195      	bne.n	8007d4e <_scanf_float+0x7e>
 8007e22:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007e26:	6021      	str	r1, [r4, #0]
 8007e28:	f04f 0b01 	mov.w	fp, #1
 8007e2c:	e011      	b.n	8007e52 <_scanf_float+0x182>
 8007e2e:	2b74      	cmp	r3, #116	; 0x74
 8007e30:	d034      	beq.n	8007e9c <_scanf_float+0x1cc>
 8007e32:	2b79      	cmp	r3, #121	; 0x79
 8007e34:	d184      	bne.n	8007d40 <_scanf_float+0x70>
 8007e36:	f1bb 0f07 	cmp.w	fp, #7
 8007e3a:	d181      	bne.n	8007d40 <_scanf_float+0x70>
 8007e3c:	f04f 0b08 	mov.w	fp, #8
 8007e40:	e007      	b.n	8007e52 <_scanf_float+0x182>
 8007e42:	eb12 0f0b 	cmn.w	r2, fp
 8007e46:	f47f af7b 	bne.w	8007d40 <_scanf_float+0x70>
 8007e4a:	6821      	ldr	r1, [r4, #0]
 8007e4c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007e50:	6021      	str	r1, [r4, #0]
 8007e52:	702b      	strb	r3, [r5, #0]
 8007e54:	3501      	adds	r5, #1
 8007e56:	e79a      	b.n	8007d8e <_scanf_float+0xbe>
 8007e58:	6821      	ldr	r1, [r4, #0]
 8007e5a:	0608      	lsls	r0, r1, #24
 8007e5c:	f57f af70 	bpl.w	8007d40 <_scanf_float+0x70>
 8007e60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e64:	e7f4      	b.n	8007e50 <_scanf_float+0x180>
 8007e66:	2a02      	cmp	r2, #2
 8007e68:	d047      	beq.n	8007efa <_scanf_float+0x22a>
 8007e6a:	f1bb 0f01 	cmp.w	fp, #1
 8007e6e:	d003      	beq.n	8007e78 <_scanf_float+0x1a8>
 8007e70:	f1bb 0f04 	cmp.w	fp, #4
 8007e74:	f47f af64 	bne.w	8007d40 <_scanf_float+0x70>
 8007e78:	f10b 0b01 	add.w	fp, fp, #1
 8007e7c:	fa5f fb8b 	uxtb.w	fp, fp
 8007e80:	e7e7      	b.n	8007e52 <_scanf_float+0x182>
 8007e82:	f1bb 0f03 	cmp.w	fp, #3
 8007e86:	d0f7      	beq.n	8007e78 <_scanf_float+0x1a8>
 8007e88:	f1bb 0f05 	cmp.w	fp, #5
 8007e8c:	e7f2      	b.n	8007e74 <_scanf_float+0x1a4>
 8007e8e:	f1bb 0f02 	cmp.w	fp, #2
 8007e92:	f47f af55 	bne.w	8007d40 <_scanf_float+0x70>
 8007e96:	f04f 0b03 	mov.w	fp, #3
 8007e9a:	e7da      	b.n	8007e52 <_scanf_float+0x182>
 8007e9c:	f1bb 0f06 	cmp.w	fp, #6
 8007ea0:	f47f af4e 	bne.w	8007d40 <_scanf_float+0x70>
 8007ea4:	f04f 0b07 	mov.w	fp, #7
 8007ea8:	e7d3      	b.n	8007e52 <_scanf_float+0x182>
 8007eaa:	6821      	ldr	r1, [r4, #0]
 8007eac:	0588      	lsls	r0, r1, #22
 8007eae:	f57f af47 	bpl.w	8007d40 <_scanf_float+0x70>
 8007eb2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007eb6:	6021      	str	r1, [r4, #0]
 8007eb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ebc:	e7c9      	b.n	8007e52 <_scanf_float+0x182>
 8007ebe:	6821      	ldr	r1, [r4, #0]
 8007ec0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007ec4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007ec8:	d006      	beq.n	8007ed8 <_scanf_float+0x208>
 8007eca:	0548      	lsls	r0, r1, #21
 8007ecc:	f57f af38 	bpl.w	8007d40 <_scanf_float+0x70>
 8007ed0:	f1b9 0f00 	cmp.w	r9, #0
 8007ed4:	f43f af3b 	beq.w	8007d4e <_scanf_float+0x7e>
 8007ed8:	0588      	lsls	r0, r1, #22
 8007eda:	bf58      	it	pl
 8007edc:	9802      	ldrpl	r0, [sp, #8]
 8007ede:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007ee2:	bf58      	it	pl
 8007ee4:	eba9 0000 	subpl.w	r0, r9, r0
 8007ee8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007eec:	bf58      	it	pl
 8007eee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007ef2:	6021      	str	r1, [r4, #0]
 8007ef4:	f04f 0900 	mov.w	r9, #0
 8007ef8:	e7ab      	b.n	8007e52 <_scanf_float+0x182>
 8007efa:	2203      	movs	r2, #3
 8007efc:	e7a9      	b.n	8007e52 <_scanf_float+0x182>
 8007efe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f02:	9205      	str	r2, [sp, #20]
 8007f04:	4631      	mov	r1, r6
 8007f06:	4638      	mov	r0, r7
 8007f08:	4798      	blx	r3
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f43f af04 	beq.w	8007d1a <_scanf_float+0x4a>
 8007f12:	e715      	b.n	8007d40 <_scanf_float+0x70>
 8007f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4638      	mov	r0, r7
 8007f20:	4798      	blx	r3
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	6123      	str	r3, [r4, #16]
 8007f28:	e715      	b.n	8007d56 <_scanf_float+0x86>
 8007f2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d80a      	bhi.n	8007f48 <_scanf_float+0x278>
 8007f32:	f1bb 0f02 	cmp.w	fp, #2
 8007f36:	d968      	bls.n	800800a <_scanf_float+0x33a>
 8007f38:	f1ab 0b03 	sub.w	fp, fp, #3
 8007f3c:	fa5f fb8b 	uxtb.w	fp, fp
 8007f40:	eba5 0b0b 	sub.w	fp, r5, fp
 8007f44:	455d      	cmp	r5, fp
 8007f46:	d14b      	bne.n	8007fe0 <_scanf_float+0x310>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	05da      	lsls	r2, r3, #23
 8007f4c:	d51f      	bpl.n	8007f8e <_scanf_float+0x2be>
 8007f4e:	055b      	lsls	r3, r3, #21
 8007f50:	d468      	bmi.n	8008024 <_scanf_float+0x354>
 8007f52:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	2965      	cmp	r1, #101	; 0x65
 8007f5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f5e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007f62:	6123      	str	r3, [r4, #16]
 8007f64:	d00d      	beq.n	8007f82 <_scanf_float+0x2b2>
 8007f66:	2945      	cmp	r1, #69	; 0x45
 8007f68:	d00b      	beq.n	8007f82 <_scanf_float+0x2b2>
 8007f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6e:	4632      	mov	r2, r6
 8007f70:	4638      	mov	r0, r7
 8007f72:	4798      	blx	r3
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f86:	4632      	mov	r2, r6
 8007f88:	4638      	mov	r0, r7
 8007f8a:	4798      	blx	r3
 8007f8c:	465d      	mov	r5, fp
 8007f8e:	6826      	ldr	r6, [r4, #0]
 8007f90:	f016 0610 	ands.w	r6, r6, #16
 8007f94:	d17a      	bne.n	800808c <_scanf_float+0x3bc>
 8007f96:	702e      	strb	r6, [r5, #0]
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa2:	d142      	bne.n	800802a <_scanf_float+0x35a>
 8007fa4:	9b02      	ldr	r3, [sp, #8]
 8007fa6:	eba9 0303 	sub.w	r3, r9, r3
 8007faa:	425a      	negs	r2, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d149      	bne.n	8008044 <_scanf_float+0x374>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f000 fea3 	bl	8008d00 <_strtod_r>
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	f8da 3000 	ldr.w	r3, [sl]
 8007fc0:	f015 0f02 	tst.w	r5, #2
 8007fc4:	f103 0204 	add.w	r2, r3, #4
 8007fc8:	ec59 8b10 	vmov	r8, r9, d0
 8007fcc:	f8ca 2000 	str.w	r2, [sl]
 8007fd0:	d043      	beq.n	800805a <_scanf_float+0x38a>
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	e9c3 8900 	strd	r8, r9, [r3]
 8007fd8:	68e3      	ldr	r3, [r4, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60e3      	str	r3, [r4, #12]
 8007fde:	e6be      	b.n	8007d5e <_scanf_float+0x8e>
 8007fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fe4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007fe8:	4632      	mov	r2, r6
 8007fea:	4638      	mov	r0, r7
 8007fec:	4798      	blx	r3
 8007fee:	6923      	ldr	r3, [r4, #16]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	e7a6      	b.n	8007f44 <_scanf_float+0x274>
 8007ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ffa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ffe:	4632      	mov	r2, r6
 8008000:	4638      	mov	r0, r7
 8008002:	4798      	blx	r3
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	3b01      	subs	r3, #1
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	4545      	cmp	r5, r8
 800800c:	d8f3      	bhi.n	8007ff6 <_scanf_float+0x326>
 800800e:	e6a5      	b.n	8007d5c <_scanf_float+0x8c>
 8008010:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008014:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008018:	4632      	mov	r2, r6
 800801a:	4638      	mov	r0, r7
 800801c:	4798      	blx	r3
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	3b01      	subs	r3, #1
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	4545      	cmp	r5, r8
 8008026:	d8f3      	bhi.n	8008010 <_scanf_float+0x340>
 8008028:	e698      	b.n	8007d5c <_scanf_float+0x8c>
 800802a:	9b03      	ldr	r3, [sp, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0bf      	beq.n	8007fb0 <_scanf_float+0x2e0>
 8008030:	9904      	ldr	r1, [sp, #16]
 8008032:	230a      	movs	r3, #10
 8008034:	4632      	mov	r2, r6
 8008036:	3101      	adds	r1, #1
 8008038:	4638      	mov	r0, r7
 800803a:	f000 feed 	bl	8008e18 <_strtol_r>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	9d04      	ldr	r5, [sp, #16]
 8008042:	1ac2      	subs	r2, r0, r3
 8008044:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008048:	429d      	cmp	r5, r3
 800804a:	bf28      	it	cs
 800804c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008050:	490f      	ldr	r1, [pc, #60]	; (8008090 <_scanf_float+0x3c0>)
 8008052:	4628      	mov	r0, r5
 8008054:	f000 f824 	bl	80080a0 <siprintf>
 8008058:	e7aa      	b.n	8007fb0 <_scanf_float+0x2e0>
 800805a:	f015 0504 	ands.w	r5, r5, #4
 800805e:	d1b8      	bne.n	8007fd2 <_scanf_float+0x302>
 8008060:	681f      	ldr	r7, [r3, #0]
 8008062:	ee10 2a10 	vmov	r2, s0
 8008066:	464b      	mov	r3, r9
 8008068:	ee10 0a10 	vmov	r0, s0
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 fd65 	bl	8000b3c <__aeabi_dcmpun>
 8008072:	b128      	cbz	r0, 8008080 <_scanf_float+0x3b0>
 8008074:	4628      	mov	r0, r5
 8008076:	f000 f80d 	bl	8008094 <nanf>
 800807a:	ed87 0a00 	vstr	s0, [r7]
 800807e:	e7ab      	b.n	8007fd8 <_scanf_float+0x308>
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fdb8 	bl	8000bf8 <__aeabi_d2f>
 8008088:	6038      	str	r0, [r7, #0]
 800808a:	e7a5      	b.n	8007fd8 <_scanf_float+0x308>
 800808c:	2600      	movs	r6, #0
 800808e:	e666      	b.n	8007d5e <_scanf_float+0x8e>
 8008090:	0800b088 	.word	0x0800b088

08008094 <nanf>:
 8008094:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800809c <nanf+0x8>
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	7fc00000 	.word	0x7fc00000

080080a0 <siprintf>:
 80080a0:	b40e      	push	{r1, r2, r3}
 80080a2:	b500      	push	{lr}
 80080a4:	b09c      	sub	sp, #112	; 0x70
 80080a6:	ab1d      	add	r3, sp, #116	; 0x74
 80080a8:	9002      	str	r0, [sp, #8]
 80080aa:	9006      	str	r0, [sp, #24]
 80080ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080b0:	4809      	ldr	r0, [pc, #36]	; (80080d8 <siprintf+0x38>)
 80080b2:	9107      	str	r1, [sp, #28]
 80080b4:	9104      	str	r1, [sp, #16]
 80080b6:	4909      	ldr	r1, [pc, #36]	; (80080dc <siprintf+0x3c>)
 80080b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080bc:	9105      	str	r1, [sp, #20]
 80080be:	6800      	ldr	r0, [r0, #0]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	a902      	add	r1, sp, #8
 80080c4:	f002 fd6e 	bl	800aba4 <_svfiprintf_r>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	b01c      	add	sp, #112	; 0x70
 80080d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d4:	b003      	add	sp, #12
 80080d6:	4770      	bx	lr
 80080d8:	200000b4 	.word	0x200000b4
 80080dc:	ffff0208 	.word	0xffff0208

080080e0 <sulp>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	460d      	mov	r5, r1
 80080e6:	ec45 4b10 	vmov	d0, r4, r5
 80080ea:	4616      	mov	r6, r2
 80080ec:	f002 fb16 	bl	800a71c <__ulp>
 80080f0:	ec51 0b10 	vmov	r0, r1, d0
 80080f4:	b17e      	cbz	r6, 8008116 <sulp+0x36>
 80080f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dd09      	ble.n	8008116 <sulp+0x36>
 8008102:	051b      	lsls	r3, r3, #20
 8008104:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008108:	2400      	movs	r4, #0
 800810a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800810e:	4622      	mov	r2, r4
 8008110:	462b      	mov	r3, r5
 8008112:	f7f8 fa79 	bl	8000608 <__aeabi_dmul>
 8008116:	bd70      	pop	{r4, r5, r6, pc}

08008118 <_strtod_l>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	461f      	mov	r7, r3
 800811e:	b0a1      	sub	sp, #132	; 0x84
 8008120:	2300      	movs	r3, #0
 8008122:	4681      	mov	r9, r0
 8008124:	4638      	mov	r0, r7
 8008126:	460e      	mov	r6, r1
 8008128:	9217      	str	r2, [sp, #92]	; 0x5c
 800812a:	931c      	str	r3, [sp, #112]	; 0x70
 800812c:	f001 fff5 	bl	800a11a <__localeconv_l>
 8008130:	4680      	mov	r8, r0
 8008132:	6800      	ldr	r0, [r0, #0]
 8008134:	f7f8 f854 	bl	80001e0 <strlen>
 8008138:	f04f 0a00 	mov.w	sl, #0
 800813c:	4604      	mov	r4, r0
 800813e:	f04f 0b00 	mov.w	fp, #0
 8008142:	961b      	str	r6, [sp, #108]	; 0x6c
 8008144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008146:	781a      	ldrb	r2, [r3, #0]
 8008148:	2a0d      	cmp	r2, #13
 800814a:	d832      	bhi.n	80081b2 <_strtod_l+0x9a>
 800814c:	2a09      	cmp	r2, #9
 800814e:	d236      	bcs.n	80081be <_strtod_l+0xa6>
 8008150:	2a00      	cmp	r2, #0
 8008152:	d03e      	beq.n	80081d2 <_strtod_l+0xba>
 8008154:	2300      	movs	r3, #0
 8008156:	930d      	str	r3, [sp, #52]	; 0x34
 8008158:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800815a:	782b      	ldrb	r3, [r5, #0]
 800815c:	2b30      	cmp	r3, #48	; 0x30
 800815e:	f040 80ac 	bne.w	80082ba <_strtod_l+0x1a2>
 8008162:	786b      	ldrb	r3, [r5, #1]
 8008164:	2b58      	cmp	r3, #88	; 0x58
 8008166:	d001      	beq.n	800816c <_strtod_l+0x54>
 8008168:	2b78      	cmp	r3, #120	; 0x78
 800816a:	d167      	bne.n	800823c <_strtod_l+0x124>
 800816c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	ab1c      	add	r3, sp, #112	; 0x70
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	9702      	str	r7, [sp, #8]
 8008176:	ab1d      	add	r3, sp, #116	; 0x74
 8008178:	4a88      	ldr	r2, [pc, #544]	; (800839c <_strtod_l+0x284>)
 800817a:	a91b      	add	r1, sp, #108	; 0x6c
 800817c:	4648      	mov	r0, r9
 800817e:	f001 fcf2 	bl	8009b66 <__gethex>
 8008182:	f010 0407 	ands.w	r4, r0, #7
 8008186:	4606      	mov	r6, r0
 8008188:	d005      	beq.n	8008196 <_strtod_l+0x7e>
 800818a:	2c06      	cmp	r4, #6
 800818c:	d12b      	bne.n	80081e6 <_strtod_l+0xce>
 800818e:	3501      	adds	r5, #1
 8008190:	2300      	movs	r3, #0
 8008192:	951b      	str	r5, [sp, #108]	; 0x6c
 8008194:	930d      	str	r3, [sp, #52]	; 0x34
 8008196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 859a 	bne.w	8008cd2 <_strtod_l+0xbba>
 800819e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081a0:	b1e3      	cbz	r3, 80081dc <_strtod_l+0xc4>
 80081a2:	4652      	mov	r2, sl
 80081a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081a8:	ec43 2b10 	vmov	d0, r2, r3
 80081ac:	b021      	add	sp, #132	; 0x84
 80081ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b2:	2a2b      	cmp	r2, #43	; 0x2b
 80081b4:	d015      	beq.n	80081e2 <_strtod_l+0xca>
 80081b6:	2a2d      	cmp	r2, #45	; 0x2d
 80081b8:	d004      	beq.n	80081c4 <_strtod_l+0xac>
 80081ba:	2a20      	cmp	r2, #32
 80081bc:	d1ca      	bne.n	8008154 <_strtod_l+0x3c>
 80081be:	3301      	adds	r3, #1
 80081c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80081c2:	e7bf      	b.n	8008144 <_strtod_l+0x2c>
 80081c4:	2201      	movs	r2, #1
 80081c6:	920d      	str	r2, [sp, #52]	; 0x34
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80081cc:	785b      	ldrb	r3, [r3, #1]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1c2      	bne.n	8008158 <_strtod_l+0x40>
 80081d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f040 8579 	bne.w	8008cce <_strtod_l+0xbb6>
 80081dc:	4652      	mov	r2, sl
 80081de:	465b      	mov	r3, fp
 80081e0:	e7e2      	b.n	80081a8 <_strtod_l+0x90>
 80081e2:	2200      	movs	r2, #0
 80081e4:	e7ef      	b.n	80081c6 <_strtod_l+0xae>
 80081e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081e8:	b13a      	cbz	r2, 80081fa <_strtod_l+0xe2>
 80081ea:	2135      	movs	r1, #53	; 0x35
 80081ec:	a81e      	add	r0, sp, #120	; 0x78
 80081ee:	f002 fb8d 	bl	800a90c <__copybits>
 80081f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081f4:	4648      	mov	r0, r9
 80081f6:	f001 fffa 	bl	800a1ee <_Bfree>
 80081fa:	3c01      	subs	r4, #1
 80081fc:	2c04      	cmp	r4, #4
 80081fe:	d806      	bhi.n	800820e <_strtod_l+0xf6>
 8008200:	e8df f004 	tbb	[pc, r4]
 8008204:	1714030a 	.word	0x1714030a
 8008208:	0a          	.byte	0x0a
 8008209:	00          	.byte	0x00
 800820a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800820e:	0730      	lsls	r0, r6, #28
 8008210:	d5c1      	bpl.n	8008196 <_strtod_l+0x7e>
 8008212:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008216:	e7be      	b.n	8008196 <_strtod_l+0x7e>
 8008218:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800821c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800821e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008222:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008226:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800822a:	e7f0      	b.n	800820e <_strtod_l+0xf6>
 800822c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80083a0 <_strtod_l+0x288>
 8008230:	e7ed      	b.n	800820e <_strtod_l+0xf6>
 8008232:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008236:	f04f 3aff 	mov.w	sl, #4294967295
 800823a:	e7e8      	b.n	800820e <_strtod_l+0xf6>
 800823c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	921b      	str	r2, [sp, #108]	; 0x6c
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b30      	cmp	r3, #48	; 0x30
 8008246:	d0f9      	beq.n	800823c <_strtod_l+0x124>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0a4      	beq.n	8008196 <_strtod_l+0x7e>
 800824c:	2301      	movs	r3, #1
 800824e:	2500      	movs	r5, #0
 8008250:	9306      	str	r3, [sp, #24]
 8008252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008254:	9308      	str	r3, [sp, #32]
 8008256:	9507      	str	r5, [sp, #28]
 8008258:	9505      	str	r5, [sp, #20]
 800825a:	220a      	movs	r2, #10
 800825c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800825e:	7807      	ldrb	r7, [r0, #0]
 8008260:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008264:	b2d9      	uxtb	r1, r3
 8008266:	2909      	cmp	r1, #9
 8008268:	d929      	bls.n	80082be <_strtod_l+0x1a6>
 800826a:	4622      	mov	r2, r4
 800826c:	f8d8 1000 	ldr.w	r1, [r8]
 8008270:	f002 fda0 	bl	800adb4 <strncmp>
 8008274:	2800      	cmp	r0, #0
 8008276:	d031      	beq.n	80082dc <_strtod_l+0x1c4>
 8008278:	2000      	movs	r0, #0
 800827a:	9c05      	ldr	r4, [sp, #20]
 800827c:	9004      	str	r0, [sp, #16]
 800827e:	463b      	mov	r3, r7
 8008280:	4602      	mov	r2, r0
 8008282:	2b65      	cmp	r3, #101	; 0x65
 8008284:	d001      	beq.n	800828a <_strtod_l+0x172>
 8008286:	2b45      	cmp	r3, #69	; 0x45
 8008288:	d114      	bne.n	80082b4 <_strtod_l+0x19c>
 800828a:	b924      	cbnz	r4, 8008296 <_strtod_l+0x17e>
 800828c:	b910      	cbnz	r0, 8008294 <_strtod_l+0x17c>
 800828e:	9b06      	ldr	r3, [sp, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d09e      	beq.n	80081d2 <_strtod_l+0xba>
 8008294:	2400      	movs	r4, #0
 8008296:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008298:	1c73      	adds	r3, r6, #1
 800829a:	931b      	str	r3, [sp, #108]	; 0x6c
 800829c:	7873      	ldrb	r3, [r6, #1]
 800829e:	2b2b      	cmp	r3, #43	; 0x2b
 80082a0:	d078      	beq.n	8008394 <_strtod_l+0x27c>
 80082a2:	2b2d      	cmp	r3, #45	; 0x2d
 80082a4:	d070      	beq.n	8008388 <_strtod_l+0x270>
 80082a6:	f04f 0c00 	mov.w	ip, #0
 80082aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80082ae:	2f09      	cmp	r7, #9
 80082b0:	d97c      	bls.n	80083ac <_strtod_l+0x294>
 80082b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80082b4:	f04f 0e00 	mov.w	lr, #0
 80082b8:	e09a      	b.n	80083f0 <_strtod_l+0x2d8>
 80082ba:	2300      	movs	r3, #0
 80082bc:	e7c7      	b.n	800824e <_strtod_l+0x136>
 80082be:	9905      	ldr	r1, [sp, #20]
 80082c0:	2908      	cmp	r1, #8
 80082c2:	bfdd      	ittte	le
 80082c4:	9907      	ldrle	r1, [sp, #28]
 80082c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80082ca:	9307      	strle	r3, [sp, #28]
 80082cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	3001      	adds	r0, #1
 80082d4:	3301      	adds	r3, #1
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80082da:	e7bf      	b.n	800825c <_strtod_l+0x144>
 80082dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082de:	191a      	adds	r2, r3, r4
 80082e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80082e2:	9a05      	ldr	r2, [sp, #20]
 80082e4:	5d1b      	ldrb	r3, [r3, r4]
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d037      	beq.n	800835a <_strtod_l+0x242>
 80082ea:	9c05      	ldr	r4, [sp, #20]
 80082ec:	4602      	mov	r2, r0
 80082ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80082f2:	2909      	cmp	r1, #9
 80082f4:	d913      	bls.n	800831e <_strtod_l+0x206>
 80082f6:	2101      	movs	r1, #1
 80082f8:	9104      	str	r1, [sp, #16]
 80082fa:	e7c2      	b.n	8008282 <_strtod_l+0x16a>
 80082fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	921b      	str	r2, [sp, #108]	; 0x6c
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	3001      	adds	r0, #1
 8008306:	2b30      	cmp	r3, #48	; 0x30
 8008308:	d0f8      	beq.n	80082fc <_strtod_l+0x1e4>
 800830a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800830e:	2a08      	cmp	r2, #8
 8008310:	f200 84e4 	bhi.w	8008cdc <_strtod_l+0xbc4>
 8008314:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008316:	9208      	str	r2, [sp, #32]
 8008318:	4602      	mov	r2, r0
 800831a:	2000      	movs	r0, #0
 800831c:	4604      	mov	r4, r0
 800831e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008322:	f100 0101 	add.w	r1, r0, #1
 8008326:	d012      	beq.n	800834e <_strtod_l+0x236>
 8008328:	440a      	add	r2, r1
 800832a:	eb00 0c04 	add.w	ip, r0, r4
 800832e:	4621      	mov	r1, r4
 8008330:	270a      	movs	r7, #10
 8008332:	458c      	cmp	ip, r1
 8008334:	d113      	bne.n	800835e <_strtod_l+0x246>
 8008336:	1821      	adds	r1, r4, r0
 8008338:	2908      	cmp	r1, #8
 800833a:	f104 0401 	add.w	r4, r4, #1
 800833e:	4404      	add	r4, r0
 8008340:	dc19      	bgt.n	8008376 <_strtod_l+0x25e>
 8008342:	9b07      	ldr	r3, [sp, #28]
 8008344:	210a      	movs	r1, #10
 8008346:	fb01 e303 	mla	r3, r1, r3, lr
 800834a:	9307      	str	r3, [sp, #28]
 800834c:	2100      	movs	r1, #0
 800834e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008350:	1c58      	adds	r0, r3, #1
 8008352:	901b      	str	r0, [sp, #108]	; 0x6c
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	4608      	mov	r0, r1
 8008358:	e7c9      	b.n	80082ee <_strtod_l+0x1d6>
 800835a:	9805      	ldr	r0, [sp, #20]
 800835c:	e7d3      	b.n	8008306 <_strtod_l+0x1ee>
 800835e:	2908      	cmp	r1, #8
 8008360:	f101 0101 	add.w	r1, r1, #1
 8008364:	dc03      	bgt.n	800836e <_strtod_l+0x256>
 8008366:	9b07      	ldr	r3, [sp, #28]
 8008368:	437b      	muls	r3, r7
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	e7e1      	b.n	8008332 <_strtod_l+0x21a>
 800836e:	2910      	cmp	r1, #16
 8008370:	bfd8      	it	le
 8008372:	437d      	mulle	r5, r7
 8008374:	e7dd      	b.n	8008332 <_strtod_l+0x21a>
 8008376:	2c10      	cmp	r4, #16
 8008378:	bfdc      	itt	le
 800837a:	210a      	movle	r1, #10
 800837c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008380:	e7e4      	b.n	800834c <_strtod_l+0x234>
 8008382:	2301      	movs	r3, #1
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	e781      	b.n	800828c <_strtod_l+0x174>
 8008388:	f04f 0c01 	mov.w	ip, #1
 800838c:	1cb3      	adds	r3, r6, #2
 800838e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008390:	78b3      	ldrb	r3, [r6, #2]
 8008392:	e78a      	b.n	80082aa <_strtod_l+0x192>
 8008394:	f04f 0c00 	mov.w	ip, #0
 8008398:	e7f8      	b.n	800838c <_strtod_l+0x274>
 800839a:	bf00      	nop
 800839c:	0800b090 	.word	0x0800b090
 80083a0:	7ff00000 	.word	0x7ff00000
 80083a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083a6:	1c5f      	adds	r7, r3, #1
 80083a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	2b30      	cmp	r3, #48	; 0x30
 80083ae:	d0f9      	beq.n	80083a4 <_strtod_l+0x28c>
 80083b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80083b4:	2f08      	cmp	r7, #8
 80083b6:	f63f af7d 	bhi.w	80082b4 <_strtod_l+0x19c>
 80083ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80083be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c0:	930a      	str	r3, [sp, #40]	; 0x28
 80083c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c4:	1c5f      	adds	r7, r3, #1
 80083c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80083ce:	f1b8 0f09 	cmp.w	r8, #9
 80083d2:	d937      	bls.n	8008444 <_strtod_l+0x32c>
 80083d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083d6:	1a7f      	subs	r7, r7, r1
 80083d8:	2f08      	cmp	r7, #8
 80083da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80083de:	dc37      	bgt.n	8008450 <_strtod_l+0x338>
 80083e0:	45be      	cmp	lr, r7
 80083e2:	bfa8      	it	ge
 80083e4:	46be      	movge	lr, r7
 80083e6:	f1bc 0f00 	cmp.w	ip, #0
 80083ea:	d001      	beq.n	80083f0 <_strtod_l+0x2d8>
 80083ec:	f1ce 0e00 	rsb	lr, lr, #0
 80083f0:	2c00      	cmp	r4, #0
 80083f2:	d151      	bne.n	8008498 <_strtod_l+0x380>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f47f aece 	bne.w	8008196 <_strtod_l+0x7e>
 80083fa:	9a06      	ldr	r2, [sp, #24]
 80083fc:	2a00      	cmp	r2, #0
 80083fe:	f47f aeca 	bne.w	8008196 <_strtod_l+0x7e>
 8008402:	9a04      	ldr	r2, [sp, #16]
 8008404:	2a00      	cmp	r2, #0
 8008406:	f47f aee4 	bne.w	80081d2 <_strtod_l+0xba>
 800840a:	2b4e      	cmp	r3, #78	; 0x4e
 800840c:	d027      	beq.n	800845e <_strtod_l+0x346>
 800840e:	dc21      	bgt.n	8008454 <_strtod_l+0x33c>
 8008410:	2b49      	cmp	r3, #73	; 0x49
 8008412:	f47f aede 	bne.w	80081d2 <_strtod_l+0xba>
 8008416:	49a0      	ldr	r1, [pc, #640]	; (8008698 <_strtod_l+0x580>)
 8008418:	a81b      	add	r0, sp, #108	; 0x6c
 800841a:	f001 fdd7 	bl	8009fcc <__match>
 800841e:	2800      	cmp	r0, #0
 8008420:	f43f aed7 	beq.w	80081d2 <_strtod_l+0xba>
 8008424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008426:	499d      	ldr	r1, [pc, #628]	; (800869c <_strtod_l+0x584>)
 8008428:	3b01      	subs	r3, #1
 800842a:	a81b      	add	r0, sp, #108	; 0x6c
 800842c:	931b      	str	r3, [sp, #108]	; 0x6c
 800842e:	f001 fdcd 	bl	8009fcc <__match>
 8008432:	b910      	cbnz	r0, 800843a <_strtod_l+0x322>
 8008434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008436:	3301      	adds	r3, #1
 8008438:	931b      	str	r3, [sp, #108]	; 0x6c
 800843a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80086b0 <_strtod_l+0x598>
 800843e:	f04f 0a00 	mov.w	sl, #0
 8008442:	e6a8      	b.n	8008196 <_strtod_l+0x7e>
 8008444:	210a      	movs	r1, #10
 8008446:	fb01 3e0e 	mla	lr, r1, lr, r3
 800844a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800844e:	e7b8      	b.n	80083c2 <_strtod_l+0x2aa>
 8008450:	46be      	mov	lr, r7
 8008452:	e7c8      	b.n	80083e6 <_strtod_l+0x2ce>
 8008454:	2b69      	cmp	r3, #105	; 0x69
 8008456:	d0de      	beq.n	8008416 <_strtod_l+0x2fe>
 8008458:	2b6e      	cmp	r3, #110	; 0x6e
 800845a:	f47f aeba 	bne.w	80081d2 <_strtod_l+0xba>
 800845e:	4990      	ldr	r1, [pc, #576]	; (80086a0 <_strtod_l+0x588>)
 8008460:	a81b      	add	r0, sp, #108	; 0x6c
 8008462:	f001 fdb3 	bl	8009fcc <__match>
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aeb3 	beq.w	80081d2 <_strtod_l+0xba>
 800846c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b28      	cmp	r3, #40	; 0x28
 8008472:	d10e      	bne.n	8008492 <_strtod_l+0x37a>
 8008474:	aa1e      	add	r2, sp, #120	; 0x78
 8008476:	498b      	ldr	r1, [pc, #556]	; (80086a4 <_strtod_l+0x58c>)
 8008478:	a81b      	add	r0, sp, #108	; 0x6c
 800847a:	f001 fdbb 	bl	8009ff4 <__hexnan>
 800847e:	2805      	cmp	r0, #5
 8008480:	d107      	bne.n	8008492 <_strtod_l+0x37a>
 8008482:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008484:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008488:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800848c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008490:	e681      	b.n	8008196 <_strtod_l+0x7e>
 8008492:	f8df b224 	ldr.w	fp, [pc, #548]	; 80086b8 <_strtod_l+0x5a0>
 8008496:	e7d2      	b.n	800843e <_strtod_l+0x326>
 8008498:	ebae 0302 	sub.w	r3, lr, r2
 800849c:	9306      	str	r3, [sp, #24]
 800849e:	9b05      	ldr	r3, [sp, #20]
 80084a0:	9807      	ldr	r0, [sp, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf08      	it	eq
 80084a6:	4623      	moveq	r3, r4
 80084a8:	2c10      	cmp	r4, #16
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	46a0      	mov	r8, r4
 80084ae:	bfa8      	it	ge
 80084b0:	f04f 0810 	movge.w	r8, #16
 80084b4:	f7f8 f82e 	bl	8000514 <__aeabi_ui2d>
 80084b8:	2c09      	cmp	r4, #9
 80084ba:	4682      	mov	sl, r0
 80084bc:	468b      	mov	fp, r1
 80084be:	dc13      	bgt.n	80084e8 <_strtod_l+0x3d0>
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f43f ae67 	beq.w	8008196 <_strtod_l+0x7e>
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	dd7a      	ble.n	80085c2 <_strtod_l+0x4aa>
 80084cc:	2b16      	cmp	r3, #22
 80084ce:	dc61      	bgt.n	8008594 <_strtod_l+0x47c>
 80084d0:	4a75      	ldr	r2, [pc, #468]	; (80086a8 <_strtod_l+0x590>)
 80084d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80084d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80084da:	4652      	mov	r2, sl
 80084dc:	465b      	mov	r3, fp
 80084de:	f7f8 f893 	bl	8000608 <__aeabi_dmul>
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	e656      	b.n	8008196 <_strtod_l+0x7e>
 80084e8:	4b6f      	ldr	r3, [pc, #444]	; (80086a8 <_strtod_l+0x590>)
 80084ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084f2:	f7f8 f889 	bl	8000608 <__aeabi_dmul>
 80084f6:	4606      	mov	r6, r0
 80084f8:	4628      	mov	r0, r5
 80084fa:	460f      	mov	r7, r1
 80084fc:	f7f8 f80a 	bl	8000514 <__aeabi_ui2d>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f7f7 fec8 	bl	800029c <__adddf3>
 800850c:	2c0f      	cmp	r4, #15
 800850e:	4682      	mov	sl, r0
 8008510:	468b      	mov	fp, r1
 8008512:	ddd5      	ble.n	80084c0 <_strtod_l+0x3a8>
 8008514:	9b06      	ldr	r3, [sp, #24]
 8008516:	eba4 0808 	sub.w	r8, r4, r8
 800851a:	4498      	add	r8, r3
 800851c:	f1b8 0f00 	cmp.w	r8, #0
 8008520:	f340 8096 	ble.w	8008650 <_strtod_l+0x538>
 8008524:	f018 030f 	ands.w	r3, r8, #15
 8008528:	d00a      	beq.n	8008540 <_strtod_l+0x428>
 800852a:	495f      	ldr	r1, [pc, #380]	; (80086a8 <_strtod_l+0x590>)
 800852c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008530:	4652      	mov	r2, sl
 8008532:	465b      	mov	r3, fp
 8008534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008538:	f7f8 f866 	bl	8000608 <__aeabi_dmul>
 800853c:	4682      	mov	sl, r0
 800853e:	468b      	mov	fp, r1
 8008540:	f038 080f 	bics.w	r8, r8, #15
 8008544:	d073      	beq.n	800862e <_strtod_l+0x516>
 8008546:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800854a:	dd47      	ble.n	80085dc <_strtod_l+0x4c4>
 800854c:	2400      	movs	r4, #0
 800854e:	46a0      	mov	r8, r4
 8008550:	9407      	str	r4, [sp, #28]
 8008552:	9405      	str	r4, [sp, #20]
 8008554:	2322      	movs	r3, #34	; 0x22
 8008556:	f8df b158 	ldr.w	fp, [pc, #344]	; 80086b0 <_strtod_l+0x598>
 800855a:	f8c9 3000 	str.w	r3, [r9]
 800855e:	f04f 0a00 	mov.w	sl, #0
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f43f ae16 	beq.w	8008196 <_strtod_l+0x7e>
 800856a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800856c:	4648      	mov	r0, r9
 800856e:	f001 fe3e 	bl	800a1ee <_Bfree>
 8008572:	9905      	ldr	r1, [sp, #20]
 8008574:	4648      	mov	r0, r9
 8008576:	f001 fe3a 	bl	800a1ee <_Bfree>
 800857a:	4641      	mov	r1, r8
 800857c:	4648      	mov	r0, r9
 800857e:	f001 fe36 	bl	800a1ee <_Bfree>
 8008582:	9907      	ldr	r1, [sp, #28]
 8008584:	4648      	mov	r0, r9
 8008586:	f001 fe32 	bl	800a1ee <_Bfree>
 800858a:	4621      	mov	r1, r4
 800858c:	4648      	mov	r0, r9
 800858e:	f001 fe2e 	bl	800a1ee <_Bfree>
 8008592:	e600      	b.n	8008196 <_strtod_l+0x7e>
 8008594:	9a06      	ldr	r2, [sp, #24]
 8008596:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800859a:	4293      	cmp	r3, r2
 800859c:	dbba      	blt.n	8008514 <_strtod_l+0x3fc>
 800859e:	4d42      	ldr	r5, [pc, #264]	; (80086a8 <_strtod_l+0x590>)
 80085a0:	f1c4 040f 	rsb	r4, r4, #15
 80085a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80085a8:	4652      	mov	r2, sl
 80085aa:	465b      	mov	r3, fp
 80085ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	9b06      	ldr	r3, [sp, #24]
 80085b6:	1b1c      	subs	r4, r3, r4
 80085b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80085bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085c0:	e78d      	b.n	80084de <_strtod_l+0x3c6>
 80085c2:	f113 0f16 	cmn.w	r3, #22
 80085c6:	dba5      	blt.n	8008514 <_strtod_l+0x3fc>
 80085c8:	4a37      	ldr	r2, [pc, #220]	; (80086a8 <_strtod_l+0x590>)
 80085ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80085ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80085d2:	4650      	mov	r0, sl
 80085d4:	4659      	mov	r1, fp
 80085d6:	f7f8 f941 	bl	800085c <__aeabi_ddiv>
 80085da:	e782      	b.n	80084e2 <_strtod_l+0x3ca>
 80085dc:	2300      	movs	r3, #0
 80085de:	4e33      	ldr	r6, [pc, #204]	; (80086ac <_strtod_l+0x594>)
 80085e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085e4:	4650      	mov	r0, sl
 80085e6:	4659      	mov	r1, fp
 80085e8:	461d      	mov	r5, r3
 80085ea:	f1b8 0f01 	cmp.w	r8, #1
 80085ee:	dc21      	bgt.n	8008634 <_strtod_l+0x51c>
 80085f0:	b10b      	cbz	r3, 80085f6 <_strtod_l+0x4de>
 80085f2:	4682      	mov	sl, r0
 80085f4:	468b      	mov	fp, r1
 80085f6:	4b2d      	ldr	r3, [pc, #180]	; (80086ac <_strtod_l+0x594>)
 80085f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80085fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008600:	4652      	mov	r2, sl
 8008602:	465b      	mov	r3, fp
 8008604:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008608:	f7f7 fffe 	bl	8000608 <__aeabi_dmul>
 800860c:	4b28      	ldr	r3, [pc, #160]	; (80086b0 <_strtod_l+0x598>)
 800860e:	460a      	mov	r2, r1
 8008610:	400b      	ands	r3, r1
 8008612:	4928      	ldr	r1, [pc, #160]	; (80086b4 <_strtod_l+0x59c>)
 8008614:	428b      	cmp	r3, r1
 8008616:	4682      	mov	sl, r0
 8008618:	d898      	bhi.n	800854c <_strtod_l+0x434>
 800861a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800861e:	428b      	cmp	r3, r1
 8008620:	bf86      	itte	hi
 8008622:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80086bc <_strtod_l+0x5a4>
 8008626:	f04f 3aff 	movhi.w	sl, #4294967295
 800862a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800862e:	2300      	movs	r3, #0
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	e077      	b.n	8008724 <_strtod_l+0x60c>
 8008634:	f018 0f01 	tst.w	r8, #1
 8008638:	d006      	beq.n	8008648 <_strtod_l+0x530>
 800863a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 ffe1 	bl	8000608 <__aeabi_dmul>
 8008646:	2301      	movs	r3, #1
 8008648:	3501      	adds	r5, #1
 800864a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800864e:	e7cc      	b.n	80085ea <_strtod_l+0x4d2>
 8008650:	d0ed      	beq.n	800862e <_strtod_l+0x516>
 8008652:	f1c8 0800 	rsb	r8, r8, #0
 8008656:	f018 020f 	ands.w	r2, r8, #15
 800865a:	d00a      	beq.n	8008672 <_strtod_l+0x55a>
 800865c:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <_strtod_l+0x590>)
 800865e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008662:	4650      	mov	r0, sl
 8008664:	4659      	mov	r1, fp
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f8 f8f7 	bl	800085c <__aeabi_ddiv>
 800866e:	4682      	mov	sl, r0
 8008670:	468b      	mov	fp, r1
 8008672:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008676:	d0da      	beq.n	800862e <_strtod_l+0x516>
 8008678:	f1b8 0f1f 	cmp.w	r8, #31
 800867c:	dd20      	ble.n	80086c0 <_strtod_l+0x5a8>
 800867e:	2400      	movs	r4, #0
 8008680:	46a0      	mov	r8, r4
 8008682:	9407      	str	r4, [sp, #28]
 8008684:	9405      	str	r4, [sp, #20]
 8008686:	2322      	movs	r3, #34	; 0x22
 8008688:	f04f 0a00 	mov.w	sl, #0
 800868c:	f04f 0b00 	mov.w	fp, #0
 8008690:	f8c9 3000 	str.w	r3, [r9]
 8008694:	e765      	b.n	8008562 <_strtod_l+0x44a>
 8008696:	bf00      	nop
 8008698:	0800b059 	.word	0x0800b059
 800869c:	0800b0e3 	.word	0x0800b0e3
 80086a0:	0800b061 	.word	0x0800b061
 80086a4:	0800b0a4 	.word	0x0800b0a4
 80086a8:	0800b120 	.word	0x0800b120
 80086ac:	0800b0f8 	.word	0x0800b0f8
 80086b0:	7ff00000 	.word	0x7ff00000
 80086b4:	7ca00000 	.word	0x7ca00000
 80086b8:	fff80000 	.word	0xfff80000
 80086bc:	7fefffff 	.word	0x7fefffff
 80086c0:	f018 0310 	ands.w	r3, r8, #16
 80086c4:	bf18      	it	ne
 80086c6:	236a      	movne	r3, #106	; 0x6a
 80086c8:	4da0      	ldr	r5, [pc, #640]	; (800894c <_strtod_l+0x834>)
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	4650      	mov	r0, sl
 80086ce:	4659      	mov	r1, fp
 80086d0:	2300      	movs	r3, #0
 80086d2:	f1b8 0f00 	cmp.w	r8, #0
 80086d6:	f300 810a 	bgt.w	80088ee <_strtod_l+0x7d6>
 80086da:	b10b      	cbz	r3, 80086e0 <_strtod_l+0x5c8>
 80086dc:	4682      	mov	sl, r0
 80086de:	468b      	mov	fp, r1
 80086e0:	9b04      	ldr	r3, [sp, #16]
 80086e2:	b1bb      	cbz	r3, 8008714 <_strtod_l+0x5fc>
 80086e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80086e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	4659      	mov	r1, fp
 80086f0:	dd10      	ble.n	8008714 <_strtod_l+0x5fc>
 80086f2:	2b1f      	cmp	r3, #31
 80086f4:	f340 8107 	ble.w	8008906 <_strtod_l+0x7ee>
 80086f8:	2b34      	cmp	r3, #52	; 0x34
 80086fa:	bfde      	ittt	le
 80086fc:	3b20      	suble	r3, #32
 80086fe:	f04f 32ff 	movle.w	r2, #4294967295
 8008702:	fa02 f303 	lslle.w	r3, r2, r3
 8008706:	f04f 0a00 	mov.w	sl, #0
 800870a:	bfcc      	ite	gt
 800870c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008710:	ea03 0b01 	andle.w	fp, r3, r1
 8008714:	2200      	movs	r2, #0
 8008716:	2300      	movs	r3, #0
 8008718:	4650      	mov	r0, sl
 800871a:	4659      	mov	r1, fp
 800871c:	f7f8 f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008720:	2800      	cmp	r0, #0
 8008722:	d1ac      	bne.n	800867e <_strtod_l+0x566>
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	9a05      	ldr	r2, [sp, #20]
 800872a:	9908      	ldr	r1, [sp, #32]
 800872c:	4623      	mov	r3, r4
 800872e:	4648      	mov	r0, r9
 8008730:	f001 fdaf 	bl	800a292 <__s2b>
 8008734:	9007      	str	r0, [sp, #28]
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f af08 	beq.w	800854c <_strtod_l+0x434>
 800873c:	9a06      	ldr	r2, [sp, #24]
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	2a00      	cmp	r2, #0
 8008742:	f1c3 0300 	rsb	r3, r3, #0
 8008746:	bfa8      	it	ge
 8008748:	2300      	movge	r3, #0
 800874a:	930e      	str	r3, [sp, #56]	; 0x38
 800874c:	2400      	movs	r4, #0
 800874e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008752:	9316      	str	r3, [sp, #88]	; 0x58
 8008754:	46a0      	mov	r8, r4
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	4648      	mov	r0, r9
 800875a:	6859      	ldr	r1, [r3, #4]
 800875c:	f001 fd13 	bl	800a186 <_Balloc>
 8008760:	9005      	str	r0, [sp, #20]
 8008762:	2800      	cmp	r0, #0
 8008764:	f43f aef6 	beq.w	8008554 <_strtod_l+0x43c>
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	3202      	adds	r2, #2
 800876e:	f103 010c 	add.w	r1, r3, #12
 8008772:	0092      	lsls	r2, r2, #2
 8008774:	300c      	adds	r0, #12
 8008776:	f001 fcfb 	bl	800a170 <memcpy>
 800877a:	aa1e      	add	r2, sp, #120	; 0x78
 800877c:	a91d      	add	r1, sp, #116	; 0x74
 800877e:	ec4b ab10 	vmov	d0, sl, fp
 8008782:	4648      	mov	r0, r9
 8008784:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008788:	f002 f83e 	bl	800a808 <__d2b>
 800878c:	901c      	str	r0, [sp, #112]	; 0x70
 800878e:	2800      	cmp	r0, #0
 8008790:	f43f aee0 	beq.w	8008554 <_strtod_l+0x43c>
 8008794:	2101      	movs	r1, #1
 8008796:	4648      	mov	r0, r9
 8008798:	f001 fe07 	bl	800a3aa <__i2b>
 800879c:	4680      	mov	r8, r0
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f aed8 	beq.w	8008554 <_strtod_l+0x43c>
 80087a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80087a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	bfab      	itete	ge
 80087ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80087ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80087b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80087b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80087b4:	bfac      	ite	ge
 80087b6:	18f7      	addge	r7, r6, r3
 80087b8:	1b9d      	sublt	r5, r3, r6
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	1af6      	subs	r6, r6, r3
 80087be:	4416      	add	r6, r2
 80087c0:	4b63      	ldr	r3, [pc, #396]	; (8008950 <_strtod_l+0x838>)
 80087c2:	3e01      	subs	r6, #1
 80087c4:	429e      	cmp	r6, r3
 80087c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087ca:	f280 80af 	bge.w	800892c <_strtod_l+0x814>
 80087ce:	1b9b      	subs	r3, r3, r6
 80087d0:	2b1f      	cmp	r3, #31
 80087d2:	eba2 0203 	sub.w	r2, r2, r3
 80087d6:	f04f 0101 	mov.w	r1, #1
 80087da:	f300 809b 	bgt.w	8008914 <_strtod_l+0x7fc>
 80087de:	fa01 f303 	lsl.w	r3, r1, r3
 80087e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80087e4:	2300      	movs	r3, #0
 80087e6:	930a      	str	r3, [sp, #40]	; 0x28
 80087e8:	18be      	adds	r6, r7, r2
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	42b7      	cmp	r7, r6
 80087ee:	4415      	add	r5, r2
 80087f0:	441d      	add	r5, r3
 80087f2:	463b      	mov	r3, r7
 80087f4:	bfa8      	it	ge
 80087f6:	4633      	movge	r3, r6
 80087f8:	42ab      	cmp	r3, r5
 80087fa:	bfa8      	it	ge
 80087fc:	462b      	movge	r3, r5
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfc2      	ittt	gt
 8008802:	1af6      	subgt	r6, r6, r3
 8008804:	1aed      	subgt	r5, r5, r3
 8008806:	1aff      	subgt	r7, r7, r3
 8008808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880a:	b1bb      	cbz	r3, 800883c <_strtod_l+0x724>
 800880c:	4641      	mov	r1, r8
 800880e:	461a      	mov	r2, r3
 8008810:	4648      	mov	r0, r9
 8008812:	f001 fe69 	bl	800a4e8 <__pow5mult>
 8008816:	4680      	mov	r8, r0
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f ae9b 	beq.w	8008554 <_strtod_l+0x43c>
 800881e:	4601      	mov	r1, r0
 8008820:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008822:	4648      	mov	r0, r9
 8008824:	f001 fdca 	bl	800a3bc <__multiply>
 8008828:	900c      	str	r0, [sp, #48]	; 0x30
 800882a:	2800      	cmp	r0, #0
 800882c:	f43f ae92 	beq.w	8008554 <_strtod_l+0x43c>
 8008830:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008832:	4648      	mov	r0, r9
 8008834:	f001 fcdb 	bl	800a1ee <_Bfree>
 8008838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800883a:	931c      	str	r3, [sp, #112]	; 0x70
 800883c:	2e00      	cmp	r6, #0
 800883e:	dc7a      	bgt.n	8008936 <_strtod_l+0x81e>
 8008840:	9b06      	ldr	r3, [sp, #24]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dd08      	ble.n	8008858 <_strtod_l+0x740>
 8008846:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008848:	9905      	ldr	r1, [sp, #20]
 800884a:	4648      	mov	r0, r9
 800884c:	f001 fe4c 	bl	800a4e8 <__pow5mult>
 8008850:	9005      	str	r0, [sp, #20]
 8008852:	2800      	cmp	r0, #0
 8008854:	f43f ae7e 	beq.w	8008554 <_strtod_l+0x43c>
 8008858:	2d00      	cmp	r5, #0
 800885a:	dd08      	ble.n	800886e <_strtod_l+0x756>
 800885c:	462a      	mov	r2, r5
 800885e:	9905      	ldr	r1, [sp, #20]
 8008860:	4648      	mov	r0, r9
 8008862:	f001 fe8f 	bl	800a584 <__lshift>
 8008866:	9005      	str	r0, [sp, #20]
 8008868:	2800      	cmp	r0, #0
 800886a:	f43f ae73 	beq.w	8008554 <_strtod_l+0x43c>
 800886e:	2f00      	cmp	r7, #0
 8008870:	dd08      	ble.n	8008884 <_strtod_l+0x76c>
 8008872:	4641      	mov	r1, r8
 8008874:	463a      	mov	r2, r7
 8008876:	4648      	mov	r0, r9
 8008878:	f001 fe84 	bl	800a584 <__lshift>
 800887c:	4680      	mov	r8, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	f43f ae68 	beq.w	8008554 <_strtod_l+0x43c>
 8008884:	9a05      	ldr	r2, [sp, #20]
 8008886:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008888:	4648      	mov	r0, r9
 800888a:	f001 fee9 	bl	800a660 <__mdiff>
 800888e:	4604      	mov	r4, r0
 8008890:	2800      	cmp	r0, #0
 8008892:	f43f ae5f 	beq.w	8008554 <_strtod_l+0x43c>
 8008896:	68c3      	ldr	r3, [r0, #12]
 8008898:	930c      	str	r3, [sp, #48]	; 0x30
 800889a:	2300      	movs	r3, #0
 800889c:	60c3      	str	r3, [r0, #12]
 800889e:	4641      	mov	r1, r8
 80088a0:	f001 fec4 	bl	800a62c <__mcmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	da55      	bge.n	8008954 <_strtod_l+0x83c>
 80088a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088aa:	b9e3      	cbnz	r3, 80088e6 <_strtod_l+0x7ce>
 80088ac:	f1ba 0f00 	cmp.w	sl, #0
 80088b0:	d119      	bne.n	80088e6 <_strtod_l+0x7ce>
 80088b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088b6:	b9b3      	cbnz	r3, 80088e6 <_strtod_l+0x7ce>
 80088b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088bc:	0d1b      	lsrs	r3, r3, #20
 80088be:	051b      	lsls	r3, r3, #20
 80088c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088c4:	d90f      	bls.n	80088e6 <_strtod_l+0x7ce>
 80088c6:	6963      	ldr	r3, [r4, #20]
 80088c8:	b913      	cbnz	r3, 80088d0 <_strtod_l+0x7b8>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	dd0a      	ble.n	80088e6 <_strtod_l+0x7ce>
 80088d0:	4621      	mov	r1, r4
 80088d2:	2201      	movs	r2, #1
 80088d4:	4648      	mov	r0, r9
 80088d6:	f001 fe55 	bl	800a584 <__lshift>
 80088da:	4641      	mov	r1, r8
 80088dc:	4604      	mov	r4, r0
 80088de:	f001 fea5 	bl	800a62c <__mcmp>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	dc67      	bgt.n	80089b6 <_strtod_l+0x89e>
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d171      	bne.n	80089d0 <_strtod_l+0x8b8>
 80088ec:	e63d      	b.n	800856a <_strtod_l+0x452>
 80088ee:	f018 0f01 	tst.w	r8, #1
 80088f2:	d004      	beq.n	80088fe <_strtod_l+0x7e6>
 80088f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088f8:	f7f7 fe86 	bl	8000608 <__aeabi_dmul>
 80088fc:	2301      	movs	r3, #1
 80088fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008902:	3508      	adds	r5, #8
 8008904:	e6e5      	b.n	80086d2 <_strtod_l+0x5ba>
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	ea03 0a0a 	and.w	sl, r3, sl
 8008912:	e6ff      	b.n	8008714 <_strtod_l+0x5fc>
 8008914:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008918:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800891c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008920:	36e2      	adds	r6, #226	; 0xe2
 8008922:	fa01 f306 	lsl.w	r3, r1, r6
 8008926:	930a      	str	r3, [sp, #40]	; 0x28
 8008928:	910f      	str	r1, [sp, #60]	; 0x3c
 800892a:	e75d      	b.n	80087e8 <_strtod_l+0x6d0>
 800892c:	2300      	movs	r3, #0
 800892e:	930a      	str	r3, [sp, #40]	; 0x28
 8008930:	2301      	movs	r3, #1
 8008932:	930f      	str	r3, [sp, #60]	; 0x3c
 8008934:	e758      	b.n	80087e8 <_strtod_l+0x6d0>
 8008936:	4632      	mov	r2, r6
 8008938:	991c      	ldr	r1, [sp, #112]	; 0x70
 800893a:	4648      	mov	r0, r9
 800893c:	f001 fe22 	bl	800a584 <__lshift>
 8008940:	901c      	str	r0, [sp, #112]	; 0x70
 8008942:	2800      	cmp	r0, #0
 8008944:	f47f af7c 	bne.w	8008840 <_strtod_l+0x728>
 8008948:	e604      	b.n	8008554 <_strtod_l+0x43c>
 800894a:	bf00      	nop
 800894c:	0800b0b8 	.word	0x0800b0b8
 8008950:	fffffc02 	.word	0xfffffc02
 8008954:	465d      	mov	r5, fp
 8008956:	f040 8086 	bne.w	8008a66 <_strtod_l+0x94e>
 800895a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800895c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008960:	b32a      	cbz	r2, 80089ae <_strtod_l+0x896>
 8008962:	4aaf      	ldr	r2, [pc, #700]	; (8008c20 <_strtod_l+0xb08>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d153      	bne.n	8008a10 <_strtod_l+0x8f8>
 8008968:	9b04      	ldr	r3, [sp, #16]
 800896a:	4650      	mov	r0, sl
 800896c:	b1d3      	cbz	r3, 80089a4 <_strtod_l+0x88c>
 800896e:	4aad      	ldr	r2, [pc, #692]	; (8008c24 <_strtod_l+0xb0c>)
 8008970:	402a      	ands	r2, r5
 8008972:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008976:	f04f 31ff 	mov.w	r1, #4294967295
 800897a:	d816      	bhi.n	80089aa <_strtod_l+0x892>
 800897c:	0d12      	lsrs	r2, r2, #20
 800897e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008982:	fa01 f303 	lsl.w	r3, r1, r3
 8008986:	4298      	cmp	r0, r3
 8008988:	d142      	bne.n	8008a10 <_strtod_l+0x8f8>
 800898a:	4ba7      	ldr	r3, [pc, #668]	; (8008c28 <_strtod_l+0xb10>)
 800898c:	429d      	cmp	r5, r3
 800898e:	d102      	bne.n	8008996 <_strtod_l+0x87e>
 8008990:	3001      	adds	r0, #1
 8008992:	f43f addf 	beq.w	8008554 <_strtod_l+0x43c>
 8008996:	4ba3      	ldr	r3, [pc, #652]	; (8008c24 <_strtod_l+0xb0c>)
 8008998:	402b      	ands	r3, r5
 800899a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800899e:	f04f 0a00 	mov.w	sl, #0
 80089a2:	e7a0      	b.n	80088e6 <_strtod_l+0x7ce>
 80089a4:	f04f 33ff 	mov.w	r3, #4294967295
 80089a8:	e7ed      	b.n	8008986 <_strtod_l+0x86e>
 80089aa:	460b      	mov	r3, r1
 80089ac:	e7eb      	b.n	8008986 <_strtod_l+0x86e>
 80089ae:	bb7b      	cbnz	r3, 8008a10 <_strtod_l+0x8f8>
 80089b0:	f1ba 0f00 	cmp.w	sl, #0
 80089b4:	d12c      	bne.n	8008a10 <_strtod_l+0x8f8>
 80089b6:	9904      	ldr	r1, [sp, #16]
 80089b8:	4a9a      	ldr	r2, [pc, #616]	; (8008c24 <_strtod_l+0xb0c>)
 80089ba:	465b      	mov	r3, fp
 80089bc:	b1f1      	cbz	r1, 80089fc <_strtod_l+0x8e4>
 80089be:	ea02 010b 	and.w	r1, r2, fp
 80089c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089c6:	dc19      	bgt.n	80089fc <_strtod_l+0x8e4>
 80089c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089cc:	f77f ae5b 	ble.w	8008686 <_strtod_l+0x56e>
 80089d0:	4a96      	ldr	r2, [pc, #600]	; (8008c2c <_strtod_l+0xb14>)
 80089d2:	2300      	movs	r3, #0
 80089d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80089d8:	4650      	mov	r0, sl
 80089da:	4659      	mov	r1, fp
 80089dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80089e0:	f7f7 fe12 	bl	8000608 <__aeabi_dmul>
 80089e4:	4682      	mov	sl, r0
 80089e6:	468b      	mov	fp, r1
 80089e8:	2900      	cmp	r1, #0
 80089ea:	f47f adbe 	bne.w	800856a <_strtod_l+0x452>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f47f adbb 	bne.w	800856a <_strtod_l+0x452>
 80089f4:	2322      	movs	r3, #34	; 0x22
 80089f6:	f8c9 3000 	str.w	r3, [r9]
 80089fa:	e5b6      	b.n	800856a <_strtod_l+0x452>
 80089fc:	4013      	ands	r3, r2
 80089fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a02:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a0a:	f04f 3aff 	mov.w	sl, #4294967295
 8008a0e:	e76a      	b.n	80088e6 <_strtod_l+0x7ce>
 8008a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a12:	b193      	cbz	r3, 8008a3a <_strtod_l+0x922>
 8008a14:	422b      	tst	r3, r5
 8008a16:	f43f af66 	beq.w	80088e6 <_strtod_l+0x7ce>
 8008a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	4650      	mov	r0, sl
 8008a20:	4659      	mov	r1, fp
 8008a22:	b173      	cbz	r3, 8008a42 <_strtod_l+0x92a>
 8008a24:	f7ff fb5c 	bl	80080e0 <sulp>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a30:	f7f7 fc34 	bl	800029c <__adddf3>
 8008a34:	4682      	mov	sl, r0
 8008a36:	468b      	mov	fp, r1
 8008a38:	e755      	b.n	80088e6 <_strtod_l+0x7ce>
 8008a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a3c:	ea13 0f0a 	tst.w	r3, sl
 8008a40:	e7e9      	b.n	8008a16 <_strtod_l+0x8fe>
 8008a42:	f7ff fb4d 	bl	80080e0 <sulp>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a4e:	f7f7 fc23 	bl	8000298 <__aeabi_dsub>
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	4682      	mov	sl, r0
 8008a58:	468b      	mov	fp, r1
 8008a5a:	f7f8 f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f47f ae11 	bne.w	8008686 <_strtod_l+0x56e>
 8008a64:	e73f      	b.n	80088e6 <_strtod_l+0x7ce>
 8008a66:	4641      	mov	r1, r8
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f001 ff1c 	bl	800a8a6 <__ratio>
 8008a6e:	ec57 6b10 	vmov	r6, r7, d0
 8008a72:	2200      	movs	r2, #0
 8008a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a78:	ee10 0a10 	vmov	r0, s0
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f8 f83f 	bl	8000b00 <__aeabi_dcmple>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d077      	beq.n	8008b76 <_strtod_l+0xa5e>
 8008a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d04a      	beq.n	8008b22 <_strtod_l+0xa0a>
 8008a8c:	4b68      	ldr	r3, [pc, #416]	; (8008c30 <_strtod_l+0xb18>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a94:	4f66      	ldr	r7, [pc, #408]	; (8008c30 <_strtod_l+0xb18>)
 8008a96:	2600      	movs	r6, #0
 8008a98:	4b62      	ldr	r3, [pc, #392]	; (8008c24 <_strtod_l+0xb0c>)
 8008a9a:	402b      	ands	r3, r5
 8008a9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aa0:	4b64      	ldr	r3, [pc, #400]	; (8008c34 <_strtod_l+0xb1c>)
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	f040 80ce 	bne.w	8008c44 <_strtod_l+0xb2c>
 8008aa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008aac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ab0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008ab4:	ec4b ab10 	vmov	d0, sl, fp
 8008ab8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008abc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ac0:	f001 fe2c 	bl	800a71c <__ulp>
 8008ac4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ac8:	ec53 2b10 	vmov	r2, r3, d0
 8008acc:	f7f7 fd9c 	bl	8000608 <__aeabi_dmul>
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	465b      	mov	r3, fp
 8008ad4:	f7f7 fbe2 	bl	800029c <__adddf3>
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4952      	ldr	r1, [pc, #328]	; (8008c24 <_strtod_l+0xb0c>)
 8008adc:	4a56      	ldr	r2, [pc, #344]	; (8008c38 <_strtod_l+0xb20>)
 8008ade:	4019      	ands	r1, r3
 8008ae0:	4291      	cmp	r1, r2
 8008ae2:	4682      	mov	sl, r0
 8008ae4:	d95b      	bls.n	8008b9e <_strtod_l+0xa86>
 8008ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d103      	bne.n	8008af8 <_strtod_l+0x9e0>
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	3301      	adds	r3, #1
 8008af4:	f43f ad2e 	beq.w	8008554 <_strtod_l+0x43c>
 8008af8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008c28 <_strtod_l+0xb10>
 8008afc:	f04f 3aff 	mov.w	sl, #4294967295
 8008b00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b02:	4648      	mov	r0, r9
 8008b04:	f001 fb73 	bl	800a1ee <_Bfree>
 8008b08:	9905      	ldr	r1, [sp, #20]
 8008b0a:	4648      	mov	r0, r9
 8008b0c:	f001 fb6f 	bl	800a1ee <_Bfree>
 8008b10:	4641      	mov	r1, r8
 8008b12:	4648      	mov	r0, r9
 8008b14:	f001 fb6b 	bl	800a1ee <_Bfree>
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	f001 fb67 	bl	800a1ee <_Bfree>
 8008b20:	e619      	b.n	8008756 <_strtod_l+0x63e>
 8008b22:	f1ba 0f00 	cmp.w	sl, #0
 8008b26:	d11a      	bne.n	8008b5e <_strtod_l+0xa46>
 8008b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b2c:	b9eb      	cbnz	r3, 8008b6a <_strtod_l+0xa52>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	4b3f      	ldr	r3, [pc, #252]	; (8008c30 <_strtod_l+0xb18>)
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f7 ffd9 	bl	8000aec <__aeabi_dcmplt>
 8008b3a:	b9c8      	cbnz	r0, 8008b70 <_strtod_l+0xa58>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	2200      	movs	r2, #0
 8008b42:	4b3e      	ldr	r3, [pc, #248]	; (8008c3c <_strtod_l+0xb24>)
 8008b44:	f7f7 fd60 	bl	8000608 <__aeabi_dmul>
 8008b48:	4606      	mov	r6, r0
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b50:	9618      	str	r6, [sp, #96]	; 0x60
 8008b52:	9319      	str	r3, [sp, #100]	; 0x64
 8008b54:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008b58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b5c:	e79c      	b.n	8008a98 <_strtod_l+0x980>
 8008b5e:	f1ba 0f01 	cmp.w	sl, #1
 8008b62:	d102      	bne.n	8008b6a <_strtod_l+0xa52>
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	f43f ad8e 	beq.w	8008686 <_strtod_l+0x56e>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4b34      	ldr	r3, [pc, #208]	; (8008c40 <_strtod_l+0xb28>)
 8008b6e:	e78f      	b.n	8008a90 <_strtod_l+0x978>
 8008b70:	2600      	movs	r6, #0
 8008b72:	4f32      	ldr	r7, [pc, #200]	; (8008c3c <_strtod_l+0xb24>)
 8008b74:	e7ea      	b.n	8008b4c <_strtod_l+0xa34>
 8008b76:	4b31      	ldr	r3, [pc, #196]	; (8008c3c <_strtod_l+0xb24>)
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f7f7 fd43 	bl	8000608 <__aeabi_dmul>
 8008b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	b933      	cbnz	r3, 8008b98 <_strtod_l+0xa80>
 8008b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b8e:	9010      	str	r0, [sp, #64]	; 0x40
 8008b90:	9311      	str	r3, [sp, #68]	; 0x44
 8008b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b96:	e7df      	b.n	8008b58 <_strtod_l+0xa40>
 8008b98:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008b9c:	e7f9      	b.n	8008b92 <_strtod_l+0xa7a>
 8008b9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1ab      	bne.n	8008b00 <_strtod_l+0x9e8>
 8008ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bac:	0d1b      	lsrs	r3, r3, #20
 8008bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bb0:	051b      	lsls	r3, r3, #20
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	465d      	mov	r5, fp
 8008bb6:	d1a3      	bne.n	8008b00 <_strtod_l+0x9e8>
 8008bb8:	4639      	mov	r1, r7
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f7f7 ffd4 	bl	8000b68 <__aeabi_d2iz>
 8008bc0:	f7f7 fcb8 	bl	8000534 <__aeabi_i2d>
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4639      	mov	r1, r7
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7f7 fb64 	bl	8000298 <__aeabi_dsub>
 8008bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	b933      	cbnz	r3, 8008be6 <_strtod_l+0xace>
 8008bd8:	f1ba 0f00 	cmp.w	sl, #0
 8008bdc:	d103      	bne.n	8008be6 <_strtod_l+0xace>
 8008bde:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	d06d      	beq.n	8008cc2 <_strtod_l+0xbaa>
 8008be6:	a30a      	add	r3, pc, #40	; (adr r3, 8008c10 <_strtod_l+0xaf8>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	4630      	mov	r0, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	f7f7 ff7c 	bl	8000aec <__aeabi_dcmplt>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f47f acb8 	bne.w	800856a <_strtod_l+0x452>
 8008bfa:	a307      	add	r3, pc, #28	; (adr r3, 8008c18 <_strtod_l+0xb00>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	4630      	mov	r0, r6
 8008c02:	4639      	mov	r1, r7
 8008c04:	f7f7 ff90 	bl	8000b28 <__aeabi_dcmpgt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f43f af79 	beq.w	8008b00 <_strtod_l+0x9e8>
 8008c0e:	e4ac      	b.n	800856a <_strtod_l+0x452>
 8008c10:	94a03595 	.word	0x94a03595
 8008c14:	3fdfffff 	.word	0x3fdfffff
 8008c18:	35afe535 	.word	0x35afe535
 8008c1c:	3fe00000 	.word	0x3fe00000
 8008c20:	000fffff 	.word	0x000fffff
 8008c24:	7ff00000 	.word	0x7ff00000
 8008c28:	7fefffff 	.word	0x7fefffff
 8008c2c:	39500000 	.word	0x39500000
 8008c30:	3ff00000 	.word	0x3ff00000
 8008c34:	7fe00000 	.word	0x7fe00000
 8008c38:	7c9fffff 	.word	0x7c9fffff
 8008c3c:	3fe00000 	.word	0x3fe00000
 8008c40:	bff00000 	.word	0xbff00000
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	b333      	cbz	r3, 8008c96 <_strtod_l+0xb7e>
 8008c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c4e:	d822      	bhi.n	8008c96 <_strtod_l+0xb7e>
 8008c50:	a327      	add	r3, pc, #156	; (adr r3, 8008cf0 <_strtod_l+0xbd8>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 ff51 	bl	8000b00 <__aeabi_dcmple>
 8008c5e:	b1a0      	cbz	r0, 8008c8a <_strtod_l+0xb72>
 8008c60:	4639      	mov	r1, r7
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7f7 ffa8 	bl	8000bb8 <__aeabi_d2uiz>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	bf08      	it	eq
 8008c6c:	2001      	moveq	r0, #1
 8008c6e:	f7f7 fc51 	bl	8000514 <__aeabi_ui2d>
 8008c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	bb03      	cbnz	r3, 8008cbc <_strtod_l+0xba4>
 8008c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c7e:	9012      	str	r0, [sp, #72]	; 0x48
 8008c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c8e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c96:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008c9a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008c9e:	f001 fd3d 	bl	800a71c <__ulp>
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	ec53 2b10 	vmov	r2, r3, d0
 8008ca8:	4659      	mov	r1, fp
 8008caa:	f7f7 fcad 	bl	8000608 <__aeabi_dmul>
 8008cae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cb2:	f7f7 faf3 	bl	800029c <__adddf3>
 8008cb6:	4682      	mov	sl, r0
 8008cb8:	468b      	mov	fp, r1
 8008cba:	e772      	b.n	8008ba2 <_strtod_l+0xa8a>
 8008cbc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008cc0:	e7df      	b.n	8008c82 <_strtod_l+0xb6a>
 8008cc2:	a30d      	add	r3, pc, #52	; (adr r3, 8008cf8 <_strtod_l+0xbe0>)
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	f7f7 ff10 	bl	8000aec <__aeabi_dcmplt>
 8008ccc:	e79c      	b.n	8008c08 <_strtod_l+0xaf0>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	930d      	str	r3, [sp, #52]	; 0x34
 8008cd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	f7ff ba61 	b.w	800819e <_strtod_l+0x86>
 8008cdc:	2b65      	cmp	r3, #101	; 0x65
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	f43f ab4e 	beq.w	8008382 <_strtod_l+0x26a>
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	4614      	mov	r4, r2
 8008cea:	9104      	str	r1, [sp, #16]
 8008cec:	f7ff bacb 	b.w	8008286 <_strtod_l+0x16e>
 8008cf0:	ffc00000 	.word	0xffc00000
 8008cf4:	41dfffff 	.word	0x41dfffff
 8008cf8:	94a03595 	.word	0x94a03595
 8008cfc:	3fcfffff 	.word	0x3fcfffff

08008d00 <_strtod_r>:
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <_strtod_r+0x18>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	b410      	push	{r4}
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	4c04      	ldr	r4, [pc, #16]	; (8008d1c <_strtod_r+0x1c>)
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bf08      	it	eq
 8008d0e:	4623      	moveq	r3, r4
 8008d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d14:	f7ff ba00 	b.w	8008118 <_strtod_l>
 8008d18:	200000b4 	.word	0x200000b4
 8008d1c:	20000118 	.word	0x20000118

08008d20 <_strtol_l.isra.0>:
 8008d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	4680      	mov	r8, r0
 8008d26:	4689      	mov	r9, r1
 8008d28:	4692      	mov	sl, r2
 8008d2a:	461e      	mov	r6, r3
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	463d      	mov	r5, r7
 8008d30:	9808      	ldr	r0, [sp, #32]
 8008d32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d36:	f001 f9ed 	bl	800a114 <__locale_ctype_ptr_l>
 8008d3a:	4420      	add	r0, r4
 8008d3c:	7843      	ldrb	r3, [r0, #1]
 8008d3e:	f013 0308 	ands.w	r3, r3, #8
 8008d42:	d132      	bne.n	8008daa <_strtol_l.isra.0+0x8a>
 8008d44:	2c2d      	cmp	r4, #45	; 0x2d
 8008d46:	d132      	bne.n	8008dae <_strtol_l.isra.0+0x8e>
 8008d48:	787c      	ldrb	r4, [r7, #1]
 8008d4a:	1cbd      	adds	r5, r7, #2
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	d05d      	beq.n	8008e0e <_strtol_l.isra.0+0xee>
 8008d52:	2e10      	cmp	r6, #16
 8008d54:	d109      	bne.n	8008d6a <_strtol_l.isra.0+0x4a>
 8008d56:	2c30      	cmp	r4, #48	; 0x30
 8008d58:	d107      	bne.n	8008d6a <_strtol_l.isra.0+0x4a>
 8008d5a:	782b      	ldrb	r3, [r5, #0]
 8008d5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d60:	2b58      	cmp	r3, #88	; 0x58
 8008d62:	d14f      	bne.n	8008e04 <_strtol_l.isra.0+0xe4>
 8008d64:	786c      	ldrb	r4, [r5, #1]
 8008d66:	2610      	movs	r6, #16
 8008d68:	3502      	adds	r5, #2
 8008d6a:	2a00      	cmp	r2, #0
 8008d6c:	bf14      	ite	ne
 8008d6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008d72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008d76:	2700      	movs	r7, #0
 8008d78:	fbb1 fcf6 	udiv	ip, r1, r6
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008d82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d817      	bhi.n	8008dba <_strtol_l.isra.0+0x9a>
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	42a6      	cmp	r6, r4
 8008d8e:	dd23      	ble.n	8008dd8 <_strtol_l.isra.0+0xb8>
 8008d90:	1c7b      	adds	r3, r7, #1
 8008d92:	d007      	beq.n	8008da4 <_strtol_l.isra.0+0x84>
 8008d94:	4584      	cmp	ip, r0
 8008d96:	d31c      	bcc.n	8008dd2 <_strtol_l.isra.0+0xb2>
 8008d98:	d101      	bne.n	8008d9e <_strtol_l.isra.0+0x7e>
 8008d9a:	45a6      	cmp	lr, r4
 8008d9c:	db19      	blt.n	8008dd2 <_strtol_l.isra.0+0xb2>
 8008d9e:	fb00 4006 	mla	r0, r0, r6, r4
 8008da2:	2701      	movs	r7, #1
 8008da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008da8:	e7eb      	b.n	8008d82 <_strtol_l.isra.0+0x62>
 8008daa:	462f      	mov	r7, r5
 8008dac:	e7bf      	b.n	8008d2e <_strtol_l.isra.0+0xe>
 8008dae:	2c2b      	cmp	r4, #43	; 0x2b
 8008db0:	bf04      	itt	eq
 8008db2:	1cbd      	addeq	r5, r7, #2
 8008db4:	787c      	ldrbeq	r4, [r7, #1]
 8008db6:	461a      	mov	r2, r3
 8008db8:	e7c9      	b.n	8008d4e <_strtol_l.isra.0+0x2e>
 8008dba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008dbe:	2b19      	cmp	r3, #25
 8008dc0:	d801      	bhi.n	8008dc6 <_strtol_l.isra.0+0xa6>
 8008dc2:	3c37      	subs	r4, #55	; 0x37
 8008dc4:	e7e2      	b.n	8008d8c <_strtol_l.isra.0+0x6c>
 8008dc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008dca:	2b19      	cmp	r3, #25
 8008dcc:	d804      	bhi.n	8008dd8 <_strtol_l.isra.0+0xb8>
 8008dce:	3c57      	subs	r4, #87	; 0x57
 8008dd0:	e7dc      	b.n	8008d8c <_strtol_l.isra.0+0x6c>
 8008dd2:	f04f 37ff 	mov.w	r7, #4294967295
 8008dd6:	e7e5      	b.n	8008da4 <_strtol_l.isra.0+0x84>
 8008dd8:	1c7b      	adds	r3, r7, #1
 8008dda:	d108      	bne.n	8008dee <_strtol_l.isra.0+0xce>
 8008ddc:	2322      	movs	r3, #34	; 0x22
 8008dde:	f8c8 3000 	str.w	r3, [r8]
 8008de2:	4608      	mov	r0, r1
 8008de4:	f1ba 0f00 	cmp.w	sl, #0
 8008de8:	d107      	bne.n	8008dfa <_strtol_l.isra.0+0xda>
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	b102      	cbz	r2, 8008df2 <_strtol_l.isra.0+0xd2>
 8008df0:	4240      	negs	r0, r0
 8008df2:	f1ba 0f00 	cmp.w	sl, #0
 8008df6:	d0f8      	beq.n	8008dea <_strtol_l.isra.0+0xca>
 8008df8:	b10f      	cbz	r7, 8008dfe <_strtol_l.isra.0+0xde>
 8008dfa:	f105 39ff 	add.w	r9, r5, #4294967295
 8008dfe:	f8ca 9000 	str.w	r9, [sl]
 8008e02:	e7f2      	b.n	8008dea <_strtol_l.isra.0+0xca>
 8008e04:	2430      	movs	r4, #48	; 0x30
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	d1af      	bne.n	8008d6a <_strtol_l.isra.0+0x4a>
 8008e0a:	2608      	movs	r6, #8
 8008e0c:	e7ad      	b.n	8008d6a <_strtol_l.isra.0+0x4a>
 8008e0e:	2c30      	cmp	r4, #48	; 0x30
 8008e10:	d0a3      	beq.n	8008d5a <_strtol_l.isra.0+0x3a>
 8008e12:	260a      	movs	r6, #10
 8008e14:	e7a9      	b.n	8008d6a <_strtol_l.isra.0+0x4a>
	...

08008e18 <_strtol_r>:
 8008e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1a:	4c06      	ldr	r4, [pc, #24]	; (8008e34 <_strtol_r+0x1c>)
 8008e1c:	4d06      	ldr	r5, [pc, #24]	; (8008e38 <_strtol_r+0x20>)
 8008e1e:	6824      	ldr	r4, [r4, #0]
 8008e20:	6a24      	ldr	r4, [r4, #32]
 8008e22:	2c00      	cmp	r4, #0
 8008e24:	bf08      	it	eq
 8008e26:	462c      	moveq	r4, r5
 8008e28:	9400      	str	r4, [sp, #0]
 8008e2a:	f7ff ff79 	bl	8008d20 <_strtol_l.isra.0>
 8008e2e:	b003      	add	sp, #12
 8008e30:	bd30      	pop	{r4, r5, pc}
 8008e32:	bf00      	nop
 8008e34:	200000b4 	.word	0x200000b4
 8008e38:	20000118 	.word	0x20000118

08008e3c <quorem>:
 8008e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	6903      	ldr	r3, [r0, #16]
 8008e42:	690c      	ldr	r4, [r1, #16]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	4680      	mov	r8, r0
 8008e48:	f2c0 8082 	blt.w	8008f50 <quorem+0x114>
 8008e4c:	3c01      	subs	r4, #1
 8008e4e:	f101 0714 	add.w	r7, r1, #20
 8008e52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008e56:	f100 0614 	add.w	r6, r0, #20
 8008e5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008e5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e62:	eb06 030c 	add.w	r3, r6, ip
 8008e66:	3501      	adds	r5, #1
 8008e68:	eb07 090c 	add.w	r9, r7, ip
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e72:	b395      	cbz	r5, 8008eda <quorem+0x9e>
 8008e74:	f04f 0a00 	mov.w	sl, #0
 8008e78:	4638      	mov	r0, r7
 8008e7a:	46b6      	mov	lr, r6
 8008e7c:	46d3      	mov	fp, sl
 8008e7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e82:	b293      	uxth	r3, r2
 8008e84:	fb05 a303 	mla	r3, r5, r3, sl
 8008e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	ebab 0303 	sub.w	r3, fp, r3
 8008e92:	0c12      	lsrs	r2, r2, #16
 8008e94:	f8de b000 	ldr.w	fp, [lr]
 8008e98:	fb05 a202 	mla	r2, r5, r2, sl
 8008e9c:	fa13 f38b 	uxtah	r3, r3, fp
 8008ea0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008ea4:	fa1f fb82 	uxth.w	fp, r2
 8008ea8:	f8de 2000 	ldr.w	r2, [lr]
 8008eac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eba:	4581      	cmp	r9, r0
 8008ebc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008ec0:	f84e 3b04 	str.w	r3, [lr], #4
 8008ec4:	d2db      	bcs.n	8008e7e <quorem+0x42>
 8008ec6:	f856 300c 	ldr.w	r3, [r6, ip]
 8008eca:	b933      	cbnz	r3, 8008eda <quorem+0x9e>
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	3b04      	subs	r3, #4
 8008ed0:	429e      	cmp	r6, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	d330      	bcc.n	8008f38 <quorem+0xfc>
 8008ed6:	f8c8 4010 	str.w	r4, [r8, #16]
 8008eda:	4640      	mov	r0, r8
 8008edc:	f001 fba6 	bl	800a62c <__mcmp>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	db25      	blt.n	8008f30 <quorem+0xf4>
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f04f 0c00 	mov.w	ip, #0
 8008eec:	f857 2b04 	ldr.w	r2, [r7], #4
 8008ef0:	f8d0 e000 	ldr.w	lr, [r0]
 8008ef4:	b293      	uxth	r3, r2
 8008ef6:	ebac 0303 	sub.w	r3, ip, r3
 8008efa:	0c12      	lsrs	r2, r2, #16
 8008efc:	fa13 f38e 	uxtah	r3, r3, lr
 8008f00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f0e:	45b9      	cmp	r9, r7
 8008f10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f14:	f840 3b04 	str.w	r3, [r0], #4
 8008f18:	d2e8      	bcs.n	8008eec <quorem+0xb0>
 8008f1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008f22:	b92a      	cbnz	r2, 8008f30 <quorem+0xf4>
 8008f24:	3b04      	subs	r3, #4
 8008f26:	429e      	cmp	r6, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	d30b      	bcc.n	8008f44 <quorem+0x108>
 8008f2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f30:	4628      	mov	r0, r5
 8008f32:	b003      	add	sp, #12
 8008f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	d1ca      	bne.n	8008ed6 <quorem+0x9a>
 8008f40:	3c01      	subs	r4, #1
 8008f42:	e7c5      	b.n	8008ed0 <quorem+0x94>
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	3b04      	subs	r3, #4
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	d1ef      	bne.n	8008f2c <quorem+0xf0>
 8008f4c:	3c01      	subs	r4, #1
 8008f4e:	e7ea      	b.n	8008f26 <quorem+0xea>
 8008f50:	2000      	movs	r0, #0
 8008f52:	e7ee      	b.n	8008f32 <quorem+0xf6>
 8008f54:	0000      	movs	r0, r0
	...

08008f58 <_dtoa_r>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	ec57 6b10 	vmov	r6, r7, d0
 8008f60:	b097      	sub	sp, #92	; 0x5c
 8008f62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f64:	9106      	str	r1, [sp, #24]
 8008f66:	4604      	mov	r4, r0
 8008f68:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f70:	e9cd 6700 	strd	r6, r7, [sp]
 8008f74:	b93d      	cbnz	r5, 8008f86 <_dtoa_r+0x2e>
 8008f76:	2010      	movs	r0, #16
 8008f78:	f001 f8e0 	bl	800a13c <malloc>
 8008f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f82:	6005      	str	r5, [r0, #0]
 8008f84:	60c5      	str	r5, [r0, #12]
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	6819      	ldr	r1, [r3, #0]
 8008f8a:	b151      	cbz	r1, 8008fa2 <_dtoa_r+0x4a>
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	604a      	str	r2, [r1, #4]
 8008f90:	2301      	movs	r3, #1
 8008f92:	4093      	lsls	r3, r2
 8008f94:	608b      	str	r3, [r1, #8]
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 f929 	bl	800a1ee <_Bfree>
 8008f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	1e3b      	subs	r3, r7, #0
 8008fa4:	bfbb      	ittet	lt
 8008fa6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008faa:	9301      	strlt	r3, [sp, #4]
 8008fac:	2300      	movge	r3, #0
 8008fae:	2201      	movlt	r2, #1
 8008fb0:	bfac      	ite	ge
 8008fb2:	f8c8 3000 	strge.w	r3, [r8]
 8008fb6:	f8c8 2000 	strlt.w	r2, [r8]
 8008fba:	4baf      	ldr	r3, [pc, #700]	; (8009278 <_dtoa_r+0x320>)
 8008fbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008fc0:	ea33 0308 	bics.w	r3, r3, r8
 8008fc4:	d114      	bne.n	8008ff0 <_dtoa_r+0x98>
 8008fc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	b923      	cbnz	r3, 8008fdc <_dtoa_r+0x84>
 8008fd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f000 8542 	beq.w	8009a60 <_dtoa_r+0xb08>
 8008fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800928c <_dtoa_r+0x334>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8544 	beq.w	8009a70 <_dtoa_r+0xb18>
 8008fe8:	f10b 0303 	add.w	r3, fp, #3
 8008fec:	f000 bd3e 	b.w	8009a6c <_dtoa_r+0xb14>
 8008ff0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f7f7 fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009000:	4681      	mov	r9, r0
 8009002:	b168      	cbz	r0, 8009020 <_dtoa_r+0xc8>
 8009004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009006:	2301      	movs	r3, #1
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8524 	beq.w	8009a5a <_dtoa_r+0xb02>
 8009012:	4b9a      	ldr	r3, [pc, #616]	; (800927c <_dtoa_r+0x324>)
 8009014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009016:	f103 3bff 	add.w	fp, r3, #4294967295
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	f000 bd28 	b.w	8009a70 <_dtoa_r+0xb18>
 8009020:	aa14      	add	r2, sp, #80	; 0x50
 8009022:	a915      	add	r1, sp, #84	; 0x54
 8009024:	ec47 6b10 	vmov	d0, r6, r7
 8009028:	4620      	mov	r0, r4
 800902a:	f001 fbed 	bl	800a808 <__d2b>
 800902e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009032:	9004      	str	r0, [sp, #16]
 8009034:	2d00      	cmp	r5, #0
 8009036:	d07c      	beq.n	8009132 <_dtoa_r+0x1da>
 8009038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800903c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009040:	46b2      	mov	sl, r6
 8009042:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800904a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800904e:	2200      	movs	r2, #0
 8009050:	4b8b      	ldr	r3, [pc, #556]	; (8009280 <_dtoa_r+0x328>)
 8009052:	4650      	mov	r0, sl
 8009054:	4659      	mov	r1, fp
 8009056:	f7f7 f91f 	bl	8000298 <__aeabi_dsub>
 800905a:	a381      	add	r3, pc, #516	; (adr r3, 8009260 <_dtoa_r+0x308>)
 800905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009060:	f7f7 fad2 	bl	8000608 <__aeabi_dmul>
 8009064:	a380      	add	r3, pc, #512	; (adr r3, 8009268 <_dtoa_r+0x310>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 f917 	bl	800029c <__adddf3>
 800906e:	4606      	mov	r6, r0
 8009070:	4628      	mov	r0, r5
 8009072:	460f      	mov	r7, r1
 8009074:	f7f7 fa5e 	bl	8000534 <__aeabi_i2d>
 8009078:	a37d      	add	r3, pc, #500	; (adr r3, 8009270 <_dtoa_r+0x318>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 fac3 	bl	8000608 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 f907 	bl	800029c <__adddf3>
 800908e:	4606      	mov	r6, r0
 8009090:	460f      	mov	r7, r1
 8009092:	f7f7 fd69 	bl	8000b68 <__aeabi_d2iz>
 8009096:	2200      	movs	r2, #0
 8009098:	4682      	mov	sl, r0
 800909a:	2300      	movs	r3, #0
 800909c:	4630      	mov	r0, r6
 800909e:	4639      	mov	r1, r7
 80090a0:	f7f7 fd24 	bl	8000aec <__aeabi_dcmplt>
 80090a4:	b148      	cbz	r0, 80090ba <_dtoa_r+0x162>
 80090a6:	4650      	mov	r0, sl
 80090a8:	f7f7 fa44 	bl	8000534 <__aeabi_i2d>
 80090ac:	4632      	mov	r2, r6
 80090ae:	463b      	mov	r3, r7
 80090b0:	f7f7 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80090b4:	b908      	cbnz	r0, 80090ba <_dtoa_r+0x162>
 80090b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ba:	f1ba 0f16 	cmp.w	sl, #22
 80090be:	d859      	bhi.n	8009174 <_dtoa_r+0x21c>
 80090c0:	4970      	ldr	r1, [pc, #448]	; (8009284 <_dtoa_r+0x32c>)
 80090c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80090c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ce:	f7f7 fd2b 	bl	8000b28 <__aeabi_dcmpgt>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d050      	beq.n	8009178 <_dtoa_r+0x220>
 80090d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090da:	2300      	movs	r3, #0
 80090dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80090de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090e0:	1b5d      	subs	r5, r3, r5
 80090e2:	f1b5 0801 	subs.w	r8, r5, #1
 80090e6:	bf49      	itett	mi
 80090e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80090ec:	2300      	movpl	r3, #0
 80090ee:	9305      	strmi	r3, [sp, #20]
 80090f0:	f04f 0800 	movmi.w	r8, #0
 80090f4:	bf58      	it	pl
 80090f6:	9305      	strpl	r3, [sp, #20]
 80090f8:	f1ba 0f00 	cmp.w	sl, #0
 80090fc:	db3e      	blt.n	800917c <_dtoa_r+0x224>
 80090fe:	2300      	movs	r3, #0
 8009100:	44d0      	add	r8, sl
 8009102:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009106:	9307      	str	r3, [sp, #28]
 8009108:	9b06      	ldr	r3, [sp, #24]
 800910a:	2b09      	cmp	r3, #9
 800910c:	f200 8090 	bhi.w	8009230 <_dtoa_r+0x2d8>
 8009110:	2b05      	cmp	r3, #5
 8009112:	bfc4      	itt	gt
 8009114:	3b04      	subgt	r3, #4
 8009116:	9306      	strgt	r3, [sp, #24]
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	f1a3 0302 	sub.w	r3, r3, #2
 800911e:	bfcc      	ite	gt
 8009120:	2500      	movgt	r5, #0
 8009122:	2501      	movle	r5, #1
 8009124:	2b03      	cmp	r3, #3
 8009126:	f200 808f 	bhi.w	8009248 <_dtoa_r+0x2f0>
 800912a:	e8df f003 	tbb	[pc, r3]
 800912e:	7f7d      	.short	0x7f7d
 8009130:	7131      	.short	0x7131
 8009132:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009136:	441d      	add	r5, r3
 8009138:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800913c:	2820      	cmp	r0, #32
 800913e:	dd13      	ble.n	8009168 <_dtoa_r+0x210>
 8009140:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009144:	9b00      	ldr	r3, [sp, #0]
 8009146:	fa08 f800 	lsl.w	r8, r8, r0
 800914a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800914e:	fa23 f000 	lsr.w	r0, r3, r0
 8009152:	ea48 0000 	orr.w	r0, r8, r0
 8009156:	f7f7 f9dd 	bl	8000514 <__aeabi_ui2d>
 800915a:	2301      	movs	r3, #1
 800915c:	4682      	mov	sl, r0
 800915e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009162:	3d01      	subs	r5, #1
 8009164:	9313      	str	r3, [sp, #76]	; 0x4c
 8009166:	e772      	b.n	800904e <_dtoa_r+0xf6>
 8009168:	9b00      	ldr	r3, [sp, #0]
 800916a:	f1c0 0020 	rsb	r0, r0, #32
 800916e:	fa03 f000 	lsl.w	r0, r3, r0
 8009172:	e7f0      	b.n	8009156 <_dtoa_r+0x1fe>
 8009174:	2301      	movs	r3, #1
 8009176:	e7b1      	b.n	80090dc <_dtoa_r+0x184>
 8009178:	900f      	str	r0, [sp, #60]	; 0x3c
 800917a:	e7b0      	b.n	80090de <_dtoa_r+0x186>
 800917c:	9b05      	ldr	r3, [sp, #20]
 800917e:	eba3 030a 	sub.w	r3, r3, sl
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	f1ca 0300 	rsb	r3, sl, #0
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	2300      	movs	r3, #0
 800918c:	930e      	str	r3, [sp, #56]	; 0x38
 800918e:	e7bb      	b.n	8009108 <_dtoa_r+0x1b0>
 8009190:	2301      	movs	r3, #1
 8009192:	930a      	str	r3, [sp, #40]	; 0x28
 8009194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009196:	2b00      	cmp	r3, #0
 8009198:	dd59      	ble.n	800924e <_dtoa_r+0x2f6>
 800919a:	9302      	str	r3, [sp, #8]
 800919c:	4699      	mov	r9, r3
 800919e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091a0:	2200      	movs	r2, #0
 80091a2:	6072      	str	r2, [r6, #4]
 80091a4:	2204      	movs	r2, #4
 80091a6:	f102 0014 	add.w	r0, r2, #20
 80091aa:	4298      	cmp	r0, r3
 80091ac:	6871      	ldr	r1, [r6, #4]
 80091ae:	d953      	bls.n	8009258 <_dtoa_r+0x300>
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 ffe8 	bl	800a186 <_Balloc>
 80091b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b8:	6030      	str	r0, [r6, #0]
 80091ba:	f1b9 0f0e 	cmp.w	r9, #14
 80091be:	f8d3 b000 	ldr.w	fp, [r3]
 80091c2:	f200 80e6 	bhi.w	8009392 <_dtoa_r+0x43a>
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	f000 80e3 	beq.w	8009392 <_dtoa_r+0x43a>
 80091cc:	ed9d 7b00 	vldr	d7, [sp]
 80091d0:	f1ba 0f00 	cmp.w	sl, #0
 80091d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80091d8:	dd74      	ble.n	80092c4 <_dtoa_r+0x36c>
 80091da:	4a2a      	ldr	r2, [pc, #168]	; (8009284 <_dtoa_r+0x32c>)
 80091dc:	f00a 030f 	and.w	r3, sl, #15
 80091e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091e4:	ed93 7b00 	vldr	d7, [r3]
 80091e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80091ec:	06f0      	lsls	r0, r6, #27
 80091ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80091f2:	d565      	bpl.n	80092c0 <_dtoa_r+0x368>
 80091f4:	4b24      	ldr	r3, [pc, #144]	; (8009288 <_dtoa_r+0x330>)
 80091f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091fe:	f7f7 fb2d 	bl	800085c <__aeabi_ddiv>
 8009202:	e9cd 0100 	strd	r0, r1, [sp]
 8009206:	f006 060f 	and.w	r6, r6, #15
 800920a:	2503      	movs	r5, #3
 800920c:	4f1e      	ldr	r7, [pc, #120]	; (8009288 <_dtoa_r+0x330>)
 800920e:	e04c      	b.n	80092aa <_dtoa_r+0x352>
 8009210:	2301      	movs	r3, #1
 8009212:	930a      	str	r3, [sp, #40]	; 0x28
 8009214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009216:	4453      	add	r3, sl
 8009218:	f103 0901 	add.w	r9, r3, #1
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	464b      	mov	r3, r9
 8009220:	2b01      	cmp	r3, #1
 8009222:	bfb8      	it	lt
 8009224:	2301      	movlt	r3, #1
 8009226:	e7ba      	b.n	800919e <_dtoa_r+0x246>
 8009228:	2300      	movs	r3, #0
 800922a:	e7b2      	b.n	8009192 <_dtoa_r+0x23a>
 800922c:	2300      	movs	r3, #0
 800922e:	e7f0      	b.n	8009212 <_dtoa_r+0x2ba>
 8009230:	2501      	movs	r5, #1
 8009232:	2300      	movs	r3, #0
 8009234:	9306      	str	r3, [sp, #24]
 8009236:	950a      	str	r5, [sp, #40]	; 0x28
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	9302      	str	r3, [sp, #8]
 800923e:	4699      	mov	r9, r3
 8009240:	2200      	movs	r2, #0
 8009242:	2312      	movs	r3, #18
 8009244:	920b      	str	r2, [sp, #44]	; 0x2c
 8009246:	e7aa      	b.n	800919e <_dtoa_r+0x246>
 8009248:	2301      	movs	r3, #1
 800924a:	930a      	str	r3, [sp, #40]	; 0x28
 800924c:	e7f4      	b.n	8009238 <_dtoa_r+0x2e0>
 800924e:	2301      	movs	r3, #1
 8009250:	9302      	str	r3, [sp, #8]
 8009252:	4699      	mov	r9, r3
 8009254:	461a      	mov	r2, r3
 8009256:	e7f5      	b.n	8009244 <_dtoa_r+0x2ec>
 8009258:	3101      	adds	r1, #1
 800925a:	6071      	str	r1, [r6, #4]
 800925c:	0052      	lsls	r2, r2, #1
 800925e:	e7a2      	b.n	80091a6 <_dtoa_r+0x24e>
 8009260:	636f4361 	.word	0x636f4361
 8009264:	3fd287a7 	.word	0x3fd287a7
 8009268:	8b60c8b3 	.word	0x8b60c8b3
 800926c:	3fc68a28 	.word	0x3fc68a28
 8009270:	509f79fb 	.word	0x509f79fb
 8009274:	3fd34413 	.word	0x3fd34413
 8009278:	7ff00000 	.word	0x7ff00000
 800927c:	0800b065 	.word	0x0800b065
 8009280:	3ff80000 	.word	0x3ff80000
 8009284:	0800b120 	.word	0x0800b120
 8009288:	0800b0f8 	.word	0x0800b0f8
 800928c:	0800b0e9 	.word	0x0800b0e9
 8009290:	07f1      	lsls	r1, r6, #31
 8009292:	d508      	bpl.n	80092a6 <_dtoa_r+0x34e>
 8009294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929c:	f7f7 f9b4 	bl	8000608 <__aeabi_dmul>
 80092a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092a4:	3501      	adds	r5, #1
 80092a6:	1076      	asrs	r6, r6, #1
 80092a8:	3708      	adds	r7, #8
 80092aa:	2e00      	cmp	r6, #0
 80092ac:	d1f0      	bne.n	8009290 <_dtoa_r+0x338>
 80092ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092b6:	f7f7 fad1 	bl	800085c <__aeabi_ddiv>
 80092ba:	e9cd 0100 	strd	r0, r1, [sp]
 80092be:	e01a      	b.n	80092f6 <_dtoa_r+0x39e>
 80092c0:	2502      	movs	r5, #2
 80092c2:	e7a3      	b.n	800920c <_dtoa_r+0x2b4>
 80092c4:	f000 80a0 	beq.w	8009408 <_dtoa_r+0x4b0>
 80092c8:	f1ca 0600 	rsb	r6, sl, #0
 80092cc:	4b9f      	ldr	r3, [pc, #636]	; (800954c <_dtoa_r+0x5f4>)
 80092ce:	4fa0      	ldr	r7, [pc, #640]	; (8009550 <_dtoa_r+0x5f8>)
 80092d0:	f006 020f 	and.w	r2, r6, #15
 80092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092e0:	f7f7 f992 	bl	8000608 <__aeabi_dmul>
 80092e4:	e9cd 0100 	strd	r0, r1, [sp]
 80092e8:	1136      	asrs	r6, r6, #4
 80092ea:	2300      	movs	r3, #0
 80092ec:	2502      	movs	r5, #2
 80092ee:	2e00      	cmp	r6, #0
 80092f0:	d17f      	bne.n	80093f2 <_dtoa_r+0x49a>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e1      	bne.n	80092ba <_dtoa_r+0x362>
 80092f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8087 	beq.w	800940c <_dtoa_r+0x4b4>
 80092fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009302:	2200      	movs	r2, #0
 8009304:	4b93      	ldr	r3, [pc, #588]	; (8009554 <_dtoa_r+0x5fc>)
 8009306:	4630      	mov	r0, r6
 8009308:	4639      	mov	r1, r7
 800930a:	f7f7 fbef 	bl	8000aec <__aeabi_dcmplt>
 800930e:	2800      	cmp	r0, #0
 8009310:	d07c      	beq.n	800940c <_dtoa_r+0x4b4>
 8009312:	f1b9 0f00 	cmp.w	r9, #0
 8009316:	d079      	beq.n	800940c <_dtoa_r+0x4b4>
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	dd35      	ble.n	800938a <_dtoa_r+0x432>
 800931e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	4639      	mov	r1, r7
 8009326:	2200      	movs	r2, #0
 8009328:	4b8b      	ldr	r3, [pc, #556]	; (8009558 <_dtoa_r+0x600>)
 800932a:	4630      	mov	r0, r6
 800932c:	f7f7 f96c 	bl	8000608 <__aeabi_dmul>
 8009330:	e9cd 0100 	strd	r0, r1, [sp]
 8009334:	9f02      	ldr	r7, [sp, #8]
 8009336:	3501      	adds	r5, #1
 8009338:	4628      	mov	r0, r5
 800933a:	f7f7 f8fb 	bl	8000534 <__aeabi_i2d>
 800933e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009342:	f7f7 f961 	bl	8000608 <__aeabi_dmul>
 8009346:	2200      	movs	r2, #0
 8009348:	4b84      	ldr	r3, [pc, #528]	; (800955c <_dtoa_r+0x604>)
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	4605      	mov	r5, r0
 8009350:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009354:	2f00      	cmp	r7, #0
 8009356:	d15d      	bne.n	8009414 <_dtoa_r+0x4bc>
 8009358:	2200      	movs	r2, #0
 800935a:	4b81      	ldr	r3, [pc, #516]	; (8009560 <_dtoa_r+0x608>)
 800935c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009360:	f7f6 ff9a 	bl	8000298 <__aeabi_dsub>
 8009364:	462a      	mov	r2, r5
 8009366:	4633      	mov	r3, r6
 8009368:	e9cd 0100 	strd	r0, r1, [sp]
 800936c:	f7f7 fbdc 	bl	8000b28 <__aeabi_dcmpgt>
 8009370:	2800      	cmp	r0, #0
 8009372:	f040 8288 	bne.w	8009886 <_dtoa_r+0x92e>
 8009376:	462a      	mov	r2, r5
 8009378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800937c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009380:	f7f7 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8009384:	2800      	cmp	r0, #0
 8009386:	f040 827c 	bne.w	8009882 <_dtoa_r+0x92a>
 800938a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800938e:	e9cd 2300 	strd	r2, r3, [sp]
 8009392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009394:	2b00      	cmp	r3, #0
 8009396:	f2c0 8150 	blt.w	800963a <_dtoa_r+0x6e2>
 800939a:	f1ba 0f0e 	cmp.w	sl, #14
 800939e:	f300 814c 	bgt.w	800963a <_dtoa_r+0x6e2>
 80093a2:	4b6a      	ldr	r3, [pc, #424]	; (800954c <_dtoa_r+0x5f4>)
 80093a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093a8:	ed93 7b00 	vldr	d7, [r3]
 80093ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093b4:	f280 80d8 	bge.w	8009568 <_dtoa_r+0x610>
 80093b8:	f1b9 0f00 	cmp.w	r9, #0
 80093bc:	f300 80d4 	bgt.w	8009568 <_dtoa_r+0x610>
 80093c0:	f040 825e 	bne.w	8009880 <_dtoa_r+0x928>
 80093c4:	2200      	movs	r2, #0
 80093c6:	4b66      	ldr	r3, [pc, #408]	; (8009560 <_dtoa_r+0x608>)
 80093c8:	ec51 0b17 	vmov	r0, r1, d7
 80093cc:	f7f7 f91c 	bl	8000608 <__aeabi_dmul>
 80093d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093d4:	f7f7 fb9e 	bl	8000b14 <__aeabi_dcmpge>
 80093d8:	464f      	mov	r7, r9
 80093da:	464e      	mov	r6, r9
 80093dc:	2800      	cmp	r0, #0
 80093de:	f040 8234 	bne.w	800984a <_dtoa_r+0x8f2>
 80093e2:	2331      	movs	r3, #49	; 0x31
 80093e4:	f10b 0501 	add.w	r5, fp, #1
 80093e8:	f88b 3000 	strb.w	r3, [fp]
 80093ec:	f10a 0a01 	add.w	sl, sl, #1
 80093f0:	e22f      	b.n	8009852 <_dtoa_r+0x8fa>
 80093f2:	07f2      	lsls	r2, r6, #31
 80093f4:	d505      	bpl.n	8009402 <_dtoa_r+0x4aa>
 80093f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fa:	f7f7 f905 	bl	8000608 <__aeabi_dmul>
 80093fe:	3501      	adds	r5, #1
 8009400:	2301      	movs	r3, #1
 8009402:	1076      	asrs	r6, r6, #1
 8009404:	3708      	adds	r7, #8
 8009406:	e772      	b.n	80092ee <_dtoa_r+0x396>
 8009408:	2502      	movs	r5, #2
 800940a:	e774      	b.n	80092f6 <_dtoa_r+0x39e>
 800940c:	f8cd a020 	str.w	sl, [sp, #32]
 8009410:	464f      	mov	r7, r9
 8009412:	e791      	b.n	8009338 <_dtoa_r+0x3e0>
 8009414:	4b4d      	ldr	r3, [pc, #308]	; (800954c <_dtoa_r+0x5f4>)
 8009416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800941a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009420:	2b00      	cmp	r3, #0
 8009422:	d047      	beq.n	80094b4 <_dtoa_r+0x55c>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	2000      	movs	r0, #0
 800942a:	494e      	ldr	r1, [pc, #312]	; (8009564 <_dtoa_r+0x60c>)
 800942c:	f7f7 fa16 	bl	800085c <__aeabi_ddiv>
 8009430:	462a      	mov	r2, r5
 8009432:	4633      	mov	r3, r6
 8009434:	f7f6 ff30 	bl	8000298 <__aeabi_dsub>
 8009438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800943c:	465d      	mov	r5, fp
 800943e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009442:	f7f7 fb91 	bl	8000b68 <__aeabi_d2iz>
 8009446:	4606      	mov	r6, r0
 8009448:	f7f7 f874 	bl	8000534 <__aeabi_i2d>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009454:	f7f6 ff20 	bl	8000298 <__aeabi_dsub>
 8009458:	3630      	adds	r6, #48	; 0x30
 800945a:	f805 6b01 	strb.w	r6, [r5], #1
 800945e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009462:	e9cd 0100 	strd	r0, r1, [sp]
 8009466:	f7f7 fb41 	bl	8000aec <__aeabi_dcmplt>
 800946a:	2800      	cmp	r0, #0
 800946c:	d163      	bne.n	8009536 <_dtoa_r+0x5de>
 800946e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009472:	2000      	movs	r0, #0
 8009474:	4937      	ldr	r1, [pc, #220]	; (8009554 <_dtoa_r+0x5fc>)
 8009476:	f7f6 ff0f 	bl	8000298 <__aeabi_dsub>
 800947a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800947e:	f7f7 fb35 	bl	8000aec <__aeabi_dcmplt>
 8009482:	2800      	cmp	r0, #0
 8009484:	f040 80b7 	bne.w	80095f6 <_dtoa_r+0x69e>
 8009488:	eba5 030b 	sub.w	r3, r5, fp
 800948c:	429f      	cmp	r7, r3
 800948e:	f77f af7c 	ble.w	800938a <_dtoa_r+0x432>
 8009492:	2200      	movs	r2, #0
 8009494:	4b30      	ldr	r3, [pc, #192]	; (8009558 <_dtoa_r+0x600>)
 8009496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800949a:	f7f7 f8b5 	bl	8000608 <__aeabi_dmul>
 800949e:	2200      	movs	r2, #0
 80094a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <_dtoa_r+0x600>)
 80094a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	e9cd 0100 	strd	r0, r1, [sp]
 80094b2:	e7c4      	b.n	800943e <_dtoa_r+0x4e6>
 80094b4:	462a      	mov	r2, r5
 80094b6:	4633      	mov	r3, r6
 80094b8:	f7f7 f8a6 	bl	8000608 <__aeabi_dmul>
 80094bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094c0:	eb0b 0507 	add.w	r5, fp, r7
 80094c4:	465e      	mov	r6, fp
 80094c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ca:	f7f7 fb4d 	bl	8000b68 <__aeabi_d2iz>
 80094ce:	4607      	mov	r7, r0
 80094d0:	f7f7 f830 	bl	8000534 <__aeabi_i2d>
 80094d4:	3730      	adds	r7, #48	; 0x30
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	f806 7b01 	strb.w	r7, [r6], #1
 80094e6:	42ae      	cmp	r6, r5
 80094e8:	e9cd 0100 	strd	r0, r1, [sp]
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	d126      	bne.n	8009540 <_dtoa_r+0x5e8>
 80094f2:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <_dtoa_r+0x60c>)
 80094f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094f8:	f7f6 fed0 	bl	800029c <__adddf3>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009504:	f7f7 fb10 	bl	8000b28 <__aeabi_dcmpgt>
 8009508:	2800      	cmp	r0, #0
 800950a:	d174      	bne.n	80095f6 <_dtoa_r+0x69e>
 800950c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009510:	2000      	movs	r0, #0
 8009512:	4914      	ldr	r1, [pc, #80]	; (8009564 <_dtoa_r+0x60c>)
 8009514:	f7f6 fec0 	bl	8000298 <__aeabi_dsub>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009520:	f7f7 fae4 	bl	8000aec <__aeabi_dcmplt>
 8009524:	2800      	cmp	r0, #0
 8009526:	f43f af30 	beq.w	800938a <_dtoa_r+0x432>
 800952a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800952e:	2b30      	cmp	r3, #48	; 0x30
 8009530:	f105 32ff 	add.w	r2, r5, #4294967295
 8009534:	d002      	beq.n	800953c <_dtoa_r+0x5e4>
 8009536:	f8dd a020 	ldr.w	sl, [sp, #32]
 800953a:	e04a      	b.n	80095d2 <_dtoa_r+0x67a>
 800953c:	4615      	mov	r5, r2
 800953e:	e7f4      	b.n	800952a <_dtoa_r+0x5d2>
 8009540:	4b05      	ldr	r3, [pc, #20]	; (8009558 <_dtoa_r+0x600>)
 8009542:	f7f7 f861 	bl	8000608 <__aeabi_dmul>
 8009546:	e9cd 0100 	strd	r0, r1, [sp]
 800954a:	e7bc      	b.n	80094c6 <_dtoa_r+0x56e>
 800954c:	0800b120 	.word	0x0800b120
 8009550:	0800b0f8 	.word	0x0800b0f8
 8009554:	3ff00000 	.word	0x3ff00000
 8009558:	40240000 	.word	0x40240000
 800955c:	401c0000 	.word	0x401c0000
 8009560:	40140000 	.word	0x40140000
 8009564:	3fe00000 	.word	0x3fe00000
 8009568:	e9dd 6700 	ldrd	r6, r7, [sp]
 800956c:	465d      	mov	r5, fp
 800956e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009572:	4630      	mov	r0, r6
 8009574:	4639      	mov	r1, r7
 8009576:	f7f7 f971 	bl	800085c <__aeabi_ddiv>
 800957a:	f7f7 faf5 	bl	8000b68 <__aeabi_d2iz>
 800957e:	4680      	mov	r8, r0
 8009580:	f7f6 ffd8 	bl	8000534 <__aeabi_i2d>
 8009584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009588:	f7f7 f83e 	bl	8000608 <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009598:	f7f6 fe7e 	bl	8000298 <__aeabi_dsub>
 800959c:	f805 6b01 	strb.w	r6, [r5], #1
 80095a0:	eba5 060b 	sub.w	r6, r5, fp
 80095a4:	45b1      	cmp	r9, r6
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	d139      	bne.n	8009620 <_dtoa_r+0x6c8>
 80095ac:	f7f6 fe76 	bl	800029c <__adddf3>
 80095b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	f7f7 fab6 	bl	8000b28 <__aeabi_dcmpgt>
 80095bc:	b9c8      	cbnz	r0, 80095f2 <_dtoa_r+0x69a>
 80095be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095c2:	4630      	mov	r0, r6
 80095c4:	4639      	mov	r1, r7
 80095c6:	f7f7 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ca:	b110      	cbz	r0, 80095d2 <_dtoa_r+0x67a>
 80095cc:	f018 0f01 	tst.w	r8, #1
 80095d0:	d10f      	bne.n	80095f2 <_dtoa_r+0x69a>
 80095d2:	9904      	ldr	r1, [sp, #16]
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 fe0a 	bl	800a1ee <_Bfree>
 80095da:	2300      	movs	r3, #0
 80095dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095de:	702b      	strb	r3, [r5, #0]
 80095e0:	f10a 0301 	add.w	r3, sl, #1
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 8241 	beq.w	8009a70 <_dtoa_r+0xb18>
 80095ee:	601d      	str	r5, [r3, #0]
 80095f0:	e23e      	b.n	8009a70 <_dtoa_r+0xb18>
 80095f2:	f8cd a020 	str.w	sl, [sp, #32]
 80095f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095fa:	2a39      	cmp	r2, #57	; 0x39
 80095fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8009600:	d108      	bne.n	8009614 <_dtoa_r+0x6bc>
 8009602:	459b      	cmp	fp, r3
 8009604:	d10a      	bne.n	800961c <_dtoa_r+0x6c4>
 8009606:	9b08      	ldr	r3, [sp, #32]
 8009608:	3301      	adds	r3, #1
 800960a:	9308      	str	r3, [sp, #32]
 800960c:	2330      	movs	r3, #48	; 0x30
 800960e:	f88b 3000 	strb.w	r3, [fp]
 8009612:	465b      	mov	r3, fp
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	3201      	adds	r2, #1
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e78c      	b.n	8009536 <_dtoa_r+0x5de>
 800961c:	461d      	mov	r5, r3
 800961e:	e7ea      	b.n	80095f6 <_dtoa_r+0x69e>
 8009620:	2200      	movs	r2, #0
 8009622:	4b9b      	ldr	r3, [pc, #620]	; (8009890 <_dtoa_r+0x938>)
 8009624:	f7f6 fff0 	bl	8000608 <__aeabi_dmul>
 8009628:	2200      	movs	r2, #0
 800962a:	2300      	movs	r3, #0
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1
 8009630:	f7f7 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8009634:	2800      	cmp	r0, #0
 8009636:	d09a      	beq.n	800956e <_dtoa_r+0x616>
 8009638:	e7cb      	b.n	80095d2 <_dtoa_r+0x67a>
 800963a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963c:	2a00      	cmp	r2, #0
 800963e:	f000 808b 	beq.w	8009758 <_dtoa_r+0x800>
 8009642:	9a06      	ldr	r2, [sp, #24]
 8009644:	2a01      	cmp	r2, #1
 8009646:	dc6e      	bgt.n	8009726 <_dtoa_r+0x7ce>
 8009648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800964a:	2a00      	cmp	r2, #0
 800964c:	d067      	beq.n	800971e <_dtoa_r+0x7c6>
 800964e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009652:	9f07      	ldr	r7, [sp, #28]
 8009654:	9d05      	ldr	r5, [sp, #20]
 8009656:	9a05      	ldr	r2, [sp, #20]
 8009658:	2101      	movs	r1, #1
 800965a:	441a      	add	r2, r3
 800965c:	4620      	mov	r0, r4
 800965e:	9205      	str	r2, [sp, #20]
 8009660:	4498      	add	r8, r3
 8009662:	f000 fea2 	bl	800a3aa <__i2b>
 8009666:	4606      	mov	r6, r0
 8009668:	2d00      	cmp	r5, #0
 800966a:	dd0c      	ble.n	8009686 <_dtoa_r+0x72e>
 800966c:	f1b8 0f00 	cmp.w	r8, #0
 8009670:	dd09      	ble.n	8009686 <_dtoa_r+0x72e>
 8009672:	4545      	cmp	r5, r8
 8009674:	9a05      	ldr	r2, [sp, #20]
 8009676:	462b      	mov	r3, r5
 8009678:	bfa8      	it	ge
 800967a:	4643      	movge	r3, r8
 800967c:	1ad2      	subs	r2, r2, r3
 800967e:	9205      	str	r2, [sp, #20]
 8009680:	1aed      	subs	r5, r5, r3
 8009682:	eba8 0803 	sub.w	r8, r8, r3
 8009686:	9b07      	ldr	r3, [sp, #28]
 8009688:	b1eb      	cbz	r3, 80096c6 <_dtoa_r+0x76e>
 800968a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968c:	2b00      	cmp	r3, #0
 800968e:	d067      	beq.n	8009760 <_dtoa_r+0x808>
 8009690:	b18f      	cbz	r7, 80096b6 <_dtoa_r+0x75e>
 8009692:	4631      	mov	r1, r6
 8009694:	463a      	mov	r2, r7
 8009696:	4620      	mov	r0, r4
 8009698:	f000 ff26 	bl	800a4e8 <__pow5mult>
 800969c:	9a04      	ldr	r2, [sp, #16]
 800969e:	4601      	mov	r1, r0
 80096a0:	4606      	mov	r6, r0
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fe8a 	bl	800a3bc <__multiply>
 80096a8:	9904      	ldr	r1, [sp, #16]
 80096aa:	9008      	str	r0, [sp, #32]
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fd9e 	bl	800a1ee <_Bfree>
 80096b2:	9b08      	ldr	r3, [sp, #32]
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	9b07      	ldr	r3, [sp, #28]
 80096b8:	1bda      	subs	r2, r3, r7
 80096ba:	d004      	beq.n	80096c6 <_dtoa_r+0x76e>
 80096bc:	9904      	ldr	r1, [sp, #16]
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 ff12 	bl	800a4e8 <__pow5mult>
 80096c4:	9004      	str	r0, [sp, #16]
 80096c6:	2101      	movs	r1, #1
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fe6e 	bl	800a3aa <__i2b>
 80096ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d0:	4607      	mov	r7, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f000 81d0 	beq.w	8009a78 <_dtoa_r+0xb20>
 80096d8:	461a      	mov	r2, r3
 80096da:	4601      	mov	r1, r0
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 ff03 	bl	800a4e8 <__pow5mult>
 80096e2:	9b06      	ldr	r3, [sp, #24]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	4607      	mov	r7, r0
 80096e8:	dc40      	bgt.n	800976c <_dtoa_r+0x814>
 80096ea:	9b00      	ldr	r3, [sp, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d139      	bne.n	8009764 <_dtoa_r+0x80c>
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d136      	bne.n	8009768 <_dtoa_r+0x810>
 80096fa:	9b01      	ldr	r3, [sp, #4]
 80096fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009700:	0d1b      	lsrs	r3, r3, #20
 8009702:	051b      	lsls	r3, r3, #20
 8009704:	b12b      	cbz	r3, 8009712 <_dtoa_r+0x7ba>
 8009706:	9b05      	ldr	r3, [sp, #20]
 8009708:	3301      	adds	r3, #1
 800970a:	9305      	str	r3, [sp, #20]
 800970c:	f108 0801 	add.w	r8, r8, #1
 8009710:	2301      	movs	r3, #1
 8009712:	9307      	str	r3, [sp, #28]
 8009714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d12a      	bne.n	8009770 <_dtoa_r+0x818>
 800971a:	2001      	movs	r0, #1
 800971c:	e030      	b.n	8009780 <_dtoa_r+0x828>
 800971e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009720:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009724:	e795      	b.n	8009652 <_dtoa_r+0x6fa>
 8009726:	9b07      	ldr	r3, [sp, #28]
 8009728:	f109 37ff 	add.w	r7, r9, #4294967295
 800972c:	42bb      	cmp	r3, r7
 800972e:	bfbf      	itttt	lt
 8009730:	9b07      	ldrlt	r3, [sp, #28]
 8009732:	9707      	strlt	r7, [sp, #28]
 8009734:	1afa      	sublt	r2, r7, r3
 8009736:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009738:	bfbb      	ittet	lt
 800973a:	189b      	addlt	r3, r3, r2
 800973c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800973e:	1bdf      	subge	r7, r3, r7
 8009740:	2700      	movlt	r7, #0
 8009742:	f1b9 0f00 	cmp.w	r9, #0
 8009746:	bfb5      	itete	lt
 8009748:	9b05      	ldrlt	r3, [sp, #20]
 800974a:	9d05      	ldrge	r5, [sp, #20]
 800974c:	eba3 0509 	sublt.w	r5, r3, r9
 8009750:	464b      	movge	r3, r9
 8009752:	bfb8      	it	lt
 8009754:	2300      	movlt	r3, #0
 8009756:	e77e      	b.n	8009656 <_dtoa_r+0x6fe>
 8009758:	9f07      	ldr	r7, [sp, #28]
 800975a:	9d05      	ldr	r5, [sp, #20]
 800975c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800975e:	e783      	b.n	8009668 <_dtoa_r+0x710>
 8009760:	9a07      	ldr	r2, [sp, #28]
 8009762:	e7ab      	b.n	80096bc <_dtoa_r+0x764>
 8009764:	2300      	movs	r3, #0
 8009766:	e7d4      	b.n	8009712 <_dtoa_r+0x7ba>
 8009768:	9b00      	ldr	r3, [sp, #0]
 800976a:	e7d2      	b.n	8009712 <_dtoa_r+0x7ba>
 800976c:	2300      	movs	r3, #0
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009776:	6918      	ldr	r0, [r3, #16]
 8009778:	f000 fdc9 	bl	800a30e <__hi0bits>
 800977c:	f1c0 0020 	rsb	r0, r0, #32
 8009780:	4440      	add	r0, r8
 8009782:	f010 001f 	ands.w	r0, r0, #31
 8009786:	d047      	beq.n	8009818 <_dtoa_r+0x8c0>
 8009788:	f1c0 0320 	rsb	r3, r0, #32
 800978c:	2b04      	cmp	r3, #4
 800978e:	dd3b      	ble.n	8009808 <_dtoa_r+0x8b0>
 8009790:	9b05      	ldr	r3, [sp, #20]
 8009792:	f1c0 001c 	rsb	r0, r0, #28
 8009796:	4403      	add	r3, r0
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	4405      	add	r5, r0
 800979c:	4480      	add	r8, r0
 800979e:	9b05      	ldr	r3, [sp, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dd05      	ble.n	80097b0 <_dtoa_r+0x858>
 80097a4:	461a      	mov	r2, r3
 80097a6:	9904      	ldr	r1, [sp, #16]
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 feeb 	bl	800a584 <__lshift>
 80097ae:	9004      	str	r0, [sp, #16]
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	dd05      	ble.n	80097c2 <_dtoa_r+0x86a>
 80097b6:	4639      	mov	r1, r7
 80097b8:	4642      	mov	r2, r8
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 fee2 	bl	800a584 <__lshift>
 80097c0:	4607      	mov	r7, r0
 80097c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c4:	b353      	cbz	r3, 800981c <_dtoa_r+0x8c4>
 80097c6:	4639      	mov	r1, r7
 80097c8:	9804      	ldr	r0, [sp, #16]
 80097ca:	f000 ff2f 	bl	800a62c <__mcmp>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	da24      	bge.n	800981c <_dtoa_r+0x8c4>
 80097d2:	2300      	movs	r3, #0
 80097d4:	220a      	movs	r2, #10
 80097d6:	9904      	ldr	r1, [sp, #16]
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fd1f 	bl	800a21c <__multadd>
 80097de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e0:	9004      	str	r0, [sp, #16]
 80097e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 814d 	beq.w	8009a86 <_dtoa_r+0xb2e>
 80097ec:	2300      	movs	r3, #0
 80097ee:	4631      	mov	r1, r6
 80097f0:	220a      	movs	r2, #10
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fd12 	bl	800a21c <__multadd>
 80097f8:	9b02      	ldr	r3, [sp, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	4606      	mov	r6, r0
 80097fe:	dc4f      	bgt.n	80098a0 <_dtoa_r+0x948>
 8009800:	9b06      	ldr	r3, [sp, #24]
 8009802:	2b02      	cmp	r3, #2
 8009804:	dd4c      	ble.n	80098a0 <_dtoa_r+0x948>
 8009806:	e011      	b.n	800982c <_dtoa_r+0x8d4>
 8009808:	d0c9      	beq.n	800979e <_dtoa_r+0x846>
 800980a:	9a05      	ldr	r2, [sp, #20]
 800980c:	331c      	adds	r3, #28
 800980e:	441a      	add	r2, r3
 8009810:	9205      	str	r2, [sp, #20]
 8009812:	441d      	add	r5, r3
 8009814:	4498      	add	r8, r3
 8009816:	e7c2      	b.n	800979e <_dtoa_r+0x846>
 8009818:	4603      	mov	r3, r0
 800981a:	e7f6      	b.n	800980a <_dtoa_r+0x8b2>
 800981c:	f1b9 0f00 	cmp.w	r9, #0
 8009820:	dc38      	bgt.n	8009894 <_dtoa_r+0x93c>
 8009822:	9b06      	ldr	r3, [sp, #24]
 8009824:	2b02      	cmp	r3, #2
 8009826:	dd35      	ble.n	8009894 <_dtoa_r+0x93c>
 8009828:	f8cd 9008 	str.w	r9, [sp, #8]
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	b963      	cbnz	r3, 800984a <_dtoa_r+0x8f2>
 8009830:	4639      	mov	r1, r7
 8009832:	2205      	movs	r2, #5
 8009834:	4620      	mov	r0, r4
 8009836:	f000 fcf1 	bl	800a21c <__multadd>
 800983a:	4601      	mov	r1, r0
 800983c:	4607      	mov	r7, r0
 800983e:	9804      	ldr	r0, [sp, #16]
 8009840:	f000 fef4 	bl	800a62c <__mcmp>
 8009844:	2800      	cmp	r0, #0
 8009846:	f73f adcc 	bgt.w	80093e2 <_dtoa_r+0x48a>
 800984a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800984c:	465d      	mov	r5, fp
 800984e:	ea6f 0a03 	mvn.w	sl, r3
 8009852:	f04f 0900 	mov.w	r9, #0
 8009856:	4639      	mov	r1, r7
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fcc8 	bl	800a1ee <_Bfree>
 800985e:	2e00      	cmp	r6, #0
 8009860:	f43f aeb7 	beq.w	80095d2 <_dtoa_r+0x67a>
 8009864:	f1b9 0f00 	cmp.w	r9, #0
 8009868:	d005      	beq.n	8009876 <_dtoa_r+0x91e>
 800986a:	45b1      	cmp	r9, r6
 800986c:	d003      	beq.n	8009876 <_dtoa_r+0x91e>
 800986e:	4649      	mov	r1, r9
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fcbc 	bl	800a1ee <_Bfree>
 8009876:	4631      	mov	r1, r6
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fcb8 	bl	800a1ee <_Bfree>
 800987e:	e6a8      	b.n	80095d2 <_dtoa_r+0x67a>
 8009880:	2700      	movs	r7, #0
 8009882:	463e      	mov	r6, r7
 8009884:	e7e1      	b.n	800984a <_dtoa_r+0x8f2>
 8009886:	f8dd a020 	ldr.w	sl, [sp, #32]
 800988a:	463e      	mov	r6, r7
 800988c:	e5a9      	b.n	80093e2 <_dtoa_r+0x48a>
 800988e:	bf00      	nop
 8009890:	40240000 	.word	0x40240000
 8009894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009896:	f8cd 9008 	str.w	r9, [sp, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80fa 	beq.w	8009a94 <_dtoa_r+0xb3c>
 80098a0:	2d00      	cmp	r5, #0
 80098a2:	dd05      	ble.n	80098b0 <_dtoa_r+0x958>
 80098a4:	4631      	mov	r1, r6
 80098a6:	462a      	mov	r2, r5
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fe6b 	bl	800a584 <__lshift>
 80098ae:	4606      	mov	r6, r0
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d04c      	beq.n	8009950 <_dtoa_r+0x9f8>
 80098b6:	6871      	ldr	r1, [r6, #4]
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fc64 	bl	800a186 <_Balloc>
 80098be:	6932      	ldr	r2, [r6, #16]
 80098c0:	3202      	adds	r2, #2
 80098c2:	4605      	mov	r5, r0
 80098c4:	0092      	lsls	r2, r2, #2
 80098c6:	f106 010c 	add.w	r1, r6, #12
 80098ca:	300c      	adds	r0, #12
 80098cc:	f000 fc50 	bl	800a170 <memcpy>
 80098d0:	2201      	movs	r2, #1
 80098d2:	4629      	mov	r1, r5
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 fe55 	bl	800a584 <__lshift>
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	f8cd b014 	str.w	fp, [sp, #20]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	46b1      	mov	r9, r6
 80098e6:	9307      	str	r3, [sp, #28]
 80098e8:	4606      	mov	r6, r0
 80098ea:	4639      	mov	r1, r7
 80098ec:	9804      	ldr	r0, [sp, #16]
 80098ee:	f7ff faa5 	bl	8008e3c <quorem>
 80098f2:	4649      	mov	r1, r9
 80098f4:	4605      	mov	r5, r0
 80098f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80098fa:	9804      	ldr	r0, [sp, #16]
 80098fc:	f000 fe96 	bl	800a62c <__mcmp>
 8009900:	4632      	mov	r2, r6
 8009902:	9000      	str	r0, [sp, #0]
 8009904:	4639      	mov	r1, r7
 8009906:	4620      	mov	r0, r4
 8009908:	f000 feaa 	bl	800a660 <__mdiff>
 800990c:	68c3      	ldr	r3, [r0, #12]
 800990e:	4602      	mov	r2, r0
 8009910:	bb03      	cbnz	r3, 8009954 <_dtoa_r+0x9fc>
 8009912:	4601      	mov	r1, r0
 8009914:	9008      	str	r0, [sp, #32]
 8009916:	9804      	ldr	r0, [sp, #16]
 8009918:	f000 fe88 	bl	800a62c <__mcmp>
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	4603      	mov	r3, r0
 8009920:	4611      	mov	r1, r2
 8009922:	4620      	mov	r0, r4
 8009924:	9308      	str	r3, [sp, #32]
 8009926:	f000 fc62 	bl	800a1ee <_Bfree>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	b9a3      	cbnz	r3, 8009958 <_dtoa_r+0xa00>
 800992e:	9a06      	ldr	r2, [sp, #24]
 8009930:	b992      	cbnz	r2, 8009958 <_dtoa_r+0xa00>
 8009932:	9a07      	ldr	r2, [sp, #28]
 8009934:	b982      	cbnz	r2, 8009958 <_dtoa_r+0xa00>
 8009936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800993a:	d029      	beq.n	8009990 <_dtoa_r+0xa38>
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	dd01      	ble.n	8009946 <_dtoa_r+0x9ee>
 8009942:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009946:	9b05      	ldr	r3, [sp, #20]
 8009948:	1c5d      	adds	r5, r3, #1
 800994a:	f883 8000 	strb.w	r8, [r3]
 800994e:	e782      	b.n	8009856 <_dtoa_r+0x8fe>
 8009950:	4630      	mov	r0, r6
 8009952:	e7c2      	b.n	80098da <_dtoa_r+0x982>
 8009954:	2301      	movs	r3, #1
 8009956:	e7e3      	b.n	8009920 <_dtoa_r+0x9c8>
 8009958:	9a00      	ldr	r2, [sp, #0]
 800995a:	2a00      	cmp	r2, #0
 800995c:	db04      	blt.n	8009968 <_dtoa_r+0xa10>
 800995e:	d125      	bne.n	80099ac <_dtoa_r+0xa54>
 8009960:	9a06      	ldr	r2, [sp, #24]
 8009962:	bb1a      	cbnz	r2, 80099ac <_dtoa_r+0xa54>
 8009964:	9a07      	ldr	r2, [sp, #28]
 8009966:	bb0a      	cbnz	r2, 80099ac <_dtoa_r+0xa54>
 8009968:	2b00      	cmp	r3, #0
 800996a:	ddec      	ble.n	8009946 <_dtoa_r+0x9ee>
 800996c:	2201      	movs	r2, #1
 800996e:	9904      	ldr	r1, [sp, #16]
 8009970:	4620      	mov	r0, r4
 8009972:	f000 fe07 	bl	800a584 <__lshift>
 8009976:	4639      	mov	r1, r7
 8009978:	9004      	str	r0, [sp, #16]
 800997a:	f000 fe57 	bl	800a62c <__mcmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	dc03      	bgt.n	800998a <_dtoa_r+0xa32>
 8009982:	d1e0      	bne.n	8009946 <_dtoa_r+0x9ee>
 8009984:	f018 0f01 	tst.w	r8, #1
 8009988:	d0dd      	beq.n	8009946 <_dtoa_r+0x9ee>
 800998a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800998e:	d1d8      	bne.n	8009942 <_dtoa_r+0x9ea>
 8009990:	9b05      	ldr	r3, [sp, #20]
 8009992:	9a05      	ldr	r2, [sp, #20]
 8009994:	1c5d      	adds	r5, r3, #1
 8009996:	2339      	movs	r3, #57	; 0x39
 8009998:	7013      	strb	r3, [r2, #0]
 800999a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800999e:	2b39      	cmp	r3, #57	; 0x39
 80099a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80099a4:	d04f      	beq.n	8009a46 <_dtoa_r+0xaee>
 80099a6:	3301      	adds	r3, #1
 80099a8:	7013      	strb	r3, [r2, #0]
 80099aa:	e754      	b.n	8009856 <_dtoa_r+0x8fe>
 80099ac:	9a05      	ldr	r2, [sp, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f102 0501 	add.w	r5, r2, #1
 80099b4:	dd06      	ble.n	80099c4 <_dtoa_r+0xa6c>
 80099b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099ba:	d0e9      	beq.n	8009990 <_dtoa_r+0xa38>
 80099bc:	f108 0801 	add.w	r8, r8, #1
 80099c0:	9b05      	ldr	r3, [sp, #20]
 80099c2:	e7c2      	b.n	800994a <_dtoa_r+0x9f2>
 80099c4:	9a02      	ldr	r2, [sp, #8]
 80099c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80099ca:	eba5 030b 	sub.w	r3, r5, fp
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d021      	beq.n	8009a16 <_dtoa_r+0xabe>
 80099d2:	2300      	movs	r3, #0
 80099d4:	220a      	movs	r2, #10
 80099d6:	9904      	ldr	r1, [sp, #16]
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 fc1f 	bl	800a21c <__multadd>
 80099de:	45b1      	cmp	r9, r6
 80099e0:	9004      	str	r0, [sp, #16]
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	f04f 020a 	mov.w	r2, #10
 80099ea:	4649      	mov	r1, r9
 80099ec:	4620      	mov	r0, r4
 80099ee:	d105      	bne.n	80099fc <_dtoa_r+0xaa4>
 80099f0:	f000 fc14 	bl	800a21c <__multadd>
 80099f4:	4681      	mov	r9, r0
 80099f6:	4606      	mov	r6, r0
 80099f8:	9505      	str	r5, [sp, #20]
 80099fa:	e776      	b.n	80098ea <_dtoa_r+0x992>
 80099fc:	f000 fc0e 	bl	800a21c <__multadd>
 8009a00:	4631      	mov	r1, r6
 8009a02:	4681      	mov	r9, r0
 8009a04:	2300      	movs	r3, #0
 8009a06:	220a      	movs	r2, #10
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fc07 	bl	800a21c <__multadd>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	e7f2      	b.n	80099f8 <_dtoa_r+0xaa0>
 8009a12:	f04f 0900 	mov.w	r9, #0
 8009a16:	2201      	movs	r2, #1
 8009a18:	9904      	ldr	r1, [sp, #16]
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 fdb2 	bl	800a584 <__lshift>
 8009a20:	4639      	mov	r1, r7
 8009a22:	9004      	str	r0, [sp, #16]
 8009a24:	f000 fe02 	bl	800a62c <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	dcb6      	bgt.n	800999a <_dtoa_r+0xa42>
 8009a2c:	d102      	bne.n	8009a34 <_dtoa_r+0xadc>
 8009a2e:	f018 0f01 	tst.w	r8, #1
 8009a32:	d1b2      	bne.n	800999a <_dtoa_r+0xa42>
 8009a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a38:	2b30      	cmp	r3, #48	; 0x30
 8009a3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a3e:	f47f af0a 	bne.w	8009856 <_dtoa_r+0x8fe>
 8009a42:	4615      	mov	r5, r2
 8009a44:	e7f6      	b.n	8009a34 <_dtoa_r+0xadc>
 8009a46:	4593      	cmp	fp, r2
 8009a48:	d105      	bne.n	8009a56 <_dtoa_r+0xafe>
 8009a4a:	2331      	movs	r3, #49	; 0x31
 8009a4c:	f10a 0a01 	add.w	sl, sl, #1
 8009a50:	f88b 3000 	strb.w	r3, [fp]
 8009a54:	e6ff      	b.n	8009856 <_dtoa_r+0x8fe>
 8009a56:	4615      	mov	r5, r2
 8009a58:	e79f      	b.n	800999a <_dtoa_r+0xa42>
 8009a5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009ac0 <_dtoa_r+0xb68>
 8009a5e:	e007      	b.n	8009a70 <_dtoa_r+0xb18>
 8009a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009ac4 <_dtoa_r+0xb6c>
 8009a66:	b11b      	cbz	r3, 8009a70 <_dtoa_r+0xb18>
 8009a68:	f10b 0308 	add.w	r3, fp, #8
 8009a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	4658      	mov	r0, fp
 8009a72:	b017      	add	sp, #92	; 0x5c
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	9b06      	ldr	r3, [sp, #24]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	f77f ae35 	ble.w	80096ea <_dtoa_r+0x792>
 8009a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	e649      	b.n	800971a <_dtoa_r+0x7c2>
 8009a86:	9b02      	ldr	r3, [sp, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dc03      	bgt.n	8009a94 <_dtoa_r+0xb3c>
 8009a8c:	9b06      	ldr	r3, [sp, #24]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	f73f aecc 	bgt.w	800982c <_dtoa_r+0x8d4>
 8009a94:	465d      	mov	r5, fp
 8009a96:	4639      	mov	r1, r7
 8009a98:	9804      	ldr	r0, [sp, #16]
 8009a9a:	f7ff f9cf 	bl	8008e3c <quorem>
 8009a9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009aa2:	f805 8b01 	strb.w	r8, [r5], #1
 8009aa6:	9a02      	ldr	r2, [sp, #8]
 8009aa8:	eba5 030b 	sub.w	r3, r5, fp
 8009aac:	429a      	cmp	r2, r3
 8009aae:	ddb0      	ble.n	8009a12 <_dtoa_r+0xaba>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	220a      	movs	r2, #10
 8009ab4:	9904      	ldr	r1, [sp, #16]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 fbb0 	bl	800a21c <__multadd>
 8009abc:	9004      	str	r0, [sp, #16]
 8009abe:	e7ea      	b.n	8009a96 <_dtoa_r+0xb3e>
 8009ac0:	0800b064 	.word	0x0800b064
 8009ac4:	0800b0e0 	.word	0x0800b0e0

08009ac8 <rshift>:
 8009ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aca:	6906      	ldr	r6, [r0, #16]
 8009acc:	114b      	asrs	r3, r1, #5
 8009ace:	429e      	cmp	r6, r3
 8009ad0:	f100 0414 	add.w	r4, r0, #20
 8009ad4:	dd30      	ble.n	8009b38 <rshift+0x70>
 8009ad6:	f011 011f 	ands.w	r1, r1, #31
 8009ada:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009ade:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009ae2:	d108      	bne.n	8009af6 <rshift+0x2e>
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	42b2      	cmp	r2, r6
 8009ae8:	460b      	mov	r3, r1
 8009aea:	d211      	bcs.n	8009b10 <rshift+0x48>
 8009aec:	f852 3b04 	ldr.w	r3, [r2], #4
 8009af0:	f841 3b04 	str.w	r3, [r1], #4
 8009af4:	e7f7      	b.n	8009ae6 <rshift+0x1e>
 8009af6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009afa:	f1c1 0c20 	rsb	ip, r1, #32
 8009afe:	40cd      	lsrs	r5, r1
 8009b00:	3204      	adds	r2, #4
 8009b02:	4623      	mov	r3, r4
 8009b04:	42b2      	cmp	r2, r6
 8009b06:	4617      	mov	r7, r2
 8009b08:	d30c      	bcc.n	8009b24 <rshift+0x5c>
 8009b0a:	601d      	str	r5, [r3, #0]
 8009b0c:	b105      	cbz	r5, 8009b10 <rshift+0x48>
 8009b0e:	3304      	adds	r3, #4
 8009b10:	1b1a      	subs	r2, r3, r4
 8009b12:	42a3      	cmp	r3, r4
 8009b14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b18:	bf08      	it	eq
 8009b1a:	2300      	moveq	r3, #0
 8009b1c:	6102      	str	r2, [r0, #16]
 8009b1e:	bf08      	it	eq
 8009b20:	6143      	streq	r3, [r0, #20]
 8009b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b24:	683f      	ldr	r7, [r7, #0]
 8009b26:	fa07 f70c 	lsl.w	r7, r7, ip
 8009b2a:	433d      	orrs	r5, r7
 8009b2c:	f843 5b04 	str.w	r5, [r3], #4
 8009b30:	f852 5b04 	ldr.w	r5, [r2], #4
 8009b34:	40cd      	lsrs	r5, r1
 8009b36:	e7e5      	b.n	8009b04 <rshift+0x3c>
 8009b38:	4623      	mov	r3, r4
 8009b3a:	e7e9      	b.n	8009b10 <rshift+0x48>

08009b3c <__hexdig_fun>:
 8009b3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b40:	2b09      	cmp	r3, #9
 8009b42:	d802      	bhi.n	8009b4a <__hexdig_fun+0xe>
 8009b44:	3820      	subs	r0, #32
 8009b46:	b2c0      	uxtb	r0, r0
 8009b48:	4770      	bx	lr
 8009b4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d801      	bhi.n	8009b56 <__hexdig_fun+0x1a>
 8009b52:	3847      	subs	r0, #71	; 0x47
 8009b54:	e7f7      	b.n	8009b46 <__hexdig_fun+0xa>
 8009b56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d801      	bhi.n	8009b62 <__hexdig_fun+0x26>
 8009b5e:	3827      	subs	r0, #39	; 0x27
 8009b60:	e7f1      	b.n	8009b46 <__hexdig_fun+0xa>
 8009b62:	2000      	movs	r0, #0
 8009b64:	4770      	bx	lr

08009b66 <__gethex>:
 8009b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	b08b      	sub	sp, #44	; 0x2c
 8009b6c:	468a      	mov	sl, r1
 8009b6e:	9002      	str	r0, [sp, #8]
 8009b70:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b72:	9306      	str	r3, [sp, #24]
 8009b74:	4690      	mov	r8, r2
 8009b76:	f000 fad0 	bl	800a11a <__localeconv_l>
 8009b7a:	6803      	ldr	r3, [r0, #0]
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f6 fb2e 	bl	80001e0 <strlen>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	9001      	str	r0, [sp, #4]
 8009b88:	4403      	add	r3, r0
 8009b8a:	f04f 0b00 	mov.w	fp, #0
 8009b8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b92:	9307      	str	r3, [sp, #28]
 8009b94:	f8da 3000 	ldr.w	r3, [sl]
 8009b98:	3302      	adds	r3, #2
 8009b9a:	461f      	mov	r7, r3
 8009b9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ba0:	2830      	cmp	r0, #48	; 0x30
 8009ba2:	d06c      	beq.n	8009c7e <__gethex+0x118>
 8009ba4:	f7ff ffca 	bl	8009b3c <__hexdig_fun>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d16a      	bne.n	8009c84 <__gethex+0x11e>
 8009bae:	9a01      	ldr	r2, [sp, #4]
 8009bb0:	9903      	ldr	r1, [sp, #12]
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	f001 f8fe 	bl	800adb4 <strncmp>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d166      	bne.n	8009c8a <__gethex+0x124>
 8009bbc:	9b01      	ldr	r3, [sp, #4]
 8009bbe:	5cf8      	ldrb	r0, [r7, r3]
 8009bc0:	18fe      	adds	r6, r7, r3
 8009bc2:	f7ff ffbb 	bl	8009b3c <__hexdig_fun>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d062      	beq.n	8009c90 <__gethex+0x12a>
 8009bca:	4633      	mov	r3, r6
 8009bcc:	7818      	ldrb	r0, [r3, #0]
 8009bce:	2830      	cmp	r0, #48	; 0x30
 8009bd0:	461f      	mov	r7, r3
 8009bd2:	f103 0301 	add.w	r3, r3, #1
 8009bd6:	d0f9      	beq.n	8009bcc <__gethex+0x66>
 8009bd8:	f7ff ffb0 	bl	8009b3c <__hexdig_fun>
 8009bdc:	fab0 f580 	clz	r5, r0
 8009be0:	096d      	lsrs	r5, r5, #5
 8009be2:	4634      	mov	r4, r6
 8009be4:	f04f 0b01 	mov.w	fp, #1
 8009be8:	463a      	mov	r2, r7
 8009bea:	4616      	mov	r6, r2
 8009bec:	3201      	adds	r2, #1
 8009bee:	7830      	ldrb	r0, [r6, #0]
 8009bf0:	f7ff ffa4 	bl	8009b3c <__hexdig_fun>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d1f8      	bne.n	8009bea <__gethex+0x84>
 8009bf8:	9a01      	ldr	r2, [sp, #4]
 8009bfa:	9903      	ldr	r1, [sp, #12]
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f001 f8d9 	bl	800adb4 <strncmp>
 8009c02:	b950      	cbnz	r0, 8009c1a <__gethex+0xb4>
 8009c04:	b954      	cbnz	r4, 8009c1c <__gethex+0xb6>
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	18f4      	adds	r4, r6, r3
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4616      	mov	r6, r2
 8009c0e:	3201      	adds	r2, #1
 8009c10:	7830      	ldrb	r0, [r6, #0]
 8009c12:	f7ff ff93 	bl	8009b3c <__hexdig_fun>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d1f8      	bne.n	8009c0c <__gethex+0xa6>
 8009c1a:	b10c      	cbz	r4, 8009c20 <__gethex+0xba>
 8009c1c:	1ba4      	subs	r4, r4, r6
 8009c1e:	00a4      	lsls	r4, r4, #2
 8009c20:	7833      	ldrb	r3, [r6, #0]
 8009c22:	2b50      	cmp	r3, #80	; 0x50
 8009c24:	d001      	beq.n	8009c2a <__gethex+0xc4>
 8009c26:	2b70      	cmp	r3, #112	; 0x70
 8009c28:	d140      	bne.n	8009cac <__gethex+0x146>
 8009c2a:	7873      	ldrb	r3, [r6, #1]
 8009c2c:	2b2b      	cmp	r3, #43	; 0x2b
 8009c2e:	d031      	beq.n	8009c94 <__gethex+0x12e>
 8009c30:	2b2d      	cmp	r3, #45	; 0x2d
 8009c32:	d033      	beq.n	8009c9c <__gethex+0x136>
 8009c34:	1c71      	adds	r1, r6, #1
 8009c36:	f04f 0900 	mov.w	r9, #0
 8009c3a:	7808      	ldrb	r0, [r1, #0]
 8009c3c:	f7ff ff7e 	bl	8009b3c <__hexdig_fun>
 8009c40:	1e43      	subs	r3, r0, #1
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b18      	cmp	r3, #24
 8009c46:	d831      	bhi.n	8009cac <__gethex+0x146>
 8009c48:	f1a0 0210 	sub.w	r2, r0, #16
 8009c4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c50:	f7ff ff74 	bl	8009b3c <__hexdig_fun>
 8009c54:	1e43      	subs	r3, r0, #1
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b18      	cmp	r3, #24
 8009c5a:	d922      	bls.n	8009ca2 <__gethex+0x13c>
 8009c5c:	f1b9 0f00 	cmp.w	r9, #0
 8009c60:	d000      	beq.n	8009c64 <__gethex+0xfe>
 8009c62:	4252      	negs	r2, r2
 8009c64:	4414      	add	r4, r2
 8009c66:	f8ca 1000 	str.w	r1, [sl]
 8009c6a:	b30d      	cbz	r5, 8009cb0 <__gethex+0x14a>
 8009c6c:	f1bb 0f00 	cmp.w	fp, #0
 8009c70:	bf0c      	ite	eq
 8009c72:	2706      	moveq	r7, #6
 8009c74:	2700      	movne	r7, #0
 8009c76:	4638      	mov	r0, r7
 8009c78:	b00b      	add	sp, #44	; 0x2c
 8009c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7e:	f10b 0b01 	add.w	fp, fp, #1
 8009c82:	e78a      	b.n	8009b9a <__gethex+0x34>
 8009c84:	2500      	movs	r5, #0
 8009c86:	462c      	mov	r4, r5
 8009c88:	e7ae      	b.n	8009be8 <__gethex+0x82>
 8009c8a:	463e      	mov	r6, r7
 8009c8c:	2501      	movs	r5, #1
 8009c8e:	e7c7      	b.n	8009c20 <__gethex+0xba>
 8009c90:	4604      	mov	r4, r0
 8009c92:	e7fb      	b.n	8009c8c <__gethex+0x126>
 8009c94:	f04f 0900 	mov.w	r9, #0
 8009c98:	1cb1      	adds	r1, r6, #2
 8009c9a:	e7ce      	b.n	8009c3a <__gethex+0xd4>
 8009c9c:	f04f 0901 	mov.w	r9, #1
 8009ca0:	e7fa      	b.n	8009c98 <__gethex+0x132>
 8009ca2:	230a      	movs	r3, #10
 8009ca4:	fb03 0202 	mla	r2, r3, r2, r0
 8009ca8:	3a10      	subs	r2, #16
 8009caa:	e7cf      	b.n	8009c4c <__gethex+0xe6>
 8009cac:	4631      	mov	r1, r6
 8009cae:	e7da      	b.n	8009c66 <__gethex+0x100>
 8009cb0:	1bf3      	subs	r3, r6, r7
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	2b07      	cmp	r3, #7
 8009cb8:	dc49      	bgt.n	8009d4e <__gethex+0x1e8>
 8009cba:	9802      	ldr	r0, [sp, #8]
 8009cbc:	f000 fa63 	bl	800a186 <_Balloc>
 8009cc0:	9b01      	ldr	r3, [sp, #4]
 8009cc2:	f100 0914 	add.w	r9, r0, #20
 8009cc6:	f04f 0b00 	mov.w	fp, #0
 8009cca:	f1c3 0301 	rsb	r3, r3, #1
 8009cce:	4605      	mov	r5, r0
 8009cd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8009cd4:	46da      	mov	sl, fp
 8009cd6:	9308      	str	r3, [sp, #32]
 8009cd8:	42b7      	cmp	r7, r6
 8009cda:	d33b      	bcc.n	8009d54 <__gethex+0x1ee>
 8009cdc:	9804      	ldr	r0, [sp, #16]
 8009cde:	f840 ab04 	str.w	sl, [r0], #4
 8009ce2:	eba0 0009 	sub.w	r0, r0, r9
 8009ce6:	1080      	asrs	r0, r0, #2
 8009ce8:	6128      	str	r0, [r5, #16]
 8009cea:	0147      	lsls	r7, r0, #5
 8009cec:	4650      	mov	r0, sl
 8009cee:	f000 fb0e 	bl	800a30e <__hi0bits>
 8009cf2:	f8d8 6000 	ldr.w	r6, [r8]
 8009cf6:	1a3f      	subs	r7, r7, r0
 8009cf8:	42b7      	cmp	r7, r6
 8009cfa:	dd64      	ble.n	8009dc6 <__gethex+0x260>
 8009cfc:	1bbf      	subs	r7, r7, r6
 8009cfe:	4639      	mov	r1, r7
 8009d00:	4628      	mov	r0, r5
 8009d02:	f000 fe1d 	bl	800a940 <__any_on>
 8009d06:	4682      	mov	sl, r0
 8009d08:	b178      	cbz	r0, 8009d2a <__gethex+0x1c4>
 8009d0a:	1e7b      	subs	r3, r7, #1
 8009d0c:	1159      	asrs	r1, r3, #5
 8009d0e:	f003 021f 	and.w	r2, r3, #31
 8009d12:	f04f 0a01 	mov.w	sl, #1
 8009d16:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d1a:	fa0a f202 	lsl.w	r2, sl, r2
 8009d1e:	420a      	tst	r2, r1
 8009d20:	d003      	beq.n	8009d2a <__gethex+0x1c4>
 8009d22:	4553      	cmp	r3, sl
 8009d24:	dc46      	bgt.n	8009db4 <__gethex+0x24e>
 8009d26:	f04f 0a02 	mov.w	sl, #2
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f7ff fecb 	bl	8009ac8 <rshift>
 8009d32:	443c      	add	r4, r7
 8009d34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	da52      	bge.n	8009de2 <__gethex+0x27c>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	9802      	ldr	r0, [sp, #8]
 8009d40:	f000 fa55 	bl	800a1ee <_Bfree>
 8009d44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d46:	2300      	movs	r3, #0
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	27a3      	movs	r7, #163	; 0xa3
 8009d4c:	e793      	b.n	8009c76 <__gethex+0x110>
 8009d4e:	3101      	adds	r1, #1
 8009d50:	105b      	asrs	r3, r3, #1
 8009d52:	e7b0      	b.n	8009cb6 <__gethex+0x150>
 8009d54:	1e73      	subs	r3, r6, #1
 8009d56:	9305      	str	r3, [sp, #20]
 8009d58:	9a07      	ldr	r2, [sp, #28]
 8009d5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d018      	beq.n	8009d94 <__gethex+0x22e>
 8009d62:	f1bb 0f20 	cmp.w	fp, #32
 8009d66:	d107      	bne.n	8009d78 <__gethex+0x212>
 8009d68:	9b04      	ldr	r3, [sp, #16]
 8009d6a:	f8c3 a000 	str.w	sl, [r3]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	f04f 0a00 	mov.w	sl, #0
 8009d74:	9304      	str	r3, [sp, #16]
 8009d76:	46d3      	mov	fp, sl
 8009d78:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d7c:	f7ff fede 	bl	8009b3c <__hexdig_fun>
 8009d80:	f000 000f 	and.w	r0, r0, #15
 8009d84:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d88:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d8c:	f10b 0b04 	add.w	fp, fp, #4
 8009d90:	9b05      	ldr	r3, [sp, #20]
 8009d92:	e00d      	b.n	8009db0 <__gethex+0x24a>
 8009d94:	9b05      	ldr	r3, [sp, #20]
 8009d96:	9a08      	ldr	r2, [sp, #32]
 8009d98:	4413      	add	r3, r2
 8009d9a:	42bb      	cmp	r3, r7
 8009d9c:	d3e1      	bcc.n	8009d62 <__gethex+0x1fc>
 8009d9e:	4618      	mov	r0, r3
 8009da0:	9a01      	ldr	r2, [sp, #4]
 8009da2:	9903      	ldr	r1, [sp, #12]
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	f001 f805 	bl	800adb4 <strncmp>
 8009daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d1d8      	bne.n	8009d62 <__gethex+0x1fc>
 8009db0:	461e      	mov	r6, r3
 8009db2:	e791      	b.n	8009cd8 <__gethex+0x172>
 8009db4:	1eb9      	subs	r1, r7, #2
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 fdc2 	bl	800a940 <__any_on>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d0b2      	beq.n	8009d26 <__gethex+0x1c0>
 8009dc0:	f04f 0a03 	mov.w	sl, #3
 8009dc4:	e7b1      	b.n	8009d2a <__gethex+0x1c4>
 8009dc6:	da09      	bge.n	8009ddc <__gethex+0x276>
 8009dc8:	1bf7      	subs	r7, r6, r7
 8009dca:	4629      	mov	r1, r5
 8009dcc:	463a      	mov	r2, r7
 8009dce:	9802      	ldr	r0, [sp, #8]
 8009dd0:	f000 fbd8 	bl	800a584 <__lshift>
 8009dd4:	1be4      	subs	r4, r4, r7
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	f100 0914 	add.w	r9, r0, #20
 8009ddc:	f04f 0a00 	mov.w	sl, #0
 8009de0:	e7a8      	b.n	8009d34 <__gethex+0x1ce>
 8009de2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009de6:	42a0      	cmp	r0, r4
 8009de8:	dd6a      	ble.n	8009ec0 <__gethex+0x35a>
 8009dea:	1b04      	subs	r4, r0, r4
 8009dec:	42a6      	cmp	r6, r4
 8009dee:	dc2e      	bgt.n	8009e4e <__gethex+0x2e8>
 8009df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d022      	beq.n	8009e3e <__gethex+0x2d8>
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d024      	beq.n	8009e46 <__gethex+0x2e0>
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d115      	bne.n	8009e2c <__gethex+0x2c6>
 8009e00:	42a6      	cmp	r6, r4
 8009e02:	d113      	bne.n	8009e2c <__gethex+0x2c6>
 8009e04:	2e01      	cmp	r6, #1
 8009e06:	dc0b      	bgt.n	8009e20 <__gethex+0x2ba>
 8009e08:	9a06      	ldr	r2, [sp, #24]
 8009e0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	2301      	movs	r3, #1
 8009e12:	612b      	str	r3, [r5, #16]
 8009e14:	f8c9 3000 	str.w	r3, [r9]
 8009e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e1a:	2762      	movs	r7, #98	; 0x62
 8009e1c:	601d      	str	r5, [r3, #0]
 8009e1e:	e72a      	b.n	8009c76 <__gethex+0x110>
 8009e20:	1e71      	subs	r1, r6, #1
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 fd8c 	bl	800a940 <__any_on>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1ed      	bne.n	8009e08 <__gethex+0x2a2>
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	9802      	ldr	r0, [sp, #8]
 8009e30:	f000 f9dd 	bl	800a1ee <_Bfree>
 8009e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e36:	2300      	movs	r3, #0
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	2750      	movs	r7, #80	; 0x50
 8009e3c:	e71b      	b.n	8009c76 <__gethex+0x110>
 8009e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0e1      	beq.n	8009e08 <__gethex+0x2a2>
 8009e44:	e7f2      	b.n	8009e2c <__gethex+0x2c6>
 8009e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1dd      	bne.n	8009e08 <__gethex+0x2a2>
 8009e4c:	e7ee      	b.n	8009e2c <__gethex+0x2c6>
 8009e4e:	1e67      	subs	r7, r4, #1
 8009e50:	f1ba 0f00 	cmp.w	sl, #0
 8009e54:	d131      	bne.n	8009eba <__gethex+0x354>
 8009e56:	b127      	cbz	r7, 8009e62 <__gethex+0x2fc>
 8009e58:	4639      	mov	r1, r7
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 fd70 	bl	800a940 <__any_on>
 8009e60:	4682      	mov	sl, r0
 8009e62:	117a      	asrs	r2, r7, #5
 8009e64:	2301      	movs	r3, #1
 8009e66:	f007 071f 	and.w	r7, r7, #31
 8009e6a:	fa03 f707 	lsl.w	r7, r3, r7
 8009e6e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009e72:	4621      	mov	r1, r4
 8009e74:	421f      	tst	r7, r3
 8009e76:	4628      	mov	r0, r5
 8009e78:	bf18      	it	ne
 8009e7a:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e7e:	1b36      	subs	r6, r6, r4
 8009e80:	f7ff fe22 	bl	8009ac8 <rshift>
 8009e84:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009e88:	2702      	movs	r7, #2
 8009e8a:	f1ba 0f00 	cmp.w	sl, #0
 8009e8e:	d048      	beq.n	8009f22 <__gethex+0x3bc>
 8009e90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d015      	beq.n	8009ec4 <__gethex+0x35e>
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d017      	beq.n	8009ecc <__gethex+0x366>
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d109      	bne.n	8009eb4 <__gethex+0x34e>
 8009ea0:	f01a 0f02 	tst.w	sl, #2
 8009ea4:	d006      	beq.n	8009eb4 <__gethex+0x34e>
 8009ea6:	f8d9 3000 	ldr.w	r3, [r9]
 8009eaa:	ea4a 0a03 	orr.w	sl, sl, r3
 8009eae:	f01a 0f01 	tst.w	sl, #1
 8009eb2:	d10e      	bne.n	8009ed2 <__gethex+0x36c>
 8009eb4:	f047 0710 	orr.w	r7, r7, #16
 8009eb8:	e033      	b.n	8009f22 <__gethex+0x3bc>
 8009eba:	f04f 0a01 	mov.w	sl, #1
 8009ebe:	e7d0      	b.n	8009e62 <__gethex+0x2fc>
 8009ec0:	2701      	movs	r7, #1
 8009ec2:	e7e2      	b.n	8009e8a <__gethex+0x324>
 8009ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ec6:	f1c3 0301 	rsb	r3, r3, #1
 8009eca:	9315      	str	r3, [sp, #84]	; 0x54
 8009ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0f0      	beq.n	8009eb4 <__gethex+0x34e>
 8009ed2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009ed6:	f105 0314 	add.w	r3, r5, #20
 8009eda:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009ede:	eb03 010a 	add.w	r1, r3, sl
 8009ee2:	f04f 0c00 	mov.w	ip, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ef0:	d01c      	beq.n	8009f2c <__gethex+0x3c6>
 8009ef2:	3201      	adds	r2, #1
 8009ef4:	6002      	str	r2, [r0, #0]
 8009ef6:	2f02      	cmp	r7, #2
 8009ef8:	f105 0314 	add.w	r3, r5, #20
 8009efc:	d138      	bne.n	8009f70 <__gethex+0x40a>
 8009efe:	f8d8 2000 	ldr.w	r2, [r8]
 8009f02:	3a01      	subs	r2, #1
 8009f04:	42b2      	cmp	r2, r6
 8009f06:	d10a      	bne.n	8009f1e <__gethex+0x3b8>
 8009f08:	1171      	asrs	r1, r6, #5
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f006 061f 	and.w	r6, r6, #31
 8009f10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f14:	fa02 f606 	lsl.w	r6, r2, r6
 8009f18:	421e      	tst	r6, r3
 8009f1a:	bf18      	it	ne
 8009f1c:	4617      	movne	r7, r2
 8009f1e:	f047 0720 	orr.w	r7, r7, #32
 8009f22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f24:	601d      	str	r5, [r3, #0]
 8009f26:	9b06      	ldr	r3, [sp, #24]
 8009f28:	601c      	str	r4, [r3, #0]
 8009f2a:	e6a4      	b.n	8009c76 <__gethex+0x110>
 8009f2c:	4299      	cmp	r1, r3
 8009f2e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f32:	d8d8      	bhi.n	8009ee6 <__gethex+0x380>
 8009f34:	68ab      	ldr	r3, [r5, #8]
 8009f36:	4599      	cmp	r9, r3
 8009f38:	db12      	blt.n	8009f60 <__gethex+0x3fa>
 8009f3a:	6869      	ldr	r1, [r5, #4]
 8009f3c:	9802      	ldr	r0, [sp, #8]
 8009f3e:	3101      	adds	r1, #1
 8009f40:	f000 f921 	bl	800a186 <_Balloc>
 8009f44:	692a      	ldr	r2, [r5, #16]
 8009f46:	3202      	adds	r2, #2
 8009f48:	f105 010c 	add.w	r1, r5, #12
 8009f4c:	4683      	mov	fp, r0
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	300c      	adds	r0, #12
 8009f52:	f000 f90d 	bl	800a170 <memcpy>
 8009f56:	4629      	mov	r1, r5
 8009f58:	9802      	ldr	r0, [sp, #8]
 8009f5a:	f000 f948 	bl	800a1ee <_Bfree>
 8009f5e:	465d      	mov	r5, fp
 8009f60:	692b      	ldr	r3, [r5, #16]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f68:	612a      	str	r2, [r5, #16]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	615a      	str	r2, [r3, #20]
 8009f6e:	e7c2      	b.n	8009ef6 <__gethex+0x390>
 8009f70:	692a      	ldr	r2, [r5, #16]
 8009f72:	454a      	cmp	r2, r9
 8009f74:	dd0b      	ble.n	8009f8e <__gethex+0x428>
 8009f76:	2101      	movs	r1, #1
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff fda5 	bl	8009ac8 <rshift>
 8009f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f82:	3401      	adds	r4, #1
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	f6ff aed9 	blt.w	8009d3c <__gethex+0x1d6>
 8009f8a:	2701      	movs	r7, #1
 8009f8c:	e7c7      	b.n	8009f1e <__gethex+0x3b8>
 8009f8e:	f016 061f 	ands.w	r6, r6, #31
 8009f92:	d0fa      	beq.n	8009f8a <__gethex+0x424>
 8009f94:	449a      	add	sl, r3
 8009f96:	f1c6 0620 	rsb	r6, r6, #32
 8009f9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009f9e:	f000 f9b6 	bl	800a30e <__hi0bits>
 8009fa2:	42b0      	cmp	r0, r6
 8009fa4:	dbe7      	blt.n	8009f76 <__gethex+0x410>
 8009fa6:	e7f0      	b.n	8009f8a <__gethex+0x424>

08009fa8 <L_shift>:
 8009fa8:	f1c2 0208 	rsb	r2, r2, #8
 8009fac:	0092      	lsls	r2, r2, #2
 8009fae:	b570      	push	{r4, r5, r6, lr}
 8009fb0:	f1c2 0620 	rsb	r6, r2, #32
 8009fb4:	6843      	ldr	r3, [r0, #4]
 8009fb6:	6804      	ldr	r4, [r0, #0]
 8009fb8:	fa03 f506 	lsl.w	r5, r3, r6
 8009fbc:	432c      	orrs	r4, r5
 8009fbe:	40d3      	lsrs	r3, r2
 8009fc0:	6004      	str	r4, [r0, #0]
 8009fc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fc6:	4288      	cmp	r0, r1
 8009fc8:	d3f4      	bcc.n	8009fb4 <L_shift+0xc>
 8009fca:	bd70      	pop	{r4, r5, r6, pc}

08009fcc <__match>:
 8009fcc:	b530      	push	{r4, r5, lr}
 8009fce:	6803      	ldr	r3, [r0, #0]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd6:	b914      	cbnz	r4, 8009fde <__match+0x12>
 8009fd8:	6003      	str	r3, [r0, #0]
 8009fda:	2001      	movs	r0, #1
 8009fdc:	bd30      	pop	{r4, r5, pc}
 8009fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009fe6:	2d19      	cmp	r5, #25
 8009fe8:	bf98      	it	ls
 8009fea:	3220      	addls	r2, #32
 8009fec:	42a2      	cmp	r2, r4
 8009fee:	d0f0      	beq.n	8009fd2 <__match+0x6>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7f3      	b.n	8009fdc <__match+0x10>

08009ff4 <__hexnan>:
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	680b      	ldr	r3, [r1, #0]
 8009ffa:	6801      	ldr	r1, [r0, #0]
 8009ffc:	115f      	asrs	r7, r3, #5
 8009ffe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a002:	f013 031f 	ands.w	r3, r3, #31
 800a006:	b087      	sub	sp, #28
 800a008:	bf18      	it	ne
 800a00a:	3704      	addne	r7, #4
 800a00c:	2500      	movs	r5, #0
 800a00e:	1f3e      	subs	r6, r7, #4
 800a010:	4682      	mov	sl, r0
 800a012:	4690      	mov	r8, r2
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	f847 5c04 	str.w	r5, [r7, #-4]
 800a01a:	46b1      	mov	r9, r6
 800a01c:	4634      	mov	r4, r6
 800a01e:	9502      	str	r5, [sp, #8]
 800a020:	46ab      	mov	fp, r5
 800a022:	784a      	ldrb	r2, [r1, #1]
 800a024:	1c4b      	adds	r3, r1, #1
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	b342      	cbz	r2, 800a07c <__hexnan+0x88>
 800a02a:	4610      	mov	r0, r2
 800a02c:	9105      	str	r1, [sp, #20]
 800a02e:	9204      	str	r2, [sp, #16]
 800a030:	f7ff fd84 	bl	8009b3c <__hexdig_fun>
 800a034:	2800      	cmp	r0, #0
 800a036:	d143      	bne.n	800a0c0 <__hexnan+0xcc>
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	9905      	ldr	r1, [sp, #20]
 800a03c:	2a20      	cmp	r2, #32
 800a03e:	d818      	bhi.n	800a072 <__hexnan+0x7e>
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	459b      	cmp	fp, r3
 800a044:	dd13      	ble.n	800a06e <__hexnan+0x7a>
 800a046:	454c      	cmp	r4, r9
 800a048:	d206      	bcs.n	800a058 <__hexnan+0x64>
 800a04a:	2d07      	cmp	r5, #7
 800a04c:	dc04      	bgt.n	800a058 <__hexnan+0x64>
 800a04e:	462a      	mov	r2, r5
 800a050:	4649      	mov	r1, r9
 800a052:	4620      	mov	r0, r4
 800a054:	f7ff ffa8 	bl	8009fa8 <L_shift>
 800a058:	4544      	cmp	r4, r8
 800a05a:	d944      	bls.n	800a0e6 <__hexnan+0xf2>
 800a05c:	2300      	movs	r3, #0
 800a05e:	f1a4 0904 	sub.w	r9, r4, #4
 800a062:	f844 3c04 	str.w	r3, [r4, #-4]
 800a066:	f8cd b008 	str.w	fp, [sp, #8]
 800a06a:	464c      	mov	r4, r9
 800a06c:	461d      	mov	r5, r3
 800a06e:	9903      	ldr	r1, [sp, #12]
 800a070:	e7d7      	b.n	800a022 <__hexnan+0x2e>
 800a072:	2a29      	cmp	r2, #41	; 0x29
 800a074:	d14a      	bne.n	800a10c <__hexnan+0x118>
 800a076:	3102      	adds	r1, #2
 800a078:	f8ca 1000 	str.w	r1, [sl]
 800a07c:	f1bb 0f00 	cmp.w	fp, #0
 800a080:	d044      	beq.n	800a10c <__hexnan+0x118>
 800a082:	454c      	cmp	r4, r9
 800a084:	d206      	bcs.n	800a094 <__hexnan+0xa0>
 800a086:	2d07      	cmp	r5, #7
 800a088:	dc04      	bgt.n	800a094 <__hexnan+0xa0>
 800a08a:	462a      	mov	r2, r5
 800a08c:	4649      	mov	r1, r9
 800a08e:	4620      	mov	r0, r4
 800a090:	f7ff ff8a 	bl	8009fa8 <L_shift>
 800a094:	4544      	cmp	r4, r8
 800a096:	d928      	bls.n	800a0ea <__hexnan+0xf6>
 800a098:	4643      	mov	r3, r8
 800a09a:	f854 2b04 	ldr.w	r2, [r4], #4
 800a09e:	f843 2b04 	str.w	r2, [r3], #4
 800a0a2:	42a6      	cmp	r6, r4
 800a0a4:	d2f9      	bcs.n	800a09a <__hexnan+0xa6>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f843 2b04 	str.w	r2, [r3], #4
 800a0ac:	429e      	cmp	r6, r3
 800a0ae:	d2fb      	bcs.n	800a0a8 <__hexnan+0xb4>
 800a0b0:	6833      	ldr	r3, [r6, #0]
 800a0b2:	b91b      	cbnz	r3, 800a0bc <__hexnan+0xc8>
 800a0b4:	4546      	cmp	r6, r8
 800a0b6:	d127      	bne.n	800a108 <__hexnan+0x114>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	2005      	movs	r0, #5
 800a0be:	e026      	b.n	800a10e <__hexnan+0x11a>
 800a0c0:	3501      	adds	r5, #1
 800a0c2:	2d08      	cmp	r5, #8
 800a0c4:	f10b 0b01 	add.w	fp, fp, #1
 800a0c8:	dd06      	ble.n	800a0d8 <__hexnan+0xe4>
 800a0ca:	4544      	cmp	r4, r8
 800a0cc:	d9cf      	bls.n	800a06e <__hexnan+0x7a>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0d4:	2501      	movs	r5, #1
 800a0d6:	3c04      	subs	r4, #4
 800a0d8:	6822      	ldr	r2, [r4, #0]
 800a0da:	f000 000f 	and.w	r0, r0, #15
 800a0de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0e2:	6020      	str	r0, [r4, #0]
 800a0e4:	e7c3      	b.n	800a06e <__hexnan+0x7a>
 800a0e6:	2508      	movs	r5, #8
 800a0e8:	e7c1      	b.n	800a06e <__hexnan+0x7a>
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0df      	beq.n	800a0b0 <__hexnan+0xbc>
 800a0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f4:	f1c3 0320 	rsb	r3, r3, #32
 800a0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a100:	401a      	ands	r2, r3
 800a102:	f847 2c04 	str.w	r2, [r7, #-4]
 800a106:	e7d3      	b.n	800a0b0 <__hexnan+0xbc>
 800a108:	3e04      	subs	r6, #4
 800a10a:	e7d1      	b.n	800a0b0 <__hexnan+0xbc>
 800a10c:	2004      	movs	r0, #4
 800a10e:	b007      	add	sp, #28
 800a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a114 <__locale_ctype_ptr_l>:
 800a114:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a118:	4770      	bx	lr

0800a11a <__localeconv_l>:
 800a11a:	30f0      	adds	r0, #240	; 0xf0
 800a11c:	4770      	bx	lr
	...

0800a120 <_localeconv_r>:
 800a120:	4b04      	ldr	r3, [pc, #16]	; (800a134 <_localeconv_r+0x14>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6a18      	ldr	r0, [r3, #32]
 800a126:	4b04      	ldr	r3, [pc, #16]	; (800a138 <_localeconv_r+0x18>)
 800a128:	2800      	cmp	r0, #0
 800a12a:	bf08      	it	eq
 800a12c:	4618      	moveq	r0, r3
 800a12e:	30f0      	adds	r0, #240	; 0xf0
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	200000b4 	.word	0x200000b4
 800a138:	20000118 	.word	0x20000118

0800a13c <malloc>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	; (800a148 <malloc+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f000 bc7b 	b.w	800aa3c <_malloc_r>
 800a146:	bf00      	nop
 800a148:	200000b4 	.word	0x200000b4

0800a14c <__ascii_mbtowc>:
 800a14c:	b082      	sub	sp, #8
 800a14e:	b901      	cbnz	r1, 800a152 <__ascii_mbtowc+0x6>
 800a150:	a901      	add	r1, sp, #4
 800a152:	b142      	cbz	r2, 800a166 <__ascii_mbtowc+0x1a>
 800a154:	b14b      	cbz	r3, 800a16a <__ascii_mbtowc+0x1e>
 800a156:	7813      	ldrb	r3, [r2, #0]
 800a158:	600b      	str	r3, [r1, #0]
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	1c10      	adds	r0, r2, #0
 800a15e:	bf18      	it	ne
 800a160:	2001      	movne	r0, #1
 800a162:	b002      	add	sp, #8
 800a164:	4770      	bx	lr
 800a166:	4610      	mov	r0, r2
 800a168:	e7fb      	b.n	800a162 <__ascii_mbtowc+0x16>
 800a16a:	f06f 0001 	mvn.w	r0, #1
 800a16e:	e7f8      	b.n	800a162 <__ascii_mbtowc+0x16>

0800a170 <memcpy>:
 800a170:	b510      	push	{r4, lr}
 800a172:	1e43      	subs	r3, r0, #1
 800a174:	440a      	add	r2, r1
 800a176:	4291      	cmp	r1, r2
 800a178:	d100      	bne.n	800a17c <memcpy+0xc>
 800a17a:	bd10      	pop	{r4, pc}
 800a17c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a180:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a184:	e7f7      	b.n	800a176 <memcpy+0x6>

0800a186 <_Balloc>:
 800a186:	b570      	push	{r4, r5, r6, lr}
 800a188:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a18a:	4604      	mov	r4, r0
 800a18c:	460e      	mov	r6, r1
 800a18e:	b93d      	cbnz	r5, 800a1a0 <_Balloc+0x1a>
 800a190:	2010      	movs	r0, #16
 800a192:	f7ff ffd3 	bl	800a13c <malloc>
 800a196:	6260      	str	r0, [r4, #36]	; 0x24
 800a198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a19c:	6005      	str	r5, [r0, #0]
 800a19e:	60c5      	str	r5, [r0, #12]
 800a1a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a1a2:	68eb      	ldr	r3, [r5, #12]
 800a1a4:	b183      	cbz	r3, 800a1c8 <_Balloc+0x42>
 800a1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a1ae:	b9b8      	cbnz	r0, 800a1e0 <_Balloc+0x5a>
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	fa01 f506 	lsl.w	r5, r1, r6
 800a1b6:	1d6a      	adds	r2, r5, #5
 800a1b8:	0092      	lsls	r2, r2, #2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fbe1 	bl	800a982 <_calloc_r>
 800a1c0:	b160      	cbz	r0, 800a1dc <_Balloc+0x56>
 800a1c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a1c6:	e00e      	b.n	800a1e6 <_Balloc+0x60>
 800a1c8:	2221      	movs	r2, #33	; 0x21
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fbd8 	bl	800a982 <_calloc_r>
 800a1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d4:	60e8      	str	r0, [r5, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <_Balloc+0x20>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ec:	e7f7      	b.n	800a1de <_Balloc+0x58>

0800a1ee <_Bfree>:
 800a1ee:	b570      	push	{r4, r5, r6, lr}
 800a1f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	b93c      	cbnz	r4, 800a208 <_Bfree+0x1a>
 800a1f8:	2010      	movs	r0, #16
 800a1fa:	f7ff ff9f 	bl	800a13c <malloc>
 800a1fe:	6270      	str	r0, [r6, #36]	; 0x24
 800a200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a204:	6004      	str	r4, [r0, #0]
 800a206:	60c4      	str	r4, [r0, #12]
 800a208:	b13d      	cbz	r5, 800a21a <_Bfree+0x2c>
 800a20a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a20c:	686a      	ldr	r2, [r5, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a214:	6029      	str	r1, [r5, #0]
 800a216:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a21a:	bd70      	pop	{r4, r5, r6, pc}

0800a21c <__multadd>:
 800a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a220:	690d      	ldr	r5, [r1, #16]
 800a222:	461f      	mov	r7, r3
 800a224:	4606      	mov	r6, r0
 800a226:	460c      	mov	r4, r1
 800a228:	f101 0c14 	add.w	ip, r1, #20
 800a22c:	2300      	movs	r3, #0
 800a22e:	f8dc 0000 	ldr.w	r0, [ip]
 800a232:	b281      	uxth	r1, r0
 800a234:	fb02 7101 	mla	r1, r2, r1, r7
 800a238:	0c0f      	lsrs	r7, r1, #16
 800a23a:	0c00      	lsrs	r0, r0, #16
 800a23c:	fb02 7000 	mla	r0, r2, r0, r7
 800a240:	b289      	uxth	r1, r1
 800a242:	3301      	adds	r3, #1
 800a244:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a248:	429d      	cmp	r5, r3
 800a24a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a24e:	f84c 1b04 	str.w	r1, [ip], #4
 800a252:	dcec      	bgt.n	800a22e <__multadd+0x12>
 800a254:	b1d7      	cbz	r7, 800a28c <__multadd+0x70>
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	42ab      	cmp	r3, r5
 800a25a:	dc12      	bgt.n	800a282 <__multadd+0x66>
 800a25c:	6861      	ldr	r1, [r4, #4]
 800a25e:	4630      	mov	r0, r6
 800a260:	3101      	adds	r1, #1
 800a262:	f7ff ff90 	bl	800a186 <_Balloc>
 800a266:	6922      	ldr	r2, [r4, #16]
 800a268:	3202      	adds	r2, #2
 800a26a:	f104 010c 	add.w	r1, r4, #12
 800a26e:	4680      	mov	r8, r0
 800a270:	0092      	lsls	r2, r2, #2
 800a272:	300c      	adds	r0, #12
 800a274:	f7ff ff7c 	bl	800a170 <memcpy>
 800a278:	4621      	mov	r1, r4
 800a27a:	4630      	mov	r0, r6
 800a27c:	f7ff ffb7 	bl	800a1ee <_Bfree>
 800a280:	4644      	mov	r4, r8
 800a282:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a286:	3501      	adds	r5, #1
 800a288:	615f      	str	r7, [r3, #20]
 800a28a:	6125      	str	r5, [r4, #16]
 800a28c:	4620      	mov	r0, r4
 800a28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a292 <__s2b>:
 800a292:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a296:	460c      	mov	r4, r1
 800a298:	4615      	mov	r5, r2
 800a29a:	461f      	mov	r7, r3
 800a29c:	2209      	movs	r2, #9
 800a29e:	3308      	adds	r3, #8
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	db20      	blt.n	800a2f0 <__s2b+0x5e>
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff69 	bl	800a186 <_Balloc>
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	6143      	str	r3, [r0, #20]
 800a2b8:	2d09      	cmp	r5, #9
 800a2ba:	f04f 0301 	mov.w	r3, #1
 800a2be:	6103      	str	r3, [r0, #16]
 800a2c0:	dd19      	ble.n	800a2f6 <__s2b+0x64>
 800a2c2:	f104 0809 	add.w	r8, r4, #9
 800a2c6:	46c1      	mov	r9, r8
 800a2c8:	442c      	add	r4, r5
 800a2ca:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	3b30      	subs	r3, #48	; 0x30
 800a2d2:	220a      	movs	r2, #10
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7ff ffa1 	bl	800a21c <__multadd>
 800a2da:	45a1      	cmp	r9, r4
 800a2dc:	d1f5      	bne.n	800a2ca <__s2b+0x38>
 800a2de:	eb08 0405 	add.w	r4, r8, r5
 800a2e2:	3c08      	subs	r4, #8
 800a2e4:	1b2d      	subs	r5, r5, r4
 800a2e6:	1963      	adds	r3, r4, r5
 800a2e8:	42bb      	cmp	r3, r7
 800a2ea:	db07      	blt.n	800a2fc <__s2b+0x6a>
 800a2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f0:	0052      	lsls	r2, r2, #1
 800a2f2:	3101      	adds	r1, #1
 800a2f4:	e7d9      	b.n	800a2aa <__s2b+0x18>
 800a2f6:	340a      	adds	r4, #10
 800a2f8:	2509      	movs	r5, #9
 800a2fa:	e7f3      	b.n	800a2e4 <__s2b+0x52>
 800a2fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a300:	4601      	mov	r1, r0
 800a302:	3b30      	subs	r3, #48	; 0x30
 800a304:	220a      	movs	r2, #10
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ff88 	bl	800a21c <__multadd>
 800a30c:	e7eb      	b.n	800a2e6 <__s2b+0x54>

0800a30e <__hi0bits>:
 800a30e:	0c02      	lsrs	r2, r0, #16
 800a310:	0412      	lsls	r2, r2, #16
 800a312:	4603      	mov	r3, r0
 800a314:	b9b2      	cbnz	r2, 800a344 <__hi0bits+0x36>
 800a316:	0403      	lsls	r3, r0, #16
 800a318:	2010      	movs	r0, #16
 800a31a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a31e:	bf04      	itt	eq
 800a320:	021b      	lsleq	r3, r3, #8
 800a322:	3008      	addeq	r0, #8
 800a324:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a328:	bf04      	itt	eq
 800a32a:	011b      	lsleq	r3, r3, #4
 800a32c:	3004      	addeq	r0, #4
 800a32e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a332:	bf04      	itt	eq
 800a334:	009b      	lsleq	r3, r3, #2
 800a336:	3002      	addeq	r0, #2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	db06      	blt.n	800a34a <__hi0bits+0x3c>
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	d503      	bpl.n	800a348 <__hi0bits+0x3a>
 800a340:	3001      	adds	r0, #1
 800a342:	4770      	bx	lr
 800a344:	2000      	movs	r0, #0
 800a346:	e7e8      	b.n	800a31a <__hi0bits+0xc>
 800a348:	2020      	movs	r0, #32
 800a34a:	4770      	bx	lr

0800a34c <__lo0bits>:
 800a34c:	6803      	ldr	r3, [r0, #0]
 800a34e:	f013 0207 	ands.w	r2, r3, #7
 800a352:	4601      	mov	r1, r0
 800a354:	d00b      	beq.n	800a36e <__lo0bits+0x22>
 800a356:	07da      	lsls	r2, r3, #31
 800a358:	d423      	bmi.n	800a3a2 <__lo0bits+0x56>
 800a35a:	0798      	lsls	r0, r3, #30
 800a35c:	bf49      	itett	mi
 800a35e:	085b      	lsrmi	r3, r3, #1
 800a360:	089b      	lsrpl	r3, r3, #2
 800a362:	2001      	movmi	r0, #1
 800a364:	600b      	strmi	r3, [r1, #0]
 800a366:	bf5c      	itt	pl
 800a368:	600b      	strpl	r3, [r1, #0]
 800a36a:	2002      	movpl	r0, #2
 800a36c:	4770      	bx	lr
 800a36e:	b298      	uxth	r0, r3
 800a370:	b9a8      	cbnz	r0, 800a39e <__lo0bits+0x52>
 800a372:	0c1b      	lsrs	r3, r3, #16
 800a374:	2010      	movs	r0, #16
 800a376:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a37a:	bf04      	itt	eq
 800a37c:	0a1b      	lsreq	r3, r3, #8
 800a37e:	3008      	addeq	r0, #8
 800a380:	071a      	lsls	r2, r3, #28
 800a382:	bf04      	itt	eq
 800a384:	091b      	lsreq	r3, r3, #4
 800a386:	3004      	addeq	r0, #4
 800a388:	079a      	lsls	r2, r3, #30
 800a38a:	bf04      	itt	eq
 800a38c:	089b      	lsreq	r3, r3, #2
 800a38e:	3002      	addeq	r0, #2
 800a390:	07da      	lsls	r2, r3, #31
 800a392:	d402      	bmi.n	800a39a <__lo0bits+0x4e>
 800a394:	085b      	lsrs	r3, r3, #1
 800a396:	d006      	beq.n	800a3a6 <__lo0bits+0x5a>
 800a398:	3001      	adds	r0, #1
 800a39a:	600b      	str	r3, [r1, #0]
 800a39c:	4770      	bx	lr
 800a39e:	4610      	mov	r0, r2
 800a3a0:	e7e9      	b.n	800a376 <__lo0bits+0x2a>
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	4770      	bx	lr
 800a3a6:	2020      	movs	r0, #32
 800a3a8:	4770      	bx	lr

0800a3aa <__i2b>:
 800a3aa:	b510      	push	{r4, lr}
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	f7ff fee9 	bl	800a186 <_Balloc>
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	6144      	str	r4, [r0, #20]
 800a3b8:	6102      	str	r2, [r0, #16]
 800a3ba:	bd10      	pop	{r4, pc}

0800a3bc <__multiply>:
 800a3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	690a      	ldr	r2, [r1, #16]
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	bfb8      	it	lt
 800a3ca:	460b      	movlt	r3, r1
 800a3cc:	4688      	mov	r8, r1
 800a3ce:	bfbc      	itt	lt
 800a3d0:	46a0      	movlt	r8, r4
 800a3d2:	461c      	movlt	r4, r3
 800a3d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a3d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a3dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3e4:	eb07 0609 	add.w	r6, r7, r9
 800a3e8:	42b3      	cmp	r3, r6
 800a3ea:	bfb8      	it	lt
 800a3ec:	3101      	addlt	r1, #1
 800a3ee:	f7ff feca 	bl	800a186 <_Balloc>
 800a3f2:	f100 0514 	add.w	r5, r0, #20
 800a3f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4573      	cmp	r3, lr
 800a400:	d316      	bcc.n	800a430 <__multiply+0x74>
 800a402:	f104 0214 	add.w	r2, r4, #20
 800a406:	f108 0114 	add.w	r1, r8, #20
 800a40a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a40e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	9b00      	ldr	r3, [sp, #0]
 800a416:	9201      	str	r2, [sp, #4]
 800a418:	4293      	cmp	r3, r2
 800a41a:	d80c      	bhi.n	800a436 <__multiply+0x7a>
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	dd03      	ble.n	800a428 <__multiply+0x6c>
 800a420:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a424:	2b00      	cmp	r3, #0
 800a426:	d05d      	beq.n	800a4e4 <__multiply+0x128>
 800a428:	6106      	str	r6, [r0, #16]
 800a42a:	b003      	add	sp, #12
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	f843 2b04 	str.w	r2, [r3], #4
 800a434:	e7e3      	b.n	800a3fe <__multiply+0x42>
 800a436:	f8b2 b000 	ldrh.w	fp, [r2]
 800a43a:	f1bb 0f00 	cmp.w	fp, #0
 800a43e:	d023      	beq.n	800a488 <__multiply+0xcc>
 800a440:	4689      	mov	r9, r1
 800a442:	46ac      	mov	ip, r5
 800a444:	f04f 0800 	mov.w	r8, #0
 800a448:	f859 4b04 	ldr.w	r4, [r9], #4
 800a44c:	f8dc a000 	ldr.w	sl, [ip]
 800a450:	b2a3      	uxth	r3, r4
 800a452:	fa1f fa8a 	uxth.w	sl, sl
 800a456:	fb0b a303 	mla	r3, fp, r3, sl
 800a45a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a45e:	f8dc 4000 	ldr.w	r4, [ip]
 800a462:	4443      	add	r3, r8
 800a464:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a468:	fb0b 840a 	mla	r4, fp, sl, r8
 800a46c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a470:	46e2      	mov	sl, ip
 800a472:	b29b      	uxth	r3, r3
 800a474:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a478:	454f      	cmp	r7, r9
 800a47a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a47e:	f84a 3b04 	str.w	r3, [sl], #4
 800a482:	d82b      	bhi.n	800a4dc <__multiply+0x120>
 800a484:	f8cc 8004 	str.w	r8, [ip, #4]
 800a488:	9b01      	ldr	r3, [sp, #4]
 800a48a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a48e:	3204      	adds	r2, #4
 800a490:	f1ba 0f00 	cmp.w	sl, #0
 800a494:	d020      	beq.n	800a4d8 <__multiply+0x11c>
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	4689      	mov	r9, r1
 800a49a:	46a8      	mov	r8, r5
 800a49c:	f04f 0b00 	mov.w	fp, #0
 800a4a0:	f8b9 c000 	ldrh.w	ip, [r9]
 800a4a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a4a8:	fb0a 440c 	mla	r4, sl, ip, r4
 800a4ac:	445c      	add	r4, fp
 800a4ae:	46c4      	mov	ip, r8
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a4ba:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	fb0a b303 	mla	r3, sl, r3, fp
 800a4c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a4cc:	454f      	cmp	r7, r9
 800a4ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a4d2:	d805      	bhi.n	800a4e0 <__multiply+0x124>
 800a4d4:	f8c8 3004 	str.w	r3, [r8, #4]
 800a4d8:	3504      	adds	r5, #4
 800a4da:	e79b      	b.n	800a414 <__multiply+0x58>
 800a4dc:	46d4      	mov	ip, sl
 800a4de:	e7b3      	b.n	800a448 <__multiply+0x8c>
 800a4e0:	46e0      	mov	r8, ip
 800a4e2:	e7dd      	b.n	800a4a0 <__multiply+0xe4>
 800a4e4:	3e01      	subs	r6, #1
 800a4e6:	e799      	b.n	800a41c <__multiply+0x60>

0800a4e8 <__pow5mult>:
 800a4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ec:	4615      	mov	r5, r2
 800a4ee:	f012 0203 	ands.w	r2, r2, #3
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	d007      	beq.n	800a508 <__pow5mult+0x20>
 800a4f8:	3a01      	subs	r2, #1
 800a4fa:	4c21      	ldr	r4, [pc, #132]	; (800a580 <__pow5mult+0x98>)
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a502:	f7ff fe8b 	bl	800a21c <__multadd>
 800a506:	4607      	mov	r7, r0
 800a508:	10ad      	asrs	r5, r5, #2
 800a50a:	d035      	beq.n	800a578 <__pow5mult+0x90>
 800a50c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a50e:	b93c      	cbnz	r4, 800a520 <__pow5mult+0x38>
 800a510:	2010      	movs	r0, #16
 800a512:	f7ff fe13 	bl	800a13c <malloc>
 800a516:	6270      	str	r0, [r6, #36]	; 0x24
 800a518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a51c:	6004      	str	r4, [r0, #0]
 800a51e:	60c4      	str	r4, [r0, #12]
 800a520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a528:	b94c      	cbnz	r4, 800a53e <__pow5mult+0x56>
 800a52a:	f240 2171 	movw	r1, #625	; 0x271
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff ff3b 	bl	800a3aa <__i2b>
 800a534:	2300      	movs	r3, #0
 800a536:	f8c8 0008 	str.w	r0, [r8, #8]
 800a53a:	4604      	mov	r4, r0
 800a53c:	6003      	str	r3, [r0, #0]
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	07eb      	lsls	r3, r5, #31
 800a544:	d50a      	bpl.n	800a55c <__pow5mult+0x74>
 800a546:	4639      	mov	r1, r7
 800a548:	4622      	mov	r2, r4
 800a54a:	4630      	mov	r0, r6
 800a54c:	f7ff ff36 	bl	800a3bc <__multiply>
 800a550:	4639      	mov	r1, r7
 800a552:	4681      	mov	r9, r0
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff fe4a 	bl	800a1ee <_Bfree>
 800a55a:	464f      	mov	r7, r9
 800a55c:	106d      	asrs	r5, r5, #1
 800a55e:	d00b      	beq.n	800a578 <__pow5mult+0x90>
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	b938      	cbnz	r0, 800a574 <__pow5mult+0x8c>
 800a564:	4622      	mov	r2, r4
 800a566:	4621      	mov	r1, r4
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff ff27 	bl	800a3bc <__multiply>
 800a56e:	6020      	str	r0, [r4, #0]
 800a570:	f8c0 8000 	str.w	r8, [r0]
 800a574:	4604      	mov	r4, r0
 800a576:	e7e4      	b.n	800a542 <__pow5mult+0x5a>
 800a578:	4638      	mov	r0, r7
 800a57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57e:	bf00      	nop
 800a580:	0800b1e8 	.word	0x0800b1e8

0800a584 <__lshift>:
 800a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	6849      	ldr	r1, [r1, #4]
 800a592:	eb0a 0903 	add.w	r9, sl, r3
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	4607      	mov	r7, r0
 800a59a:	4616      	mov	r6, r2
 800a59c:	f109 0501 	add.w	r5, r9, #1
 800a5a0:	42ab      	cmp	r3, r5
 800a5a2:	db32      	blt.n	800a60a <__lshift+0x86>
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f7ff fdee 	bl	800a186 <_Balloc>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	f100 0114 	add.w	r1, r0, #20
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4553      	cmp	r3, sl
 800a5b6:	db2b      	blt.n	800a610 <__lshift+0x8c>
 800a5b8:	6920      	ldr	r0, [r4, #16]
 800a5ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5be:	f104 0314 	add.w	r3, r4, #20
 800a5c2:	f016 021f 	ands.w	r2, r6, #31
 800a5c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ce:	d025      	beq.n	800a61c <__lshift+0x98>
 800a5d0:	f1c2 0e20 	rsb	lr, r2, #32
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	681e      	ldr	r6, [r3, #0]
 800a5d8:	468a      	mov	sl, r1
 800a5da:	4096      	lsls	r6, r2
 800a5dc:	4330      	orrs	r0, r6
 800a5de:	f84a 0b04 	str.w	r0, [sl], #4
 800a5e2:	f853 0b04 	ldr.w	r0, [r3], #4
 800a5e6:	459c      	cmp	ip, r3
 800a5e8:	fa20 f00e 	lsr.w	r0, r0, lr
 800a5ec:	d814      	bhi.n	800a618 <__lshift+0x94>
 800a5ee:	6048      	str	r0, [r1, #4]
 800a5f0:	b108      	cbz	r0, 800a5f6 <__lshift+0x72>
 800a5f2:	f109 0502 	add.w	r5, r9, #2
 800a5f6:	3d01      	subs	r5, #1
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f8c8 5010 	str.w	r5, [r8, #16]
 800a5fe:	4621      	mov	r1, r4
 800a600:	f7ff fdf5 	bl	800a1ee <_Bfree>
 800a604:	4640      	mov	r0, r8
 800a606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60a:	3101      	adds	r1, #1
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	e7c7      	b.n	800a5a0 <__lshift+0x1c>
 800a610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a614:	3301      	adds	r3, #1
 800a616:	e7cd      	b.n	800a5b4 <__lshift+0x30>
 800a618:	4651      	mov	r1, sl
 800a61a:	e7dc      	b.n	800a5d6 <__lshift+0x52>
 800a61c:	3904      	subs	r1, #4
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	f841 2f04 	str.w	r2, [r1, #4]!
 800a626:	459c      	cmp	ip, r3
 800a628:	d8f9      	bhi.n	800a61e <__lshift+0x9a>
 800a62a:	e7e4      	b.n	800a5f6 <__lshift+0x72>

0800a62c <__mcmp>:
 800a62c:	6903      	ldr	r3, [r0, #16]
 800a62e:	690a      	ldr	r2, [r1, #16]
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	b530      	push	{r4, r5, lr}
 800a634:	d10c      	bne.n	800a650 <__mcmp+0x24>
 800a636:	0092      	lsls	r2, r2, #2
 800a638:	3014      	adds	r0, #20
 800a63a:	3114      	adds	r1, #20
 800a63c:	1884      	adds	r4, r0, r2
 800a63e:	4411      	add	r1, r2
 800a640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a648:	4295      	cmp	r5, r2
 800a64a:	d003      	beq.n	800a654 <__mcmp+0x28>
 800a64c:	d305      	bcc.n	800a65a <__mcmp+0x2e>
 800a64e:	2301      	movs	r3, #1
 800a650:	4618      	mov	r0, r3
 800a652:	bd30      	pop	{r4, r5, pc}
 800a654:	42a0      	cmp	r0, r4
 800a656:	d3f3      	bcc.n	800a640 <__mcmp+0x14>
 800a658:	e7fa      	b.n	800a650 <__mcmp+0x24>
 800a65a:	f04f 33ff 	mov.w	r3, #4294967295
 800a65e:	e7f7      	b.n	800a650 <__mcmp+0x24>

0800a660 <__mdiff>:
 800a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a664:	460d      	mov	r5, r1
 800a666:	4607      	mov	r7, r0
 800a668:	4611      	mov	r1, r2
 800a66a:	4628      	mov	r0, r5
 800a66c:	4614      	mov	r4, r2
 800a66e:	f7ff ffdd 	bl	800a62c <__mcmp>
 800a672:	1e06      	subs	r6, r0, #0
 800a674:	d108      	bne.n	800a688 <__mdiff+0x28>
 800a676:	4631      	mov	r1, r6
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff fd84 	bl	800a186 <_Balloc>
 800a67e:	2301      	movs	r3, #1
 800a680:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a688:	bfa4      	itt	ge
 800a68a:	4623      	movge	r3, r4
 800a68c:	462c      	movge	r4, r5
 800a68e:	4638      	mov	r0, r7
 800a690:	6861      	ldr	r1, [r4, #4]
 800a692:	bfa6      	itte	ge
 800a694:	461d      	movge	r5, r3
 800a696:	2600      	movge	r6, #0
 800a698:	2601      	movlt	r6, #1
 800a69a:	f7ff fd74 	bl	800a186 <_Balloc>
 800a69e:	692b      	ldr	r3, [r5, #16]
 800a6a0:	60c6      	str	r6, [r0, #12]
 800a6a2:	6926      	ldr	r6, [r4, #16]
 800a6a4:	f105 0914 	add.w	r9, r5, #20
 800a6a8:	f104 0214 	add.w	r2, r4, #20
 800a6ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a6b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a6b4:	f100 0514 	add.w	r5, r0, #20
 800a6b8:	f04f 0e00 	mov.w	lr, #0
 800a6bc:	f852 ab04 	ldr.w	sl, [r2], #4
 800a6c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a6c4:	fa1e f18a 	uxtah	r1, lr, sl
 800a6c8:	b2a3      	uxth	r3, r4
 800a6ca:	1ac9      	subs	r1, r1, r3
 800a6cc:	0c23      	lsrs	r3, r4, #16
 800a6ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a6d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a6d6:	b289      	uxth	r1, r1
 800a6d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a6dc:	45c8      	cmp	r8, r9
 800a6de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a6e2:	4694      	mov	ip, r2
 800a6e4:	f845 3b04 	str.w	r3, [r5], #4
 800a6e8:	d8e8      	bhi.n	800a6bc <__mdiff+0x5c>
 800a6ea:	45bc      	cmp	ip, r7
 800a6ec:	d304      	bcc.n	800a6f8 <__mdiff+0x98>
 800a6ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a6f2:	b183      	cbz	r3, 800a716 <__mdiff+0xb6>
 800a6f4:	6106      	str	r6, [r0, #16]
 800a6f6:	e7c5      	b.n	800a684 <__mdiff+0x24>
 800a6f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6fc:	fa1e f381 	uxtah	r3, lr, r1
 800a700:	141a      	asrs	r2, r3, #16
 800a702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a706:	b29b      	uxth	r3, r3
 800a708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a70c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a710:	f845 3b04 	str.w	r3, [r5], #4
 800a714:	e7e9      	b.n	800a6ea <__mdiff+0x8a>
 800a716:	3e01      	subs	r6, #1
 800a718:	e7e9      	b.n	800a6ee <__mdiff+0x8e>
	...

0800a71c <__ulp>:
 800a71c:	4b12      	ldr	r3, [pc, #72]	; (800a768 <__ulp+0x4c>)
 800a71e:	ee10 2a90 	vmov	r2, s1
 800a722:	401a      	ands	r2, r3
 800a724:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	dd04      	ble.n	800a736 <__ulp+0x1a>
 800a72c:	2000      	movs	r0, #0
 800a72e:	4619      	mov	r1, r3
 800a730:	ec41 0b10 	vmov	d0, r0, r1
 800a734:	4770      	bx	lr
 800a736:	425b      	negs	r3, r3
 800a738:	151b      	asrs	r3, r3, #20
 800a73a:	2b13      	cmp	r3, #19
 800a73c:	f04f 0000 	mov.w	r0, #0
 800a740:	f04f 0100 	mov.w	r1, #0
 800a744:	dc04      	bgt.n	800a750 <__ulp+0x34>
 800a746:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a74a:	fa42 f103 	asr.w	r1, r2, r3
 800a74e:	e7ef      	b.n	800a730 <__ulp+0x14>
 800a750:	3b14      	subs	r3, #20
 800a752:	2b1e      	cmp	r3, #30
 800a754:	f04f 0201 	mov.w	r2, #1
 800a758:	bfda      	itte	le
 800a75a:	f1c3 031f 	rsble	r3, r3, #31
 800a75e:	fa02 f303 	lslle.w	r3, r2, r3
 800a762:	4613      	movgt	r3, r2
 800a764:	4618      	mov	r0, r3
 800a766:	e7e3      	b.n	800a730 <__ulp+0x14>
 800a768:	7ff00000 	.word	0x7ff00000

0800a76c <__b2d>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	6905      	ldr	r5, [r0, #16]
 800a770:	f100 0714 	add.w	r7, r0, #20
 800a774:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a778:	1f2e      	subs	r6, r5, #4
 800a77a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff fdc5 	bl	800a30e <__hi0bits>
 800a784:	f1c0 0320 	rsb	r3, r0, #32
 800a788:	280a      	cmp	r0, #10
 800a78a:	600b      	str	r3, [r1, #0]
 800a78c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a804 <__b2d+0x98>
 800a790:	dc14      	bgt.n	800a7bc <__b2d+0x50>
 800a792:	f1c0 0e0b 	rsb	lr, r0, #11
 800a796:	fa24 f10e 	lsr.w	r1, r4, lr
 800a79a:	42b7      	cmp	r7, r6
 800a79c:	ea41 030c 	orr.w	r3, r1, ip
 800a7a0:	bf34      	ite	cc
 800a7a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7a6:	2100      	movcs	r1, #0
 800a7a8:	3015      	adds	r0, #21
 800a7aa:	fa04 f000 	lsl.w	r0, r4, r0
 800a7ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7b2:	ea40 0201 	orr.w	r2, r0, r1
 800a7b6:	ec43 2b10 	vmov	d0, r2, r3
 800a7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7bc:	42b7      	cmp	r7, r6
 800a7be:	bf3a      	itte	cc
 800a7c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7c8:	2100      	movcs	r1, #0
 800a7ca:	380b      	subs	r0, #11
 800a7cc:	d015      	beq.n	800a7fa <__b2d+0x8e>
 800a7ce:	4084      	lsls	r4, r0
 800a7d0:	f1c0 0520 	rsb	r5, r0, #32
 800a7d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a7d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a7dc:	42be      	cmp	r6, r7
 800a7de:	fa21 fc05 	lsr.w	ip, r1, r5
 800a7e2:	ea44 030c 	orr.w	r3, r4, ip
 800a7e6:	bf8c      	ite	hi
 800a7e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7ec:	2400      	movls	r4, #0
 800a7ee:	fa01 f000 	lsl.w	r0, r1, r0
 800a7f2:	40ec      	lsrs	r4, r5
 800a7f4:	ea40 0204 	orr.w	r2, r0, r4
 800a7f8:	e7dd      	b.n	800a7b6 <__b2d+0x4a>
 800a7fa:	ea44 030c 	orr.w	r3, r4, ip
 800a7fe:	460a      	mov	r2, r1
 800a800:	e7d9      	b.n	800a7b6 <__b2d+0x4a>
 800a802:	bf00      	nop
 800a804:	3ff00000 	.word	0x3ff00000

0800a808 <__d2b>:
 800a808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a80c:	460e      	mov	r6, r1
 800a80e:	2101      	movs	r1, #1
 800a810:	ec59 8b10 	vmov	r8, r9, d0
 800a814:	4615      	mov	r5, r2
 800a816:	f7ff fcb6 	bl	800a186 <_Balloc>
 800a81a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a81e:	4607      	mov	r7, r0
 800a820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a824:	bb34      	cbnz	r4, 800a874 <__d2b+0x6c>
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	f1b8 0300 	subs.w	r3, r8, #0
 800a82c:	d027      	beq.n	800a87e <__d2b+0x76>
 800a82e:	a802      	add	r0, sp, #8
 800a830:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a834:	f7ff fd8a 	bl	800a34c <__lo0bits>
 800a838:	9900      	ldr	r1, [sp, #0]
 800a83a:	b1f0      	cbz	r0, 800a87a <__d2b+0x72>
 800a83c:	9a01      	ldr	r2, [sp, #4]
 800a83e:	f1c0 0320 	rsb	r3, r0, #32
 800a842:	fa02 f303 	lsl.w	r3, r2, r3
 800a846:	430b      	orrs	r3, r1
 800a848:	40c2      	lsrs	r2, r0
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	9201      	str	r2, [sp, #4]
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	61bb      	str	r3, [r7, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	bf14      	ite	ne
 800a856:	2102      	movne	r1, #2
 800a858:	2101      	moveq	r1, #1
 800a85a:	6139      	str	r1, [r7, #16]
 800a85c:	b1c4      	cbz	r4, 800a890 <__d2b+0x88>
 800a85e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a862:	4404      	add	r4, r0
 800a864:	6034      	str	r4, [r6, #0]
 800a866:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a86a:	6028      	str	r0, [r5, #0]
 800a86c:	4638      	mov	r0, r7
 800a86e:	b003      	add	sp, #12
 800a870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a878:	e7d5      	b.n	800a826 <__d2b+0x1e>
 800a87a:	6179      	str	r1, [r7, #20]
 800a87c:	e7e7      	b.n	800a84e <__d2b+0x46>
 800a87e:	a801      	add	r0, sp, #4
 800a880:	f7ff fd64 	bl	800a34c <__lo0bits>
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	2101      	movs	r1, #1
 800a88a:	6139      	str	r1, [r7, #16]
 800a88c:	3020      	adds	r0, #32
 800a88e:	e7e5      	b.n	800a85c <__d2b+0x54>
 800a890:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a894:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a898:	6030      	str	r0, [r6, #0]
 800a89a:	6918      	ldr	r0, [r3, #16]
 800a89c:	f7ff fd37 	bl	800a30e <__hi0bits>
 800a8a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a8a4:	e7e1      	b.n	800a86a <__d2b+0x62>

0800a8a6 <__ratio>:
 800a8a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8aa:	4688      	mov	r8, r1
 800a8ac:	4669      	mov	r1, sp
 800a8ae:	4681      	mov	r9, r0
 800a8b0:	f7ff ff5c 	bl	800a76c <__b2d>
 800a8b4:	a901      	add	r1, sp, #4
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	ec57 6b10 	vmov	r6, r7, d0
 800a8bc:	f7ff ff56 	bl	800a76c <__b2d>
 800a8c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8c8:	eba3 0c02 	sub.w	ip, r3, r2
 800a8cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8d0:	1a9b      	subs	r3, r3, r2
 800a8d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8d6:	ec5b ab10 	vmov	sl, fp, d0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	bfce      	itee	gt
 800a8de:	463a      	movgt	r2, r7
 800a8e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8e4:	465a      	movle	r2, fp
 800a8e6:	4659      	mov	r1, fp
 800a8e8:	463d      	mov	r5, r7
 800a8ea:	bfd4      	ite	le
 800a8ec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a8f0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	ee10 2a10 	vmov	r2, s0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7f5 ffad 	bl	800085c <__aeabi_ddiv>
 800a902:	ec41 0b10 	vmov	d0, r0, r1
 800a906:	b003      	add	sp, #12
 800a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a90c <__copybits>:
 800a90c:	3901      	subs	r1, #1
 800a90e:	b510      	push	{r4, lr}
 800a910:	1149      	asrs	r1, r1, #5
 800a912:	6914      	ldr	r4, [r2, #16]
 800a914:	3101      	adds	r1, #1
 800a916:	f102 0314 	add.w	r3, r2, #20
 800a91a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a91e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a922:	42a3      	cmp	r3, r4
 800a924:	4602      	mov	r2, r0
 800a926:	d303      	bcc.n	800a930 <__copybits+0x24>
 800a928:	2300      	movs	r3, #0
 800a92a:	428a      	cmp	r2, r1
 800a92c:	d305      	bcc.n	800a93a <__copybits+0x2e>
 800a92e:	bd10      	pop	{r4, pc}
 800a930:	f853 2b04 	ldr.w	r2, [r3], #4
 800a934:	f840 2b04 	str.w	r2, [r0], #4
 800a938:	e7f3      	b.n	800a922 <__copybits+0x16>
 800a93a:	f842 3b04 	str.w	r3, [r2], #4
 800a93e:	e7f4      	b.n	800a92a <__copybits+0x1e>

0800a940 <__any_on>:
 800a940:	f100 0214 	add.w	r2, r0, #20
 800a944:	6900      	ldr	r0, [r0, #16]
 800a946:	114b      	asrs	r3, r1, #5
 800a948:	4298      	cmp	r0, r3
 800a94a:	b510      	push	{r4, lr}
 800a94c:	db11      	blt.n	800a972 <__any_on+0x32>
 800a94e:	dd0a      	ble.n	800a966 <__any_on+0x26>
 800a950:	f011 011f 	ands.w	r1, r1, #31
 800a954:	d007      	beq.n	800a966 <__any_on+0x26>
 800a956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a95a:	fa24 f001 	lsr.w	r0, r4, r1
 800a95e:	fa00 f101 	lsl.w	r1, r0, r1
 800a962:	428c      	cmp	r4, r1
 800a964:	d10b      	bne.n	800a97e <__any_on+0x3e>
 800a966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d803      	bhi.n	800a976 <__any_on+0x36>
 800a96e:	2000      	movs	r0, #0
 800a970:	bd10      	pop	{r4, pc}
 800a972:	4603      	mov	r3, r0
 800a974:	e7f7      	b.n	800a966 <__any_on+0x26>
 800a976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a97a:	2900      	cmp	r1, #0
 800a97c:	d0f5      	beq.n	800a96a <__any_on+0x2a>
 800a97e:	2001      	movs	r0, #1
 800a980:	e7f6      	b.n	800a970 <__any_on+0x30>

0800a982 <_calloc_r>:
 800a982:	b538      	push	{r3, r4, r5, lr}
 800a984:	fb02 f401 	mul.w	r4, r2, r1
 800a988:	4621      	mov	r1, r4
 800a98a:	f000 f857 	bl	800aa3c <_malloc_r>
 800a98e:	4605      	mov	r5, r0
 800a990:	b118      	cbz	r0, 800a99a <_calloc_r+0x18>
 800a992:	4622      	mov	r2, r4
 800a994:	2100      	movs	r1, #0
 800a996:	f7fc fd37 	bl	8007408 <memset>
 800a99a:	4628      	mov	r0, r5
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a9a0 <_free_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	d045      	beq.n	800aa34 <_free_r+0x94>
 800a9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ac:	1f0c      	subs	r4, r1, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	bfb8      	it	lt
 800a9b2:	18e4      	addlt	r4, r4, r3
 800a9b4:	f000 fa36 	bl	800ae24 <__malloc_lock>
 800a9b8:	4a1f      	ldr	r2, [pc, #124]	; (800aa38 <_free_r+0x98>)
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	b933      	cbnz	r3, 800a9ce <_free_r+0x2e>
 800a9c0:	6063      	str	r3, [r4, #4]
 800a9c2:	6014      	str	r4, [r2, #0]
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ca:	f000 ba2c 	b.w	800ae26 <__malloc_unlock>
 800a9ce:	42a3      	cmp	r3, r4
 800a9d0:	d90c      	bls.n	800a9ec <_free_r+0x4c>
 800a9d2:	6821      	ldr	r1, [r4, #0]
 800a9d4:	1862      	adds	r2, r4, r1
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	bf04      	itt	eq
 800a9da:	681a      	ldreq	r2, [r3, #0]
 800a9dc:	685b      	ldreq	r3, [r3, #4]
 800a9de:	6063      	str	r3, [r4, #4]
 800a9e0:	bf04      	itt	eq
 800a9e2:	1852      	addeq	r2, r2, r1
 800a9e4:	6022      	streq	r2, [r4, #0]
 800a9e6:	6004      	str	r4, [r0, #0]
 800a9e8:	e7ec      	b.n	800a9c4 <_free_r+0x24>
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	b10a      	cbz	r2, 800a9f4 <_free_r+0x54>
 800a9f0:	42a2      	cmp	r2, r4
 800a9f2:	d9fa      	bls.n	800a9ea <_free_r+0x4a>
 800a9f4:	6819      	ldr	r1, [r3, #0]
 800a9f6:	1858      	adds	r0, r3, r1
 800a9f8:	42a0      	cmp	r0, r4
 800a9fa:	d10b      	bne.n	800aa14 <_free_r+0x74>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	4401      	add	r1, r0
 800aa00:	1858      	adds	r0, r3, r1
 800aa02:	4282      	cmp	r2, r0
 800aa04:	6019      	str	r1, [r3, #0]
 800aa06:	d1dd      	bne.n	800a9c4 <_free_r+0x24>
 800aa08:	6810      	ldr	r0, [r2, #0]
 800aa0a:	6852      	ldr	r2, [r2, #4]
 800aa0c:	605a      	str	r2, [r3, #4]
 800aa0e:	4401      	add	r1, r0
 800aa10:	6019      	str	r1, [r3, #0]
 800aa12:	e7d7      	b.n	800a9c4 <_free_r+0x24>
 800aa14:	d902      	bls.n	800aa1c <_free_r+0x7c>
 800aa16:	230c      	movs	r3, #12
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	e7d3      	b.n	800a9c4 <_free_r+0x24>
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	1821      	adds	r1, r4, r0
 800aa20:	428a      	cmp	r2, r1
 800aa22:	bf04      	itt	eq
 800aa24:	6811      	ldreq	r1, [r2, #0]
 800aa26:	6852      	ldreq	r2, [r2, #4]
 800aa28:	6062      	str	r2, [r4, #4]
 800aa2a:	bf04      	itt	eq
 800aa2c:	1809      	addeq	r1, r1, r0
 800aa2e:	6021      	streq	r1, [r4, #0]
 800aa30:	605c      	str	r4, [r3, #4]
 800aa32:	e7c7      	b.n	800a9c4 <_free_r+0x24>
 800aa34:	bd38      	pop	{r3, r4, r5, pc}
 800aa36:	bf00      	nop
 800aa38:	200002ec 	.word	0x200002ec

0800aa3c <_malloc_r>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	1ccd      	adds	r5, r1, #3
 800aa40:	f025 0503 	bic.w	r5, r5, #3
 800aa44:	3508      	adds	r5, #8
 800aa46:	2d0c      	cmp	r5, #12
 800aa48:	bf38      	it	cc
 800aa4a:	250c      	movcc	r5, #12
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	4606      	mov	r6, r0
 800aa50:	db01      	blt.n	800aa56 <_malloc_r+0x1a>
 800aa52:	42a9      	cmp	r1, r5
 800aa54:	d903      	bls.n	800aa5e <_malloc_r+0x22>
 800aa56:	230c      	movs	r3, #12
 800aa58:	6033      	str	r3, [r6, #0]
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	bd70      	pop	{r4, r5, r6, pc}
 800aa5e:	f000 f9e1 	bl	800ae24 <__malloc_lock>
 800aa62:	4a21      	ldr	r2, [pc, #132]	; (800aae8 <_malloc_r+0xac>)
 800aa64:	6814      	ldr	r4, [r2, #0]
 800aa66:	4621      	mov	r1, r4
 800aa68:	b991      	cbnz	r1, 800aa90 <_malloc_r+0x54>
 800aa6a:	4c20      	ldr	r4, [pc, #128]	; (800aaec <_malloc_r+0xb0>)
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	b91b      	cbnz	r3, 800aa78 <_malloc_r+0x3c>
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f98f 	bl	800ad94 <_sbrk_r>
 800aa76:	6020      	str	r0, [r4, #0]
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f98a 	bl	800ad94 <_sbrk_r>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d124      	bne.n	800aace <_malloc_r+0x92>
 800aa84:	230c      	movs	r3, #12
 800aa86:	6033      	str	r3, [r6, #0]
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f000 f9cc 	bl	800ae26 <__malloc_unlock>
 800aa8e:	e7e4      	b.n	800aa5a <_malloc_r+0x1e>
 800aa90:	680b      	ldr	r3, [r1, #0]
 800aa92:	1b5b      	subs	r3, r3, r5
 800aa94:	d418      	bmi.n	800aac8 <_malloc_r+0x8c>
 800aa96:	2b0b      	cmp	r3, #11
 800aa98:	d90f      	bls.n	800aaba <_malloc_r+0x7e>
 800aa9a:	600b      	str	r3, [r1, #0]
 800aa9c:	50cd      	str	r5, [r1, r3]
 800aa9e:	18cc      	adds	r4, r1, r3
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f000 f9c0 	bl	800ae26 <__malloc_unlock>
 800aaa6:	f104 000b 	add.w	r0, r4, #11
 800aaaa:	1d23      	adds	r3, r4, #4
 800aaac:	f020 0007 	bic.w	r0, r0, #7
 800aab0:	1ac3      	subs	r3, r0, r3
 800aab2:	d0d3      	beq.n	800aa5c <_malloc_r+0x20>
 800aab4:	425a      	negs	r2, r3
 800aab6:	50e2      	str	r2, [r4, r3]
 800aab8:	e7d0      	b.n	800aa5c <_malloc_r+0x20>
 800aaba:	428c      	cmp	r4, r1
 800aabc:	684b      	ldr	r3, [r1, #4]
 800aabe:	bf16      	itet	ne
 800aac0:	6063      	strne	r3, [r4, #4]
 800aac2:	6013      	streq	r3, [r2, #0]
 800aac4:	460c      	movne	r4, r1
 800aac6:	e7eb      	b.n	800aaa0 <_malloc_r+0x64>
 800aac8:	460c      	mov	r4, r1
 800aaca:	6849      	ldr	r1, [r1, #4]
 800aacc:	e7cc      	b.n	800aa68 <_malloc_r+0x2c>
 800aace:	1cc4      	adds	r4, r0, #3
 800aad0:	f024 0403 	bic.w	r4, r4, #3
 800aad4:	42a0      	cmp	r0, r4
 800aad6:	d005      	beq.n	800aae4 <_malloc_r+0xa8>
 800aad8:	1a21      	subs	r1, r4, r0
 800aada:	4630      	mov	r0, r6
 800aadc:	f000 f95a 	bl	800ad94 <_sbrk_r>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d0cf      	beq.n	800aa84 <_malloc_r+0x48>
 800aae4:	6025      	str	r5, [r4, #0]
 800aae6:	e7db      	b.n	800aaa0 <_malloc_r+0x64>
 800aae8:	200002ec 	.word	0x200002ec
 800aaec:	200002f0 	.word	0x200002f0

0800aaf0 <__ssputs_r>:
 800aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	688e      	ldr	r6, [r1, #8]
 800aaf6:	429e      	cmp	r6, r3
 800aaf8:	4682      	mov	sl, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	4690      	mov	r8, r2
 800aafe:	4699      	mov	r9, r3
 800ab00:	d837      	bhi.n	800ab72 <__ssputs_r+0x82>
 800ab02:	898a      	ldrh	r2, [r1, #12]
 800ab04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab08:	d031      	beq.n	800ab6e <__ssputs_r+0x7e>
 800ab0a:	6825      	ldr	r5, [r4, #0]
 800ab0c:	6909      	ldr	r1, [r1, #16]
 800ab0e:	1a6f      	subs	r7, r5, r1
 800ab10:	6965      	ldr	r5, [r4, #20]
 800ab12:	2302      	movs	r3, #2
 800ab14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab18:	fb95 f5f3 	sdiv	r5, r5, r3
 800ab1c:	f109 0301 	add.w	r3, r9, #1
 800ab20:	443b      	add	r3, r7
 800ab22:	429d      	cmp	r5, r3
 800ab24:	bf38      	it	cc
 800ab26:	461d      	movcc	r5, r3
 800ab28:	0553      	lsls	r3, r2, #21
 800ab2a:	d530      	bpl.n	800ab8e <__ssputs_r+0x9e>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7ff ff85 	bl	800aa3c <_malloc_r>
 800ab32:	4606      	mov	r6, r0
 800ab34:	b950      	cbnz	r0, 800ab4c <__ssputs_r+0x5c>
 800ab36:	230c      	movs	r3, #12
 800ab38:	f8ca 3000 	str.w	r3, [sl]
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295
 800ab48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4c:	463a      	mov	r2, r7
 800ab4e:	6921      	ldr	r1, [r4, #16]
 800ab50:	f7ff fb0e 	bl	800a170 <memcpy>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5e:	81a3      	strh	r3, [r4, #12]
 800ab60:	6126      	str	r6, [r4, #16]
 800ab62:	6165      	str	r5, [r4, #20]
 800ab64:	443e      	add	r6, r7
 800ab66:	1bed      	subs	r5, r5, r7
 800ab68:	6026      	str	r6, [r4, #0]
 800ab6a:	60a5      	str	r5, [r4, #8]
 800ab6c:	464e      	mov	r6, r9
 800ab6e:	454e      	cmp	r6, r9
 800ab70:	d900      	bls.n	800ab74 <__ssputs_r+0x84>
 800ab72:	464e      	mov	r6, r9
 800ab74:	4632      	mov	r2, r6
 800ab76:	4641      	mov	r1, r8
 800ab78:	6820      	ldr	r0, [r4, #0]
 800ab7a:	f000 f93a 	bl	800adf2 <memmove>
 800ab7e:	68a3      	ldr	r3, [r4, #8]
 800ab80:	1b9b      	subs	r3, r3, r6
 800ab82:	60a3      	str	r3, [r4, #8]
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	441e      	add	r6, r3
 800ab88:	6026      	str	r6, [r4, #0]
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e7dc      	b.n	800ab48 <__ssputs_r+0x58>
 800ab8e:	462a      	mov	r2, r5
 800ab90:	f000 f94a 	bl	800ae28 <_realloc_r>
 800ab94:	4606      	mov	r6, r0
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1e2      	bne.n	800ab60 <__ssputs_r+0x70>
 800ab9a:	6921      	ldr	r1, [r4, #16]
 800ab9c:	4650      	mov	r0, sl
 800ab9e:	f7ff feff 	bl	800a9a0 <_free_r>
 800aba2:	e7c8      	b.n	800ab36 <__ssputs_r+0x46>

0800aba4 <_svfiprintf_r>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	461d      	mov	r5, r3
 800abaa:	898b      	ldrh	r3, [r1, #12]
 800abac:	061f      	lsls	r7, r3, #24
 800abae:	b09d      	sub	sp, #116	; 0x74
 800abb0:	4680      	mov	r8, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	4616      	mov	r6, r2
 800abb6:	d50f      	bpl.n	800abd8 <_svfiprintf_r+0x34>
 800abb8:	690b      	ldr	r3, [r1, #16]
 800abba:	b96b      	cbnz	r3, 800abd8 <_svfiprintf_r+0x34>
 800abbc:	2140      	movs	r1, #64	; 0x40
 800abbe:	f7ff ff3d 	bl	800aa3c <_malloc_r>
 800abc2:	6020      	str	r0, [r4, #0]
 800abc4:	6120      	str	r0, [r4, #16]
 800abc6:	b928      	cbnz	r0, 800abd4 <_svfiprintf_r+0x30>
 800abc8:	230c      	movs	r3, #12
 800abca:	f8c8 3000 	str.w	r3, [r8]
 800abce:	f04f 30ff 	mov.w	r0, #4294967295
 800abd2:	e0c8      	b.n	800ad66 <_svfiprintf_r+0x1c2>
 800abd4:	2340      	movs	r3, #64	; 0x40
 800abd6:	6163      	str	r3, [r4, #20]
 800abd8:	2300      	movs	r3, #0
 800abda:	9309      	str	r3, [sp, #36]	; 0x24
 800abdc:	2320      	movs	r3, #32
 800abde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abe2:	2330      	movs	r3, #48	; 0x30
 800abe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abe8:	9503      	str	r5, [sp, #12]
 800abea:	f04f 0b01 	mov.w	fp, #1
 800abee:	4637      	mov	r7, r6
 800abf0:	463d      	mov	r5, r7
 800abf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800abf6:	b10b      	cbz	r3, 800abfc <_svfiprintf_r+0x58>
 800abf8:	2b25      	cmp	r3, #37	; 0x25
 800abfa:	d13e      	bne.n	800ac7a <_svfiprintf_r+0xd6>
 800abfc:	ebb7 0a06 	subs.w	sl, r7, r6
 800ac00:	d00b      	beq.n	800ac1a <_svfiprintf_r+0x76>
 800ac02:	4653      	mov	r3, sl
 800ac04:	4632      	mov	r2, r6
 800ac06:	4621      	mov	r1, r4
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f7ff ff71 	bl	800aaf0 <__ssputs_r>
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f000 80a4 	beq.w	800ad5c <_svfiprintf_r+0x1b8>
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	4453      	add	r3, sl
 800ac18:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1a:	783b      	ldrb	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 809d 	beq.w	800ad5c <_svfiprintf_r+0x1b8>
 800ac22:	2300      	movs	r3, #0
 800ac24:	f04f 32ff 	mov.w	r2, #4294967295
 800ac28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	9307      	str	r3, [sp, #28]
 800ac30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac34:	931a      	str	r3, [sp, #104]	; 0x68
 800ac36:	462f      	mov	r7, r5
 800ac38:	2205      	movs	r2, #5
 800ac3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ac3e:	4850      	ldr	r0, [pc, #320]	; (800ad80 <_svfiprintf_r+0x1dc>)
 800ac40:	f7f5 fad6 	bl	80001f0 <memchr>
 800ac44:	9b04      	ldr	r3, [sp, #16]
 800ac46:	b9d0      	cbnz	r0, 800ac7e <_svfiprintf_r+0xda>
 800ac48:	06d9      	lsls	r1, r3, #27
 800ac4a:	bf44      	itt	mi
 800ac4c:	2220      	movmi	r2, #32
 800ac4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac52:	071a      	lsls	r2, r3, #28
 800ac54:	bf44      	itt	mi
 800ac56:	222b      	movmi	r2, #43	; 0x2b
 800ac58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac5c:	782a      	ldrb	r2, [r5, #0]
 800ac5e:	2a2a      	cmp	r2, #42	; 0x2a
 800ac60:	d015      	beq.n	800ac8e <_svfiprintf_r+0xea>
 800ac62:	9a07      	ldr	r2, [sp, #28]
 800ac64:	462f      	mov	r7, r5
 800ac66:	2000      	movs	r0, #0
 800ac68:	250a      	movs	r5, #10
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac70:	3b30      	subs	r3, #48	; 0x30
 800ac72:	2b09      	cmp	r3, #9
 800ac74:	d94d      	bls.n	800ad12 <_svfiprintf_r+0x16e>
 800ac76:	b1b8      	cbz	r0, 800aca8 <_svfiprintf_r+0x104>
 800ac78:	e00f      	b.n	800ac9a <_svfiprintf_r+0xf6>
 800ac7a:	462f      	mov	r7, r5
 800ac7c:	e7b8      	b.n	800abf0 <_svfiprintf_r+0x4c>
 800ac7e:	4a40      	ldr	r2, [pc, #256]	; (800ad80 <_svfiprintf_r+0x1dc>)
 800ac80:	1a80      	subs	r0, r0, r2
 800ac82:	fa0b f000 	lsl.w	r0, fp, r0
 800ac86:	4318      	orrs	r0, r3
 800ac88:	9004      	str	r0, [sp, #16]
 800ac8a:	463d      	mov	r5, r7
 800ac8c:	e7d3      	b.n	800ac36 <_svfiprintf_r+0x92>
 800ac8e:	9a03      	ldr	r2, [sp, #12]
 800ac90:	1d11      	adds	r1, r2, #4
 800ac92:	6812      	ldr	r2, [r2, #0]
 800ac94:	9103      	str	r1, [sp, #12]
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	db01      	blt.n	800ac9e <_svfiprintf_r+0xfa>
 800ac9a:	9207      	str	r2, [sp, #28]
 800ac9c:	e004      	b.n	800aca8 <_svfiprintf_r+0x104>
 800ac9e:	4252      	negs	r2, r2
 800aca0:	f043 0302 	orr.w	r3, r3, #2
 800aca4:	9207      	str	r2, [sp, #28]
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	783b      	ldrb	r3, [r7, #0]
 800acaa:	2b2e      	cmp	r3, #46	; 0x2e
 800acac:	d10c      	bne.n	800acc8 <_svfiprintf_r+0x124>
 800acae:	787b      	ldrb	r3, [r7, #1]
 800acb0:	2b2a      	cmp	r3, #42	; 0x2a
 800acb2:	d133      	bne.n	800ad1c <_svfiprintf_r+0x178>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	1d1a      	adds	r2, r3, #4
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	9203      	str	r2, [sp, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfb8      	it	lt
 800acc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800acc4:	3702      	adds	r7, #2
 800acc6:	9305      	str	r3, [sp, #20]
 800acc8:	4d2e      	ldr	r5, [pc, #184]	; (800ad84 <_svfiprintf_r+0x1e0>)
 800acca:	7839      	ldrb	r1, [r7, #0]
 800accc:	2203      	movs	r2, #3
 800acce:	4628      	mov	r0, r5
 800acd0:	f7f5 fa8e 	bl	80001f0 <memchr>
 800acd4:	b138      	cbz	r0, 800ace6 <_svfiprintf_r+0x142>
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	1b40      	subs	r0, r0, r5
 800acda:	fa03 f000 	lsl.w	r0, r3, r0
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	4303      	orrs	r3, r0
 800ace2:	3701      	adds	r7, #1
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	7839      	ldrb	r1, [r7, #0]
 800ace8:	4827      	ldr	r0, [pc, #156]	; (800ad88 <_svfiprintf_r+0x1e4>)
 800acea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acee:	2206      	movs	r2, #6
 800acf0:	1c7e      	adds	r6, r7, #1
 800acf2:	f7f5 fa7d 	bl	80001f0 <memchr>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d038      	beq.n	800ad6c <_svfiprintf_r+0x1c8>
 800acfa:	4b24      	ldr	r3, [pc, #144]	; (800ad8c <_svfiprintf_r+0x1e8>)
 800acfc:	bb13      	cbnz	r3, 800ad44 <_svfiprintf_r+0x1a0>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	3307      	adds	r3, #7
 800ad02:	f023 0307 	bic.w	r3, r3, #7
 800ad06:	3308      	adds	r3, #8
 800ad08:	9303      	str	r3, [sp, #12]
 800ad0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad0c:	444b      	add	r3, r9
 800ad0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad10:	e76d      	b.n	800abee <_svfiprintf_r+0x4a>
 800ad12:	fb05 3202 	mla	r2, r5, r2, r3
 800ad16:	2001      	movs	r0, #1
 800ad18:	460f      	mov	r7, r1
 800ad1a:	e7a6      	b.n	800ac6a <_svfiprintf_r+0xc6>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	3701      	adds	r7, #1
 800ad20:	9305      	str	r3, [sp, #20]
 800ad22:	4619      	mov	r1, r3
 800ad24:	250a      	movs	r5, #10
 800ad26:	4638      	mov	r0, r7
 800ad28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad2c:	3a30      	subs	r2, #48	; 0x30
 800ad2e:	2a09      	cmp	r2, #9
 800ad30:	d903      	bls.n	800ad3a <_svfiprintf_r+0x196>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0c8      	beq.n	800acc8 <_svfiprintf_r+0x124>
 800ad36:	9105      	str	r1, [sp, #20]
 800ad38:	e7c6      	b.n	800acc8 <_svfiprintf_r+0x124>
 800ad3a:	fb05 2101 	mla	r1, r5, r1, r2
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4607      	mov	r7, r0
 800ad42:	e7f0      	b.n	800ad26 <_svfiprintf_r+0x182>
 800ad44:	ab03      	add	r3, sp, #12
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	4622      	mov	r2, r4
 800ad4a:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <_svfiprintf_r+0x1ec>)
 800ad4c:	a904      	add	r1, sp, #16
 800ad4e:	4640      	mov	r0, r8
 800ad50:	f7fc fbf6 	bl	8007540 <_printf_float>
 800ad54:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ad58:	4681      	mov	r9, r0
 800ad5a:	d1d6      	bne.n	800ad0a <_svfiprintf_r+0x166>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	065b      	lsls	r3, r3, #25
 800ad60:	f53f af35 	bmi.w	800abce <_svfiprintf_r+0x2a>
 800ad64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad66:	b01d      	add	sp, #116	; 0x74
 800ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6c:	ab03      	add	r3, sp, #12
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	4622      	mov	r2, r4
 800ad72:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <_svfiprintf_r+0x1ec>)
 800ad74:	a904      	add	r1, sp, #16
 800ad76:	4640      	mov	r0, r8
 800ad78:	f7fc fe98 	bl	8007aac <_printf_i>
 800ad7c:	e7ea      	b.n	800ad54 <_svfiprintf_r+0x1b0>
 800ad7e:	bf00      	nop
 800ad80:	0800b1f4 	.word	0x0800b1f4
 800ad84:	0800b1fa 	.word	0x0800b1fa
 800ad88:	0800b1fe 	.word	0x0800b1fe
 800ad8c:	08007541 	.word	0x08007541
 800ad90:	0800aaf1 	.word	0x0800aaf1

0800ad94 <_sbrk_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4c06      	ldr	r4, [pc, #24]	; (800adb0 <_sbrk_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	f7f7 ffec 	bl	8002d7c <_sbrk>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_sbrk_r+0x1a>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	b103      	cbz	r3, 800adae <_sbrk_r+0x1a>
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	200004a0 	.word	0x200004a0

0800adb4 <strncmp>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	b16a      	cbz	r2, 800add4 <strncmp+0x20>
 800adb8:	3901      	subs	r1, #1
 800adba:	1884      	adds	r4, r0, r2
 800adbc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800adc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d103      	bne.n	800add0 <strncmp+0x1c>
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d001      	beq.n	800add0 <strncmp+0x1c>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1f5      	bne.n	800adbc <strncmp+0x8>
 800add0:	1a98      	subs	r0, r3, r2
 800add2:	bd10      	pop	{r4, pc}
 800add4:	4610      	mov	r0, r2
 800add6:	e7fc      	b.n	800add2 <strncmp+0x1e>

0800add8 <__ascii_wctomb>:
 800add8:	b149      	cbz	r1, 800adee <__ascii_wctomb+0x16>
 800adda:	2aff      	cmp	r2, #255	; 0xff
 800addc:	bf85      	ittet	hi
 800adde:	238a      	movhi	r3, #138	; 0x8a
 800ade0:	6003      	strhi	r3, [r0, #0]
 800ade2:	700a      	strbls	r2, [r1, #0]
 800ade4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ade8:	bf98      	it	ls
 800adea:	2001      	movls	r0, #1
 800adec:	4770      	bx	lr
 800adee:	4608      	mov	r0, r1
 800adf0:	4770      	bx	lr

0800adf2 <memmove>:
 800adf2:	4288      	cmp	r0, r1
 800adf4:	b510      	push	{r4, lr}
 800adf6:	eb01 0302 	add.w	r3, r1, r2
 800adfa:	d807      	bhi.n	800ae0c <memmove+0x1a>
 800adfc:	1e42      	subs	r2, r0, #1
 800adfe:	4299      	cmp	r1, r3
 800ae00:	d00a      	beq.n	800ae18 <memmove+0x26>
 800ae02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae06:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae0a:	e7f8      	b.n	800adfe <memmove+0xc>
 800ae0c:	4283      	cmp	r3, r0
 800ae0e:	d9f5      	bls.n	800adfc <memmove+0xa>
 800ae10:	1881      	adds	r1, r0, r2
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	42d3      	cmn	r3, r2
 800ae16:	d100      	bne.n	800ae1a <memmove+0x28>
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ae22:	e7f7      	b.n	800ae14 <memmove+0x22>

0800ae24 <__malloc_lock>:
 800ae24:	4770      	bx	lr

0800ae26 <__malloc_unlock>:
 800ae26:	4770      	bx	lr

0800ae28 <_realloc_r>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	4614      	mov	r4, r2
 800ae2e:	460e      	mov	r6, r1
 800ae30:	b921      	cbnz	r1, 800ae3c <_realloc_r+0x14>
 800ae32:	4611      	mov	r1, r2
 800ae34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae38:	f7ff be00 	b.w	800aa3c <_malloc_r>
 800ae3c:	b922      	cbnz	r2, 800ae48 <_realloc_r+0x20>
 800ae3e:	f7ff fdaf 	bl	800a9a0 <_free_r>
 800ae42:	4625      	mov	r5, r4
 800ae44:	4628      	mov	r0, r5
 800ae46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae48:	f000 f814 	bl	800ae74 <_malloc_usable_size_r>
 800ae4c:	42a0      	cmp	r0, r4
 800ae4e:	d20f      	bcs.n	800ae70 <_realloc_r+0x48>
 800ae50:	4621      	mov	r1, r4
 800ae52:	4638      	mov	r0, r7
 800ae54:	f7ff fdf2 	bl	800aa3c <_malloc_r>
 800ae58:	4605      	mov	r5, r0
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d0f2      	beq.n	800ae44 <_realloc_r+0x1c>
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4622      	mov	r2, r4
 800ae62:	f7ff f985 	bl	800a170 <memcpy>
 800ae66:	4631      	mov	r1, r6
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f7ff fd99 	bl	800a9a0 <_free_r>
 800ae6e:	e7e9      	b.n	800ae44 <_realloc_r+0x1c>
 800ae70:	4635      	mov	r5, r6
 800ae72:	e7e7      	b.n	800ae44 <_realloc_r+0x1c>

0800ae74 <_malloc_usable_size_r>:
 800ae74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae78:	1f18      	subs	r0, r3, #4
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	bfbc      	itt	lt
 800ae7e:	580b      	ldrlt	r3, [r1, r0]
 800ae80:	18c0      	addlt	r0, r0, r3
 800ae82:	4770      	bx	lr

0800ae84 <_init>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr

0800ae90 <_fini>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	bf00      	nop
 800ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae96:	bc08      	pop	{r3}
 800ae98:	469e      	mov	lr, r3
 800ae9a:	4770      	bx	lr
