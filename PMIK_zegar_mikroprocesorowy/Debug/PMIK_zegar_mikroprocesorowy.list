
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f2c  08006f2c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f34  08006f34  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200000ec  08007028  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08007028  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015146  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000319f  00000000  00000000  00035262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  00038408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  000393d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000191f9  00000000  00000000  0003a218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bcc  00000000  00000000  00053411  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009294a  00000000  00000000  00063fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  000f69a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d78 	.word	0x08006d78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08006d78 	.word	0x08006d78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <MX_ADC1_Init+0x98>)
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <MX_ADC1_Init+0x9c>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_ADC1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <MX_ADC1_Init+0x98>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_ADC1_Init+0x98>)
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <MX_ADC1_Init+0xa0>)
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_ADC1_Init+0x98>)
 80005dc:	2201      	movs	r2, #1
 80005de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <MX_ADC1_Init+0x98>)
 80005f0:	f001 fe38 	bl	8002264 <HAL_ADC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f001 f821 	bl	8001640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80005fe:	2311      	movs	r3, #17
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000606:	2307      	movs	r3, #7
 8000608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_ADC1_Init+0x98>)
 8000610:	f001 ffca 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800061a:	f001 f811 	bl	8001640 <Error_Handler>
  }

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000118 	.word	0x20000118
 800062c:	40012000 	.word	0x40012000
 8000630:	0f000001 	.word	0x0f000001

08000634 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_ADC_MspInit+0x48>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d115      	bne.n	8000672 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_ADC_MspInit+0x4c>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_ADC_MspInit+0x4c>)
 8000650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000654:	6453      	str	r3, [r2, #68]	; 0x44
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_ADC_MspInit+0x4c>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2012      	movs	r0, #18
 8000668:	f002 faa1 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800066c:	2012      	movs	r0, #18
 800066e:	f002 faba 	bl	8002be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40012000 	.word	0x40012000
 8000680:	40023800 	.word	0x40023800

08000684 <rtc_set_time>:
/*	alarm	*/

uint8_t uart_rx_data;

void rtc_set_time ()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	get_Time();
 800068a:	f001 fc63 	bl	8001f54 <get_Time>

	uint8_t hour = time.hour;
 800068e:	4b61      	ldr	r3, [pc, #388]	; (8000814 <rtc_set_time+0x190>)
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	77fb      	strb	r3, [r7, #31]
	uint8_t min = time.minutes;
 8000694:	4b5f      	ldr	r3, [pc, #380]	; (8000814 <rtc_set_time+0x190>)
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	77bb      	strb	r3, [r7, #30]
	uint8_t sec = time.seconds;
 800069a:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <rtc_set_time+0x190>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	777b      	strb	r3, [r7, #29]

	uint8_t day = time.dayofmonth;
 80006a0:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <rtc_set_time+0x190>)
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	773b      	strb	r3, [r7, #28]
	uint8_t year = time.year;
 80006a6:	4b5b      	ldr	r3, [pc, #364]	; (8000814 <rtc_set_time+0x190>)
 80006a8:	799b      	ldrb	r3, [r3, #6]
 80006aa:	76fb      	strb	r3, [r7, #27]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 80006ac:	7ffb      	ldrb	r3, [r7, #31]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fbc2 	bl	8001e38 <decToBcd>
 80006b4:	4603      	mov	r3, r0
 80006b6:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = decToBcd(min);
 80006b8:	7fbb      	ldrb	r3, [r7, #30]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fbbc 	bl	8001e38 <decToBcd>
 80006c0:	4603      	mov	r3, r0
 80006c2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = decToBcd(sec);
 80006c4:	7f7b      	ldrb	r3, [r7, #29]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fbb6 	bl	8001e38 <decToBcd>
 80006cc:	4603      	mov	r3, r0
 80006ce:	71bb      	strb	r3, [r7, #6]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	484e      	ldr	r0, [pc, #312]	; (8000818 <rtc_set_time+0x194>)
 80006e0:	f004 fbb9 	bl	8004e56 <HAL_RTC_SetTime>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <rtc_set_time+0x6a>
	{
	  Error_Handler();
 80006ea:	f000 ffa9 	bl	8001640 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <rtc_set_time+0x190>)
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	2b06      	cmp	r3, #6
 80006f6:	d826      	bhi.n	8000746 <rtc_set_time+0xc2>
 80006f8:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <rtc_set_time+0x7c>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800071d 	.word	0x0800071d
 8000704:	08000723 	.word	0x08000723
 8000708:	08000729 	.word	0x08000729
 800070c:	0800072f 	.word	0x0800072f
 8000710:	08000735 	.word	0x08000735
 8000714:	0800073b 	.word	0x0800073b
 8000718:	08000741 	.word	0x08000741

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800071c:	2301      	movs	r3, #1
 800071e:	703b      	strb	r3, [r7, #0]
		break;
 8000720:	e011      	b.n	8000746 <rtc_set_time+0xc2>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000722:	2302      	movs	r3, #2
 8000724:	703b      	strb	r3, [r7, #0]
		break;
 8000726:	e00e      	b.n	8000746 <rtc_set_time+0xc2>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000728:	2303      	movs	r3, #3
 800072a:	703b      	strb	r3, [r7, #0]
		break;
 800072c:	e00b      	b.n	8000746 <rtc_set_time+0xc2>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800072e:	2304      	movs	r3, #4
 8000730:	703b      	strb	r3, [r7, #0]
		break;
 8000732:	e008      	b.n	8000746 <rtc_set_time+0xc2>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000734:	2305      	movs	r3, #5
 8000736:	703b      	strb	r3, [r7, #0]
		break;
 8000738:	e005      	b.n	8000746 <rtc_set_time+0xc2>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800073a:	2306      	movs	r3, #6
 800073c:	703b      	strb	r3, [r7, #0]
		break;
 800073e:	e002      	b.n	8000746 <rtc_set_time+0xc2>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000740:	2307      	movs	r3, #7
 8000742:	703b      	strb	r3, [r7, #0]
		break;
 8000744:	bf00      	nop

	}


	switch( (int) time.month) {
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <rtc_set_time+0x190>)
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	3b01      	subs	r3, #1
 800074c:	2b0b      	cmp	r3, #11
 800074e:	d83f      	bhi.n	80007d0 <rtc_set_time+0x14c>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <rtc_set_time+0xd4>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000789 	.word	0x08000789
 800075c:	0800078f 	.word	0x0800078f
 8000760:	08000795 	.word	0x08000795
 8000764:	0800079b 	.word	0x0800079b
 8000768:	080007a1 	.word	0x080007a1
 800076c:	080007a7 	.word	0x080007a7
 8000770:	080007ad 	.word	0x080007ad
 8000774:	080007b3 	.word	0x080007b3
 8000778:	080007b9 	.word	0x080007b9
 800077c:	080007bf 	.word	0x080007bf
 8000780:	080007c5 	.word	0x080007c5
 8000784:	080007cb 	.word	0x080007cb

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 8000788:	2301      	movs	r3, #1
 800078a:	707b      	strb	r3, [r7, #1]
		  break;
 800078c:	e020      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 800078e:	2302      	movs	r3, #2
 8000790:	707b      	strb	r3, [r7, #1]
		  break;
 8000792:	e01d      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 8000794:	2303      	movs	r3, #3
 8000796:	707b      	strb	r3, [r7, #1]
		  break;
 8000798:	e01a      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 800079a:	2304      	movs	r3, #4
 800079c:	707b      	strb	r3, [r7, #1]
		  break;
 800079e:	e017      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 80007a0:	2305      	movs	r3, #5
 80007a2:	707b      	strb	r3, [r7, #1]
		  break;
 80007a4:	e014      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80007a6:	2306      	movs	r3, #6
 80007a8:	707b      	strb	r3, [r7, #1]
		  break;
 80007aa:	e011      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80007ac:	2307      	movs	r3, #7
 80007ae:	707b      	strb	r3, [r7, #1]
		  break;
 80007b0:	e00e      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80007b2:	2308      	movs	r3, #8
 80007b4:	707b      	strb	r3, [r7, #1]
		  break;
 80007b6:	e00b      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 80007b8:	2309      	movs	r3, #9
 80007ba:	707b      	strb	r3, [r7, #1]
		  break;
 80007bc:	e008      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 80007be:	2310      	movs	r3, #16
 80007c0:	707b      	strb	r3, [r7, #1]
		  break;
 80007c2:	e005      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 80007c4:	2311      	movs	r3, #17
 80007c6:	707b      	strb	r3, [r7, #1]
		  break;
 80007c8:	e002      	b.n	80007d0 <rtc_set_time+0x14c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 80007ca:	2312      	movs	r3, #18
 80007cc:	707b      	strb	r3, [r7, #1]
		  break;
 80007ce:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 80007d0:	7f3b      	ldrb	r3, [r7, #28]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fb30 	bl	8001e38 <decToBcd>
 80007d8:	4603      	mov	r3, r0
 80007da:	70bb      	strb	r3, [r7, #2]
	sDate.Year = decToBcd(year);
 80007dc:	7efb      	ldrb	r3, [r7, #27]
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fb2a 	bl	8001e38 <decToBcd>
 80007e4:	4603      	mov	r3, r0
 80007e6:	70fb      	strb	r3, [r7, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <rtc_set_time+0x194>)
 80007f0:	f004 fbee 	bl	8004fd0 <HAL_RTC_SetDate>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <rtc_set_time+0x17a>
	{
		Error_Handler();
 80007fa:	f000 ff21 	bl	8001640 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80007fe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000802:	2101      	movs	r1, #1
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <rtc_set_time+0x194>)
 8000806:	f004 ffc1 	bl	800578c <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000174 	.word	0x20000174
 8000818:	20000238 	.word	0x20000238

0800081c <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość godzin, minut, sekund oraz dni, pozostałych do włączenia alarmu
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08f      	sub	sp, #60	; 0x3c
 8000820:	af00      	add	r7, sp, #0
 8000822:	4604      	mov	r4, r0
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4623      	mov	r3, r4
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	4603      	mov	r3, r0
 8000830:	71bb      	strb	r3, [r7, #6]
 8000832:	460b      	mov	r3, r1
 8000834:	717b      	strb	r3, [r7, #5]
 8000836:	4613      	mov	r3, r2
 8000838:	713b      	strb	r3, [r7, #4]
	get_Time();
 800083a:	f001 fb8b 	bl	8001f54 <get_Time>

	temp_sec = time.seconds + sec;
 800083e:	4b74      	ldr	r3, [pc, #464]	; (8000a10 <rtc_set_alarm+0x1f4>)
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	793b      	ldrb	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b72      	ldr	r3, [pc, #456]	; (8000a14 <rtc_set_alarm+0x1f8>)
 800084a:	701a      	strb	r2, [r3, #0]
	temp_mins = time.minutes + min;
 800084c:	4b70      	ldr	r3, [pc, #448]	; (8000a10 <rtc_set_alarm+0x1f4>)
 800084e:	785a      	ldrb	r2, [r3, #1]
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	4413      	add	r3, r2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b70      	ldr	r3, [pc, #448]	; (8000a18 <rtc_set_alarm+0x1fc>)
 8000858:	701a      	strb	r2, [r3, #0]
	temp_hours = time.hour + hour;
 800085a:	4b6d      	ldr	r3, [pc, #436]	; (8000a10 <rtc_set_alarm+0x1f4>)
 800085c:	789a      	ldrb	r2, [r3, #2]
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	4413      	add	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <rtc_set_alarm+0x200>)
 8000866:	701a      	strb	r2, [r3, #0]
	temp_days = time.dayofmonth + day;
 8000868:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <rtc_set_alarm+0x1f4>)
 800086a:	791a      	ldrb	r2, [r3, #4]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4413      	add	r3, r2
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <rtc_set_alarm+0x204>)
 8000874:	701a      	strb	r2, [r3, #0]

	if(temp_sec > 59) {
 8000876:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <rtc_set_alarm+0x1f8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b3b      	cmp	r3, #59	; 0x3b
 800087c:	d970      	bls.n	8000960 <rtc_set_alarm+0x144>

		add_sec = temp_sec % 60;
 800087e:	4b65      	ldr	r3, [pc, #404]	; (8000a14 <rtc_set_alarm+0x1f8>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <rtc_set_alarm+0x208>)
 8000884:	fba3 1302 	umull	r1, r3, r3, r2
 8000888:	0959      	lsrs	r1, r3, #5
 800088a:	460b      	mov	r3, r1
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	1a5b      	subs	r3, r3, r1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b64      	ldr	r3, [pc, #400]	; (8000a28 <rtc_set_alarm+0x20c>)
 8000898:	701a      	strb	r2, [r3, #0]
		add_mins = temp_sec / 60;
 800089a:	4b5e      	ldr	r3, [pc, #376]	; (8000a14 <rtc_set_alarm+0x1f8>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4a61      	ldr	r2, [pc, #388]	; (8000a24 <rtc_set_alarm+0x208>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <rtc_set_alarm+0x210>)
 80008aa:	701a      	strb	r2, [r3, #0]

		temp_sec = add_sec;
 80008ac:	4b5e      	ldr	r3, [pc, #376]	; (8000a28 <rtc_set_alarm+0x20c>)
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <rtc_set_alarm+0x1f8>)
 80008b2:	701a      	strb	r2, [r3, #0]
		temp_mins += add_mins;
 80008b4:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <rtc_set_alarm+0x1fc>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <rtc_set_alarm+0x210>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <rtc_set_alarm+0x1fc>)
 80008c2:	701a      	strb	r2, [r3, #0]

		if(temp_mins > 59) {
 80008c4:	4b54      	ldr	r3, [pc, #336]	; (8000a18 <rtc_set_alarm+0x1fc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b3b      	cmp	r3, #59	; 0x3b
 80008ca:	d949      	bls.n	8000960 <rtc_set_alarm+0x144>

			add_mins = temp_mins % 60;
 80008cc:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <rtc_set_alarm+0x1fc>)
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <rtc_set_alarm+0x208>)
 80008d2:	fba3 1302 	umull	r1, r3, r3, r2
 80008d6:	0959      	lsrs	r1, r3, #5
 80008d8:	460b      	mov	r3, r1
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	1a5b      	subs	r3, r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b51      	ldr	r3, [pc, #324]	; (8000a2c <rtc_set_alarm+0x210>)
 80008e6:	701a      	strb	r2, [r3, #0]
			add_hours = temp_mins / 60;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <rtc_set_alarm+0x1fc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4a4d      	ldr	r2, [pc, #308]	; (8000a24 <rtc_set_alarm+0x208>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b4e      	ldr	r3, [pc, #312]	; (8000a30 <rtc_set_alarm+0x214>)
 80008f8:	701a      	strb	r2, [r3, #0]

			temp_mins = add_mins;
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <rtc_set_alarm+0x210>)
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <rtc_set_alarm+0x1fc>)
 8000900:	701a      	strb	r2, [r3, #0]
			temp_hours += add_hours;
 8000902:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <rtc_set_alarm+0x200>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b4a      	ldr	r3, [pc, #296]	; (8000a30 <rtc_set_alarm+0x214>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <rtc_set_alarm+0x200>)
 8000910:	701a      	strb	r2, [r3, #0]

			if(temp_hours > 23) {
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <rtc_set_alarm+0x200>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b17      	cmp	r3, #23
 8000918:	d922      	bls.n	8000960 <rtc_set_alarm+0x144>

				add_hours = temp_hours % 24;
 800091a:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <rtc_set_alarm+0x200>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <rtc_set_alarm+0x218>)
 8000920:	fba3 1302 	umull	r1, r3, r3, r2
 8000924:	0919      	lsrs	r1, r3, #4
 8000926:	460b      	mov	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	440b      	add	r3, r1
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <rtc_set_alarm+0x214>)
 8000934:	701a      	strb	r2, [r3, #0]
				add_days = temp_hours / 24;
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <rtc_set_alarm+0x200>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4a3e      	ldr	r2, [pc, #248]	; (8000a34 <rtc_set_alarm+0x218>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <rtc_set_alarm+0x21c>)
 8000946:	701a      	strb	r2, [r3, #0]

				temp_hours = add_hours;
 8000948:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <rtc_set_alarm+0x214>)
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <rtc_set_alarm+0x200>)
 800094e:	701a      	strb	r2, [r3, #0]
				temp_days += add_days;
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <rtc_set_alarm+0x204>)
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <rtc_set_alarm+0x21c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4413      	add	r3, r2
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <rtc_set_alarm+0x204>)
 800095e:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	uint8_t alarm_day = temp_days;
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <rtc_set_alarm+0x204>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t alarm_hour = temp_hours;
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <rtc_set_alarm+0x200>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarm_min = temp_mins;
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <rtc_set_alarm+0x1fc>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// włączamy alarm 2 sekundy wcześniej niż zaplanowany, ponieważ transmisja uartem trwa 2s
	uint8_t alarm_sec = temp_sec - 2;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <rtc_set_alarm+0x1f8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3b02      	subs	r3, #2
 800097e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
	sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 8000982:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fa56 	bl	8001e38 <decToBcd>
 800098c:	4603      	mov	r3, r0
 800098e:	733b      	strb	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 8000990:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fa4f 	bl	8001e38 <decToBcd>
 800099a:	4603      	mov	r3, r0
 800099c:	737b      	strb	r3, [r7, #13]
	sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 800099e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fa48 	bl	8001e38 <decToBcd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	73bb      	strb	r3, [r7, #14]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80009c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fa35 	bl	8001e38 <decToBcd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 80009d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2201      	movs	r2, #1
 80009e0:	4619      	mov	r1, r3
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <rtc_set_alarm+0x220>)
 80009e4:	f004 fb9c 	bl	8005120 <HAL_RTC_SetAlarm_IT>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <rtc_set_alarm+0x1d6>
	{
		Error_Handler();
 80009ee:	f000 fe27 	bl	8001640 <Error_Handler>
	}

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_set_msg, strlen(alarm_set_msg));
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <rtc_set_alarm+0x224>)
 80009f4:	f7ff fbf4 	bl	80001e0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	4910      	ldr	r1, [pc, #64]	; (8000a40 <rtc_set_alarm+0x224>)
 8000a00:	4810      	ldr	r0, [pc, #64]	; (8000a44 <rtc_set_alarm+0x228>)
 8000a02:	f004 ff34 	bl	800586e <HAL_UART_Transmit_IT>

  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 8000a06:	bf00      	nop
 8000a08:	373c      	adds	r7, #60	; 0x3c
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000174 	.word	0x20000174
 8000a14:	2000016a 	.word	0x2000016a
 8000a18:	20000171 	.word	0x20000171
 8000a1c:	2000017b 	.word	0x2000017b
 8000a20:	20000170 	.word	0x20000170
 8000a24:	88888889 	.word	0x88888889
 8000a28:	2000016d 	.word	0x2000016d
 8000a2c:	2000016e 	.word	0x2000016e
 8000a30:	2000017d 	.word	0x2000017d
 8000a34:	aaaaaaab 	.word	0xaaaaaaab
 8000a38:	2000017e 	.word	0x2000017e
 8000a3c:	20000238 	.word	0x20000238
 8000a40:	20000028 	.word	0x20000028
 8000a44:	20000258 	.word	0x20000258

08000a48 <activate_time>:

// Funkcja sygnalizująca, że użytkownik ustawia nową godzinę na zegarku
void activate_time () {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

	if(uart_rx_data == 't') {
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <activate_time+0x64>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b74      	cmp	r3, #116	; 0x74
 8000a52:	d10b      	bne.n	8000a6c <activate_time+0x24>

		date_activated_flag = 0;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <activate_time+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <activate_time+0x6c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <activate_time+0x70>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
		time_activated_flag = 1;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <activate_time+0x74>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
	}

	if(time_activated_flag) {
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <activate_time+0x74>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d013      	beq.n	8000a9c <activate_time+0x54>

		global_buffer[global_counter] = uart_rx_data;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <activate_time+0x70>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <activate_time+0x64>)
 8000a7c:	7819      	ldrb	r1, [r3, #0]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <activate_time+0x78>)
 8000a80:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <activate_time+0x70>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <activate_time+0x70>)
 8000a8c:	701a      	strb	r2, [r3, #0]

		if(global_counter == 3) {
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <activate_time+0x70>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d102      	bne.n	8000a9c <activate_time+0x54>
			time_set_flag = 1;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <activate_time+0x7c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4903      	ldr	r1, [pc, #12]	; (8000aac <activate_time+0x64>)
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <activate_time+0x80>)
 8000aa2:	f004 ff29 	bl	80058f8 <HAL_UART_Receive_IT>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000017f 	.word	0x2000017f
 8000ab0:	20000161 	.word	0x20000161
 8000ab4:	20000160 	.word	0x20000160
 8000ab8:	20000108 	.word	0x20000108
 8000abc:	20000169 	.word	0x20000169
 8000ac0:	20000164 	.word	0x20000164
 8000ac4:	2000016c 	.word	0x2000016c
 8000ac8:	20000258 	.word	0x20000258

08000acc <activate_date>:

// Funkcja sygnalizująca, że użytkownik ustawia nową datę na zegarku
void activate_date () {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'd') {
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <activate_date+0x64>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b64      	cmp	r3, #100	; 0x64
 8000ad6:	d10b      	bne.n	8000af0 <activate_date+0x24>

		time_activated_flag = 0;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <activate_date+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <activate_date+0x6c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <activate_date+0x70>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 1;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <activate_date+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
	}

	if(date_activated_flag) {
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <activate_date+0x74>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d013      	beq.n	8000b20 <activate_date+0x54>

		global_buffer[global_counter] = uart_rx_data;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <activate_date+0x70>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <activate_date+0x64>)
 8000b00:	7819      	ldrb	r1, [r3, #0]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <activate_date+0x78>)
 8000b04:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <activate_date+0x70>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <activate_date+0x70>)
 8000b10:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <activate_date+0x70>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d102      	bne.n	8000b20 <activate_date+0x54>
			date_set_flag = 1;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <activate_date+0x7c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	4903      	ldr	r1, [pc, #12]	; (8000b30 <activate_date+0x64>)
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <activate_date+0x80>)
 8000b26:	f004 fee7 	bl	80058f8 <HAL_UART_Receive_IT>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000017f 	.word	0x2000017f
 8000b34:	20000169 	.word	0x20000169
 8000b38:	20000160 	.word	0x20000160
 8000b3c:	20000108 	.word	0x20000108
 8000b40:	20000161 	.word	0x20000161
 8000b44:	20000164 	.word	0x20000164
 8000b48:	2000016b 	.word	0x2000016b
 8000b4c:	20000258 	.word	0x20000258

08000b50 <activate_alarm>:

// Funkcja sygnalizująca, że użytkownik ustawia nowy alarm
void activate_alarm () {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'a') {
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <activate_alarm+0x64>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b61      	cmp	r3, #97	; 0x61
 8000b5a:	d10b      	bne.n	8000b74 <activate_alarm+0x24>

		time_activated_flag = 0;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <activate_alarm+0x68>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 0;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <activate_alarm+0x6c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <activate_alarm+0x70>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 1;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <activate_alarm+0x74>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <activate_alarm+0x74>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <activate_alarm+0x54>

		global_buffer[global_counter] = uart_rx_data;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <activate_alarm+0x70>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <activate_alarm+0x64>)
 8000b84:	7819      	ldrb	r1, [r3, #0]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <activate_alarm+0x78>)
 8000b88:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <activate_alarm+0x70>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <activate_alarm+0x70>)
 8000b94:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <activate_alarm+0x70>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d102      	bne.n	8000ba4 <activate_alarm+0x54>
			alarm_set_flag = 1;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <activate_alarm+0x7c>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4903      	ldr	r1, [pc, #12]	; (8000bb4 <activate_alarm+0x64>)
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <activate_alarm+0x80>)
 8000baa:	f004 fea5 	bl	80058f8 <HAL_UART_Receive_IT>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000017f 	.word	0x2000017f
 8000bb8:	20000169 	.word	0x20000169
 8000bbc:	20000161 	.word	0x20000161
 8000bc0:	20000108 	.word	0x20000108
 8000bc4:	20000160 	.word	0x20000160
 8000bc8:	20000164 	.word	0x20000164
 8000bcc:	2000017c 	.word	0x2000017c
 8000bd0:	20000258 	.word	0x20000258

08000bd4 <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000016f 	.word	0x2000016f

08000bf4 <to_do_on_alarm>:

void to_do_on_alarm() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <to_do_on_alarm+0x2c>)
 8000c00:	f002 f9b0 	bl	8002f64 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_on_msg, strlen(alarm_on_msg));
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <to_do_on_alarm+0x30>)
 8000c06:	f7ff faeb 	bl	80001e0 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4904      	ldr	r1, [pc, #16]	; (8000c24 <to_do_on_alarm+0x30>)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <to_do_on_alarm+0x34>)
 8000c14:	f004 fe2b 	bl	800586e <HAL_UART_Transmit_IT>
	lcd_send_alarm_on_msg();
 8000c18:	f000 fb14 	bl	8001244 <lcd_send_alarm_on_msg>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020000 	.word	0x40020000
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000258 	.word	0x20000258

08000c2c <to_do_on_alarm_off>:

void to_do_on_alarm_off() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_off_msg, strlen(alarm_off_msg));
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <to_do_on_alarm_off+0x20>)
 8000c32:	f7ff fad5 	bl	80001e0 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4903      	ldr	r1, [pc, #12]	; (8000c4c <to_do_on_alarm_off+0x20>)
 8000c3e:	4804      	ldr	r0, [pc, #16]	; (8000c50 <to_do_on_alarm_off+0x24>)
 8000c40:	f004 fe15 	bl	800586e <HAL_UART_Transmit_IT>
	lcd_send_alarm_off_msg();
 8000c44:	f000 fb18 	bl	8001278 <lcd_send_alarm_off_msg>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	20000258 	.word	0x20000258

08000c54 <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c64:	d108      	bne.n	8000c78 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c6e:	f002 f979 	bl	8002f64 <HAL_GPIO_WritePin>
		alarm_flag = 0;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
	}
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40020000 	.word	0x40020000
 8000c84:	2000016f 	.word	0x2000016f

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_GPIO_Init+0xc8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000cf8:	4816      	ldr	r0, [pc, #88]	; (8000d54 <MX_GPIO_Init+0xcc>)
 8000cfa:	f002 f933 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	4812      	ldr	r0, [pc, #72]	; (8000d5c <MX_GPIO_Init+0xd4>)
 8000d14:	f001 ffa4 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin;
 8000d18:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <MX_GPIO_Init+0xcc>)
 8000d32:	f001 ff95 	bl	8002c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2028      	movs	r0, #40	; 0x28
 8000d3c:	f001 ff37 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f001 ff50 	bl	8002be6 <HAL_NVIC_EnableIRQ>

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	10210000 	.word	0x10210000
 8000d5c:	40020800 	.word	0x40020800

08000d60 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_I2C1_Init+0x54>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d6c:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_I2C1_Init+0x58>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d9e:	f002 f92d 	bl	8002ffc <HAL_I2C_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da8:	f000 fc4a 	bl	8001640 <Error_Handler>
  }

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000180 	.word	0x20000180
 8000db4:	40005400 	.word	0x40005400
 8000db8:	000186a0 	.word	0x000186a0

08000dbc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dc2:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <MX_I2C2_Init+0x54>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dc8:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_I2C2_Init+0x58>)
 8000dca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_I2C2_Init+0x50>)
 8000dfa:	f002 f8ff 	bl	8002ffc <HAL_I2C_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e04:	f000 fc1c 	bl	8001640 <Error_Handler>
  }

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	40005800 	.word	0x40005800
 8000e14:	000186a0 	.word	0x000186a0

08000e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a3b      	ldr	r2, [pc, #236]	; (8000f24 <HAL_I2C_MspInit+0x10c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12d      	bne.n	8000e96 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a39      	ldr	r2, [pc, #228]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	482e      	ldr	r0, [pc, #184]	; (8000f2c <HAL_I2C_MspInit+0x114>)
 8000e74:	f001 fef4 	bl	8002c60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e94:	e041      	b.n	8000f1a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_I2C_MspInit+0x118>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13c      	bne.n	8000f1a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec2:	2312      	movs	r3, #18
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <HAL_I2C_MspInit+0x114>)
 8000eda:	f001 fec1 	bl	8002c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee2:	2312      	movs	r3, #18
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000eee:	2309      	movs	r3, #9
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <HAL_I2C_MspInit+0x114>)
 8000efa:	f001 feb1 	bl	8002c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_I2C_MspInit+0x110>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	; 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40005400 	.word	0x40005400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40005800 	.word	0x40005800

08000f34 <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	/* sekwencja z dokumentacji inicjalizująca wyświetlacz*/
	HAL_Delay(40);
 8000f38:	2028      	movs	r0, #40	; 0x28
 8000f3a:	f001 f971 	bl	8002220 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000f3e:	2030      	movs	r0, #48	; 0x30
 8000f40:	f000 f8c4 	bl	80010cc <lcd_write_command>
	HAL_Delay(5);
 8000f44:	2005      	movs	r0, #5
 8000f46:	f001 f96b 	bl	8002220 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000f4a:	2030      	movs	r0, #48	; 0x30
 8000f4c:	f000 f8be 	bl	80010cc <lcd_write_command>
	HAL_Delay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f001 f965 	bl	8002220 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000f56:	2030      	movs	r0, #48	; 0x30
 8000f58:	f000 f8b8 	bl	80010cc <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f000 f8b5 	bl	80010cc <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8000f62:	200c      	movs	r0, #12
 8000f64:	f000 f8b2 	bl	80010cc <lcd_write_command>

	HAL_Delay(5);
 8000f68:	2005      	movs	r0, #5
 8000f6a:	f001 f959 	bl	8002220 <HAL_Delay>

	lcd_generate_own_chars();
 8000f6e:	f000 f99f 	bl	80012b0 <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8000f72:	f000 f849 	bl	8001008 <lcd_clear>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <lcd_display_refresh>:

// Funkcja odpowiedzialna za aktualizowanie i wyświetlanie na bieżąco wszystkich danych na wyświetlaczu LCD
void lcd_display_refresh() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af02      	add	r7, sp, #8

	get_Time();
 8000f82:	f000 ffe7 	bl	8001f54 <get_Time>

	// wyświetlanie godziny na LCD
	lcd_first_line();
 8000f86:	f000 f88c 	bl	80010a2 <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4916      	ldr	r1, [pc, #88]	; (8000ff8 <lcd_display_refresh+0x7c>)
 8000fa0:	4816      	ldr	r0, [pc, #88]	; (8000ffc <lcd_display_refresh+0x80>)
 8000fa2:	f005 fae3 	bl	800656c <siprintf>
	lcd_send_string(time_date_buffer);
 8000fa6:	4815      	ldr	r0, [pc, #84]	; (8000ffc <lcd_display_refresh+0x80>)
 8000fa8:	f000 f934 	bl	8001214 <lcd_send_string>

	//wyświetlenie poziomu baterii
	battery_level = 100;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <lcd_display_refresh+0x84>)
 8000fae:	2264      	movs	r2, #100	; 0x64
 8000fb0:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <lcd_display_refresh+0x84>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fa3e 	bl	8001438 <lcd_show_battery_level>

	// wyświetlanie daty na LCD
	lcd_second_line();
 8000fbc:	f000 f87b 	bl	80010b6 <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000fc8:	795b      	ldrb	r3, [r3, #5]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000fce:	799b      	ldrb	r3, [r3, #6]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <lcd_display_refresh+0x88>)
 8000fd6:	4809      	ldr	r0, [pc, #36]	; (8000ffc <lcd_display_refresh+0x80>)
 8000fd8:	f005 fac8 	bl	800656c <siprintf>
	lcd_send_string(time_date_buffer);
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <lcd_display_refresh+0x80>)
 8000fde:	f000 f919 	bl	8001214 <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_show_week_day_name(time.dayofweek);
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <lcd_display_refresh+0x78>)
 8000fe4:	78db      	ldrb	r3, [r3, #3]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f9da 	bl	80013a0 <lcd_show_week_day_name>
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000174 	.word	0x20000174
 8000ff8:	08006d90 	.word	0x08006d90
 8000ffc:	20000228 	.word	0x20000228
 8001000:	20000235 	.word	0x20000235
 8001004:	08006da0 	.word	0x08006da0

08001008 <lcd_clear>:

void lcd_clear(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 800100c:	2001      	movs	r0, #1
 800100e:	f000 f85d 	bl	80010cc <lcd_write_command>
	HAL_Delay(5);
 8001012:	2005      	movs	r0, #5
 8001014:	f001 f904 	bl	8002220 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <lcd_back_light_on>:

// Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD
void lcd_back_light_on(void) {
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	BL = 0x08;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <lcd_back_light_on+0x14>)
 8001022:	2208      	movs	r2, #8
 8001024:	701a      	strb	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000236 	.word	0x20000236

08001034 <lcd_back_light_off>:

// Funkcja odpowiadająca za wyłączenie podświetlenia wyświetlacza LCD
void lcd_back_light_off(void) {
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	BL = 0x00;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <lcd_back_light_off+0x14>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000236 	.word	0x20000236

0800104c <lcd_set_cursor>:

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <lcd_set_cursor+0x24>
 800106a:	2b01      	cmp	r3, #1
 800106c:	d009      	beq.n	8001082 <lcd_set_cursor+0x36>
 800106e:	e011      	b.n	8001094 <lcd_set_cursor+0x48>

		case 0:
			col_number |= (0x80);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f826 	bl	80010cc <lcd_write_command>
			break;
 8001080:	e008      	b.n	8001094 <lcd_set_cursor+0x48>

		case 1:
			col_number |= (0xc0);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001088:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f81d 	bl	80010cc <lcd_write_command>
			break;
 8001092:	bf00      	nop
	}

	HAL_Delay(5);
 8001094:	2005      	movs	r0, #5
 8001096:	f001 f8c3 	bl	8002220 <HAL_Delay>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 80010a6:	2080      	movs	r0, #128	; 0x80
 80010a8:	f000 f810 	bl	80010cc <lcd_write_command>
	HAL_Delay(5);
 80010ac:	2005      	movs	r0, #5
 80010ae:	f001 f8b7 	bl	8002220 <HAL_Delay>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 80010ba:	20c0      	movs	r0, #192	; 0xc0
 80010bc:	f000 f806 	bl	80010cc <lcd_write_command>
	HAL_Delay(5);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f001 f8ad 	bl	8002220 <HAL_Delay>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 80010d6:	234e      	movs	r3, #78	; 0x4e
 80010d8:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		// EN = 1, RS = 0
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f023 030f 	bic.w	r3, r3, #15
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <lcd_write_command+0x8c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <lcd_write_command+0x8c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		// EN = 1, RS = 0
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <lcd_write_command+0x8c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4313      	orrs	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	b25a      	sxtb	r2, r3
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <lcd_write_command+0x8c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b25b      	sxtb	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b299      	uxth	r1, r3
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2304      	movs	r3, #4
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <lcd_write_command+0x90>)
 8001144:	f002 f892 	bl	800326c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001148:	2005      	movs	r0, #5
 800114a:	f001 f869 	bl	8002220 <HAL_Delay>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000236 	.word	0x20000236
 800115c:	20000180 	.word	0x20000180

08001160 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 800116a:	234e      	movs	r3, #78	; 0x4e
 800116c:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 800116e:	2301      	movs	r3, #1
 8001170:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f023 030f 	bic.w	r3, r3, #15
 8001178:	b2da      	uxtb	r2, r3
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	4313      	orrs	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <lcd_write_data+0xac>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	b2db      	uxtb	r3, r3
 800118e:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	f023 030f 	bic.w	r3, r3, #15
 8001198:	b25a      	sxtb	r2, r3
 800119a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <lcd_write_data+0xac>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		// EN = 1, RS = 1
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <lcd_write_data+0xac>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <lcd_write_data+0xac>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2304      	movs	r3, #4
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <lcd_write_data+0xb0>)
 80011f8:	f002 f838 	bl	800326c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80011fc:	2005      	movs	r0, #5
 80011fe:	f001 f80f 	bl	8002220 <HAL_Delay>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000236 	.word	0x20000236
 8001210:	20000180 	.word	0x20000180

08001214 <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	while(*string)
 800121c:	e006      	b.n	800122c <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff9a 	bl	8001160 <lcd_write_data>
	while(*string)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f4      	bne.n	800121e <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8001234:	2005      	movs	r0, #5
 8001236:	f000 fff3 	bl	8002220 <HAL_Delay>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

	lcd_clear();
 8001248:	f7ff fede 	bl	8001008 <lcd_clear>
	lcd_send_string("Wy");
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <lcd_send_alarm_on_msg+0x2c>)
 800124e:	f7ff ffe1 	bl	8001214 <lcd_send_string>
	lcd_send_own_char(3);
 8001252:	2003      	movs	r0, #3
 8001254:	f000 f854 	bl	8001300 <lcd_send_own_char>
	lcd_send_own_char(8);
 8001258:	2008      	movs	r0, #8
 800125a:	f000 f851 	bl	8001300 <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <lcd_send_alarm_on_msg+0x30>)
 8001260:	f7ff ffd8 	bl	8001214 <lcd_send_string>
	HAL_Delay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001268:	f000 ffda 	bl	8002220 <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08006db4 	.word	0x08006db4
 8001274:	08006db8 	.word	0x08006db8

08001278 <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

	lcd_clear();
 800127c:	f7ff fec4 	bl	8001008 <lcd_clear>
	lcd_send_string("Alarm wy");
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <lcd_send_alarm_off_msg+0x30>)
 8001282:	f7ff ffc7 	bl	8001214 <lcd_send_string>
	lcd_send_own_char(3);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f83a 	bl	8001300 <lcd_send_own_char>
	lcd_send_own_char(8);
 800128c:	2008      	movs	r0, #8
 800128e:	f000 f837 	bl	8001300 <lcd_send_own_char>
	lcd_send_string("czony");
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <lcd_send_alarm_off_msg+0x34>)
 8001294:	f7ff ffbe 	bl	8001214 <lcd_send_string>
	HAL_Delay(2000);
 8001298:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800129c:	f000 ffc0 	bl	8002220 <HAL_Delay>
	lcd_clear();
 80012a0:	f7ff feb2 	bl	8001008 <lcd_clear>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	08006dc8 	.word	0x08006dc8
 80012ac:	08006dd4 	.word	0x08006dd4

080012b0 <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 80012b6:	2040      	movs	r0, #64	; 0x40
 80012b8:	f7ff ff08 	bl	80010cc <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e015      	b.n	80012ee <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	71bb      	strb	r3, [r7, #6]
 80012c6:	e00c      	b.n	80012e2 <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	490b      	ldr	r1, [pc, #44]	; (80012fc <lcd_generate_own_chars+0x4c>)
 80012ce:	00d2      	lsls	r2, r2, #3
 80012d0:	440a      	add	r2, r1
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff42 	bl	8001160 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	3301      	adds	r3, #1
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	d9ef      	bls.n	80012c8 <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3301      	adds	r3, #1
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d9e6      	bls.n	80012c2 <lcd_generate_own_chars+0x12>
		}
	}
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000003c 	.word	0x2000003c

08001300 <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	3b01      	subs	r3, #1
 800130e:	2b07      	cmp	r3, #7
 8001310:	d832      	bhi.n	8001378 <lcd_send_own_char+0x78>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <lcd_send_own_char+0x18>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001339 	.word	0x08001339
 800131c:	08001341 	.word	0x08001341
 8001320:	08001349 	.word	0x08001349
 8001324:	08001351 	.word	0x08001351
 8001328:	08001359 	.word	0x08001359
 800132c:	08001361 	.word	0x08001361
 8001330:	08001369 	.word	0x08001369
 8001334:	08001371 	.word	0x08001371

		case 1:
			lcd_send_string("\x1");
 8001338:	4811      	ldr	r0, [pc, #68]	; (8001380 <lcd_send_own_char+0x80>)
 800133a:	f7ff ff6b 	bl	8001214 <lcd_send_string>
			break;
 800133e:	e01b      	b.n	8001378 <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8001340:	4810      	ldr	r0, [pc, #64]	; (8001384 <lcd_send_own_char+0x84>)
 8001342:	f7ff ff67 	bl	8001214 <lcd_send_string>
			break;
 8001346:	e017      	b.n	8001378 <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <lcd_send_own_char+0x88>)
 800134a:	f7ff ff63 	bl	8001214 <lcd_send_string>
			break;
 800134e:	e013      	b.n	8001378 <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <lcd_send_own_char+0x8c>)
 8001352:	f7ff ff5f 	bl	8001214 <lcd_send_string>
			break;
 8001356:	e00f      	b.n	8001378 <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <lcd_send_own_char+0x90>)
 800135a:	f7ff ff5b 	bl	8001214 <lcd_send_string>
			break;
 800135e:	e00b      	b.n	8001378 <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <lcd_send_own_char+0x94>)
 8001362:	f7ff ff57 	bl	8001214 <lcd_send_string>
			break;
 8001366:	e007      	b.n	8001378 <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <lcd_send_own_char+0x98>)
 800136a:	f7ff ff53 	bl	8001214 <lcd_send_string>
			break;
 800136e:	e003      	b.n	8001378 <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <lcd_send_own_char+0x9c>)
 8001372:	f7ff ff4f 	bl	8001214 <lcd_send_string>
			break;
 8001376:	bf00      	nop
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	08006ddc 	.word	0x08006ddc
 8001384:	08006de0 	.word	0x08006de0
 8001388:	08006de4 	.word	0x08006de4
 800138c:	08006de8 	.word	0x08006de8
 8001390:	08006dec 	.word	0x08006dec
 8001394:	08006df0 	.word	0x08006df0
 8001398:	08006df4 	.word	0x08006df4
 800139c:	08006df8 	.word	0x08006df8

080013a0 <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 80013aa:	210c      	movs	r1, #12
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fe4d 	bl	800104c <lcd_set_cursor>

	switch(day_number) {
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d82c      	bhi.n	8001414 <lcd_show_week_day_name+0x74>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <lcd_show_week_day_name+0x20>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013dd 	.word	0x080013dd
 80013c4:	080013e5 	.word	0x080013e5
 80013c8:	080013ed 	.word	0x080013ed
 80013cc:	080013f5 	.word	0x080013f5
 80013d0:	080013fd 	.word	0x080013fd
 80013d4:	08001405 	.word	0x08001405
 80013d8:	0800140d 	.word	0x0800140d

		case 1:
			lcd_send_string("pon.");
 80013dc:	480f      	ldr	r0, [pc, #60]	; (800141c <lcd_show_week_day_name+0x7c>)
 80013de:	f7ff ff19 	bl	8001214 <lcd_send_string>
			break;
 80013e2:	e017      	b.n	8001414 <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 80013e4:	480e      	ldr	r0, [pc, #56]	; (8001420 <lcd_show_week_day_name+0x80>)
 80013e6:	f7ff ff15 	bl	8001214 <lcd_send_string>
			break;
 80013ea:	e013      	b.n	8001414 <lcd_show_week_day_name+0x74>

		case 3:
			//lcd_send_own_char(6);
			lcd_send_string("sr.");
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <lcd_show_week_day_name+0x84>)
 80013ee:	f7ff ff11 	bl	8001214 <lcd_send_string>
			break;
 80013f2:	e00f      	b.n	8001414 <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <lcd_show_week_day_name+0x88>)
 80013f6:	f7ff ff0d 	bl	8001214 <lcd_send_string>
			break;
 80013fa:	e00b      	b.n	8001414 <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <lcd_show_week_day_name+0x8c>)
 80013fe:	f7ff ff09 	bl	8001214 <lcd_send_string>
			break;
 8001402:	e007      	b.n	8001414 <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <lcd_show_week_day_name+0x90>)
 8001406:	f7ff ff05 	bl	8001214 <lcd_send_string>
			break;
 800140a:	e003      	b.n	8001414 <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <lcd_show_week_day_name+0x94>)
 800140e:	f7ff ff01 	bl	8001214 <lcd_send_string>
			break;
 8001412:	bf00      	nop
	}
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	08006dfc 	.word	0x08006dfc
 8001420:	08006e04 	.word	0x08006e04
 8001424:	08006e08 	.word	0x08006e08
 8001428:	08006e0c 	.word	0x08006e0c
 800142c:	08006e14 	.word	0x08006e14
 8001430:	08006e18 	.word	0x08006e18
 8001434:	08006e20 	.word	0x08006e20

08001438 <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 8001442:	210b      	movs	r1, #11
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fe01 	bl	800104c <lcd_set_cursor>
	lcd_send_own_char(6);
 800144a:	2006      	movs	r0, #6
 800144c:	f7ff ff58 	bl	8001300 <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <lcd_show_battery_level+0x40>)
 8001458:	4618      	mov	r0, r3
 800145a:	f005 f887 	bl	800656c <siprintf>

	lcd_send_string(battery_level);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fed6 	bl	8001214 <lcd_send_string>
	lcd_send_string("%");
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <lcd_show_battery_level+0x44>)
 800146a:	f7ff fed3 	bl	8001214 <lcd_send_string>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	08006e28 	.word	0x08006e28
 800147c:	08006e2c 	.word	0x08006e2c

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001484:	f000 fe5a 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001488:	f000 f838 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148c:	f7ff fbfc 	bl	8000c88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001490:	f7ff fc66 	bl	8000d60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001494:	f7ff fc92 	bl	8000dbc <MX_I2C2_Init>
  MX_RTC_Init();
 8001498:	f000 f8da 	bl	8001650 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800149c:	f000 fdaa 	bl	8001ff4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014a0:	f7ff f876 	bl	8000590 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <main+0x70>)
 80014ac:	f001 fd5a 	bl	8002f64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2120      	movs	r1, #32
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <main+0x70>)
 80014b6:	f001 fd55 	bl	8002f64 <HAL_GPIO_WritePin>

  /****************** LCD BEGIN ******************/
  lcd_init();
 80014ba:	f7ff fd3b 	bl	8000f34 <lcd_init>
  /****************** LCD END ******************/

  rtc_set_time();	// Wpisanie do rejestru RTC, czasu i daty pobranych z DS3231, aby czas w RTC był aktualny
 80014be:	f7ff f8e1 	bl	8000684 <rtc_set_time>

  /****************** UART BEGIN ******************/
  // Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
  // Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback HAL_UART_RxCpltCallback.
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80014c2:	2201      	movs	r2, #1
 80014c4:	490b      	ldr	r1, [pc, #44]	; (80014f4 <main+0x74>)
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <main+0x78>)
 80014c8:	f004 fa16 	bl	80058f8 <HAL_UART_Receive_IT>

  // wystąpienie przerwania po ukończeniu transmisji danych (TC - Transmition Complete)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <main+0x78>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <main+0x78>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014da:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	lcd_back_light_on();
 80014dc:	f7ff fd9e 	bl	800101c <lcd_back_light_on>

	to_do_after_wake_up_from_standby();
 80014e0:	f000 f970 	bl	80017c4 <to_do_after_wake_up_from_standby>

	to_do_before_going_to_standby();
 80014e4:	f000 f9d0 	bl	8001888 <to_do_before_going_to_standby>

	go_to_standby();
 80014e8:	f000 fb66 	bl	8001bb8 <go_to_standby>
	lcd_back_light_on();
 80014ec:	e7f6      	b.n	80014dc <main+0x5c>
 80014ee:	bf00      	nop
 80014f0:	40020000 	.word	0x40020000
 80014f4:	2000017f 	.word	0x2000017f
 80014f8:	20000258 	.word	0x20000258

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b098      	sub	sp, #96	; 0x60
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f005 f826 	bl	800655c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <SystemClock_Config+0x100>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a30      	ldr	r2, [pc, #192]	; (80015fc <SystemClock_Config+0x100>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <SystemClock_Config+0x100>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800154c:	2300      	movs	r3, #0
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <SystemClock_Config+0x104>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <SystemClock_Config+0x104>)
 800155a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <SystemClock_Config+0x104>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800156c:	230a      	movs	r3, #10
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001570:	2301      	movs	r3, #1
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001574:	2310      	movs	r3, #16
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001578:	2301      	movs	r3, #1
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001584:	2308      	movs	r3, #8
 8001586:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fea1 	bl	80042e0 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015a4:	f000 f84c 	bl	8001640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80015b0:	23a0      	movs	r3, #160	; 0xa0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f8fb 	bl	80047c0 <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80015d0:	f000 f836 	bl	8001640 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015d4:	2302      	movs	r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fab8 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015ee:	f000 f827 	bl	8001640 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3760      	adds	r7, #96	; 0x60
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart1, a nie coś innego
	if(huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_UART_RxCpltCallback+0x30>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10a      	bne.n	800162c <HAL_UART_RxCpltCallback+0x28>
	{
		activate_time();
 8001616:	f7ff fa17 	bl	8000a48 <activate_time>
		activate_date();
 800161a:	f7ff fa57 	bl	8000acc <activate_date>
		activate_alarm();
 800161e:	f7ff fa97 	bl	8000b50 <activate_alarm>

		// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001622:	2201      	movs	r2, #1
 8001624:	4904      	ldr	r1, [pc, #16]	; (8001638 <HAL_UART_RxCpltCallback+0x34>)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_UART_RxCpltCallback+0x38>)
 8001628:	f004 f966 	bl	80058f8 <HAL_UART_Receive_IT>
	}

}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004400 	.word	0x40004400
 8001638:	2000017f 	.word	0x2000017f
 800163c:	20000258 	.word	0x20000258

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800166a:	463b      	mov	r3, r7
 800166c:	2228      	movs	r2, #40	; 0x28
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f004 ff73 	bl	800655c <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <MX_RTC_Init+0x124>)
 8001678:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <MX_RTC_Init+0x128>)
 800167a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <MX_RTC_Init+0x124>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <MX_RTC_Init+0x124>)
 8001684:	227f      	movs	r2, #127	; 0x7f
 8001686:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001688:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <MX_RTC_Init+0x124>)
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <MX_RTC_Init+0x124>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <MX_RTC_Init+0x124>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <MX_RTC_Init+0x124>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016a0:	4834      	ldr	r0, [pc, #208]	; (8001774 <MX_RTC_Init+0x124>)
 80016a2:	f003 fb47 	bl	8004d34 <HAL_RTC_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80016ac:	f7ff ffc8 	bl	8001640 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80016b0:	2318      	movs	r3, #24
 80016b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x33;
 80016b6:	2333      	movs	r3, #51	; 0x33
 80016b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	4828      	ldr	r0, [pc, #160]	; (8001774 <MX_RTC_Init+0x124>)
 80016d4:	f003 fbbf 	bl	8004e56 <HAL_RTC_SetTime>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80016de:	f7ff ffaf 	bl	8001640 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80016e2:	2307      	movs	r3, #7
 80016e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 80016e8:	2310      	movs	r3, #16
 80016ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x25;
 80016ee:	2325      	movs	r3, #37	; 0x25
 80016f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 80016f4:	2320      	movs	r3, #32
 80016f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fe:	2201      	movs	r2, #1
 8001700:	4619      	mov	r1, r3
 8001702:	481c      	ldr	r0, [pc, #112]	; (8001774 <MX_RTC_Init+0x124>)
 8001704:	f003 fc64 	bl	8004fd0 <HAL_RTC_SetDate>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800170e:	f7ff ff97 	bl	8001640 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8001712:	2319      	movs	r3, #25
 8001714:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 8001716:	2323      	movs	r3, #35	; 0x23
 8001718:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800171a:	2310      	movs	r3, #16
 800171c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 8001736:	2312      	movs	r3, #18
 8001738:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2201      	movs	r2, #1
 8001746:	4619      	mov	r1, r3
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <MX_RTC_Init+0x124>)
 800174a:	f003 fce9 	bl	8005120 <HAL_RTC_SetAlarm_IT>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001754:	f7ff ff74 	bl	8001640 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001758:	2200      	movs	r2, #0
 800175a:	2105      	movs	r1, #5
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_RTC_Init+0x124>)
 800175e:	f003 fecf 	bl	8005500 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001768:	f7ff ff6a 	bl	8001640 <Error_Handler>
  }

}
 800176c:	bf00      	nop
 800176e:	3740      	adds	r7, #64	; 0x40
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000238 	.word	0x20000238
 8001778:	40002800 	.word	0x40002800

0800177c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_RTC_MspInit+0x40>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d112      	bne.n	80017b4 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RTC_MspInit+0x44>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2003      	movs	r0, #3
 800179a:	f001 fa08 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800179e:	2003      	movs	r0, #3
 80017a0:	f001 fa21 	bl	8002be6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2029      	movs	r0, #41	; 0x29
 80017aa:	f001 fa00 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017ae:	2029      	movs	r0, #41	; 0x29
 80017b0:	f001 fa19 	bl	8002be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40002800 	.word	0x40002800
 80017c0:	42470e3c 	.word	0x42470e3c

080017c4 <to_do_after_wake_up_from_standby>:
uint8_t add_sec, add_mins, add_hours, add_days;
uint8_t temp_sec, temp_mins, temp_hours, temp_days;
/*	alarm	*/


void to_do_after_wake_up_from_standby(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <to_do_after_wake_up_from_standby+0xac>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <to_do_after_wake_up_from_standby+0x20>

		while (alarm_flag) {
 80017d2:	e001      	b.n	80017d8 <to_do_after_wake_up_from_standby+0x14>
			to_do_on_alarm();
 80017d4:	f7ff fa0e 	bl	8000bf4 <to_do_on_alarm>
		while (alarm_flag) {
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <to_do_after_wake_up_from_standby+0xac>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f9      	bne.n	80017d4 <to_do_after_wake_up_from_standby+0x10>
		}

		to_do_on_alarm_off();
 80017e0:	f7ff fa24 	bl	8000c2c <to_do_on_alarm_off>

	// Flaga SBF (Standby flag) mówi o tym, czy MCU wybudził się ze stanu standby
	// SBF = 1 -> MCU wybudził się ze standby

	// na początku sprawdzamy czy nie jest ustawiona flaga SBF
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <to_do_after_wake_up_from_standby+0xb0>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d13a      	bne.n	8001866 <to_do_after_wake_up_from_standby+0xa2>

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);	// wyszyszczenie flagi SBF, aby upewnić się że nie jesteśmy w trybie stanby
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <to_do_after_wake_up_from_standby+0xb0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <to_do_after_wake_up_from_standby+0xb0>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6013      	str	r3, [r2, #0]

	  for(int i=0; i<10; i++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	e009      	b.n	8001816 <to_do_after_wake_up_from_standby+0x52>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8001802:	2120      	movs	r1, #32
 8001804:	481c      	ldr	r0, [pc, #112]	; (8001878 <to_do_after_wake_up_from_standby+0xb4>)
 8001806:	f001 fbc6 	bl	8002f96 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 800180a:	2064      	movs	r0, #100	; 0x64
 800180c:	f000 fd08 	bl	8002220 <HAL_Delay>
	  for(int i=0; i<10; i++) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b09      	cmp	r3, #9
 800181a:	ddf2      	ble.n	8001802 <to_do_after_wake_up_from_standby+0x3e>
	  }

	  if(!alarm_flag) {
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <to_do_after_wake_up_from_standby+0xac>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <to_do_after_wake_up_from_standby+0x92>
		  lcd_clear();
 8001824:	f7ff fbf0 	bl	8001008 <lcd_clear>
		  lcd_set_cursor(0, 2);
 8001828:	2102      	movs	r1, #2
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fc0e 	bl	800104c <lcd_set_cursor>
		  lcd_send_string("Wake up from");
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <to_do_after_wake_up_from_standby+0xb8>)
 8001832:	f7ff fcef 	bl	8001214 <lcd_send_string>
		  lcd_second_line();
 8001836:	f7ff fc3e 	bl	80010b6 <lcd_second_line>
		  lcd_set_cursor(1, 2);
 800183a:	2102      	movs	r1, #2
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fc05 	bl	800104c <lcd_set_cursor>
		  lcd_send_string("STANDBY MODE");
 8001842:	480f      	ldr	r0, [pc, #60]	; (8001880 <to_do_after_wake_up_from_standby+0xbc>)
 8001844:	f7ff fce6 	bl	8001214 <lcd_send_string>
		  HAL_Delay(1500);
 8001848:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800184c:	f000 fce8 	bl	8002220 <HAL_Delay>
		  lcd_clear();
 8001850:	f7ff fbda 	bl	8001008 <lcd_clear>
 8001854:	e001      	b.n	800185a <to_do_after_wake_up_from_standby+0x96>
	  } else {
		  to_do_on_alarm();
 8001856:	f7ff f9cd 	bl	8000bf4 <to_do_on_alarm>
	  }

	  // Wyłączenie pinu WAKE UP
	  HAL_PWR_DisableWakeUpPin(WakeUp_PIN_Pin);
 800185a:	2001      	movs	r0, #1
 800185c:	f002 fd14 	bl	8004288 <HAL_PWR_DisableWakeUpPin>

	  // Wyłączenie Wake up timer
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <to_do_after_wake_up_from_standby+0xc0>)
 8001862:	f003 ff0d 	bl	8005680 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000016f 	.word	0x2000016f
 8001874:	40007000 	.word	0x40007000
 8001878:	40020000 	.word	0x40020000
 800187c:	08006e30 	.word	0x08006e30
 8001880:	08006e40 	.word	0x08006e40
 8001884:	20000238 	.word	0x20000238

08001888 <to_do_before_going_to_standby>:

void to_do_before_going_to_standby(void) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b095      	sub	sp, #84	; 0x54
 800188c:	af04      	add	r7, sp, #16

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 800188e:	4bb9      	ldr	r3, [pc, #740]	; (8001b74 <to_do_before_going_to_standby+0x2ec>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <to_do_before_going_to_standby+0x20>

		while (alarm_flag) {
 8001896:	e001      	b.n	800189c <to_do_before_going_to_standby+0x14>
			to_do_on_alarm();
 8001898:	f7ff f9ac 	bl	8000bf4 <to_do_on_alarm>
		while (alarm_flag) {
 800189c:	4bb5      	ldr	r3, [pc, #724]	; (8001b74 <to_do_before_going_to_standby+0x2ec>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <to_do_before_going_to_standby+0x10>
		}

		to_do_on_alarm_off();
 80018a4:	f7ff f9c2 	bl	8000c2c <to_do_on_alarm_off>
	}

	for(int i=0; i<30; i++) {
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ac:	e159      	b.n	8001b62 <to_do_before_going_to_standby+0x2da>

		lcd_display_refresh();
 80018ae:	f7ff fb65 	bl	8000f7c <lcd_display_refresh>

		// wykonaj jeśli użytkownik ustawił nową godzinę
		if(time_set_flag) {
 80018b2:	4bb1      	ldr	r3, [pc, #708]	; (8001b78 <to_do_before_going_to_standby+0x2f0>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d07d      	beq.n	80019b6 <to_do_before_going_to_standby+0x12e>

			uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
			char new_time_details_msg[12];

			new_sec = time.seconds;
 80018ba:	4bb0      	ldr	r3, [pc, #704]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			new_min = global_buffer[2];
 80018c2:	4baf      	ldr	r3, [pc, #700]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 80018c4:	789b      	ldrb	r3, [r3, #2]
 80018c6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			new_hour = global_buffer[1];
 80018ca:	4bad      	ldr	r3, [pc, #692]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 80018cc:	785b      	ldrb	r3, [r3, #1]
 80018ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			new_dow = time.dayofweek;
 80018d2:	4baa      	ldr	r3, [pc, #680]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80018d4:	78db      	ldrb	r3, [r3, #3]
 80018d6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			new_dom = time.dayofmonth;
 80018da:	4ba8      	ldr	r3, [pc, #672]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			new_month = time.month;
 80018e2:	4ba6      	ldr	r3, [pc, #664]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			new_year = time.year;
 80018ea:	4ba4      	ldr	r3, [pc, #656]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80018ec:	799b      	ldrb	r3, [r3, #6]
 80018ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			if( (new_hour > 23 || new_hour < 0 || new_min > 59 || new_min < 1) && time_set_flag) {
 80018f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80018f6:	2b17      	cmp	r3, #23
 80018f8:	d807      	bhi.n	800190a <to_do_before_going_to_standby+0x82>
 80018fa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80018fe:	2b3b      	cmp	r3, #59	; 0x3b
 8001900:	d803      	bhi.n	800190a <to_do_before_going_to_standby+0x82>
 8001902:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001906:	2b00      	cmp	r3, #0
 8001908:	d11f      	bne.n	800194a <to_do_before_going_to_standby+0xc2>
 800190a:	4b9b      	ldr	r3, [pc, #620]	; (8001b78 <to_do_before_going_to_standby+0x2f0>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01b      	beq.n	800194a <to_do_before_going_to_standby+0xc2>
				lcd_clear();
 8001912:	f7ff fb79 	bl	8001008 <lcd_clear>
				lcd_set_cursor(0, 2);
 8001916:	2102      	movs	r1, #2
 8001918:	2000      	movs	r0, #0
 800191a:	f7ff fb97 	bl	800104c <lcd_set_cursor>
				lcd_send_string("B");
 800191e:	4899      	ldr	r0, [pc, #612]	; (8001b84 <to_do_before_going_to_standby+0x2fc>)
 8001920:	f7ff fc78 	bl	8001214 <lcd_send_string>
				lcd_send_own_char(3);
 8001924:	2003      	movs	r0, #3
 8001926:	f7ff fceb 	bl	8001300 <lcd_send_own_char>
				lcd_send_own_char(2);
 800192a:	2002      	movs	r0, #2
 800192c:	f7ff fce8 	bl	8001300 <lcd_send_own_char>
				lcd_send_string("dny czas!");
 8001930:	4895      	ldr	r0, [pc, #596]	; (8001b88 <to_do_before_going_to_standby+0x300>)
 8001932:	f7ff fc6f 	bl	8001214 <lcd_send_string>
				HAL_Delay(1000);
 8001936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800193a:	f000 fc71 	bl	8002220 <HAL_Delay>
				lcd_clear();
 800193e:	f7ff fb63 	bl	8001008 <lcd_clear>

				time_set_flag = 0;
 8001942:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <to_do_before_going_to_standby+0x2f0>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e035      	b.n	80019b6 <to_do_before_going_to_standby+0x12e>
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 800194a:	f897 4038 	ldrb.w	r4, [r7, #56]	; 0x38
 800194e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001952:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8001956:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800195a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4623      	mov	r3, r4
 800196e:	f000 faa1 	bl	8001eb4 <set_Time>

				lcd_clear();
 8001972:	f7ff fb49 	bl	8001008 <lcd_clear>
				sprintf(new_time_details_msg, "%02d:%02d:%02d", new_hour, new_min, new_sec);
 8001976:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800197a:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 800197e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001982:	f107 001c 	add.w	r0, r7, #28
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	460b      	mov	r3, r1
 800198a:	4980      	ldr	r1, [pc, #512]	; (8001b8c <to_do_before_going_to_standby+0x304>)
 800198c:	f004 fdee 	bl	800656c <siprintf>
				lcd_send_string("Ustawiony czas:");
 8001990:	487f      	ldr	r0, [pc, #508]	; (8001b90 <to_do_before_going_to_standby+0x308>)
 8001992:	f7ff fc3f 	bl	8001214 <lcd_send_string>
				lcd_second_line();
 8001996:	f7ff fb8e 	bl	80010b6 <lcd_second_line>
				lcd_send_string(new_time_details_msg);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fc38 	bl	8001214 <lcd_send_string>
				HAL_Delay(1000);
 80019a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a8:	f000 fc3a 	bl	8002220 <HAL_Delay>
				lcd_clear();
 80019ac:	f7ff fb2c 	bl	8001008 <lcd_clear>

				time_set_flag = 0;
 80019b0:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <to_do_before_going_to_standby+0x2f0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			}

		}

		// wykonaj jeśli użytkownik ustawił nową datę
		if(date_set_flag) {
 80019b6:	4b77      	ldr	r3, [pc, #476]	; (8001b94 <to_do_before_going_to_standby+0x30c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 808a 	beq.w	8001ad4 <to_do_before_going_to_standby+0x24c>

			uint8_t new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year;
			char new_date_details_msg[12];

			new_sec = time.seconds;
 80019c0:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			new_min = time.minutes;
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			new_hour = time.hour;
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <to_do_before_going_to_standby+0x2f4>)
 80019d2:	789b      	ldrb	r3, [r3, #2]
 80019d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			new_dow = global_buffer[1];
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			new_dom = global_buffer[2];
 80019e0:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 80019e2:	789b      	ldrb	r3, [r3, #2]
 80019e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			new_month = global_buffer[3];
 80019e8:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 80019ea:	78db      	ldrb	r3, [r3, #3]
 80019ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			new_year = global_buffer[4];
 80019f0:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

			if( (new_dow > 7 || new_dow < 1 || new_dom > 31 || new_dom < 1 || new_month > 12 || new_month < 1) && date_set_flag) {
 80019f8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d813      	bhi.n	8001a28 <to_do_before_going_to_standby+0x1a0>
 8001a00:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00f      	beq.n	8001a28 <to_do_before_going_to_standby+0x1a0>
 8001a08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a0c:	2b1f      	cmp	r3, #31
 8001a0e:	d80b      	bhi.n	8001a28 <to_do_before_going_to_standby+0x1a0>
 8001a10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <to_do_before_going_to_standby+0x1a0>
 8001a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a1c:	2b0c      	cmp	r3, #12
 8001a1e:	d803      	bhi.n	8001a28 <to_do_before_going_to_standby+0x1a0>
 8001a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11f      	bne.n	8001a68 <to_do_before_going_to_standby+0x1e0>
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <to_do_before_going_to_standby+0x30c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <to_do_before_going_to_standby+0x1e0>
				lcd_clear();
 8001a30:	f7ff faea 	bl	8001008 <lcd_clear>
				lcd_set_cursor(0, 2);
 8001a34:	2102      	movs	r1, #2
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fb08 	bl	800104c <lcd_set_cursor>
				lcd_send_string("B");
 8001a3c:	4851      	ldr	r0, [pc, #324]	; (8001b84 <to_do_before_going_to_standby+0x2fc>)
 8001a3e:	f7ff fbe9 	bl	8001214 <lcd_send_string>
				lcd_send_own_char(3);
 8001a42:	2003      	movs	r0, #3
 8001a44:	f7ff fc5c 	bl	8001300 <lcd_send_own_char>
				lcd_send_own_char(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff fc59 	bl	8001300 <lcd_send_own_char>
				lcd_send_string("dna data!");
 8001a4e:	4852      	ldr	r0, [pc, #328]	; (8001b98 <to_do_before_going_to_standby+0x310>)
 8001a50:	f7ff fbe0 	bl	8001214 <lcd_send_string>
				HAL_Delay(1000);
 8001a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a58:	f000 fbe2 	bl	8002220 <HAL_Delay>
				lcd_clear();
 8001a5c:	f7ff fad4 	bl	8001008 <lcd_clear>

				date_set_flag = 0;
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <to_do_before_going_to_standby+0x30c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e035      	b.n	8001ad4 <to_do_before_going_to_standby+0x24c>
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 8001a68:	f897 4031 	ldrb.w	r4, [r7, #49]	; 0x31
 8001a6c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001a70:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8001a74:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8001a78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	f000 fa12 	bl	8001eb4 <set_Time>

				lcd_clear();
 8001a90:	f7ff faba 	bl	8001008 <lcd_clear>
				sprintf(new_date_details_msg, "%02d-%02d-20%02d", new_dom, new_month, new_year);
 8001a94:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a98:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001a9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001aa0:	f107 0010 	add.w	r0, r7, #16
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	493c      	ldr	r1, [pc, #240]	; (8001b9c <to_do_before_going_to_standby+0x314>)
 8001aaa:	f004 fd5f 	bl	800656c <siprintf>
				lcd_send_string("Ustawiona data:");
 8001aae:	483c      	ldr	r0, [pc, #240]	; (8001ba0 <to_do_before_going_to_standby+0x318>)
 8001ab0:	f7ff fbb0 	bl	8001214 <lcd_send_string>
				lcd_second_line();
 8001ab4:	f7ff faff 	bl	80010b6 <lcd_second_line>
				lcd_send_string(new_date_details_msg);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fba9 	bl	8001214 <lcd_send_string>
				HAL_Delay(1000);
 8001ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac6:	f000 fbab 	bl	8002220 <HAL_Delay>
				lcd_clear();
 8001aca:	f7ff fa9d 	bl	8001008 <lcd_clear>

				date_set_flag = 0;
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <to_do_before_going_to_standby+0x30c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
			}

		}

		// wykonaj jeśli użytkownik ustawił nowy czas alarmu
		if(alarm_set_flag) {
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <to_do_before_going_to_standby+0x31c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03b      	beq.n	8001b54 <to_do_before_going_to_standby+0x2cc>

			uint8_t days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm;
			char alarm_details_msg[9];

			days_to_alarm = global_buffer[1];	// dni to drugi element, ponieważ pierwszy to literka a
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
												// mówiąca o tym, że ustawiamy alarm.
			hours_to_alarm = global_buffer[2];
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			minutes_to_alarm = global_buffer[3];
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			seconds_to_alarm = global_buffer[4];
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <to_do_before_going_to_standby+0x2f8>)
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				lcd_clear();

				alarm_set_flag = 0;
			}
			else {
				rtc_set_alarm(days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm);
 8001afc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b00:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b04:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8001b08:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8001b0c:	f7fe fe86 	bl	800081c <rtc_set_alarm>

				lcd_clear();
 8001b10:	f7ff fa7a 	bl	8001008 <lcd_clear>
				sprintf(alarm_details_msg, "%02d:%02d:%02d", temp_hours, temp_mins, temp_sec);
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <to_do_before_going_to_standby+0x320>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <to_do_before_going_to_standby+0x324>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <to_do_before_going_to_standby+0x328>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	1d38      	adds	r0, r7, #4
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4918      	ldr	r1, [pc, #96]	; (8001b8c <to_do_before_going_to_standby+0x304>)
 8001b2c:	f004 fd1e 	bl	800656c <siprintf>
				lcd_send_string("Alarm na godz.:");
 8001b30:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <to_do_before_going_to_standby+0x32c>)
 8001b32:	f7ff fb6f 	bl	8001214 <lcd_send_string>
				lcd_second_line();
 8001b36:	f7ff fabe 	bl	80010b6 <lcd_second_line>
				lcd_send_string(alarm_details_msg);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fb69 	bl	8001214 <lcd_send_string>
				HAL_Delay(1000);
 8001b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b46:	f000 fb6b 	bl	8002220 <HAL_Delay>
				lcd_clear();
 8001b4a:	f7ff fa5d 	bl	8001008 <lcd_clear>

				alarm_set_flag = 0;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <to_do_before_going_to_standby+0x31c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
			}

		}

		HAL_Delay(1000);
 8001b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b58:	f000 fb62 	bl	8002220 <HAL_Delay>
	for(int i=0; i<30; i++) {
 8001b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5e:	3301      	adds	r3, #1
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b64:	2b1d      	cmp	r3, #29
 8001b66:	f77f aea2 	ble.w	80018ae <to_do_before_going_to_standby+0x26>
	}

}
 8001b6a:	bf00      	nop
 8001b6c:	3744      	adds	r7, #68	; 0x44
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000016f 	.word	0x2000016f
 8001b78:	2000016c 	.word	0x2000016c
 8001b7c:	20000174 	.word	0x20000174
 8001b80:	20000164 	.word	0x20000164
 8001b84:	08006e50 	.word	0x08006e50
 8001b88:	08006e54 	.word	0x08006e54
 8001b8c:	08006e60 	.word	0x08006e60
 8001b90:	08006e70 	.word	0x08006e70
 8001b94:	2000016b 	.word	0x2000016b
 8001b98:	08006e80 	.word	0x08006e80
 8001b9c:	08006e8c 	.word	0x08006e8c
 8001ba0:	08006ea0 	.word	0x08006ea0
 8001ba4:	2000017c 	.word	0x2000017c
 8001ba8:	2000017b 	.word	0x2000017b
 8001bac:	20000171 	.word	0x20000171
 8001bb0:	2000016a 	.word	0x2000016a
 8001bb4:	08006eb0 	.word	0x08006eb0

08001bb8 <go_to_standby>:

void go_to_standby(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

	// wykonaj jeśli zaczął się alarm
	if(alarm_flag) {
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <go_to_standby+0xbc>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <go_to_standby+0x1e>

		while (alarm_flag) {
 8001bc4:	e001      	b.n	8001bca <go_to_standby+0x12>
			to_do_on_alarm();
 8001bc6:	f7ff f815 	bl	8000bf4 <to_do_on_alarm>
		while (alarm_flag) {
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <go_to_standby+0xbc>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <go_to_standby+0xe>
		}

		to_do_on_alarm_off();
 8001bd2:	f7ff f82b 	bl	8000c2c <to_do_on_alarm_off>
	}

	// Przed wejściem w tryb STANDBY, musimy wyczyścić flagę WU (Wake up)
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <go_to_standby+0xc0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a27      	ldr	r2, [pc, #156]	; (8001c78 <go_to_standby+0xc0>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6013      	str	r3, [r2, #0]

	// Jeśli urzywamy RTC do wybudzenia MCU, w tym projekcie wybudza ALARM A, musimy wyczyścić też flagę RTC Wake up
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <go_to_standby+0xc4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <go_to_standby+0xc4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bf2:	60da      	str	r2, [r3, #12]

	lcd_clear();
 8001bf4:	f7ff fa08 	bl	8001008 <lcd_clear>
	lcd_set_cursor(0, 2);
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fa26 	bl	800104c <lcd_set_cursor>
	lcd_send_string("Entering to");
 8001c00:	481f      	ldr	r0, [pc, #124]	; (8001c80 <go_to_standby+0xc8>)
 8001c02:	f7ff fb07 	bl	8001214 <lcd_send_string>
	lcd_second_line();
 8001c06:	f7ff fa56 	bl	80010b6 <lcd_second_line>
	lcd_send_string("STANDBY MODE...");
 8001c0a:	481e      	ldr	r0, [pc, #120]	; (8001c84 <go_to_standby+0xcc>)
 8001c0c:	f7ff fb02 	bl	8001214 <lcd_send_string>
	HAL_Delay(1000);
 8001c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c14:	f000 fb04 	bl	8002220 <HAL_Delay>
	lcd_clear();
 8001c18:	f7ff f9f6 	bl	8001008 <lcd_clear>

	// Przed wejściem w tryb STANDBY, musimy włączyć pin Wake up, aby mógł nas potem wybudzić z tego stanu
	HAL_PWR_EnableWakeUpPin(WakeUp_PIN_Pin);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f002 fb21 	bl	8004264 <HAL_PWR_EnableWakeUpPin>


	// Wybudzanie układu z trybu STANDBY, defaultowo co 30 sekund

	// Włączenie RTC Wake up			  0x1D4C0 = 120_000 = 30 sekund,	4000 = 1s
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x1D4C0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
 8001c22:	2200      	movs	r2, #0
 8001c24:	4918      	ldr	r1, [pc, #96]	; (8001c88 <go_to_standby+0xd0>)
 8001c26:	4815      	ldr	r0, [pc, #84]	; (8001c7c <go_to_standby+0xc4>)
 8001c28:	f003 fc6a 	bl	8005500 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <go_to_standby+0x7e>
		Error_Handler();
 8001c32:	f7ff fd05 	bl	8001640 <Error_Handler>
	}

	lcd_clear();
 8001c36:	f7ff f9e7 	bl	8001008 <lcd_clear>
	lcd_set_cursor(0, 2);
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff fa05 	bl	800104c <lcd_set_cursor>
	lcd_send_string("STANDBY MODE");
 8001c42:	4812      	ldr	r0, [pc, #72]	; (8001c8c <go_to_standby+0xd4>)
 8001c44:	f7ff fae6 	bl	8001214 <lcd_send_string>
	lcd_second_line();
 8001c48:	f7ff fa35 	bl	80010b6 <lcd_second_line>
	lcd_set_cursor(1, 7);
 8001c4c:	2107      	movs	r1, #7
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff f9fc 	bl	800104c <lcd_set_cursor>
	lcd_send_string("ON");
 8001c54:	480e      	ldr	r0, [pc, #56]	; (8001c90 <go_to_standby+0xd8>)
 8001c56:	f7ff fadd 	bl	8001214 <lcd_send_string>
	HAL_Delay(1000);
 8001c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5e:	f000 fadf 	bl	8002220 <HAL_Delay>
	lcd_back_light_off();
 8001c62:	f7ff f9e7 	bl	8001034 <lcd_back_light_off>
	lcd_clear();
 8001c66:	f7ff f9cf 	bl	8001008 <lcd_clear>

	// Finalnie wchodzimy w tryb STANDBY
	HAL_PWR_EnterSTANDBYMode();
 8001c6a:	f002 fb21 	bl	80042b0 <HAL_PWR_EnterSTANDBYMode>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000016f 	.word	0x2000016f
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	20000238 	.word	0x20000238
 8001c80:	08006ec0 	.word	0x08006ec0
 8001c84:	08006ecc 	.word	0x08006ecc
 8001c88:	0001d4c0 	.word	0x0001d4c0
 8001c8c:	08006e40 	.word	0x08006e40
 8001c90:	08006edc 	.word	0x08006edc

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 fa52 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <RTC_WKUP_IRQHandler+0x10>)
 8001d46:	f003 fcf3 	bl	8005730 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000238 	.word	0x20000238

08001d54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <ADC_IRQHandler+0x10>)
 8001d5a:	f000 fac6 	bl	80022ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000118 	.word	0x20000118

08001d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <USART2_IRQHandler+0x10>)
 8001d6e:	f003 fe19 	bl	80059a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000258 	.word	0x20000258

08001d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d84:	f001 f922 	bl	8002fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <RTC_Alarm_IRQHandler+0x10>)
 8001d92:	f003 fafd 	bl	8005390 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000238 	.word	0x20000238

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f004 fb9a 	bl	8006508 <__errno>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20018000 	.word	0x20018000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	2000010c 	.word	0x2000010c
 8001e08:	200002a0 	.word	0x200002a0

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <SystemInit+0x28>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <SystemInit+0x28>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SystemInit+0x28>)
 8001e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e26:	609a      	str	r2, [r3, #8]
#endif
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <decToBcd>:
#define DS3231_ADDRESS 0xD0

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <decToBcd+0x48>)
 8001e44:	fb82 1203 	smull	r1, r2, r2, r3
 8001e48:	1092      	asrs	r2, r2, #2
 8001e4a:	17db      	asrs	r3, r3, #31
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	b2d8      	uxtb	r0, r3
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <decToBcd+0x48>)
 8001e58:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5c:	1099      	asrs	r1, r3, #2
 8001e5e:	17d3      	asrs	r3, r2, #31
 8001e60:	1ac9      	subs	r1, r1, r3
 8001e62:	460b      	mov	r3, r1
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	1ad1      	subs	r1, r2, r3
 8001e6c:	b2cb      	uxtb	r3, r1
 8001e6e:	4403      	add	r3, r0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	66666667 	.word	0x66666667

08001e84 <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	4413      	add	r3, r2
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <set_Time>:
TIME time;

// Metoda odpowiedzialna za ustawienie czasu i daty
// set_Time(sec, min, hour, dow, dom, month, year)
void set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	4604      	mov	r4, r0
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71bb      	strb	r3, [r7, #6]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	717b      	strb	r3, [r7, #5]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	713b      	strb	r3, [r7, #4]
	uint8_t time_to_write[7];

	time_to_write[0] = decToBcd(sec);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ffaf 	bl	8001e38 <decToBcd>
 8001eda:	4603      	mov	r3, r0
 8001edc:	723b      	strb	r3, [r7, #8]
	time_to_write[1] = decToBcd(min);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ffa9 	bl	8001e38 <decToBcd>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	727b      	strb	r3, [r7, #9]
	time_to_write[2] = decToBcd(hour);
 8001eea:	797b      	ldrb	r3, [r7, #5]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ffa3 	bl	8001e38 <decToBcd>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	72bb      	strb	r3, [r7, #10]
	time_to_write[3] = decToBcd(dow);
 8001ef6:	793b      	ldrb	r3, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff9d 	bl	8001e38 <decToBcd>
 8001efe:	4603      	mov	r3, r0
 8001f00:	72fb      	strb	r3, [r7, #11]
	time_to_write[4] = decToBcd(dom);
 8001f02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff96 	bl	8001e38 <decToBcd>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	733b      	strb	r3, [r7, #12]
	time_to_write[5] = decToBcd(month);
 8001f10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff8f 	bl	8001e38 <decToBcd>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	737b      	strb	r3, [r7, #13]
	time_to_write[6] = decToBcd(year);
 8001f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff88 	bl	8001e38 <decToBcd>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
 8001f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2307      	movs	r3, #7
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2200      	movs	r2, #0
 8001f40:	21d0      	movs	r1, #208	; 0xd0
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <set_Time+0x9c>)
 8001f44:	f001 fa90 	bl	8003468 <HAL_I2C_Mem_Write>
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	200001d4 	.word	0x200001d4

08001f54 <get_Time>:

void get_Time (void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af04      	add	r7, sp, #16
	uint8_t time_to_red[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_red, 7, 1000);
 8001f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	2307      	movs	r3, #7
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	463b      	mov	r3, r7
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	21d0      	movs	r1, #208	; 0xd0
 8001f6e:	481f      	ldr	r0, [pc, #124]	; (8001fec <get_Time+0x98>)
 8001f70:	f001 fb74 	bl	800365c <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_red[0]);
 8001f74:	783b      	ldrb	r3, [r7, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff84 	bl	8001e84 <bcdToDec>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <get_Time+0x9c>)
 8001f82:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_red[1]);
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff7c 	bl	8001e84 <bcdToDec>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <get_Time+0x9c>)
 8001f92:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_red[2]);
 8001f94:	78bb      	ldrb	r3, [r7, #2]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff74 	bl	8001e84 <bcdToDec>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <get_Time+0x9c>)
 8001fa2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_red[3]);
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff6c 	bl	8001e84 <bcdToDec>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <get_Time+0x9c>)
 8001fb2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_red[4]);
 8001fb4:	793b      	ldrb	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff64 	bl	8001e84 <bcdToDec>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <get_Time+0x9c>)
 8001fc2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_red[5]);
 8001fc4:	797b      	ldrb	r3, [r7, #5]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff5c 	bl	8001e84 <bcdToDec>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <get_Time+0x9c>)
 8001fd2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_red[6]);
 8001fd4:	79bb      	ldrb	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff54 	bl	8001e84 <bcdToDec>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <get_Time+0x9c>)
 8001fe2:	719a      	strb	r2, [r3, #6]
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200001d4 	.word	0x200001d4
 8001ff0:	20000174 	.word	0x20000174

08001ff4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <MX_USART2_UART_Init+0x50>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 8002000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_USART2_UART_Init+0x4c>)
 800202c:	f003 fbd2 	bl	80057d4 <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002036:	f7ff fb03 	bl	8001640 <Error_Handler>
  }

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000258 	.word	0x20000258
 8002044:	40004400 	.word	0x40004400

08002048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_UART_MspInit+0x94>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d133      	bne.n	80020d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_UART_MspInit+0x98>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_UART_MspInit+0x98>)
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_UART_MspInit+0x98>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_UART_MspInit+0x98>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_UART_MspInit+0x98>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_UART_MspInit+0x98>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a2:	230c      	movs	r3, #12
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b2:	2307      	movs	r3, #7
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <HAL_UART_MspInit+0x9c>)
 80020be:	f000 fdcf 	bl	8002c60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2026      	movs	r0, #38	; 0x26
 80020c8:	f000 fd71 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020cc:	2026      	movs	r0, #38	; 0x26
 80020ce:	f000 fd8a 	bl	8002be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40004400 	.word	0x40004400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000

080020e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ee:	e003      	b.n	80020f8 <LoopCopyDataInit>

080020f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020f6:	3104      	adds	r1, #4

080020f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002100:	d3f6      	bcc.n	80020f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002104:	e002      	b.n	800210c <LoopFillZerobss>

08002106 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002106:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002108:	f842 3b04 	str.w	r3, [r2], #4

0800210c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800210e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002110:	d3f9      	bcc.n	8002106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002112:	f7ff fe7b 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002116:	f004 f9fd 	bl	8006514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211a:	f7ff f9b1 	bl	8001480 <main>
  bx  lr    
 800211e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002120:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002124:	08006f3c 	.word	0x08006f3c
  ldr  r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800212c:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8002130:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8002134:	200002a0 	.word	0x200002a0

08002138 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <DMA1_Stream0_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_Init+0x40>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_Init+0x40>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_Init+0x40>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 fd17 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	2000      	movs	r0, #0
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fd90 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fd2f 	bl	8002c02 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 fcf7 	bl	8002bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000007c 	.word	0x2000007c
 80021d8:	20000084 	.word	0x20000084
 80021dc:	20000080 	.word	0x20000080

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000084 	.word	0x20000084
 8002204:	20000298 	.word	0x20000298

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000298 	.word	0x20000298

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_Delay+0x40>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000084 	.word	0x20000084

08002264 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e033      	b.n	80022e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe f9d6 	bl	8000634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa98 	bl	80027ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d049      	beq.n	80023c0 <HAL_ADC_IRQHandler+0xd6>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d046      	beq.n	80023c0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12b      	bne.n	80023b0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800235c:	2b00      	cmp	r3, #0
 800235e:	d127      	bne.n	80023b0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002378:	2b00      	cmp	r3, #0
 800237a:	d119      	bne.n	80023b0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0220 	bic.w	r2, r2, #32
 800238a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8db 	bl	800256c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0212 	mvn.w	r2, #18
 80023be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d057      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x1b8>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d054      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d139      	bne.n	8002492 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002436:	2b00      	cmp	r3, #0
 8002438:	d12b      	bne.n	8002492 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d124      	bne.n	8002492 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 faa6 	bl	80029e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 020c 	mvn.w	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d017      	beq.n	8002504 <HAL_ADC_IRQHandler+0x21a>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d014      	beq.n	8002504 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10d      	bne.n	8002504 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f843 	bl	8002580 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0201 	mvn.w	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b20      	cmp	r3, #32
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d015      	beq.n	8002564 <HAL_ADC_IRQHandler+0x27a>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f043 0202 	orr.w	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0220 	mvn.w	r2, #32
 8002552:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f81d 	bl	8002594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0220 	mvn.w	r2, #32
 8002562:	601a      	str	r2, [r3, #0]
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e105      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x228>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	d925      	bls.n	8002620 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68d9      	ldr	r1, [r3, #12]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	3b1e      	subs	r3, #30
 80025ea:	2207      	movs	r2, #7
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	4618      	mov	r0, r3
 800260c:	4603      	mov	r3, r0
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4403      	add	r3, r0
 8002612:	3b1e      	subs	r3, #30
 8002614:	409a      	lsls	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	e022      	b.n	8002666 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6919      	ldr	r1, [r3, #16]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	2207      	movs	r2, #7
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6919      	ldr	r1, [r3, #16]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	4603      	mov	r3, r0
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4403      	add	r3, r0
 800265c:	409a      	lsls	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b06      	cmp	r3, #6
 800266c:	d824      	bhi.n	80026b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b05      	subs	r3, #5
 8002680:	221f      	movs	r2, #31
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	400a      	ands	r2, r1
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b05      	subs	r3, #5
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
 80026b6:	e04c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d824      	bhi.n	800270a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b23      	subs	r3, #35	; 0x23
 80026d2:	221f      	movs	r2, #31
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43da      	mvns	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	400a      	ands	r2, r1
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b23      	subs	r3, #35	; 0x23
 80026fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
 8002708:	e023      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b41      	subs	r3, #65	; 0x41
 800271c:	221f      	movs	r2, #31
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	400a      	ands	r2, r1
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4618      	mov	r0, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	3b41      	subs	r3, #65	; 0x41
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_ADC_ConfigChannel+0x234>)
 8002754:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_ADC_ConfigChannel+0x238>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d109      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1cc>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b12      	cmp	r3, #18
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_ADC_ConfigChannel+0x238>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d123      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x21e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b10      	cmp	r3, #16
 8002784:	d003      	beq.n	800278e <HAL_ADC_ConfigChannel+0x1e6>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b11      	cmp	r3, #17
 800278c:	d11b      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d111      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_ADC_ConfigChannel+0x23c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_ADC_ConfigChannel+0x240>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	0c9a      	lsrs	r2, r3, #18
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	40012000 	.word	0x40012000
 80027e4:	2000007c 	.word	0x2000007c
 80027e8:	431bde83 	.word	0x431bde83

080027ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f4:	4b79      	ldr	r3, [pc, #484]	; (80029dc <ADC_Init+0x1f0>)
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	021a      	lsls	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <ADC_Init+0x1f4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e00f      	b.n	80028ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0202 	bic.w	r2, r2, #2
 80028f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
 8002904:	005a      	lsls	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002926:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	3b01      	subs	r3, #1
 8002944:	035a      	lsls	r2, r3, #13
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	e007      	b.n	8002960 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	3b01      	subs	r3, #1
 800297c:	051a      	lsls	r2, r3, #20
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a2:	025a      	lsls	r2, r3, #9
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	029a      	lsls	r2, r3, #10
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40012300 	.word	0x40012300
 80029e0:	0f000001 	.word	0x0f000001

080029e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff29 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc0:	f7ff ff3e 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7ff ff8e 	bl	8002aec <NVIC_EncodePriority>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff5d 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff31 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffa2 	bl	8002b54 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d004      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e00c      	b.n	8002c52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e159      	b.n	8002f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f040 8148 	bne.w	8002f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d00b      	beq.n	8002cba <HAL_GPIO_Init+0x5a>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d007      	beq.n	8002cba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cae:	2b11      	cmp	r3, #17
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b12      	cmp	r3, #18
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0xfc>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d123      	bne.n	8002da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	08da      	lsrs	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3208      	adds	r2, #8
 8002d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	08da      	lsrs	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	69b9      	ldr	r1, [r7, #24]
 8002da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a2 	beq.w	8002f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a55      	ldr	r2, [pc, #340]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e02:	4a51      	ldr	r2, [pc, #324]	; (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_GPIO_Init+0x2ec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d019      	beq.n	8002e62 <HAL_GPIO_Init+0x202>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a47      	ldr	r2, [pc, #284]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_Init+0x1fe>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <HAL_GPIO_Init+0x2f4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00d      	beq.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a45      	ldr	r2, [pc, #276]	; (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_GPIO_Init+0x1f2>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x204>
 8002e52:	2307      	movs	r3, #7
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x204>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x204>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x204>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x204>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4934      	ldr	r1, [pc, #208]	; (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e82:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea6:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efa:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f aea2 	bls.w	8002c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3724      	adds	r7, #36	; 0x24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40013800 	.word	0x40013800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020c00 	.word	0x40020c00
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40013c00 	.word	0x40013c00

08002f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
 8002f70:	4613      	mov	r3, r2
 8002f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f74:	787b      	ldrb	r3, [r7, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f80:	e003      	b.n	8002f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	041a      	lsls	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	401a      	ands	r2, r3
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d104      	bne.n	8002fba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	041a      	lsls	r2, r3, #16
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fe32 	bl	8000c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40013c00 	.word	0x40013c00

08002ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e11f      	b.n	800324e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fef8 	bl	8000e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003060:	f001 fd52 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a7b      	ldr	r2, [pc, #492]	; (8003258 <HAL_I2C_Init+0x25c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d807      	bhi.n	8003080 <HAL_I2C_Init+0x84>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a7a      	ldr	r2, [pc, #488]	; (800325c <HAL_I2C_Init+0x260>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e006      	b.n	800308e <HAL_I2C_Init+0x92>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a77      	ldr	r2, [pc, #476]	; (8003260 <HAL_I2C_Init+0x264>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0db      	b.n	800324e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a72      	ldr	r2, [pc, #456]	; (8003264 <HAL_I2C_Init+0x268>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a64      	ldr	r2, [pc, #400]	; (8003258 <HAL_I2C_Init+0x25c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d802      	bhi.n	80030d0 <HAL_I2C_Init+0xd4>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	e009      	b.n	80030e4 <HAL_I2C_Init+0xe8>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a63      	ldr	r2, [pc, #396]	; (8003268 <HAL_I2C_Init+0x26c>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	3301      	adds	r3, #1
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4956      	ldr	r1, [pc, #344]	; (8003258 <HAL_I2C_Init+0x25c>)
 8003100:	428b      	cmp	r3, r1
 8003102:	d80d      	bhi.n	8003120 <HAL_I2C_Init+0x124>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	2b04      	cmp	r3, #4
 800311a:	bf38      	it	cc
 800311c:	2304      	movcc	r3, #4
 800311e:	e04f      	b.n	80031c0 <HAL_I2C_Init+0x1c4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <HAL_I2C_Init+0x150>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e012      	b.n	8003172 <HAL_I2C_Init+0x176>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x17e>
 8003176:	2301      	movs	r3, #1
 8003178:	e022      	b.n	80031c0 <HAL_I2C_Init+0x1c4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10e      	bne.n	80031a0 <HAL_I2C_Init+0x1a4>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e58      	subs	r0, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	fbb0 f3f3 	udiv	r3, r0, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Init+0x1c4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	0099      	lsls	r1, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6809      	ldr	r1, [r1, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6911      	ldr	r1, [r2, #16]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	000186a0 	.word	0x000186a0
 800325c:	001e847f 	.word	0x001e847f
 8003260:	003d08ff 	.word	0x003d08ff
 8003264:	431bde83 	.word	0x431bde83
 8003268:	10624dd3 	.word	0x10624dd3

0800326c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	460b      	mov	r3, r1
 800327a:	817b      	strh	r3, [r7, #10]
 800327c:	4613      	mov	r3, r2
 800327e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7fe ffc2 	bl	8002208 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	f040 80e0 	bne.w	8003454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2319      	movs	r3, #25
 800329a:	2201      	movs	r2, #1
 800329c:	4970      	ldr	r1, [pc, #448]	; (8003460 <HAL_I2C_Master_Transmit+0x1f4>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fe02 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	e0d3      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x50>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0cc      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d007      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2221      	movs	r2, #33	; 0x21
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2210      	movs	r2, #16
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	893a      	ldrh	r2, [r7, #8]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a50      	ldr	r2, [pc, #320]	; (8003464 <HAL_I2C_Master_Transmit+0x1f8>)
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003324:	8979      	ldrh	r1, [r7, #10]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fbbc 	bl	8003aa8 <I2C_MasterRequestWrite>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e08d      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003350:	e066      	b.n	8003420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fe7c 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b04      	cmp	r3, #4
 8003368:	d107      	bne.n	800337a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e06b      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11b      	bne.n	80033f4 <HAL_I2C_Master_Transmit+0x188>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d017      	beq.n	80033f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	6a39      	ldr	r1, [r7, #32]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fe6c 	bl	80040d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e01a      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d194      	bne.n	8003352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	00100002 	.word	0x00100002
 8003464:	ffff0000 	.word	0xffff0000

08003468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003482:	f7fe fec1 	bl	8002208 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	f040 80d9 	bne.w	8003648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	2319      	movs	r3, #25
 800349c:	2201      	movs	r2, #1
 800349e:	496d      	ldr	r1, [pc, #436]	; (8003654 <HAL_I2C_Mem_Write+0x1ec>)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fd01 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0cc      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Mem_Write+0x56>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0c5      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d007      	beq.n	80034e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2221      	movs	r2, #33	; 0x21
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a4d      	ldr	r2, [pc, #308]	; (8003658 <HAL_I2C_Mem_Write+0x1f0>)
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003526:	88f8      	ldrh	r0, [r7, #6]
 8003528:	893a      	ldrh	r2, [r7, #8]
 800352a:	8979      	ldrh	r1, [r7, #10]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	4603      	mov	r3, r0
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fb38 	bl	8003bac <I2C_RequestMemoryWrite>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d052      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e081      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fd82 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b04      	cmp	r3, #4
 800355c:	d107      	bne.n	800356e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06b      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_I2C_Mem_Write+0x180>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d017      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1aa      	bne.n	8003546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fd6e 	bl	80040d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e016      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	00100002 	.word	0x00100002
 8003658:	ffff0000 	.word	0xffff0000

0800365c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003676:	f7fe fdc7 	bl	8002208 <HAL_GetTick>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	f040 8208 	bne.w	8003a9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2319      	movs	r3, #25
 8003690:	2201      	movs	r2, #1
 8003692:	497b      	ldr	r1, [pc, #492]	; (8003880 <HAL_I2C_Mem_Read+0x224>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fc07 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	e1fb      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x56>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e1f4      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d007      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	; 0x22
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_I2C_Mem_Read+0x228>)
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800371a:	88f8      	ldrh	r0, [r7, #6]
 800371c:	893a      	ldrh	r2, [r7, #8]
 800371e:	8979      	ldrh	r1, [r7, #10]
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4603      	mov	r3, r0
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fad4 	bl	8003cd8 <I2C_RequestMemoryRead>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1b0      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e184      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	2b01      	cmp	r3, #1
 8003770:	d11b      	bne.n	80037aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e164      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d11b      	bne.n	80037ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	e144      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003800:	e138      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	2b03      	cmp	r3, #3
 8003808:	f200 80f1 	bhi.w	80039ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b01      	cmp	r3, #1
 8003812:	d123      	bne.n	800385c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fc9d 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e139      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800385a:	e10b      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	2b02      	cmp	r3, #2
 8003862:	d14e      	bne.n	8003902 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	2200      	movs	r2, #0
 800386c:	4906      	ldr	r1, [pc, #24]	; (8003888 <HAL_I2C_Mem_Read+0x22c>)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fb1a 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e10e      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
 800387e:	bf00      	nop
 8003880:	00100002 	.word	0x00100002
 8003884:	ffff0000 	.word	0xffff0000
 8003888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003900:	e0b8      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2200      	movs	r2, #0
 800390a:	4966      	ldr	r1, [pc, #408]	; (8003aa4 <HAL_I2C_Mem_Read+0x448>)
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 facb 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0bf      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2200      	movs	r2, #0
 8003966:	494f      	ldr	r1, [pc, #316]	; (8003aa4 <HAL_I2C_Mem_Read+0x448>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fa9d 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e091      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ec:	e042      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fbb0 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e04c      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d118      	bne.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f aec2 	bne.w	8003802 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	00010004 	.word	0x00010004

08003aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d006      	beq.n	8003ad2 <I2C_MasterRequestWrite+0x2a>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d003      	beq.n	8003ad2 <I2C_MasterRequestWrite+0x2a>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad0:	d108      	bne.n	8003ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e00b      	b.n	8003afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b12      	cmp	r3, #18
 8003aea:	d107      	bne.n	8003afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f9cd 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b22:	d103      	bne.n	8003b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e035      	b.n	8003b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b38:	d108      	bne.n	8003b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b48:	611a      	str	r2, [r3, #16]
 8003b4a:	e01b      	b.n	8003b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b4c:	897b      	ldrh	r3, [r7, #10]
 8003b4e:	11db      	asrs	r3, r3, #7
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 030f 	orn	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <I2C_MasterRequestWrite+0xfc>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f9f3 	bl	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e010      	b.n	8003b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <I2C_MasterRequestWrite+0x100>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f9e3 	bl	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	00010008 	.word	0x00010008
 8003ba8:	00010002 	.word	0x00010002

08003bac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	817b      	strh	r3, [r7, #10]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	813b      	strh	r3, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f960 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfc:	d103      	bne.n	8003c06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e05f      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	492d      	ldr	r1, [pc, #180]	; (8003cd4 <I2C_RequestMemoryWrite+0x128>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f998 	bl	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e04c      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	6a39      	ldr	r1, [r7, #32]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa02 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d107      	bne.n	8003c6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e02b      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c78:	893b      	ldrh	r3, [r7, #8]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	e021      	b.n	8003cc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f9dc 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e005      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbe:	893b      	ldrh	r3, [r7, #8]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	00010002 	.word	0x00010002

08003cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	460b      	mov	r3, r1
 8003cec:	813b      	strh	r3, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f8c2 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d38:	d103      	bne.n	8003d42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0aa      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	4952      	ldr	r1, [pc, #328]	; (8003ea4 <I2C_RequestMemoryRead+0x1cc>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8fa 	bl	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e097      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f964 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e076      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	e021      	b.n	8003e04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f93e 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e050      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	6a39      	ldr	r1, [r7, #32]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f923 	bl	8004054 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e035      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f82b 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e66:	d103      	bne.n	8003e70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e013      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e74:	897b      	ldrh	r3, [r7, #10]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	4906      	ldr	r1, [pc, #24]	; (8003ea4 <I2C_RequestMemoryRead+0x1cc>)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f863 	bl	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	00010002 	.word	0x00010002

08003ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb8:	e025      	b.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d021      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fe f9a1 	bl	8002208 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e023      	b.n	8003f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10d      	bne.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	e00c      	b.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	43da      	mvns	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d0b6      	beq.n	8003eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f64:	e051      	b.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d123      	bne.n	8003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0204 	orr.w	r2, r3, #4
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e046      	b.n	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d021      	beq.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fe f91f 	bl	8002208 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d116      	bne.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0220 	orr.w	r2, r3, #32
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e020      	b.n	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10c      	bne.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e00b      	b.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d18d      	bne.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004060:	e02d      	b.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8ce 	bl	8004204 <I2C_IsAcknowledgeFailed>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e02d      	b.n	80040ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d021      	beq.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fe f8c5 	bl	8002208 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d116      	bne.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e007      	b.n	80040ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d1ca      	bne.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040e2:	e02d      	b.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f88d 	bl	8004204 <I2C_IsAcknowledgeFailed>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e02d      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d021      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fc:	f7fe f884 	bl	8002208 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	429a      	cmp	r2, r3
 800410a:	d302      	bcc.n	8004112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d116      	bne.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e007      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d1ca      	bne.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004164:	e042      	b.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d119      	bne.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e029      	b.n	80041fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fe f82e 	bl	8002208 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e007      	b.n	80041fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d1b5      	bne.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d11b      	bne.n	8004254 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004224:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_PWR_EnableWakeUpPin+0x20>)
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4904      	ldr	r1, [pc, #16]	; (8004284 <HAL_PWR_EnableWakeUpPin+0x20>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_PWR_DisableWakeUpPin+0x24>)
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	43db      	mvns	r3, r3
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_PWR_DisableWakeUpPin+0x24>)
 800429a:	4013      	ands	r3, r2
 800429c:	604b      	str	r3, [r1, #4]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000

080042b0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80042cc:	bf30      	wfi
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40007000 	.word	0x40007000
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e25b      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d075      	beq.n	80043ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fe:	4ba3      	ldr	r3, [pc, #652]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00c      	beq.n	8004324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430a:	4ba0      	ldr	r3, [pc, #640]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004312:	2b08      	cmp	r3, #8
 8004314:	d112      	bne.n	800433c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004316:	4b9d      	ldr	r3, [pc, #628]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004322:	d10b      	bne.n	800433c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004324:	4b99      	ldr	r3, [pc, #612]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05b      	beq.n	80043e8 <HAL_RCC_OscConfig+0x108>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d157      	bne.n	80043e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e236      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x74>
 8004346:	4b91      	ldr	r3, [pc, #580]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a90      	ldr	r2, [pc, #576]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xb0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x98>
 800435e:	4b8b      	ldr	r3, [pc, #556]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a8a      	ldr	r2, [pc, #552]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a87      	ldr	r2, [pc, #540]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xb0>
 8004378:	4b84      	ldr	r3, [pc, #528]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a83      	ldr	r2, [pc, #524]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b81      	ldr	r3, [pc, #516]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a80      	ldr	r2, [pc, #512]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd ff36 	bl	8002208 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fd ff32 	bl	8002208 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e1fb      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd ff22 	bl	8002208 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd ff1e 	bl	8002208 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1e7      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	4b6c      	ldr	r3, [pc, #432]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0xe8>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f6:	4b65      	ldr	r3, [pc, #404]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004402:	4b62      	ldr	r3, [pc, #392]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440e:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b5c      	ldr	r3, [pc, #368]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x152>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1bb      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b56      	ldr	r3, [pc, #344]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4952      	ldr	r1, [pc, #328]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b4f      	ldr	r3, [pc, #316]	; (8004590 <HAL_RCC_OscConfig+0x2b0>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd fed7 	bl	8002208 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd fed3 	bl	8002208 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e19c      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b46      	ldr	r3, [pc, #280]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4940      	ldr	r1, [pc, #256]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b3f      	ldr	r3, [pc, #252]	; (8004590 <HAL_RCC_OscConfig+0x2b0>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd feb6 	bl	8002208 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fd feb2 	bl	8002208 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e17b      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b36      	ldr	r3, [pc, #216]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d030      	beq.n	800452c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_RCC_OscConfig+0x2b4>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fd fe96 	bl	8002208 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fd fe92 	bl	8002208 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e15b      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x200>
 80044fe:	e015      	b.n	800452c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004500:	4b24      	ldr	r3, [pc, #144]	; (8004594 <HAL_RCC_OscConfig+0x2b4>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004506:	f7fd fe7f 	bl	8002208 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450e:	f7fd fe7b 	bl	8002208 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e144      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	4b1a      	ldr	r3, [pc, #104]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a0 	beq.w	800467a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a0e      	ldr	r2, [pc, #56]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_OscConfig+0x2ac>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x2b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d121      	bne.n	80045ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_RCC_OscConfig+0x2b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a07      	ldr	r2, [pc, #28]	; (8004598 <HAL_RCC_OscConfig+0x2b8>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004582:	f7fd fe41 	bl	8002208 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	e011      	b.n	80045ae <HAL_RCC_OscConfig+0x2ce>
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	42470000 	.word	0x42470000
 8004594:	42470e80 	.word	0x42470e80
 8004598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459c:	f7fd fe34 	bl	8002208 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0fd      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d106      	bne.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
 80045c2:	4b7d      	ldr	r3, [pc, #500]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a7c      	ldr	r2, [pc, #496]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	e01c      	b.n	800460a <HAL_RCC_OscConfig+0x32a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCC_OscConfig+0x312>
 80045d8:	4b77      	ldr	r3, [pc, #476]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	4a76      	ldr	r2, [pc, #472]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70
 80045e4:	4b74      	ldr	r3, [pc, #464]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	4a73      	ldr	r2, [pc, #460]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	; 0x70
 80045f0:	e00b      	b.n	800460a <HAL_RCC_OscConfig+0x32a>
 80045f2:	4b71      	ldr	r3, [pc, #452]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a70      	ldr	r2, [pc, #448]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
 80045fe:	4b6e      	ldr	r3, [pc, #440]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d015      	beq.n	800463e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fd fdf9 	bl	8002208 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fd fdf5 	bl	8002208 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0bc      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ee      	beq.n	800461a <HAL_RCC_OscConfig+0x33a>
 800463c:	e014      	b.n	8004668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463e:	f7fd fde3 	bl	8002208 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd fddf 	bl	8002208 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0a6      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465c:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ee      	bne.n	8004646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4b52      	ldr	r3, [pc, #328]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a51      	ldr	r2, [pc, #324]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8092 	beq.w	80047a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004684:	4b4c      	ldr	r3, [pc, #304]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b08      	cmp	r3, #8
 800468e:	d05c      	beq.n	800474a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d141      	bne.n	800471c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b48      	ldr	r3, [pc, #288]	; (80047bc <HAL_RCC_OscConfig+0x4dc>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd fdb3 	bl	8002208 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fd fdaf 	bl	8002208 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e078      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	019b      	lsls	r3, r3, #6
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	041b      	lsls	r3, r3, #16
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	4933      	ldr	r1, [pc, #204]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ee:	4b33      	ldr	r3, [pc, #204]	; (80047bc <HAL_RCC_OscConfig+0x4dc>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fd fd88 	bl	8002208 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fd fd84 	bl	8002208 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e04d      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x41c>
 800471a:	e045      	b.n	80047a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x4dc>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fd fd71 	bl	8002208 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472a:	f7fd fd6d 	bl	8002208 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e036      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x44a>
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e029      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	429a      	cmp	r2, r3
 8004768:	d11c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d115      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004784:	4293      	cmp	r3, r2
 8004786:	d10d      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d106      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40007000 	.word	0x40007000
 80047b8:	40023800 	.word	0x40023800
 80047bc:	42470060 	.word	0x42470060

080047c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0cc      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b68      	ldr	r3, [pc, #416]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d90c      	bls.n	80047fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b63      	ldr	r3, [pc, #396]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0b8      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004814:	4b59      	ldr	r3, [pc, #356]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a58      	ldr	r2, [pc, #352]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800481e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800482c:	4b53      	ldr	r3, [pc, #332]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a52      	ldr	r2, [pc, #328]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004838:	4b50      	ldr	r3, [pc, #320]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	494d      	ldr	r1, [pc, #308]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d044      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	4b47      	ldr	r3, [pc, #284]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d119      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e07f      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d003      	beq.n	800487e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487a:	2b03      	cmp	r3, #3
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b3f      	ldr	r3, [pc, #252]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e06f      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b3b      	ldr	r3, [pc, #236]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e067      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4934      	ldr	r1, [pc, #208]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b0:	f7fd fcaa 	bl	8002208 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd fca6 	bl	8002208 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e04f      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d20c      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e032      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4916      	ldr	r1, [pc, #88]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	490e      	ldr	r1, [pc, #56]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004946:	f000 f821 	bl	800498c <HAL_RCC_GetSysClockFreq>
 800494a:	4601      	mov	r1, r0
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
 800495a:	fa21 f303 	lsr.w	r3, r1, r3
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_RCC_ClockConfig+0x1c8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fd fc0a 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023c00 	.word	0x40023c00
 800497c:	40023800 	.word	0x40023800
 8004980:	08006ee0 	.word	0x08006ee0
 8004984:	2000007c 	.word	0x2000007c
 8004988:	20000080 	.word	0x20000080

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	2300      	movs	r3, #0
 800499c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a2:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d007      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0x32>
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d008      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0x38>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 808d 	bne.w	8004ad2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b8:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80049ba:	60bb      	str	r3, [r7, #8]
       break;
 80049bc:	e08c      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049be:	4b4b      	ldr	r3, [pc, #300]	; (8004aec <HAL_RCC_GetSysClockFreq+0x160>)
 80049c0:	60bb      	str	r3, [r7, #8]
      break;
 80049c2:	e089      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c4:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ce:	4b45      	ldr	r3, [pc, #276]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d023      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049da:	4b42      	ldr	r3, [pc, #264]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	f04f 0400 	mov.w	r4, #0
 80049e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	ea03 0501 	and.w	r5, r3, r1
 80049f0:	ea04 0602 	and.w	r6, r4, r2
 80049f4:	4a3d      	ldr	r2, [pc, #244]	; (8004aec <HAL_RCC_GetSysClockFreq+0x160>)
 80049f6:	fb02 f106 	mul.w	r1, r2, r6
 80049fa:	2200      	movs	r2, #0
 80049fc:	fb02 f205 	mul.w	r2, r2, r5
 8004a00:	440a      	add	r2, r1
 8004a02:	493a      	ldr	r1, [pc, #232]	; (8004aec <HAL_RCC_GetSysClockFreq+0x160>)
 8004a04:	fba5 0101 	umull	r0, r1, r5, r1
 8004a08:	1853      	adds	r3, r2, r1
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f04f 0400 	mov.w	r4, #0
 8004a12:	461a      	mov	r2, r3
 8004a14:	4623      	mov	r3, r4
 8004a16:	f7fb fc3b 	bl	8000290 <__aeabi_uldivmod>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e049      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	ea03 0501 	and.w	r5, r3, r1
 8004a38:	ea04 0602 	and.w	r6, r4, r2
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4632      	mov	r2, r6
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	0154      	lsls	r4, r2, #5
 8004a4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a4e:	014b      	lsls	r3, r1, #5
 8004a50:	4619      	mov	r1, r3
 8004a52:	4622      	mov	r2, r4
 8004a54:	1b49      	subs	r1, r1, r5
 8004a56:	eb62 0206 	sbc.w	r2, r2, r6
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	f04f 0400 	mov.w	r4, #0
 8004a62:	0194      	lsls	r4, r2, #6
 8004a64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a68:	018b      	lsls	r3, r1, #6
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	00e2      	lsls	r2, r4, #3
 8004a7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a7e:	00d9      	lsls	r1, r3, #3
 8004a80:	460b      	mov	r3, r1
 8004a82:	4614      	mov	r4, r2
 8004a84:	195b      	adds	r3, r3, r5
 8004a86:	eb44 0406 	adc.w	r4, r4, r6
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	02a2      	lsls	r2, r4, #10
 8004a94:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a98:	0299      	lsls	r1, r3, #10
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f04f 0400 	mov.w	r4, #0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	f7fb fbf0 	bl	8000290 <__aeabi_uldivmod>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	60bb      	str	r3, [r7, #8]
      break;
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ad4:	60bb      	str	r3, [r7, #8]
      break;
 8004ad6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	017d7840 	.word	0x017d7840

08004af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	2000007c 	.word	0x2000007c

08004b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b0c:	f7ff fff0 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b10:	4601      	mov	r1, r0
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0a9b      	lsrs	r3, r3, #10
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4a03      	ldr	r2, [pc, #12]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1e:	5cd3      	ldrb	r3, [r2, r3]
 8004b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08006ef0 	.word	0x08006ef0

08004b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b34:	f7ff ffdc 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b38:	4601      	mov	r1, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0b5b      	lsrs	r3, r3, #13
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4a03      	ldr	r2, [pc, #12]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b46:	5cd3      	ldrb	r3, [r2, r3]
 8004b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	08006ef0 	.word	0x08006ef0

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d035      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b80:	4b67      	ldr	r3, [pc, #412]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b86:	f7fd fb3f 	bl	8002208 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b8e:	f7fd fb3b 	bl	8002208 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0ba      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba0:	4b60      	ldr	r3, [pc, #384]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f0      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	019a      	lsls	r2, r3, #6
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	071b      	lsls	r3, r3, #28
 8004bb8:	495a      	ldr	r1, [pc, #360]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bc0:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc6:	f7fd fb1f 	bl	8002208 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bce:	f7fd fb1b 	bl	8002208 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e09a      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be0:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8083 	beq.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a48      	ldr	r2, [pc, #288]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0a:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c16:	4b44      	ldr	r3, [pc, #272]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a43      	ldr	r2, [pc, #268]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c22:	f7fd faf1 	bl	8002208 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fd faed 	bl	8002208 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e06c      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c3c:	4b3a      	ldr	r3, [pc, #232]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c48:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02f      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d114      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fd fabb 	bl	8002208 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd fab7 	bl	8002208 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e034      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cc6:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	4912      	ldr	r1, [pc, #72]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ce8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cec:	6093      	str	r3, [r2, #8]
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfa:	490a      	ldr	r1, [pc, #40]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1a      	ldrb	r2, [r3, #16]
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d12:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	42470068 	.word	0x42470068
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470e40 	.word	0x42470e40
 8004d30:	424711e0 	.word	0x424711e0

08004d34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e083      	b.n	8004e4e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7f5b      	ldrb	r3, [r3, #29]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fd10 	bl	800177c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	22ca      	movs	r2, #202	; 0xca
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2253      	movs	r2, #83	; 0x53
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fb7a 	bl	800546c <RTC_EnterInitMode>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	22ff      	movs	r2, #255	; 0xff
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2204      	movs	r2, #4
 8004d8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e05e      	b.n	8004e4e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68d2      	ldr	r2, [r2, #12]
 8004dca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6919      	ldr	r1, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	041a      	lsls	r2, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10e      	bne.n	8004e1c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fb0c 	bl	800541c <HAL_RTC_WaitForSynchro>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	22ff      	movs	r2, #255	; 0xff
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e018      	b.n	8004e4e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e56:	b590      	push	{r4, r7, lr}
 8004e58:	b087      	sub	sp, #28
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	7f1b      	ldrb	r3, [r3, #28]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_RTC_SetTime+0x1c>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e0aa      	b.n	8004fc8 <HAL_RTC_SetTime+0x172>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d126      	bne.n	8004ed2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fb11 	bl	80054c4 <RTC_ByteToBcd2>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fb0a 	bl	80054c4 <RTC_ByteToBcd2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004eb4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fb02 	bl	80054c4 <RTC_ByteToBcd2>
 8004ec0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004ec2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e018      	b.n	8004f04 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ef2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ef8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	78db      	ldrb	r3, [r3, #3]
 8004efe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	22ca      	movs	r2, #202	; 0xca
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2253      	movs	r2, #83	; 0x53
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 faa9 	bl	800546c <RTC_EnterInitMode>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e047      	b.n	8004fc8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6899      	ldr	r1, [r3, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d111      	bne.n	8004fb2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fa44 	bl	800541c <HAL_RTC_WaitForSynchro>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	22ff      	movs	r2, #255	; 0xff
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	22ff      	movs	r2, #255	; 0xff
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}

08004fd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	7f1b      	ldrb	r3, [r3, #28]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_RTC_SetDate+0x1c>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e094      	b.n	8005116 <HAL_RTC_SetDate+0x146>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10e      	bne.n	800501c <HAL_RTC_SetDate+0x4c>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	b2db      	uxtb	r3, r3
 8005014:	330a      	adds	r3, #10
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11c      	bne.n	800505c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	78db      	ldrb	r3, [r3, #3]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa4c 	bl	80054c4 <RTC_ByteToBcd2>
 800502c:	4603      	mov	r3, r0
 800502e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fa45 	bl	80054c4 <RTC_ByteToBcd2>
 800503a:	4603      	mov	r3, r0
 800503c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800503e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	789b      	ldrb	r3, [r3, #2]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fa3d 	bl	80054c4 <RTC_ByteToBcd2>
 800504a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800504c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e00e      	b.n	800507a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	78db      	ldrb	r3, [r3, #3]
 8005060:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005068:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800506e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	22ca      	movs	r2, #202	; 0xca
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2253      	movs	r2, #83	; 0x53
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f9ee 	bl	800546c <RTC_EnterInitMode>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	22ff      	movs	r2, #255	; 0xff
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2204      	movs	r2, #4
 80050a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e033      	b.n	8005116 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d111      	bne.n	8005100 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f99d 	bl	800541c <HAL_RTC_WaitForSynchro>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	22ff      	movs	r2, #255	; 0xff
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2204      	movs	r2, #4
 80050f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e00a      	b.n	8005116 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005114:	2300      	movs	r3, #0
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	bd90      	pop	{r4, r7, pc}
	...

08005120 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005134:	4b93      	ldr	r3, [pc, #588]	; (8005384 <HAL_RTC_SetAlarm_IT+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a93      	ldr	r2, [pc, #588]	; (8005388 <HAL_RTC_SetAlarm_IT+0x268>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0adb      	lsrs	r3, r3, #11
 8005140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	7f1b      	ldrb	r3, [r3, #28]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_RTC_SetAlarm_IT+0x36>
 8005152:	2302      	movs	r3, #2
 8005154:	e111      	b.n	800537a <HAL_RTC_SetAlarm_IT+0x25a>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2202      	movs	r2, #2
 8005160:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d137      	bne.n	80051d8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f99f 	bl	80054c4 <RTC_ByteToBcd2>
 8005186:	4603      	mov	r3, r0
 8005188:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f998 	bl	80054c4 <RTC_ByteToBcd2>
 8005194:	4603      	mov	r3, r0
 8005196:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005198:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	789b      	ldrb	r3, [r3, #2]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f990 	bl	80054c4 <RTC_ByteToBcd2>
 80051a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	78db      	ldrb	r3, [r3, #3]
 80051ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80051b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f982 	bl	80054c4 <RTC_ByteToBcd2>
 80051c0:	4603      	mov	r3, r0
 80051c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	e023      	b.n	8005220 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005206:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005210:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005216:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800521c:	4313      	orrs	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	4313      	orrs	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	22ca      	movs	r2, #202	; 0xca
 8005232:	625a      	str	r2, [r3, #36]	; 0x24
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2253      	movs	r2, #83	; 0x53
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	d141      	bne.n	80052ca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005254:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005266:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	617a      	str	r2, [r7, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2203      	movs	r2, #3
 800527e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e077      	b.n	800537a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0e7      	beq.n	8005268 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	e040      	b.n	800534c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052d8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80052ea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1e5a      	subs	r2, r3, #1
 80052f0:	617a      	str	r2, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2203      	movs	r2, #3
 8005302:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e035      	b.n	800537a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0e7      	beq.n	80052ec <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800534a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <HAL_RTC_SetAlarm_IT+0x26c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0e      	ldr	r2, [pc, #56]	; (800538c <HAL_RTC_SetAlarm_IT+0x26c>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005356:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_RTC_SetAlarm_IT+0x26c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a0b      	ldr	r2, [pc, #44]	; (800538c <HAL_RTC_SetAlarm_IT+0x26c>)
 800535e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005362:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	22ff      	movs	r2, #255	; 0xff
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3724      	adds	r7, #36	; 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd90      	pop	{r4, r7, pc}
 8005382:	bf00      	nop
 8005384:	2000007c 	.word	0x2000007c
 8005388:	10624dd3 	.word	0x10624dd3
 800538c:	40013c00 	.word	0x40013c00

08005390 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d012      	beq.n	80053cc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fb fc0d 	bl	8000bd4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80053ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d012      	beq.n	8005400 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9e9 	bl	80057c0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80053fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005406:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	775a      	strb	r2, [r3, #29]
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40013c00 	.word	0x40013c00

0800541c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005436:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005438:	f7fc fee6 	bl	8002208 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800543e:	e009      	b.n	8005454 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005440:	f7fc fee2 	bl	8002208 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800544e:	d901      	bls.n	8005454 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e007      	b.n	8005464 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0ee      	beq.n	8005440 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d119      	bne.n	80054ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f04f 32ff 	mov.w	r2, #4294967295
 800548e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005490:	f7fc feba 	bl	8002208 <HAL_GetTick>
 8005494:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005496:	e009      	b.n	80054ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005498:	f7fc feb6 	bl	8002208 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a6:	d901      	bls.n	80054ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e007      	b.n	80054bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0ee      	beq.n	8005498 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80054d2:	e005      	b.n	80054e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	3b0a      	subs	r3, #10
 80054de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	d8f6      	bhi.n	80054d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b2db      	uxtb	r3, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	7f1b      	ldrb	r3, [r3, #28]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e0a6      	b.n	8005666 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2202      	movs	r2, #2
 8005522:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	22ca      	movs	r2, #202	; 0xca
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2253      	movs	r2, #83	; 0x53
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553e:	2b00      	cmp	r3, #0
 8005540:	d022      	beq.n	8005588 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005542:	4b4c      	ldr	r3, [pc, #304]	; (8005674 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	0adb      	lsrs	r3, r3, #11
 800554e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	617a      	str	r2, [r7, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	22ff      	movs	r2, #255	; 0xff
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2203      	movs	r2, #3
 800556e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e075      	b.n	8005666 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e7      	bne.n	8005558 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a36      	ldr	r2, [pc, #216]	; (8005678 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	617a      	str	r2, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2203      	movs	r2, #3
 80055c4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e04a      	b.n	8005666 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0e7      	beq.n	80055ae <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0207 	bic.w	r2, r2, #7
 80055f4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1c      	ldr	r2, [pc, #112]	; (800567c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800560c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005610:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a19      	ldr	r2, [pc, #100]	; (800567c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800561c:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800562e:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563e:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800564e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	22ff      	movs	r2, #255	; 0xff
 8005656:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	2000007c 	.word	0x2000007c
 8005678:	10624dd3 	.word	0x10624dd3
 800567c:	40013c00 	.word	0x40013c00

08005680 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7f1b      	ldrb	r3, [r3, #28]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005694:	2302      	movs	r3, #2
 8005696:	e047      	b.n	8005728 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	22ca      	movs	r2, #202	; 0xca
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2253      	movs	r2, #83	; 0x53
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056d2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056d4:	f7fc fd98 	bl	8002208 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80056da:	e013      	b.n	8005704 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80056dc:	f7fc fd94 	bl	8002208 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ea:	d90b      	bls.n	8005704 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2203      	movs	r2, #3
 80056f8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e011      	b.n	8005728 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0e4      	beq.n	80056dc <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	22ff      	movs	r2, #255	; 0xff
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f816 	bl	8005778 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800575c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005760:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005764:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	775a      	strb	r2, [r3, #29]
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40013c00 	.word	0x40013c00

08005778 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3350      	adds	r3, #80	; 0x50
 80057a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4413      	add	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e03f      	b.n	8005866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc fc24 	bl	8002048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 faf9 	bl	8005e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800582c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800583c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800584c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	4613      	mov	r3, r2
 800587a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b20      	cmp	r3, #32
 8005886:	d130      	bne.n	80058ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_UART_Transmit_IT+0x26>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e029      	b.n	80058ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Transmit_IT+0x38>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e022      	b.n	80058ec <HAL_UART_Transmit_IT+0x7e>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	; 0x21
 80058ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e000      	b.n	80058ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d140      	bne.n	8005994 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_UART_Receive_IT+0x26>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e039      	b.n	8005996 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_UART_Receive_IT+0x38>
 800592c:	2302      	movs	r3, #2
 800592e:	e032      	b.n	8005996 <HAL_UART_Receive_IT+0x9e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2222      	movs	r2, #34	; 0x22
 8005954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800596e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0220 	orr.w	r2, r2, #32
 800598e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10d      	bne.n	80059f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_UART_IRQHandler+0x52>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f98c 	bl	8005d0c <UART_Receive_IT>
      return;
 80059f4:	e0d1      	b.n	8005b9a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80b0 	beq.w	8005b5e <HAL_UART_IRQHandler+0x1ba>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <HAL_UART_IRQHandler+0x70>
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80a5 	beq.w	8005b5e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_UART_IRQHandler+0x90>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	f043 0201 	orr.w	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_UART_IRQHandler+0xb0>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	f043 0202 	orr.w	r2, r3, #2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_UART_IRQHandler+0xd0>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <HAL_UART_IRQHandler+0xfa>
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <HAL_UART_IRQHandler+0xee>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	f043 0208 	orr.w	r2, r3, #8
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d078      	beq.n	8005b98 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x11c>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f926 	bl	8005d0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x144>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d031      	beq.n	8005b4c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f86f 	bl	8005bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d123      	bne.n	8005b44 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d013      	beq.n	8005b3c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <HAL_UART_IRQHandler+0x1fc>)
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fd f87a 	bl	8002c1a <HAL_DMA_Abort_IT>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d016      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b36:	4610      	mov	r0, r2
 8005b38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3a:	e00e      	b.n	8005b5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f83b 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b42:	e00a      	b.n	8005b5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f837 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4a:	e006      	b.n	8005b5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f833 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b58:	e01e      	b.n	8005b98 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5a:	bf00      	nop
    return;
 8005b5c:	e01c      	b.n	8005b98 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_UART_IRQHandler+0x1d6>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f85c 	bl	8005c30 <UART_Transmit_IT>
    return;
 8005b78:	e00f      	b.n	8005b9a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <HAL_UART_IRQHandler+0x1f6>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8a4 	bl	8005cdc <UART_EndTransmit_IT>
    return;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005b98:	bf00      	nop
  }
}
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	08005c09 	.word	0x08005c09

08005ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005be2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff ffc8 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b21      	cmp	r3, #33	; 0x21
 8005c42:	d144      	bne.n	8005cce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d11a      	bne.n	8005c84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]
 8005c76:	e00e      	b.n	8005c96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	621a      	str	r2, [r3, #32]
 8005c82:	e008      	b.n	8005c96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	1c59      	adds	r1, r3, #1
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6211      	str	r1, [r2, #32]
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10f      	bne.n	8005cca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
  }
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff51 	bl	8005ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b22      	cmp	r3, #34	; 0x22
 8005d1e:	d171      	bne.n	8005e04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d123      	bne.n	8005d72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10e      	bne.n	8005d56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	1c9a      	adds	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
 8005d54:	e029      	b.n	8005daa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d70:	e01b      	b.n	8005daa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6858      	ldr	r0, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6291      	str	r1, [r2, #40]	; 0x28
 8005d8a:	b2c2      	uxtb	r2, r0
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e00c      	b.n	8005daa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	1c58      	adds	r0, r3, #1
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	6288      	str	r0, [r1, #40]	; 0x28
 8005da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4619      	mov	r1, r3
 8005db8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d120      	bne.n	8005e00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0220 	bic.w	r2, r2, #32
 8005dcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fc04 	bl	8001604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e002      	b.n	8005e06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e52:	f023 030c 	bic.w	r3, r3, #12
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7e:	f040 818b 	bne.w	8006198 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4ac1      	ldr	r2, [pc, #772]	; (800618c <UART_SetConfig+0x37c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d005      	beq.n	8005e98 <UART_SetConfig+0x88>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4abf      	ldr	r2, [pc, #764]	; (8006190 <UART_SetConfig+0x380>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f040 80bd 	bne.w	8006012 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e98:	f7fe fe4a 	bl	8004b30 <HAL_RCC_GetPCLK2Freq>
 8005e9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	f04f 0600 	mov.w	r6, #0
 8005ea6:	46a8      	mov	r8, r5
 8005ea8:	46b1      	mov	r9, r6
 8005eaa:	eb18 0308 	adds.w	r3, r8, r8
 8005eae:	eb49 0409 	adc.w	r4, r9, r9
 8005eb2:	4698      	mov	r8, r3
 8005eb4:	46a1      	mov	r9, r4
 8005eb6:	eb18 0805 	adds.w	r8, r8, r5
 8005eba:	eb49 0906 	adc.w	r9, r9, r6
 8005ebe:	f04f 0100 	mov.w	r1, #0
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ece:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ed2:	4688      	mov	r8, r1
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	eb18 0005 	adds.w	r0, r8, r5
 8005eda:	eb49 0106 	adc.w	r1, r9, r6
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	461d      	mov	r5, r3
 8005ee4:	f04f 0600 	mov.w	r6, #0
 8005ee8:	196b      	adds	r3, r5, r5
 8005eea:	eb46 0406 	adc.w	r4, r6, r6
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	f7fa f9cd 	bl	8000290 <__aeabi_uldivmod>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	461a      	mov	r2, r3
 8005efc:	4ba5      	ldr	r3, [pc, #660]	; (8006194 <UART_SetConfig+0x384>)
 8005efe:	fba3 2302 	umull	r2, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	f04f 0600 	mov.w	r6, #0
 8005f10:	46a9      	mov	r9, r5
 8005f12:	46b2      	mov	sl, r6
 8005f14:	eb19 0309 	adds.w	r3, r9, r9
 8005f18:	eb4a 040a 	adc.w	r4, sl, sl
 8005f1c:	4699      	mov	r9, r3
 8005f1e:	46a2      	mov	sl, r4
 8005f20:	eb19 0905 	adds.w	r9, r9, r5
 8005f24:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	4692      	mov	sl, r2
 8005f40:	eb19 0005 	adds.w	r0, r9, r5
 8005f44:	eb4a 0106 	adc.w	r1, sl, r6
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	461d      	mov	r5, r3
 8005f4e:	f04f 0600 	mov.w	r6, #0
 8005f52:	196b      	adds	r3, r5, r5
 8005f54:	eb46 0406 	adc.w	r4, r6, r6
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	f7fa f998 	bl	8000290 <__aeabi_uldivmod>
 8005f60:	4603      	mov	r3, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b8b      	ldr	r3, [pc, #556]	; (8006194 <UART_SetConfig+0x384>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a86      	ldr	r2, [pc, #536]	; (8006194 <UART_SetConfig+0x384>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f88:	4498      	add	r8, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	f04f 0600 	mov.w	r6, #0
 8005f92:	46a9      	mov	r9, r5
 8005f94:	46b2      	mov	sl, r6
 8005f96:	eb19 0309 	adds.w	r3, r9, r9
 8005f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f9e:	4699      	mov	r9, r3
 8005fa0:	46a2      	mov	sl, r4
 8005fa2:	eb19 0905 	adds.w	r9, r9, r5
 8005fa6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	eb19 0005 	adds.w	r0, r9, r5
 8005fc6:	eb4a 0106 	adc.w	r1, sl, r6
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	461d      	mov	r5, r3
 8005fd0:	f04f 0600 	mov.w	r6, #0
 8005fd4:	196b      	adds	r3, r5, r5
 8005fd6:	eb46 0406 	adc.w	r4, r6, r6
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4623      	mov	r3, r4
 8005fde:	f7fa f957 	bl	8000290 <__aeabi_uldivmod>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b6a      	ldr	r3, [pc, #424]	; (8006194 <UART_SetConfig+0x384>)
 8005fea:	fba3 1302 	umull	r1, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2164      	movs	r1, #100	; 0x64
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	3332      	adds	r3, #50	; 0x32
 8005ffc:	4a65      	ldr	r2, [pc, #404]	; (8006194 <UART_SetConfig+0x384>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	f003 0207 	and.w	r2, r3, #7
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4442      	add	r2, r8
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	e26f      	b.n	80064f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006012:	f7fe fd79 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8006016:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	461d      	mov	r5, r3
 800601c:	f04f 0600 	mov.w	r6, #0
 8006020:	46a8      	mov	r8, r5
 8006022:	46b1      	mov	r9, r6
 8006024:	eb18 0308 	adds.w	r3, r8, r8
 8006028:	eb49 0409 	adc.w	r4, r9, r9
 800602c:	4698      	mov	r8, r3
 800602e:	46a1      	mov	r9, r4
 8006030:	eb18 0805 	adds.w	r8, r8, r5
 8006034:	eb49 0906 	adc.w	r9, r9, r6
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006044:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006048:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800604c:	4688      	mov	r8, r1
 800604e:	4691      	mov	r9, r2
 8006050:	eb18 0005 	adds.w	r0, r8, r5
 8006054:	eb49 0106 	adc.w	r1, r9, r6
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	461d      	mov	r5, r3
 800605e:	f04f 0600 	mov.w	r6, #0
 8006062:	196b      	adds	r3, r5, r5
 8006064:	eb46 0406 	adc.w	r4, r6, r6
 8006068:	461a      	mov	r2, r3
 800606a:	4623      	mov	r3, r4
 800606c:	f7fa f910 	bl	8000290 <__aeabi_uldivmod>
 8006070:	4603      	mov	r3, r0
 8006072:	460c      	mov	r4, r1
 8006074:	461a      	mov	r2, r3
 8006076:	4b47      	ldr	r3, [pc, #284]	; (8006194 <UART_SetConfig+0x384>)
 8006078:	fba3 2302 	umull	r2, r3, r3, r2
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	461d      	mov	r5, r3
 8006086:	f04f 0600 	mov.w	r6, #0
 800608a:	46a9      	mov	r9, r5
 800608c:	46b2      	mov	sl, r6
 800608e:	eb19 0309 	adds.w	r3, r9, r9
 8006092:	eb4a 040a 	adc.w	r4, sl, sl
 8006096:	4699      	mov	r9, r3
 8006098:	46a2      	mov	sl, r4
 800609a:	eb19 0905 	adds.w	r9, r9, r5
 800609e:	eb4a 0a06 	adc.w	sl, sl, r6
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060b6:	4689      	mov	r9, r1
 80060b8:	4692      	mov	sl, r2
 80060ba:	eb19 0005 	adds.w	r0, r9, r5
 80060be:	eb4a 0106 	adc.w	r1, sl, r6
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	461d      	mov	r5, r3
 80060c8:	f04f 0600 	mov.w	r6, #0
 80060cc:	196b      	adds	r3, r5, r5
 80060ce:	eb46 0406 	adc.w	r4, r6, r6
 80060d2:	461a      	mov	r2, r3
 80060d4:	4623      	mov	r3, r4
 80060d6:	f7fa f8db 	bl	8000290 <__aeabi_uldivmod>
 80060da:	4603      	mov	r3, r0
 80060dc:	460c      	mov	r4, r1
 80060de:	461a      	mov	r2, r3
 80060e0:	4b2c      	ldr	r3, [pc, #176]	; (8006194 <UART_SetConfig+0x384>)
 80060e2:	fba3 1302 	umull	r1, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	2164      	movs	r1, #100	; 0x64
 80060ea:	fb01 f303 	mul.w	r3, r1, r3
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	3332      	adds	r3, #50	; 0x32
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <UART_SetConfig+0x384>)
 80060f6:	fba2 2303 	umull	r2, r3, r2, r3
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006102:	4498      	add	r8, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	461d      	mov	r5, r3
 8006108:	f04f 0600 	mov.w	r6, #0
 800610c:	46a9      	mov	r9, r5
 800610e:	46b2      	mov	sl, r6
 8006110:	eb19 0309 	adds.w	r3, r9, r9
 8006114:	eb4a 040a 	adc.w	r4, sl, sl
 8006118:	4699      	mov	r9, r3
 800611a:	46a2      	mov	sl, r4
 800611c:	eb19 0905 	adds.w	r9, r9, r5
 8006120:	eb4a 0a06 	adc.w	sl, sl, r6
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006138:	4689      	mov	r9, r1
 800613a:	4692      	mov	sl, r2
 800613c:	eb19 0005 	adds.w	r0, r9, r5
 8006140:	eb4a 0106 	adc.w	r1, sl, r6
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	461d      	mov	r5, r3
 800614a:	f04f 0600 	mov.w	r6, #0
 800614e:	196b      	adds	r3, r5, r5
 8006150:	eb46 0406 	adc.w	r4, r6, r6
 8006154:	461a      	mov	r2, r3
 8006156:	4623      	mov	r3, r4
 8006158:	f7fa f89a 	bl	8000290 <__aeabi_uldivmod>
 800615c:	4603      	mov	r3, r0
 800615e:	460c      	mov	r4, r1
 8006160:	461a      	mov	r2, r3
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <UART_SetConfig+0x384>)
 8006164:	fba3 1302 	umull	r1, r3, r3, r2
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	2164      	movs	r1, #100	; 0x64
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	3332      	adds	r3, #50	; 0x32
 8006176:	4a07      	ldr	r2, [pc, #28]	; (8006194 <UART_SetConfig+0x384>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	f003 0207 	and.w	r2, r3, #7
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4442      	add	r2, r8
 8006188:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800618a:	e1b2      	b.n	80064f2 <UART_SetConfig+0x6e2>
 800618c:	40011000 	.word	0x40011000
 8006190:	40011400 	.word	0x40011400
 8006194:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4ad7      	ldr	r2, [pc, #860]	; (80064fc <UART_SetConfig+0x6ec>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d005      	beq.n	80061ae <UART_SetConfig+0x39e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4ad6      	ldr	r2, [pc, #856]	; (8006500 <UART_SetConfig+0x6f0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	f040 80d1 	bne.w	8006350 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061ae:	f7fe fcbf 	bl	8004b30 <HAL_RCC_GetPCLK2Freq>
 80061b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	469a      	mov	sl, r3
 80061b8:	f04f 0b00 	mov.w	fp, #0
 80061bc:	46d0      	mov	r8, sl
 80061be:	46d9      	mov	r9, fp
 80061c0:	eb18 0308 	adds.w	r3, r8, r8
 80061c4:	eb49 0409 	adc.w	r4, r9, r9
 80061c8:	4698      	mov	r8, r3
 80061ca:	46a1      	mov	r9, r4
 80061cc:	eb18 080a 	adds.w	r8, r8, sl
 80061d0:	eb49 090b 	adc.w	r9, r9, fp
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061e8:	4688      	mov	r8, r1
 80061ea:	4691      	mov	r9, r2
 80061ec:	eb1a 0508 	adds.w	r5, sl, r8
 80061f0:	eb4b 0609 	adc.w	r6, fp, r9
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4619      	mov	r1, r3
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	f04f 0400 	mov.w	r4, #0
 8006206:	0094      	lsls	r4, r2, #2
 8006208:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800620c:	008b      	lsls	r3, r1, #2
 800620e:	461a      	mov	r2, r3
 8006210:	4623      	mov	r3, r4
 8006212:	4628      	mov	r0, r5
 8006214:	4631      	mov	r1, r6
 8006216:	f7fa f83b 	bl	8000290 <__aeabi_uldivmod>
 800621a:	4603      	mov	r3, r0
 800621c:	460c      	mov	r4, r1
 800621e:	461a      	mov	r2, r3
 8006220:	4bb8      	ldr	r3, [pc, #736]	; (8006504 <UART_SetConfig+0x6f4>)
 8006222:	fba3 2302 	umull	r2, r3, r3, r2
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	469b      	mov	fp, r3
 8006230:	f04f 0c00 	mov.w	ip, #0
 8006234:	46d9      	mov	r9, fp
 8006236:	46e2      	mov	sl, ip
 8006238:	eb19 0309 	adds.w	r3, r9, r9
 800623c:	eb4a 040a 	adc.w	r4, sl, sl
 8006240:	4699      	mov	r9, r3
 8006242:	46a2      	mov	sl, r4
 8006244:	eb19 090b 	adds.w	r9, r9, fp
 8006248:	eb4a 0a0c 	adc.w	sl, sl, ip
 800624c:	f04f 0100 	mov.w	r1, #0
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800625c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006260:	4689      	mov	r9, r1
 8006262:	4692      	mov	sl, r2
 8006264:	eb1b 0509 	adds.w	r5, fp, r9
 8006268:	eb4c 060a 	adc.w	r6, ip, sl
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4619      	mov	r1, r3
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	f04f 0400 	mov.w	r4, #0
 800627e:	0094      	lsls	r4, r2, #2
 8006280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006284:	008b      	lsls	r3, r1, #2
 8006286:	461a      	mov	r2, r3
 8006288:	4623      	mov	r3, r4
 800628a:	4628      	mov	r0, r5
 800628c:	4631      	mov	r1, r6
 800628e:	f7f9 ffff 	bl	8000290 <__aeabi_uldivmod>
 8006292:	4603      	mov	r3, r0
 8006294:	460c      	mov	r4, r1
 8006296:	461a      	mov	r2, r3
 8006298:	4b9a      	ldr	r3, [pc, #616]	; (8006504 <UART_SetConfig+0x6f4>)
 800629a:	fba3 1302 	umull	r1, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2164      	movs	r1, #100	; 0x64
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	3332      	adds	r3, #50	; 0x32
 80062ac:	4a95      	ldr	r2, [pc, #596]	; (8006504 <UART_SetConfig+0x6f4>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b8:	4498      	add	r8, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	469b      	mov	fp, r3
 80062be:	f04f 0c00 	mov.w	ip, #0
 80062c2:	46d9      	mov	r9, fp
 80062c4:	46e2      	mov	sl, ip
 80062c6:	eb19 0309 	adds.w	r3, r9, r9
 80062ca:	eb4a 040a 	adc.w	r4, sl, sl
 80062ce:	4699      	mov	r9, r3
 80062d0:	46a2      	mov	sl, r4
 80062d2:	eb19 090b 	adds.w	r9, r9, fp
 80062d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ee:	4689      	mov	r9, r1
 80062f0:	4692      	mov	sl, r2
 80062f2:	eb1b 0509 	adds.w	r5, fp, r9
 80062f6:	eb4c 060a 	adc.w	r6, ip, sl
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4619      	mov	r1, r3
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	f04f 0400 	mov.w	r4, #0
 800630c:	0094      	lsls	r4, r2, #2
 800630e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006312:	008b      	lsls	r3, r1, #2
 8006314:	461a      	mov	r2, r3
 8006316:	4623      	mov	r3, r4
 8006318:	4628      	mov	r0, r5
 800631a:	4631      	mov	r1, r6
 800631c:	f7f9 ffb8 	bl	8000290 <__aeabi_uldivmod>
 8006320:	4603      	mov	r3, r0
 8006322:	460c      	mov	r4, r1
 8006324:	461a      	mov	r2, r3
 8006326:	4b77      	ldr	r3, [pc, #476]	; (8006504 <UART_SetConfig+0x6f4>)
 8006328:	fba3 1302 	umull	r1, r3, r3, r2
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	2164      	movs	r1, #100	; 0x64
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	3332      	adds	r3, #50	; 0x32
 800633a:	4a72      	ldr	r2, [pc, #456]	; (8006504 <UART_SetConfig+0x6f4>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	f003 020f 	and.w	r2, r3, #15
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4442      	add	r2, r8
 800634c:	609a      	str	r2, [r3, #8]
 800634e:	e0d0      	b.n	80064f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fe fbda 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8006354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	469a      	mov	sl, r3
 800635a:	f04f 0b00 	mov.w	fp, #0
 800635e:	46d0      	mov	r8, sl
 8006360:	46d9      	mov	r9, fp
 8006362:	eb18 0308 	adds.w	r3, r8, r8
 8006366:	eb49 0409 	adc.w	r4, r9, r9
 800636a:	4698      	mov	r8, r3
 800636c:	46a1      	mov	r9, r4
 800636e:	eb18 080a 	adds.w	r8, r8, sl
 8006372:	eb49 090b 	adc.w	r9, r9, fp
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800638a:	4688      	mov	r8, r1
 800638c:	4691      	mov	r9, r2
 800638e:	eb1a 0508 	adds.w	r5, sl, r8
 8006392:	eb4b 0609 	adc.w	r6, fp, r9
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4619      	mov	r1, r3
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	f04f 0400 	mov.w	r4, #0
 80063a8:	0094      	lsls	r4, r2, #2
 80063aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063ae:	008b      	lsls	r3, r1, #2
 80063b0:	461a      	mov	r2, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	4631      	mov	r1, r6
 80063b8:	f7f9 ff6a 	bl	8000290 <__aeabi_uldivmod>
 80063bc:	4603      	mov	r3, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	461a      	mov	r2, r3
 80063c2:	4b50      	ldr	r3, [pc, #320]	; (8006504 <UART_SetConfig+0x6f4>)
 80063c4:	fba3 2302 	umull	r2, r3, r3, r2
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	469b      	mov	fp, r3
 80063d2:	f04f 0c00 	mov.w	ip, #0
 80063d6:	46d9      	mov	r9, fp
 80063d8:	46e2      	mov	sl, ip
 80063da:	eb19 0309 	adds.w	r3, r9, r9
 80063de:	eb4a 040a 	adc.w	r4, sl, sl
 80063e2:	4699      	mov	r9, r3
 80063e4:	46a2      	mov	sl, r4
 80063e6:	eb19 090b 	adds.w	r9, r9, fp
 80063ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063ee:	f04f 0100 	mov.w	r1, #0
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006402:	4689      	mov	r9, r1
 8006404:	4692      	mov	sl, r2
 8006406:	eb1b 0509 	adds.w	r5, fp, r9
 800640a:	eb4c 060a 	adc.w	r6, ip, sl
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4619      	mov	r1, r3
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	f04f 0400 	mov.w	r4, #0
 8006420:	0094      	lsls	r4, r2, #2
 8006422:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006426:	008b      	lsls	r3, r1, #2
 8006428:	461a      	mov	r2, r3
 800642a:	4623      	mov	r3, r4
 800642c:	4628      	mov	r0, r5
 800642e:	4631      	mov	r1, r6
 8006430:	f7f9 ff2e 	bl	8000290 <__aeabi_uldivmod>
 8006434:	4603      	mov	r3, r0
 8006436:	460c      	mov	r4, r1
 8006438:	461a      	mov	r2, r3
 800643a:	4b32      	ldr	r3, [pc, #200]	; (8006504 <UART_SetConfig+0x6f4>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	; 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	3332      	adds	r3, #50	; 0x32
 800644e:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <UART_SetConfig+0x6f4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800645a:	4498      	add	r8, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	469b      	mov	fp, r3
 8006460:	f04f 0c00 	mov.w	ip, #0
 8006464:	46d9      	mov	r9, fp
 8006466:	46e2      	mov	sl, ip
 8006468:	eb19 0309 	adds.w	r3, r9, r9
 800646c:	eb4a 040a 	adc.w	r4, sl, sl
 8006470:	4699      	mov	r9, r3
 8006472:	46a2      	mov	sl, r4
 8006474:	eb19 090b 	adds.w	r9, r9, fp
 8006478:	eb4a 0a0c 	adc.w	sl, sl, ip
 800647c:	f04f 0100 	mov.w	r1, #0
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006488:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800648c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006490:	4689      	mov	r9, r1
 8006492:	4692      	mov	sl, r2
 8006494:	eb1b 0509 	adds.w	r5, fp, r9
 8006498:	eb4c 060a 	adc.w	r6, ip, sl
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	f04f 0400 	mov.w	r4, #0
 80064ae:	0094      	lsls	r4, r2, #2
 80064b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064b4:	008b      	lsls	r3, r1, #2
 80064b6:	461a      	mov	r2, r3
 80064b8:	4623      	mov	r3, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	4631      	mov	r1, r6
 80064be:	f7f9 fee7 	bl	8000290 <__aeabi_uldivmod>
 80064c2:	4603      	mov	r3, r0
 80064c4:	460c      	mov	r4, r1
 80064c6:	461a      	mov	r2, r3
 80064c8:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <UART_SetConfig+0x6f4>)
 80064ca:	fba3 1302 	umull	r1, r3, r3, r2
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	2164      	movs	r1, #100	; 0x64
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	3332      	adds	r3, #50	; 0x32
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <UART_SetConfig+0x6f4>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	f003 020f 	and.w	r2, r3, #15
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4442      	add	r2, r8
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	e7ff      	b.n	80064f2 <UART_SetConfig+0x6e2>
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	40011000 	.word	0x40011000
 8006500:	40011400 	.word	0x40011400
 8006504:	51eb851f 	.word	0x51eb851f

08006508 <__errno>:
 8006508:	4b01      	ldr	r3, [pc, #4]	; (8006510 <__errno+0x8>)
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000088 	.word	0x20000088

08006514 <__libc_init_array>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4e0d      	ldr	r6, [pc, #52]	; (800654c <__libc_init_array+0x38>)
 8006518:	4c0d      	ldr	r4, [pc, #52]	; (8006550 <__libc_init_array+0x3c>)
 800651a:	1ba4      	subs	r4, r4, r6
 800651c:	10a4      	asrs	r4, r4, #2
 800651e:	2500      	movs	r5, #0
 8006520:	42a5      	cmp	r5, r4
 8006522:	d109      	bne.n	8006538 <__libc_init_array+0x24>
 8006524:	4e0b      	ldr	r6, [pc, #44]	; (8006554 <__libc_init_array+0x40>)
 8006526:	4c0c      	ldr	r4, [pc, #48]	; (8006558 <__libc_init_array+0x44>)
 8006528:	f000 fc26 	bl	8006d78 <_init>
 800652c:	1ba4      	subs	r4, r4, r6
 800652e:	10a4      	asrs	r4, r4, #2
 8006530:	2500      	movs	r5, #0
 8006532:	42a5      	cmp	r5, r4
 8006534:	d105      	bne.n	8006542 <__libc_init_array+0x2e>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800653c:	4798      	blx	r3
 800653e:	3501      	adds	r5, #1
 8006540:	e7ee      	b.n	8006520 <__libc_init_array+0xc>
 8006542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006546:	4798      	blx	r3
 8006548:	3501      	adds	r5, #1
 800654a:	e7f2      	b.n	8006532 <__libc_init_array+0x1e>
 800654c:	08006f34 	.word	0x08006f34
 8006550:	08006f34 	.word	0x08006f34
 8006554:	08006f34 	.word	0x08006f34
 8006558:	08006f38 	.word	0x08006f38

0800655c <memset>:
 800655c:	4402      	add	r2, r0
 800655e:	4603      	mov	r3, r0
 8006560:	4293      	cmp	r3, r2
 8006562:	d100      	bne.n	8006566 <memset+0xa>
 8006564:	4770      	bx	lr
 8006566:	f803 1b01 	strb.w	r1, [r3], #1
 800656a:	e7f9      	b.n	8006560 <memset+0x4>

0800656c <siprintf>:
 800656c:	b40e      	push	{r1, r2, r3}
 800656e:	b500      	push	{lr}
 8006570:	b09c      	sub	sp, #112	; 0x70
 8006572:	ab1d      	add	r3, sp, #116	; 0x74
 8006574:	9002      	str	r0, [sp, #8]
 8006576:	9006      	str	r0, [sp, #24]
 8006578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800657c:	4809      	ldr	r0, [pc, #36]	; (80065a4 <siprintf+0x38>)
 800657e:	9107      	str	r1, [sp, #28]
 8006580:	9104      	str	r1, [sp, #16]
 8006582:	4909      	ldr	r1, [pc, #36]	; (80065a8 <siprintf+0x3c>)
 8006584:	f853 2b04 	ldr.w	r2, [r3], #4
 8006588:	9105      	str	r1, [sp, #20]
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	a902      	add	r1, sp, #8
 8006590:	f000 f866 	bl	8006660 <_svfiprintf_r>
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	b01c      	add	sp, #112	; 0x70
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b003      	add	sp, #12
 80065a2:	4770      	bx	lr
 80065a4:	20000088 	.word	0x20000088
 80065a8:	ffff0208 	.word	0xffff0208

080065ac <__ssputs_r>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	688e      	ldr	r6, [r1, #8]
 80065b2:	429e      	cmp	r6, r3
 80065b4:	4682      	mov	sl, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4690      	mov	r8, r2
 80065ba:	4699      	mov	r9, r3
 80065bc:	d837      	bhi.n	800662e <__ssputs_r+0x82>
 80065be:	898a      	ldrh	r2, [r1, #12]
 80065c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065c4:	d031      	beq.n	800662a <__ssputs_r+0x7e>
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	6909      	ldr	r1, [r1, #16]
 80065ca:	1a6f      	subs	r7, r5, r1
 80065cc:	6965      	ldr	r5, [r4, #20]
 80065ce:	2302      	movs	r3, #2
 80065d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80065d8:	f109 0301 	add.w	r3, r9, #1
 80065dc:	443b      	add	r3, r7
 80065de:	429d      	cmp	r5, r3
 80065e0:	bf38      	it	cc
 80065e2:	461d      	movcc	r5, r3
 80065e4:	0553      	lsls	r3, r2, #21
 80065e6:	d530      	bpl.n	800664a <__ssputs_r+0x9e>
 80065e8:	4629      	mov	r1, r5
 80065ea:	f000 fb2b 	bl	8006c44 <_malloc_r>
 80065ee:	4606      	mov	r6, r0
 80065f0:	b950      	cbnz	r0, 8006608 <__ssputs_r+0x5c>
 80065f2:	230c      	movs	r3, #12
 80065f4:	f8ca 3000 	str.w	r3, [sl]
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	463a      	mov	r2, r7
 800660a:	6921      	ldr	r1, [r4, #16]
 800660c:	f000 faa8 	bl	8006b60 <memcpy>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	6126      	str	r6, [r4, #16]
 800661e:	6165      	str	r5, [r4, #20]
 8006620:	443e      	add	r6, r7
 8006622:	1bed      	subs	r5, r5, r7
 8006624:	6026      	str	r6, [r4, #0]
 8006626:	60a5      	str	r5, [r4, #8]
 8006628:	464e      	mov	r6, r9
 800662a:	454e      	cmp	r6, r9
 800662c:	d900      	bls.n	8006630 <__ssputs_r+0x84>
 800662e:	464e      	mov	r6, r9
 8006630:	4632      	mov	r2, r6
 8006632:	4641      	mov	r1, r8
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	f000 fa9e 	bl	8006b76 <memmove>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	441e      	add	r6, r3
 8006644:	6026      	str	r6, [r4, #0]
 8006646:	2000      	movs	r0, #0
 8006648:	e7dc      	b.n	8006604 <__ssputs_r+0x58>
 800664a:	462a      	mov	r2, r5
 800664c:	f000 fb54 	bl	8006cf8 <_realloc_r>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	d1e2      	bne.n	800661c <__ssputs_r+0x70>
 8006656:	6921      	ldr	r1, [r4, #16]
 8006658:	4650      	mov	r0, sl
 800665a:	f000 faa5 	bl	8006ba8 <_free_r>
 800665e:	e7c8      	b.n	80065f2 <__ssputs_r+0x46>

08006660 <_svfiprintf_r>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	461d      	mov	r5, r3
 8006666:	898b      	ldrh	r3, [r1, #12]
 8006668:	061f      	lsls	r7, r3, #24
 800666a:	b09d      	sub	sp, #116	; 0x74
 800666c:	4680      	mov	r8, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4616      	mov	r6, r2
 8006672:	d50f      	bpl.n	8006694 <_svfiprintf_r+0x34>
 8006674:	690b      	ldr	r3, [r1, #16]
 8006676:	b96b      	cbnz	r3, 8006694 <_svfiprintf_r+0x34>
 8006678:	2140      	movs	r1, #64	; 0x40
 800667a:	f000 fae3 	bl	8006c44 <_malloc_r>
 800667e:	6020      	str	r0, [r4, #0]
 8006680:	6120      	str	r0, [r4, #16]
 8006682:	b928      	cbnz	r0, 8006690 <_svfiprintf_r+0x30>
 8006684:	230c      	movs	r3, #12
 8006686:	f8c8 3000 	str.w	r3, [r8]
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	e0c8      	b.n	8006822 <_svfiprintf_r+0x1c2>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	6163      	str	r3, [r4, #20]
 8006694:	2300      	movs	r3, #0
 8006696:	9309      	str	r3, [sp, #36]	; 0x24
 8006698:	2320      	movs	r3, #32
 800669a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800669e:	2330      	movs	r3, #48	; 0x30
 80066a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a4:	9503      	str	r5, [sp, #12]
 80066a6:	f04f 0b01 	mov.w	fp, #1
 80066aa:	4637      	mov	r7, r6
 80066ac:	463d      	mov	r5, r7
 80066ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066b2:	b10b      	cbz	r3, 80066b8 <_svfiprintf_r+0x58>
 80066b4:	2b25      	cmp	r3, #37	; 0x25
 80066b6:	d13e      	bne.n	8006736 <_svfiprintf_r+0xd6>
 80066b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80066bc:	d00b      	beq.n	80066d6 <_svfiprintf_r+0x76>
 80066be:	4653      	mov	r3, sl
 80066c0:	4632      	mov	r2, r6
 80066c2:	4621      	mov	r1, r4
 80066c4:	4640      	mov	r0, r8
 80066c6:	f7ff ff71 	bl	80065ac <__ssputs_r>
 80066ca:	3001      	adds	r0, #1
 80066cc:	f000 80a4 	beq.w	8006818 <_svfiprintf_r+0x1b8>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	4453      	add	r3, sl
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	783b      	ldrb	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 809d 	beq.w	8006818 <_svfiprintf_r+0x1b8>
 80066de:	2300      	movs	r3, #0
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f0:	931a      	str	r3, [sp, #104]	; 0x68
 80066f2:	462f      	mov	r7, r5
 80066f4:	2205      	movs	r2, #5
 80066f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80066fa:	4850      	ldr	r0, [pc, #320]	; (800683c <_svfiprintf_r+0x1dc>)
 80066fc:	f7f9 fd78 	bl	80001f0 <memchr>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	b9d0      	cbnz	r0, 800673a <_svfiprintf_r+0xda>
 8006704:	06d9      	lsls	r1, r3, #27
 8006706:	bf44      	itt	mi
 8006708:	2220      	movmi	r2, #32
 800670a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800670e:	071a      	lsls	r2, r3, #28
 8006710:	bf44      	itt	mi
 8006712:	222b      	movmi	r2, #43	; 0x2b
 8006714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006718:	782a      	ldrb	r2, [r5, #0]
 800671a:	2a2a      	cmp	r2, #42	; 0x2a
 800671c:	d015      	beq.n	800674a <_svfiprintf_r+0xea>
 800671e:	9a07      	ldr	r2, [sp, #28]
 8006720:	462f      	mov	r7, r5
 8006722:	2000      	movs	r0, #0
 8006724:	250a      	movs	r5, #10
 8006726:	4639      	mov	r1, r7
 8006728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800672c:	3b30      	subs	r3, #48	; 0x30
 800672e:	2b09      	cmp	r3, #9
 8006730:	d94d      	bls.n	80067ce <_svfiprintf_r+0x16e>
 8006732:	b1b8      	cbz	r0, 8006764 <_svfiprintf_r+0x104>
 8006734:	e00f      	b.n	8006756 <_svfiprintf_r+0xf6>
 8006736:	462f      	mov	r7, r5
 8006738:	e7b8      	b.n	80066ac <_svfiprintf_r+0x4c>
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <_svfiprintf_r+0x1dc>)
 800673c:	1a80      	subs	r0, r0, r2
 800673e:	fa0b f000 	lsl.w	r0, fp, r0
 8006742:	4318      	orrs	r0, r3
 8006744:	9004      	str	r0, [sp, #16]
 8006746:	463d      	mov	r5, r7
 8006748:	e7d3      	b.n	80066f2 <_svfiprintf_r+0x92>
 800674a:	9a03      	ldr	r2, [sp, #12]
 800674c:	1d11      	adds	r1, r2, #4
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	9103      	str	r1, [sp, #12]
 8006752:	2a00      	cmp	r2, #0
 8006754:	db01      	blt.n	800675a <_svfiprintf_r+0xfa>
 8006756:	9207      	str	r2, [sp, #28]
 8006758:	e004      	b.n	8006764 <_svfiprintf_r+0x104>
 800675a:	4252      	negs	r2, r2
 800675c:	f043 0302 	orr.w	r3, r3, #2
 8006760:	9207      	str	r2, [sp, #28]
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	783b      	ldrb	r3, [r7, #0]
 8006766:	2b2e      	cmp	r3, #46	; 0x2e
 8006768:	d10c      	bne.n	8006784 <_svfiprintf_r+0x124>
 800676a:	787b      	ldrb	r3, [r7, #1]
 800676c:	2b2a      	cmp	r3, #42	; 0x2a
 800676e:	d133      	bne.n	80067d8 <_svfiprintf_r+0x178>
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	9203      	str	r2, [sp, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfb8      	it	lt
 800677c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006780:	3702      	adds	r7, #2
 8006782:	9305      	str	r3, [sp, #20]
 8006784:	4d2e      	ldr	r5, [pc, #184]	; (8006840 <_svfiprintf_r+0x1e0>)
 8006786:	7839      	ldrb	r1, [r7, #0]
 8006788:	2203      	movs	r2, #3
 800678a:	4628      	mov	r0, r5
 800678c:	f7f9 fd30 	bl	80001f0 <memchr>
 8006790:	b138      	cbz	r0, 80067a2 <_svfiprintf_r+0x142>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	1b40      	subs	r0, r0, r5
 8006796:	fa03 f000 	lsl.w	r0, r3, r0
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	4303      	orrs	r3, r0
 800679e:	3701      	adds	r7, #1
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	7839      	ldrb	r1, [r7, #0]
 80067a4:	4827      	ldr	r0, [pc, #156]	; (8006844 <_svfiprintf_r+0x1e4>)
 80067a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067aa:	2206      	movs	r2, #6
 80067ac:	1c7e      	adds	r6, r7, #1
 80067ae:	f7f9 fd1f 	bl	80001f0 <memchr>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d038      	beq.n	8006828 <_svfiprintf_r+0x1c8>
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <_svfiprintf_r+0x1e8>)
 80067b8:	bb13      	cbnz	r3, 8006800 <_svfiprintf_r+0x1a0>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	3307      	adds	r3, #7
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	3308      	adds	r3, #8
 80067c4:	9303      	str	r3, [sp, #12]
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	444b      	add	r3, r9
 80067ca:	9309      	str	r3, [sp, #36]	; 0x24
 80067cc:	e76d      	b.n	80066aa <_svfiprintf_r+0x4a>
 80067ce:	fb05 3202 	mla	r2, r5, r2, r3
 80067d2:	2001      	movs	r0, #1
 80067d4:	460f      	mov	r7, r1
 80067d6:	e7a6      	b.n	8006726 <_svfiprintf_r+0xc6>
 80067d8:	2300      	movs	r3, #0
 80067da:	3701      	adds	r7, #1
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	4619      	mov	r1, r3
 80067e0:	250a      	movs	r5, #10
 80067e2:	4638      	mov	r0, r7
 80067e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e8:	3a30      	subs	r2, #48	; 0x30
 80067ea:	2a09      	cmp	r2, #9
 80067ec:	d903      	bls.n	80067f6 <_svfiprintf_r+0x196>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0c8      	beq.n	8006784 <_svfiprintf_r+0x124>
 80067f2:	9105      	str	r1, [sp, #20]
 80067f4:	e7c6      	b.n	8006784 <_svfiprintf_r+0x124>
 80067f6:	fb05 2101 	mla	r1, r5, r1, r2
 80067fa:	2301      	movs	r3, #1
 80067fc:	4607      	mov	r7, r0
 80067fe:	e7f0      	b.n	80067e2 <_svfiprintf_r+0x182>
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4622      	mov	r2, r4
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <_svfiprintf_r+0x1ec>)
 8006808:	a904      	add	r1, sp, #16
 800680a:	4640      	mov	r0, r8
 800680c:	f3af 8000 	nop.w
 8006810:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006814:	4681      	mov	r9, r0
 8006816:	d1d6      	bne.n	80067c6 <_svfiprintf_r+0x166>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	065b      	lsls	r3, r3, #25
 800681c:	f53f af35 	bmi.w	800668a <_svfiprintf_r+0x2a>
 8006820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006822:	b01d      	add	sp, #116	; 0x74
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	4622      	mov	r2, r4
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <_svfiprintf_r+0x1ec>)
 8006830:	a904      	add	r1, sp, #16
 8006832:	4640      	mov	r0, r8
 8006834:	f000 f882 	bl	800693c <_printf_i>
 8006838:	e7ea      	b.n	8006810 <_svfiprintf_r+0x1b0>
 800683a:	bf00      	nop
 800683c:	08006ef8 	.word	0x08006ef8
 8006840:	08006efe 	.word	0x08006efe
 8006844:	08006f02 	.word	0x08006f02
 8006848:	00000000 	.word	0x00000000
 800684c:	080065ad 	.word	0x080065ad

08006850 <_printf_common>:
 8006850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006854:	4691      	mov	r9, r2
 8006856:	461f      	mov	r7, r3
 8006858:	688a      	ldr	r2, [r1, #8]
 800685a:	690b      	ldr	r3, [r1, #16]
 800685c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006860:	4293      	cmp	r3, r2
 8006862:	bfb8      	it	lt
 8006864:	4613      	movlt	r3, r2
 8006866:	f8c9 3000 	str.w	r3, [r9]
 800686a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800686e:	4606      	mov	r6, r0
 8006870:	460c      	mov	r4, r1
 8006872:	b112      	cbz	r2, 800687a <_printf_common+0x2a>
 8006874:	3301      	adds	r3, #1
 8006876:	f8c9 3000 	str.w	r3, [r9]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	0699      	lsls	r1, r3, #26
 800687e:	bf42      	ittt	mi
 8006880:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006884:	3302      	addmi	r3, #2
 8006886:	f8c9 3000 	strmi.w	r3, [r9]
 800688a:	6825      	ldr	r5, [r4, #0]
 800688c:	f015 0506 	ands.w	r5, r5, #6
 8006890:	d107      	bne.n	80068a2 <_printf_common+0x52>
 8006892:	f104 0a19 	add.w	sl, r4, #25
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	f8d9 2000 	ldr.w	r2, [r9]
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	42ab      	cmp	r3, r5
 80068a0:	dc28      	bgt.n	80068f4 <_printf_common+0xa4>
 80068a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	3300      	adds	r3, #0
 80068aa:	bf18      	it	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	0692      	lsls	r2, r2, #26
 80068b0:	d42d      	bmi.n	800690e <_printf_common+0xbe>
 80068b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068b6:	4639      	mov	r1, r7
 80068b8:	4630      	mov	r0, r6
 80068ba:	47c0      	blx	r8
 80068bc:	3001      	adds	r0, #1
 80068be:	d020      	beq.n	8006902 <_printf_common+0xb2>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	68e5      	ldr	r5, [r4, #12]
 80068c4:	f8d9 2000 	ldr.w	r2, [r9]
 80068c8:	f003 0306 	and.w	r3, r3, #6
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	bf08      	it	eq
 80068d0:	1aad      	subeq	r5, r5, r2
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	bf0c      	ite	eq
 80068d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068dc:	2500      	movne	r5, #0
 80068de:	4293      	cmp	r3, r2
 80068e0:	bfc4      	itt	gt
 80068e2:	1a9b      	subgt	r3, r3, r2
 80068e4:	18ed      	addgt	r5, r5, r3
 80068e6:	f04f 0900 	mov.w	r9, #0
 80068ea:	341a      	adds	r4, #26
 80068ec:	454d      	cmp	r5, r9
 80068ee:	d11a      	bne.n	8006926 <_printf_common+0xd6>
 80068f0:	2000      	movs	r0, #0
 80068f2:	e008      	b.n	8006906 <_printf_common+0xb6>
 80068f4:	2301      	movs	r3, #1
 80068f6:	4652      	mov	r2, sl
 80068f8:	4639      	mov	r1, r7
 80068fa:	4630      	mov	r0, r6
 80068fc:	47c0      	blx	r8
 80068fe:	3001      	adds	r0, #1
 8006900:	d103      	bne.n	800690a <_printf_common+0xba>
 8006902:	f04f 30ff 	mov.w	r0, #4294967295
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	3501      	adds	r5, #1
 800690c:	e7c3      	b.n	8006896 <_printf_common+0x46>
 800690e:	18e1      	adds	r1, r4, r3
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	2030      	movs	r0, #48	; 0x30
 8006914:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006918:	4422      	add	r2, r4
 800691a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800691e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006922:	3302      	adds	r3, #2
 8006924:	e7c5      	b.n	80068b2 <_printf_common+0x62>
 8006926:	2301      	movs	r3, #1
 8006928:	4622      	mov	r2, r4
 800692a:	4639      	mov	r1, r7
 800692c:	4630      	mov	r0, r6
 800692e:	47c0      	blx	r8
 8006930:	3001      	adds	r0, #1
 8006932:	d0e6      	beq.n	8006902 <_printf_common+0xb2>
 8006934:	f109 0901 	add.w	r9, r9, #1
 8006938:	e7d8      	b.n	80068ec <_printf_common+0x9c>
	...

0800693c <_printf_i>:
 800693c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006940:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006944:	460c      	mov	r4, r1
 8006946:	7e09      	ldrb	r1, [r1, #24]
 8006948:	b085      	sub	sp, #20
 800694a:	296e      	cmp	r1, #110	; 0x6e
 800694c:	4617      	mov	r7, r2
 800694e:	4606      	mov	r6, r0
 8006950:	4698      	mov	r8, r3
 8006952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006954:	f000 80b3 	beq.w	8006abe <_printf_i+0x182>
 8006958:	d822      	bhi.n	80069a0 <_printf_i+0x64>
 800695a:	2963      	cmp	r1, #99	; 0x63
 800695c:	d036      	beq.n	80069cc <_printf_i+0x90>
 800695e:	d80a      	bhi.n	8006976 <_printf_i+0x3a>
 8006960:	2900      	cmp	r1, #0
 8006962:	f000 80b9 	beq.w	8006ad8 <_printf_i+0x19c>
 8006966:	2958      	cmp	r1, #88	; 0x58
 8006968:	f000 8083 	beq.w	8006a72 <_printf_i+0x136>
 800696c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006970:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006974:	e032      	b.n	80069dc <_printf_i+0xa0>
 8006976:	2964      	cmp	r1, #100	; 0x64
 8006978:	d001      	beq.n	800697e <_printf_i+0x42>
 800697a:	2969      	cmp	r1, #105	; 0x69
 800697c:	d1f6      	bne.n	800696c <_printf_i+0x30>
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	0605      	lsls	r5, r0, #24
 8006984:	f103 0104 	add.w	r1, r3, #4
 8006988:	d52a      	bpl.n	80069e0 <_printf_i+0xa4>
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	da03      	bge.n	800699a <_printf_i+0x5e>
 8006992:	222d      	movs	r2, #45	; 0x2d
 8006994:	425b      	negs	r3, r3
 8006996:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800699a:	486f      	ldr	r0, [pc, #444]	; (8006b58 <_printf_i+0x21c>)
 800699c:	220a      	movs	r2, #10
 800699e:	e039      	b.n	8006a14 <_printf_i+0xd8>
 80069a0:	2973      	cmp	r1, #115	; 0x73
 80069a2:	f000 809d 	beq.w	8006ae0 <_printf_i+0x1a4>
 80069a6:	d808      	bhi.n	80069ba <_printf_i+0x7e>
 80069a8:	296f      	cmp	r1, #111	; 0x6f
 80069aa:	d020      	beq.n	80069ee <_printf_i+0xb2>
 80069ac:	2970      	cmp	r1, #112	; 0x70
 80069ae:	d1dd      	bne.n	800696c <_printf_i+0x30>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	e003      	b.n	80069c2 <_printf_i+0x86>
 80069ba:	2975      	cmp	r1, #117	; 0x75
 80069bc:	d017      	beq.n	80069ee <_printf_i+0xb2>
 80069be:	2978      	cmp	r1, #120	; 0x78
 80069c0:	d1d4      	bne.n	800696c <_printf_i+0x30>
 80069c2:	2378      	movs	r3, #120	; 0x78
 80069c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069c8:	4864      	ldr	r0, [pc, #400]	; (8006b5c <_printf_i+0x220>)
 80069ca:	e055      	b.n	8006a78 <_printf_i+0x13c>
 80069cc:	6813      	ldr	r3, [r2, #0]
 80069ce:	1d19      	adds	r1, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069dc:	2301      	movs	r3, #1
 80069de:	e08c      	b.n	8006afa <_printf_i+0x1be>
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6011      	str	r1, [r2, #0]
 80069e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069e8:	bf18      	it	ne
 80069ea:	b21b      	sxthne	r3, r3
 80069ec:	e7cf      	b.n	800698e <_printf_i+0x52>
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	6825      	ldr	r5, [r4, #0]
 80069f2:	1d18      	adds	r0, r3, #4
 80069f4:	6010      	str	r0, [r2, #0]
 80069f6:	0628      	lsls	r0, r5, #24
 80069f8:	d501      	bpl.n	80069fe <_printf_i+0xc2>
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	e002      	b.n	8006a04 <_printf_i+0xc8>
 80069fe:	0668      	lsls	r0, r5, #25
 8006a00:	d5fb      	bpl.n	80069fa <_printf_i+0xbe>
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	4854      	ldr	r0, [pc, #336]	; (8006b58 <_printf_i+0x21c>)
 8006a06:	296f      	cmp	r1, #111	; 0x6f
 8006a08:	bf14      	ite	ne
 8006a0a:	220a      	movne	r2, #10
 8006a0c:	2208      	moveq	r2, #8
 8006a0e:	2100      	movs	r1, #0
 8006a10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a14:	6865      	ldr	r5, [r4, #4]
 8006a16:	60a5      	str	r5, [r4, #8]
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	f2c0 8095 	blt.w	8006b48 <_printf_i+0x20c>
 8006a1e:	6821      	ldr	r1, [r4, #0]
 8006a20:	f021 0104 	bic.w	r1, r1, #4
 8006a24:	6021      	str	r1, [r4, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d13d      	bne.n	8006aa6 <_printf_i+0x16a>
 8006a2a:	2d00      	cmp	r5, #0
 8006a2c:	f040 808e 	bne.w	8006b4c <_printf_i+0x210>
 8006a30:	4665      	mov	r5, ip
 8006a32:	2a08      	cmp	r2, #8
 8006a34:	d10b      	bne.n	8006a4e <_printf_i+0x112>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	07db      	lsls	r3, r3, #31
 8006a3a:	d508      	bpl.n	8006a4e <_printf_i+0x112>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	6862      	ldr	r2, [r4, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	bfde      	ittt	le
 8006a44:	2330      	movle	r3, #48	; 0x30
 8006a46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a4e:	ebac 0305 	sub.w	r3, ip, r5
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	f8cd 8000 	str.w	r8, [sp]
 8006a58:	463b      	mov	r3, r7
 8006a5a:	aa03      	add	r2, sp, #12
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7ff fef6 	bl	8006850 <_printf_common>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d14d      	bne.n	8006b04 <_printf_i+0x1c8>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b005      	add	sp, #20
 8006a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a72:	4839      	ldr	r0, [pc, #228]	; (8006b58 <_printf_i+0x21c>)
 8006a74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a78:	6813      	ldr	r3, [r2, #0]
 8006a7a:	6821      	ldr	r1, [r4, #0]
 8006a7c:	1d1d      	adds	r5, r3, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6015      	str	r5, [r2, #0]
 8006a82:	060a      	lsls	r2, r1, #24
 8006a84:	d50b      	bpl.n	8006a9e <_printf_i+0x162>
 8006a86:	07ca      	lsls	r2, r1, #31
 8006a88:	bf44      	itt	mi
 8006a8a:	f041 0120 	orrmi.w	r1, r1, #32
 8006a8e:	6021      	strmi	r1, [r4, #0]
 8006a90:	b91b      	cbnz	r3, 8006a9a <_printf_i+0x15e>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	f022 0220 	bic.w	r2, r2, #32
 8006a98:	6022      	str	r2, [r4, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	e7b7      	b.n	8006a0e <_printf_i+0xd2>
 8006a9e:	064d      	lsls	r5, r1, #25
 8006aa0:	bf48      	it	mi
 8006aa2:	b29b      	uxthmi	r3, r3
 8006aa4:	e7ef      	b.n	8006a86 <_printf_i+0x14a>
 8006aa6:	4665      	mov	r5, ip
 8006aa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aac:	fb02 3311 	mls	r3, r2, r1, r3
 8006ab0:	5cc3      	ldrb	r3, [r0, r3]
 8006ab2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d1f5      	bne.n	8006aa8 <_printf_i+0x16c>
 8006abc:	e7b9      	b.n	8006a32 <_printf_i+0xf6>
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	6825      	ldr	r5, [r4, #0]
 8006ac2:	6961      	ldr	r1, [r4, #20]
 8006ac4:	1d18      	adds	r0, r3, #4
 8006ac6:	6010      	str	r0, [r2, #0]
 8006ac8:	0628      	lsls	r0, r5, #24
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	d501      	bpl.n	8006ad2 <_printf_i+0x196>
 8006ace:	6019      	str	r1, [r3, #0]
 8006ad0:	e002      	b.n	8006ad8 <_printf_i+0x19c>
 8006ad2:	066a      	lsls	r2, r5, #25
 8006ad4:	d5fb      	bpl.n	8006ace <_printf_i+0x192>
 8006ad6:	8019      	strh	r1, [r3, #0]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	4665      	mov	r5, ip
 8006ade:	e7b9      	b.n	8006a54 <_printf_i+0x118>
 8006ae0:	6813      	ldr	r3, [r2, #0]
 8006ae2:	1d19      	adds	r1, r3, #4
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	681d      	ldr	r5, [r3, #0]
 8006ae8:	6862      	ldr	r2, [r4, #4]
 8006aea:	2100      	movs	r1, #0
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7f9 fb7f 	bl	80001f0 <memchr>
 8006af2:	b108      	cbz	r0, 8006af8 <_printf_i+0x1bc>
 8006af4:	1b40      	subs	r0, r0, r5
 8006af6:	6060      	str	r0, [r4, #4]
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	2300      	movs	r3, #0
 8006afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b02:	e7a7      	b.n	8006a54 <_printf_i+0x118>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	462a      	mov	r2, r5
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	47c0      	blx	r8
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d0aa      	beq.n	8006a68 <_printf_i+0x12c>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	079b      	lsls	r3, r3, #30
 8006b16:	d413      	bmi.n	8006b40 <_printf_i+0x204>
 8006b18:	68e0      	ldr	r0, [r4, #12]
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	4298      	cmp	r0, r3
 8006b1e:	bfb8      	it	lt
 8006b20:	4618      	movlt	r0, r3
 8006b22:	e7a3      	b.n	8006a6c <_printf_i+0x130>
 8006b24:	2301      	movs	r3, #1
 8006b26:	464a      	mov	r2, r9
 8006b28:	4639      	mov	r1, r7
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d09a      	beq.n	8006a68 <_printf_i+0x12c>
 8006b32:	3501      	adds	r5, #1
 8006b34:	68e3      	ldr	r3, [r4, #12]
 8006b36:	9a03      	ldr	r2, [sp, #12]
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	42ab      	cmp	r3, r5
 8006b3c:	dcf2      	bgt.n	8006b24 <_printf_i+0x1e8>
 8006b3e:	e7eb      	b.n	8006b18 <_printf_i+0x1dc>
 8006b40:	2500      	movs	r5, #0
 8006b42:	f104 0919 	add.w	r9, r4, #25
 8006b46:	e7f5      	b.n	8006b34 <_printf_i+0x1f8>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ac      	bne.n	8006aa6 <_printf_i+0x16a>
 8006b4c:	7803      	ldrb	r3, [r0, #0]
 8006b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b56:	e76c      	b.n	8006a32 <_printf_i+0xf6>
 8006b58:	08006f09 	.word	0x08006f09
 8006b5c:	08006f1a 	.word	0x08006f1a

08006b60 <memcpy>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	1e43      	subs	r3, r0, #1
 8006b64:	440a      	add	r2, r1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b74:	e7f7      	b.n	8006b66 <memcpy+0x6>

08006b76 <memmove>:
 8006b76:	4288      	cmp	r0, r1
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	eb01 0302 	add.w	r3, r1, r2
 8006b7e:	d807      	bhi.n	8006b90 <memmove+0x1a>
 8006b80:	1e42      	subs	r2, r0, #1
 8006b82:	4299      	cmp	r1, r3
 8006b84:	d00a      	beq.n	8006b9c <memmove+0x26>
 8006b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b8e:	e7f8      	b.n	8006b82 <memmove+0xc>
 8006b90:	4283      	cmp	r3, r0
 8006b92:	d9f5      	bls.n	8006b80 <memmove+0xa>
 8006b94:	1881      	adds	r1, r0, r2
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	42d3      	cmn	r3, r2
 8006b9a:	d100      	bne.n	8006b9e <memmove+0x28>
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ba2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ba6:	e7f7      	b.n	8006b98 <memmove+0x22>

08006ba8 <_free_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4605      	mov	r5, r0
 8006bac:	2900      	cmp	r1, #0
 8006bae:	d045      	beq.n	8006c3c <_free_r+0x94>
 8006bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb4:	1f0c      	subs	r4, r1, #4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfb8      	it	lt
 8006bba:	18e4      	addlt	r4, r4, r3
 8006bbc:	f000 f8d2 	bl	8006d64 <__malloc_lock>
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <_free_r+0x98>)
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	b933      	cbnz	r3, 8006bd6 <_free_r+0x2e>
 8006bc8:	6063      	str	r3, [r4, #4]
 8006bca:	6014      	str	r4, [r2, #0]
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd2:	f000 b8c8 	b.w	8006d66 <__malloc_unlock>
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	d90c      	bls.n	8006bf4 <_free_r+0x4c>
 8006bda:	6821      	ldr	r1, [r4, #0]
 8006bdc:	1862      	adds	r2, r4, r1
 8006bde:	4293      	cmp	r3, r2
 8006be0:	bf04      	itt	eq
 8006be2:	681a      	ldreq	r2, [r3, #0]
 8006be4:	685b      	ldreq	r3, [r3, #4]
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	bf04      	itt	eq
 8006bea:	1852      	addeq	r2, r2, r1
 8006bec:	6022      	streq	r2, [r4, #0]
 8006bee:	6004      	str	r4, [r0, #0]
 8006bf0:	e7ec      	b.n	8006bcc <_free_r+0x24>
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	b10a      	cbz	r2, 8006bfc <_free_r+0x54>
 8006bf8:	42a2      	cmp	r2, r4
 8006bfa:	d9fa      	bls.n	8006bf2 <_free_r+0x4a>
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	1858      	adds	r0, r3, r1
 8006c00:	42a0      	cmp	r0, r4
 8006c02:	d10b      	bne.n	8006c1c <_free_r+0x74>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	4401      	add	r1, r0
 8006c08:	1858      	adds	r0, r3, r1
 8006c0a:	4282      	cmp	r2, r0
 8006c0c:	6019      	str	r1, [r3, #0]
 8006c0e:	d1dd      	bne.n	8006bcc <_free_r+0x24>
 8006c10:	6810      	ldr	r0, [r2, #0]
 8006c12:	6852      	ldr	r2, [r2, #4]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	4401      	add	r1, r0
 8006c18:	6019      	str	r1, [r3, #0]
 8006c1a:	e7d7      	b.n	8006bcc <_free_r+0x24>
 8006c1c:	d902      	bls.n	8006c24 <_free_r+0x7c>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	e7d3      	b.n	8006bcc <_free_r+0x24>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	1821      	adds	r1, r4, r0
 8006c28:	428a      	cmp	r2, r1
 8006c2a:	bf04      	itt	eq
 8006c2c:	6811      	ldreq	r1, [r2, #0]
 8006c2e:	6852      	ldreq	r2, [r2, #4]
 8006c30:	6062      	str	r2, [r4, #4]
 8006c32:	bf04      	itt	eq
 8006c34:	1809      	addeq	r1, r1, r0
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	605c      	str	r4, [r3, #4]
 8006c3a:	e7c7      	b.n	8006bcc <_free_r+0x24>
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000110 	.word	0x20000110

08006c44 <_malloc_r>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	1ccd      	adds	r5, r1, #3
 8006c48:	f025 0503 	bic.w	r5, r5, #3
 8006c4c:	3508      	adds	r5, #8
 8006c4e:	2d0c      	cmp	r5, #12
 8006c50:	bf38      	it	cc
 8006c52:	250c      	movcc	r5, #12
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	4606      	mov	r6, r0
 8006c58:	db01      	blt.n	8006c5e <_malloc_r+0x1a>
 8006c5a:	42a9      	cmp	r1, r5
 8006c5c:	d903      	bls.n	8006c66 <_malloc_r+0x22>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	6033      	str	r3, [r6, #0]
 8006c62:	2000      	movs	r0, #0
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	f000 f87d 	bl	8006d64 <__malloc_lock>
 8006c6a:	4a21      	ldr	r2, [pc, #132]	; (8006cf0 <_malloc_r+0xac>)
 8006c6c:	6814      	ldr	r4, [r2, #0]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	b991      	cbnz	r1, 8006c98 <_malloc_r+0x54>
 8006c72:	4c20      	ldr	r4, [pc, #128]	; (8006cf4 <_malloc_r+0xb0>)
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	b91b      	cbnz	r3, 8006c80 <_malloc_r+0x3c>
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f000 f863 	bl	8006d44 <_sbrk_r>
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	4629      	mov	r1, r5
 8006c82:	4630      	mov	r0, r6
 8006c84:	f000 f85e 	bl	8006d44 <_sbrk_r>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d124      	bne.n	8006cd6 <_malloc_r+0x92>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	6033      	str	r3, [r6, #0]
 8006c90:	4630      	mov	r0, r6
 8006c92:	f000 f868 	bl	8006d66 <__malloc_unlock>
 8006c96:	e7e4      	b.n	8006c62 <_malloc_r+0x1e>
 8006c98:	680b      	ldr	r3, [r1, #0]
 8006c9a:	1b5b      	subs	r3, r3, r5
 8006c9c:	d418      	bmi.n	8006cd0 <_malloc_r+0x8c>
 8006c9e:	2b0b      	cmp	r3, #11
 8006ca0:	d90f      	bls.n	8006cc2 <_malloc_r+0x7e>
 8006ca2:	600b      	str	r3, [r1, #0]
 8006ca4:	50cd      	str	r5, [r1, r3]
 8006ca6:	18cc      	adds	r4, r1, r3
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 f85c 	bl	8006d66 <__malloc_unlock>
 8006cae:	f104 000b 	add.w	r0, r4, #11
 8006cb2:	1d23      	adds	r3, r4, #4
 8006cb4:	f020 0007 	bic.w	r0, r0, #7
 8006cb8:	1ac3      	subs	r3, r0, r3
 8006cba:	d0d3      	beq.n	8006c64 <_malloc_r+0x20>
 8006cbc:	425a      	negs	r2, r3
 8006cbe:	50e2      	str	r2, [r4, r3]
 8006cc0:	e7d0      	b.n	8006c64 <_malloc_r+0x20>
 8006cc2:	428c      	cmp	r4, r1
 8006cc4:	684b      	ldr	r3, [r1, #4]
 8006cc6:	bf16      	itet	ne
 8006cc8:	6063      	strne	r3, [r4, #4]
 8006cca:	6013      	streq	r3, [r2, #0]
 8006ccc:	460c      	movne	r4, r1
 8006cce:	e7eb      	b.n	8006ca8 <_malloc_r+0x64>
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	6849      	ldr	r1, [r1, #4]
 8006cd4:	e7cc      	b.n	8006c70 <_malloc_r+0x2c>
 8006cd6:	1cc4      	adds	r4, r0, #3
 8006cd8:	f024 0403 	bic.w	r4, r4, #3
 8006cdc:	42a0      	cmp	r0, r4
 8006cde:	d005      	beq.n	8006cec <_malloc_r+0xa8>
 8006ce0:	1a21      	subs	r1, r4, r0
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f000 f82e 	bl	8006d44 <_sbrk_r>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d0cf      	beq.n	8006c8c <_malloc_r+0x48>
 8006cec:	6025      	str	r5, [r4, #0]
 8006cee:	e7db      	b.n	8006ca8 <_malloc_r+0x64>
 8006cf0:	20000110 	.word	0x20000110
 8006cf4:	20000114 	.word	0x20000114

08006cf8 <_realloc_r>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	460e      	mov	r6, r1
 8006d00:	b921      	cbnz	r1, 8006d0c <_realloc_r+0x14>
 8006d02:	4611      	mov	r1, r2
 8006d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d08:	f7ff bf9c 	b.w	8006c44 <_malloc_r>
 8006d0c:	b922      	cbnz	r2, 8006d18 <_realloc_r+0x20>
 8006d0e:	f7ff ff4b 	bl	8006ba8 <_free_r>
 8006d12:	4625      	mov	r5, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d18:	f000 f826 	bl	8006d68 <_malloc_usable_size_r>
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d20f      	bcs.n	8006d40 <_realloc_r+0x48>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4638      	mov	r0, r7
 8006d24:	f7ff ff8e 	bl	8006c44 <_malloc_r>
 8006d28:	4605      	mov	r5, r0
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d0f2      	beq.n	8006d14 <_realloc_r+0x1c>
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4622      	mov	r2, r4
 8006d32:	f7ff ff15 	bl	8006b60 <memcpy>
 8006d36:	4631      	mov	r1, r6
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7ff ff35 	bl	8006ba8 <_free_r>
 8006d3e:	e7e9      	b.n	8006d14 <_realloc_r+0x1c>
 8006d40:	4635      	mov	r5, r6
 8006d42:	e7e7      	b.n	8006d14 <_realloc_r+0x1c>

08006d44 <_sbrk_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4c06      	ldr	r4, [pc, #24]	; (8006d60 <_sbrk_r+0x1c>)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	f7fb f826 	bl	8001da0 <_sbrk>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_sbrk_r+0x1a>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_sbrk_r+0x1a>
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	2000029c 	.word	0x2000029c

08006d64 <__malloc_lock>:
 8006d64:	4770      	bx	lr

08006d66 <__malloc_unlock>:
 8006d66:	4770      	bx	lr

08006d68 <_malloc_usable_size_r>:
 8006d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d6c:	1f18      	subs	r0, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bfbc      	itt	lt
 8006d72:	580b      	ldrlt	r3, [r1, r0]
 8006d74:	18c0      	addlt	r0, r0, r3
 8006d76:	4770      	bx	lr

08006d78 <_init>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr

08006d84 <_fini>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr
