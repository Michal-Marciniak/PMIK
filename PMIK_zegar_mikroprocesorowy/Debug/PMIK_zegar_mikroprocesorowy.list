
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005524  08005524  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800552c  0800552c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08005534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200000b0  080055e4  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080055e4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa74  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026fb  00000000  00000000  0002fb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00032250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ad4  00000000  00000000  00033b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d36a  00000000  00000000  0004b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d65d  00000000  00000000  0005893e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  000e6018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005428 	.word	0x08005428

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08005428 	.word	0x08005428

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <rtc_set_time>:
TIME time;

uint8_t alarm_flag;

void rtc_set_time (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	  /**Initialize RTC and set the Time and Date
	  */

	get_Time();
 8000586:	f000 ff7b 	bl	8001480 <get_Time>

	uint8_t hour = time.hour;
 800058a:	4b61      	ldr	r3, [pc, #388]	; (8000710 <rtc_set_time+0x190>)
 800058c:	789b      	ldrb	r3, [r3, #2]
 800058e:	77fb      	strb	r3, [r7, #31]
	uint8_t min = time.minutes;
 8000590:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <rtc_set_time+0x190>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	77bb      	strb	r3, [r7, #30]
	uint8_t sec = time.seconds;
 8000596:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <rtc_set_time+0x190>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	777b      	strb	r3, [r7, #29]

	uint8_t day = time.dayofmonth;
 800059c:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <rtc_set_time+0x190>)
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	773b      	strb	r3, [r7, #28]
	uint8_t year = time.year;
 80005a2:	4b5b      	ldr	r3, [pc, #364]	; (8000710 <rtc_set_time+0x190>)
 80005a4:	799b      	ldrb	r3, [r3, #6]
 80005a6:	76fb      	strb	r3, [r7, #27]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 80005a8:	7ffb      	ldrb	r3, [r7, #31]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 ff2a 	bl	8001404 <decToBcd>
 80005b0:	4603      	mov	r3, r0
 80005b2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = decToBcd(min);
 80005b4:	7fbb      	ldrb	r3, [r7, #30]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 ff24 	bl	8001404 <decToBcd>
 80005bc:	4603      	mov	r3, r0
 80005be:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = decToBcd(sec);
 80005c0:	7f7b      	ldrb	r3, [r7, #29]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ff1e 	bl	8001404 <decToBcd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	71bb      	strb	r3, [r7, #6]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	484e      	ldr	r0, [pc, #312]	; (8000714 <rtc_set_time+0x194>)
 80005dc:	f003 f91f 	bl	800381e <HAL_RTC_SetTime>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <rtc_set_time+0x6a>
	{
	  Error_Handler();
 80005e6:	f000 fd9f 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <rtc_set_time+0x190>)
 80005ec:	78db      	ldrb	r3, [r3, #3]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d826      	bhi.n	8000642 <rtc_set_time+0xc2>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <rtc_set_time+0x7c>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000619 	.word	0x08000619
 8000600:	0800061f 	.word	0x0800061f
 8000604:	08000625 	.word	0x08000625
 8000608:	0800062b 	.word	0x0800062b
 800060c:	08000631 	.word	0x08000631
 8000610:	08000637 	.word	0x08000637
 8000614:	0800063d 	.word	0x0800063d

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000618:	2301      	movs	r3, #1
 800061a:	703b      	strb	r3, [r7, #0]
		break;
 800061c:	e011      	b.n	8000642 <rtc_set_time+0xc2>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800061e:	2302      	movs	r3, #2
 8000620:	703b      	strb	r3, [r7, #0]
		break;
 8000622:	e00e      	b.n	8000642 <rtc_set_time+0xc2>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000624:	2303      	movs	r3, #3
 8000626:	703b      	strb	r3, [r7, #0]
		break;
 8000628:	e00b      	b.n	8000642 <rtc_set_time+0xc2>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800062a:	2304      	movs	r3, #4
 800062c:	703b      	strb	r3, [r7, #0]
		break;
 800062e:	e008      	b.n	8000642 <rtc_set_time+0xc2>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000630:	2305      	movs	r3, #5
 8000632:	703b      	strb	r3, [r7, #0]
		break;
 8000634:	e005      	b.n	8000642 <rtc_set_time+0xc2>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000636:	2306      	movs	r3, #6
 8000638:	703b      	strb	r3, [r7, #0]
		break;
 800063a:	e002      	b.n	8000642 <rtc_set_time+0xc2>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800063c:	2307      	movs	r3, #7
 800063e:	703b      	strb	r3, [r7, #0]
		break;
 8000640:	bf00      	nop

	}


	switch( (int) time.month) {
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <rtc_set_time+0x190>)
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	3b01      	subs	r3, #1
 8000648:	2b0b      	cmp	r3, #11
 800064a:	d83f      	bhi.n	80006cc <rtc_set_time+0x14c>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <rtc_set_time+0xd4>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000685 	.word	0x08000685
 8000658:	0800068b 	.word	0x0800068b
 800065c:	08000691 	.word	0x08000691
 8000660:	08000697 	.word	0x08000697
 8000664:	0800069d 	.word	0x0800069d
 8000668:	080006a3 	.word	0x080006a3
 800066c:	080006a9 	.word	0x080006a9
 8000670:	080006af 	.word	0x080006af
 8000674:	080006b5 	.word	0x080006b5
 8000678:	080006bb 	.word	0x080006bb
 800067c:	080006c1 	.word	0x080006c1
 8000680:	080006c7 	.word	0x080006c7

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 8000684:	2301      	movs	r3, #1
 8000686:	707b      	strb	r3, [r7, #1]
		  break;
 8000688:	e020      	b.n	80006cc <rtc_set_time+0x14c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 800068a:	2302      	movs	r3, #2
 800068c:	707b      	strb	r3, [r7, #1]
		  break;
 800068e:	e01d      	b.n	80006cc <rtc_set_time+0x14c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 8000690:	2303      	movs	r3, #3
 8000692:	707b      	strb	r3, [r7, #1]
		  break;
 8000694:	e01a      	b.n	80006cc <rtc_set_time+0x14c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 8000696:	2304      	movs	r3, #4
 8000698:	707b      	strb	r3, [r7, #1]
		  break;
 800069a:	e017      	b.n	80006cc <rtc_set_time+0x14c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 800069c:	2305      	movs	r3, #5
 800069e:	707b      	strb	r3, [r7, #1]
		  break;
 80006a0:	e014      	b.n	80006cc <rtc_set_time+0x14c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80006a2:	2306      	movs	r3, #6
 80006a4:	707b      	strb	r3, [r7, #1]
		  break;
 80006a6:	e011      	b.n	80006cc <rtc_set_time+0x14c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80006a8:	2307      	movs	r3, #7
 80006aa:	707b      	strb	r3, [r7, #1]
		  break;
 80006ac:	e00e      	b.n	80006cc <rtc_set_time+0x14c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80006ae:	2308      	movs	r3, #8
 80006b0:	707b      	strb	r3, [r7, #1]
		  break;
 80006b2:	e00b      	b.n	80006cc <rtc_set_time+0x14c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 80006b4:	2309      	movs	r3, #9
 80006b6:	707b      	strb	r3, [r7, #1]
		  break;
 80006b8:	e008      	b.n	80006cc <rtc_set_time+0x14c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 80006ba:	2310      	movs	r3, #16
 80006bc:	707b      	strb	r3, [r7, #1]
		  break;
 80006be:	e005      	b.n	80006cc <rtc_set_time+0x14c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 80006c0:	2311      	movs	r3, #17
 80006c2:	707b      	strb	r3, [r7, #1]
		  break;
 80006c4:	e002      	b.n	80006cc <rtc_set_time+0x14c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 80006c6:	2312      	movs	r3, #18
 80006c8:	707b      	strb	r3, [r7, #1]
		  break;
 80006ca:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 80006cc:	7f3b      	ldrb	r3, [r7, #28]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fe98 	bl	8001404 <decToBcd>
 80006d4:	4603      	mov	r3, r0
 80006d6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = decToBcd(year);
 80006d8:	7efb      	ldrb	r3, [r7, #27]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fe92 	bl	8001404 <decToBcd>
 80006e0:	4603      	mov	r3, r0
 80006e2:	70fb      	strb	r3, [r7, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <rtc_set_time+0x194>)
 80006ec:	f003 f954 	bl	8003998 <HAL_RTC_SetDate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <rtc_set_time+0x17a>
	{
		Error_Handler();
 80006f6:	f000 fd17 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80006fa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80006fe:	2101      	movs	r1, #1
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <rtc_set_time+0x194>)
 8000702:	f003 fbe1 	bl	8003ec8 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000dc 	.word	0x200000dc
 8000714:	20000198 	.word	0x20000198

08000718 <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość godzin, minut, sekund oraz dni, pozostałych do włączenia alarmu
void rtc_set_alarm (uint8_t hour, uint8_t min, uint8_t sec, uint8_t day)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08f      	sub	sp, #60	; 0x3c
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	4603      	mov	r3, r0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	717b      	strb	r3, [r7, #5]
 8000732:	4613      	mov	r3, r2
 8000734:	713b      	strb	r3, [r7, #4]

	get_Time();
 8000736:	f000 fea3 	bl	8001480 <get_Time>

	uint8_t alarm_hour = time.hour + hour;
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <rtc_set_alarm+0xcc>)
 800073c:	789a      	ldrb	r2, [r3, #2]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4413      	add	r3, r2
 8000742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t alarm_min = time.minutes + min;
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <rtc_set_alarm+0xcc>)
 8000748:	785a      	ldrb	r2, [r3, #1]
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	4413      	add	r3, r2
 800074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarm_sec = time.seconds + sec;
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <rtc_set_alarm+0xcc>)
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	797b      	ldrb	r3, [r7, #5]
 8000758:	4413      	add	r3, r2
 800075a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t alarm_day = time.dayofmonth + day;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <rtc_set_alarm+0xcc>)
 8000760:	791a      	ldrb	r2, [r3, #4]
 8000762:	793b      	ldrb	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
	sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800076a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fe48 	bl	8001404 <decToBcd>
 8000774:	4603      	mov	r3, r0
 8000776:	733b      	strb	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 8000778:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe41 	bl	8001404 <decToBcd>
 8000782:	4603      	mov	r3, r0
 8000784:	737b      	strb	r3, [r7, #13]
	sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 8000786:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fe3a 	bl	8001404 <decToBcd>
 8000790:	4603      	mov	r3, r0
 8000792:	73bb      	strb	r3, [r7, #14]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80007ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fe27 	bl	8001404 <decToBcd>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 80007bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <rtc_set_alarm+0xd0>)
 80007cc:	f003 f98c 	bl	8003ae8 <HAL_RTC_SetAlarm_IT>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <rtc_set_alarm+0xc2>
	{
		Error_Handler();
 80007d6:	f000 fca7 	bl	8001128 <Error_Handler>
	}
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 80007da:	bf00      	nop
 80007dc:	373c      	adds	r7, #60	; 0x3c
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000dc 	.word	0x200000dc
 80007e8:	20000198 	.word	0x20000198

080007ec <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	200000d8 	.word	0x200000d8

0800080c <to_do_on_alarm>:

void to_do_on_alarm(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

	lcd_clear();
 8000810:	f000 fb50 	bl	8000eb4 <lcd_clear>
	lcd_send_string("Wy");
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <to_do_on_alarm+0x38>)
 8000816:	f000 fa71 	bl	8000cfc <lcd_send_string>
	lcd_send_own_char(3);
 800081a:	2003      	movs	r0, #3
 800081c:	f000 faae 	bl	8000d7c <lcd_send_own_char>
	lcd_send_own_char(8);
 8000820:	2008      	movs	r0, #8
 8000822:	f000 faab 	bl	8000d7c <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <to_do_on_alarm+0x3c>)
 8000828:	f000 fa68 	bl	8000cfc <lcd_send_string>
	HAL_Delay(1000);
 800082c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000830:	f000 ff8c 	bl	800174c <HAL_Delay>

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <to_do_on_alarm+0x40>)
 800083c:	f001 fa5e 	bl	8001cfc <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08005440 	.word	0x08005440
 8000848:	08005444 	.word	0x08005444
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	d108      	bne.n	8000874 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <HAL_GPIO_EXTI_Callback+0x2c>)
 800086a:	f001 fa47 	bl	8001cfc <HAL_GPIO_WritePin>
		alarm_flag = 0;
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <HAL_GPIO_EXTI_Callback+0x30>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	}
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40020000 	.word	0x40020000
 8000880:	200000d8 	.word	0x200000d8

08000884 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_GPIO_Init+0xc8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2a      	ldr	r2, [pc, #168]	; (800094c <MX_GPIO_Init+0xc8>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_GPIO_Init+0xc8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_GPIO_Init+0xc8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_GPIO_Init+0xc8>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_GPIO_Init+0xc8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_GPIO_Init+0xc8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_GPIO_Init+0xc8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_GPIO_Init+0xc8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <MX_GPIO_Init+0xcc>)
 80008f6:	f001 fa01 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_GPIO_Init+0xd0>)
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <MX_GPIO_Init+0xd4>)
 8000910:	f001 f872 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin;
 8000914:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_GPIO_Init+0xcc>)
 800092e:	f001 f863 	bl	80019f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f001 f805 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f001 f81e 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	10210000 	.word	0x10210000
 8000958:	40020800 	.word	0x40020800

0800095c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f001 f9e1 	bl	8001d60 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 fbc0 	bl	8001128 <Error_Handler>
  }

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e4 	.word	0x200000e4
 80009b0:	40005400 	.word	0x40005400
 80009b4:	000186a0 	.word	0x000186a0

080009b8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009be:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <MX_I2C2_Init+0x54>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009c4:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_I2C2_Init+0x58>)
 80009c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_I2C2_Init+0x50>)
 80009f6:	f001 f9b3 	bl	8001d60 <HAL_I2C_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a00:	f000 fb92 	bl	8001128 <Error_Handler>
  }

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000138 	.word	0x20000138
 8000a0c:	40005800 	.word	0x40005800
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a3b      	ldr	r2, [pc, #236]	; (8000b20 <HAL_I2C_MspInit+0x10c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12d      	bne.n	8000a92 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a64:	2304      	movs	r3, #4
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482e      	ldr	r0, [pc, #184]	; (8000b28 <HAL_I2C_MspInit+0x114>)
 8000a70:	f000 ffc2 	bl	80019f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a90:	e041      	b.n	8000b16 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <HAL_I2C_MspInit+0x118>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d13c      	bne.n	8000b16 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abe:	2312      	movs	r3, #18
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aca:	2304      	movs	r3, #4
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <HAL_I2C_MspInit+0x114>)
 8000ad6:	f000 ff8f 	bl	80019f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ada:	2308      	movs	r3, #8
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000aea:	2309      	movs	r3, #9
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <HAL_I2C_MspInit+0x114>)
 8000af6:	f000 ff7f 	bl	80019f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_I2C_MspInit+0x110>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
}
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40005400 	.word	0x40005400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40005800 	.word	0x40005800

08000b30 <lcd_init>:

// RS = 0, wysyłamy instrukcje do LCD
// RS = 1, wysyłamy dane do LCD

void lcd_init()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	/* sekwencja inicjalizująca wyświetlacz, z dokumentacji */
	HAL_Delay(40);
 8000b34:	2028      	movs	r0, #40	; 0x28
 8000b36:	f000 fe09 	bl	800174c <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000b3a:	2030      	movs	r0, #48	; 0x30
 8000b3c:	f000 f854 	bl	8000be8 <lcd_write_command>
	HAL_Delay(5);
 8000b40:	2005      	movs	r0, #5
 8000b42:	f000 fe03 	bl	800174c <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000b46:	2030      	movs	r0, #48	; 0x30
 8000b48:	f000 f84e 	bl	8000be8 <lcd_write_command>
	HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fdfd 	bl	800174c <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000b52:	2030      	movs	r0, #48	; 0x30
 8000b54:	f000 f848 	bl	8000be8 <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f000 f845 	bl	8000be8 <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8000b5e:	200c      	movs	r0, #12
 8000b60:	f000 f842 	bl	8000be8 <lcd_write_command>

	lcd_generate_own_chars();
 8000b64:	f000 f8e2 	bl	8000d2c <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8000b68:	f000 f9a4 	bl	8000eb4 <lcd_clear>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <lcd_set_cursor>:

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <lcd_set_cursor+0x24>
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d009      	beq.n	8000ba6 <lcd_set_cursor+0x36>
			col_number |= (0xc0);
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
			break;
	}

}
 8000b92:	e011      	b.n	8000bb8 <lcd_set_cursor+0x48>
			col_number |= (0x80);
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b9a:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f822 	bl	8000be8 <lcd_write_command>
			break;
 8000ba4:	e008      	b.n	8000bb8 <lcd_set_cursor+0x48>
			col_number |= (0xc0);
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000bac:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f819 	bl	8000be8 <lcd_write_command>
			break;
 8000bb6:	bf00      	nop
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	f000 f80f 	bl	8000be8 <lcd_write_command>
	HAL_Delay(5);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f000 fdbe 	bl	800174c <HAL_Delay>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 8000bd8:	20c0      	movs	r0, #192	; 0xc0
 8000bda:	f000 f805 	bl	8000be8 <lcd_write_command>
	HAL_Delay(5);
 8000bde:	2005      	movs	r0, #5
 8000be0:	f000 fdb4 	bl	800174c <HAL_Delay>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000bf2:	234e      	movs	r3, #78	; 0x4e
 8000bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL_PIN;		// EN = 1, RS = 0
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	f023 030f 	bic.w	r3, r3, #15
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	f043 030c 	orr.w	r3, r3, #12
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL_PIN;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	f023 030f 	bic.w	r3, r3, #15
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL_PIN;		// EN = 1, RS = 0
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	f043 030c 	orr.w	r3, r3, #12
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL_PIN;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	b299      	uxth	r1, r3
 8000c42:	f107 0208 	add.w	r2, r7, #8
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <lcd_write_command+0x78>)
 8000c4e:	f001 f9bf 	bl	8001fd0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000c52:	2005      	movs	r0, #5
 8000c54:	f000 fd7a 	bl	800174c <HAL_Delay>
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000e4 	.word	0x200000e4

08000c64 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000c6e:	234e      	movs	r3, #78	; 0x4e
 8000c70:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL_PIN;		// EN = 1, RS = 1
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f023 030f 	bic.w	r3, r3, #15
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f043 030c 	orr.w	r3, r3, #12
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL_PIN;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	f023 030f 	bic.w	r3, r3, #15
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL_PIN;		// EN = 1, RS = 1
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f043 030c 	orr.w	r3, r3, #12
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL_PIN;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	f107 0208 	add.w	r2, r7, #8
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <lcd_write_data+0x94>)
 8000ce4:	f001 f974 	bl	8001fd0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000ce8:	2005      	movs	r0, #5
 8000cea:	f000 fd2f 	bl	800174c <HAL_Delay>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000e4 	.word	0x200000e4

08000cfc <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	while(*string)
 8000d04:	e006      	b.n	8000d14 <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ffa8 	bl	8000c64 <lcd_write_data>
	while(*string)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f4      	bne.n	8000d06 <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f000 fd15 	bl	800174c <HAL_Delay>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 8000d32:	2040      	movs	r0, #64	; 0x40
 8000d34:	f7ff ff58 	bl	8000be8 <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	e015      	b.n	8000d6a <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	e00c      	b.n	8000d5e <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	490b      	ldr	r1, [pc, #44]	; (8000d78 <lcd_generate_own_chars+0x4c>)
 8000d4a:	00d2      	lsls	r2, r2, #3
 8000d4c:	440a      	add	r2, r1
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff86 	bl	8000c64 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9ef      	bls.n	8000d44 <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	3301      	adds	r3, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b07      	cmp	r3, #7
 8000d6e:	d9e6      	bls.n	8000d3e <lcd_generate_own_chars+0x12>
		}
	}
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000

08000d7c <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	d832      	bhi.n	8000df4 <lcd_send_own_char+0x78>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <lcd_send_own_char+0x18>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000db5 	.word	0x08000db5
 8000d98:	08000dbd 	.word	0x08000dbd
 8000d9c:	08000dc5 	.word	0x08000dc5
 8000da0:	08000dcd 	.word	0x08000dcd
 8000da4:	08000dd5 	.word	0x08000dd5
 8000da8:	08000ddd 	.word	0x08000ddd
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000ded 	.word	0x08000ded

		case 1:
			lcd_send_string("\x1");
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <lcd_send_own_char+0x80>)
 8000db6:	f7ff ffa1 	bl	8000cfc <lcd_send_string>
			break;
 8000dba:	e01b      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <lcd_send_own_char+0x84>)
 8000dbe:	f7ff ff9d 	bl	8000cfc <lcd_send_string>
			break;
 8000dc2:	e017      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <lcd_send_own_char+0x88>)
 8000dc6:	f7ff ff99 	bl	8000cfc <lcd_send_string>
			break;
 8000dca:	e013      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <lcd_send_own_char+0x8c>)
 8000dce:	f7ff ff95 	bl	8000cfc <lcd_send_string>
			break;
 8000dd2:	e00f      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <lcd_send_own_char+0x90>)
 8000dd6:	f7ff ff91 	bl	8000cfc <lcd_send_string>
			break;
 8000dda:	e00b      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <lcd_send_own_char+0x94>)
 8000dde:	f7ff ff8d 	bl	8000cfc <lcd_send_string>
			break;
 8000de2:	e007      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <lcd_send_own_char+0x98>)
 8000de6:	f7ff ff89 	bl	8000cfc <lcd_send_string>
			break;
 8000dea:	e003      	b.n	8000df4 <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <lcd_send_own_char+0x9c>)
 8000dee:	f7ff ff85 	bl	8000cfc <lcd_send_string>
			break;
 8000df2:	bf00      	nop
	}
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08005454 	.word	0x08005454
 8000e00:	08005458 	.word	0x08005458
 8000e04:	0800545c 	.word	0x0800545c
 8000e08:	08005460 	.word	0x08005460
 8000e0c:	08005464 	.word	0x08005464
 8000e10:	08005468 	.word	0x08005468
 8000e14:	0800546c 	.word	0x0800546c
 8000e18:	08005470 	.word	0x08005470

08000e1c <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]

	switch(day_number) {
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d82f      	bhi.n	8000e8e <lcd_show_week_day_name+0x72>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <lcd_show_week_day_name+0x18>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e51 	.word	0x08000e51
 8000e38:	08000e59 	.word	0x08000e59
 8000e3c:	08000e61 	.word	0x08000e61
 8000e40:	08000e6f 	.word	0x08000e6f
 8000e44:	08000e77 	.word	0x08000e77
 8000e48:	08000e7f 	.word	0x08000e7f
 8000e4c:	08000e87 	.word	0x08000e87

		case 1:
			lcd_send_string("pon.");
 8000e50:	4811      	ldr	r0, [pc, #68]	; (8000e98 <lcd_show_week_day_name+0x7c>)
 8000e52:	f7ff ff53 	bl	8000cfc <lcd_send_string>
			break;
 8000e56:	e01a      	b.n	8000e8e <lcd_show_week_day_name+0x72>

		case 2:
			lcd_send_string("wt.");
 8000e58:	4810      	ldr	r0, [pc, #64]	; (8000e9c <lcd_show_week_day_name+0x80>)
 8000e5a:	f7ff ff4f 	bl	8000cfc <lcd_send_string>
			break;
 8000e5e:	e016      	b.n	8000e8e <lcd_show_week_day_name+0x72>

		case 3:
			lcd_send_own_char(7);
 8000e60:	2007      	movs	r0, #7
 8000e62:	f7ff ff8b 	bl	8000d7c <lcd_send_own_char>
			lcd_send_string("r.");
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <lcd_show_week_day_name+0x84>)
 8000e68:	f7ff ff48 	bl	8000cfc <lcd_send_string>
			break;
 8000e6c:	e00f      	b.n	8000e8e <lcd_show_week_day_name+0x72>

		case 4:
			lcd_send_string("czw.");
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <lcd_show_week_day_name+0x88>)
 8000e70:	f7ff ff44 	bl	8000cfc <lcd_send_string>
			break;
 8000e74:	e00b      	b.n	8000e8e <lcd_show_week_day_name+0x72>

		case 5:
			lcd_send_string("pt.");
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <lcd_show_week_day_name+0x8c>)
 8000e78:	f7ff ff40 	bl	8000cfc <lcd_send_string>
			break;
 8000e7c:	e007      	b.n	8000e8e <lcd_show_week_day_name+0x72>

		case 6:
			lcd_send_string("sob.");
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <lcd_show_week_day_name+0x90>)
 8000e80:	f7ff ff3c 	bl	8000cfc <lcd_send_string>
			break;
 8000e84:	e003      	b.n	8000e8e <lcd_show_week_day_name+0x72>

		case 7:
			lcd_send_string("niedz.");
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <lcd_show_week_day_name+0x94>)
 8000e88:	f7ff ff38 	bl	8000cfc <lcd_send_string>
			break;
 8000e8c:	bf00      	nop

	}
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08005474 	.word	0x08005474
 8000e9c:	0800547c 	.word	0x0800547c
 8000ea0:	08005480 	.word	0x08005480
 8000ea4:	08005484 	.word	0x08005484
 8000ea8:	0800548c 	.word	0x0800548c
 8000eac:	08005490 	.word	0x08005490
 8000eb0:	08005498 	.word	0x08005498

08000eb4 <lcd_clear>:

void lcd_clear(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	/* clear display */
	lcd_write_command(CLEAR_LCD);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fe95 	bl	8000be8 <lcd_write_command>
	HAL_Delay(5);
 8000ebe:	2005      	movs	r0, #5
 8000ec0:	f000 fc44 	bl	800174c <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fbcb 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f88d 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f7ff fcd5 	bl	8000884 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eda:	f7ff fd3f 	bl	800095c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ede:	f7ff fd6b 	bl	80009b8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000ee2:	f000 fb1d 	bl	8001520 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ee6:	f000 f927 	bl	8001138 <MX_RTC_Init>

  /****************** UART BEGIN ******************/

  // Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
  // Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback.
  HAL_UART_Receive_IT(&huart2, &received_uart_data, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	4936      	ldr	r1, [pc, #216]	; (8000fc8 <main+0x100>)
 8000eee:	4837      	ldr	r0, [pc, #220]	; (8000fcc <main+0x104>)
 8000ef0:	f003 f85b 	bl	8003faa <HAL_UART_Receive_IT>

  /****************** UART END ******************/

  /****************** LCD BEGIN ******************/

  lcd_init();
 8000ef4:	f7ff fe1c 	bl	8000b30 <lcd_init>

  /****************** LCD END ******************/

  // Wyłączenie brzęczyka i diody
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efe:	4834      	ldr	r0, [pc, #208]	; (8000fd0 <main+0x108>)
 8000f00:	f000 fefc 	bl	8001cfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2120      	movs	r1, #32
 8000f08:	4831      	ldr	r0, [pc, #196]	; (8000fd0 <main+0x108>)
 8000f0a:	f000 fef7 	bl	8001cfc <HAL_GPIO_WritePin>

  //set_Time(30, 01, 17, 7, 25, 10, 20);
  rtc_set_time();
 8000f0e:	f7ff fb37 	bl	8000580 <rtc_set_time>
  rtc_set_alarm(0, 0, 2, 0);
 8000f12:	2300      	movs	r3, #0
 8000f14:	2202      	movs	r2, #2
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fbfd 	bl	8000718 <rtc_set_alarm>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	get_Time();
 8000f1e:	f000 faaf 	bl	8001480 <get_Time>

	// wyświetlanie godziny na LCD
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <main+0x10c>)
 8000f24:	789b      	ldrb	r3, [r3, #2]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <main+0x10c>)
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <main+0x10c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	460b      	mov	r3, r1
 8000f36:	4928      	ldr	r1, [pc, #160]	; (8000fd8 <main+0x110>)
 8000f38:	4828      	ldr	r0, [pc, #160]	; (8000fdc <main+0x114>)
 8000f3a:	f003 fe6f 	bl	8004c1c <siprintf>
	lcd_first_line();
 8000f3e:	f7ff fe3f 	bl	8000bc0 <lcd_first_line>
	lcd_send_string(time_date_buffer);
 8000f42:	4826      	ldr	r0, [pc, #152]	; (8000fdc <main+0x114>)
 8000f44:	f7ff feda 	bl	8000cfc <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_set_cursor(0, 10);
 8000f48:	210a      	movs	r1, #10
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fe10 	bl	8000b70 <lcd_set_cursor>
	lcd_show_week_day_name(time.dayofweek);
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <main+0x10c>)
 8000f52:	78db      	ldrb	r3, [r3, #3]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff61 	bl	8000e1c <lcd_show_week_day_name>

	// wyświetlanie daty na LCD
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <main+0x10c>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <main+0x10c>)
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <main+0x10c>)
 8000f68:	799b      	ldrb	r3, [r3, #6]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	491c      	ldr	r1, [pc, #112]	; (8000fe0 <main+0x118>)
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <main+0x114>)
 8000f72:	f003 fe53 	bl	8004c1c <siprintf>
	lcd_second_line();
 8000f76:	f7ff fe2d 	bl	8000bd4 <lcd_second_line>
	lcd_send_string(time_date_buffer);
 8000f7a:	4818      	ldr	r0, [pc, #96]	; (8000fdc <main+0x114>)
 8000f7c:	f7ff febe 	bl	8000cfc <lcd_send_string>

	HAL_Delay(1000);
 8000f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f84:	f000 fbe2 	bl	800174c <HAL_Delay>

	if(alarm_flag) {
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <main+0x11c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0c6      	beq.n	8000f1e <main+0x56>

		while (alarm_flag) {
 8000f90:	e001      	b.n	8000f96 <main+0xce>
			to_do_on_alarm();
 8000f92:	f7ff fc3b 	bl	800080c <to_do_on_alarm>
		while (alarm_flag) {
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <main+0x11c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f9      	bne.n	8000f92 <main+0xca>
		}

		lcd_clear();
 8000f9e:	f7ff ff89 	bl	8000eb4 <lcd_clear>

		lcd_send_string("Alarm wy");
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <main+0x120>)
 8000fa4:	f7ff feaa 	bl	8000cfc <lcd_send_string>
		lcd_send_own_char(3);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f7ff fee7 	bl	8000d7c <lcd_send_own_char>
		lcd_send_own_char(8);
 8000fae:	2008      	movs	r0, #8
 8000fb0:	f7ff fee4 	bl	8000d7c <lcd_send_own_char>
		lcd_send_string("czony");
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <main+0x124>)
 8000fb6:	f7ff fea1 	bl	8000cfc <lcd_send_string>
		HAL_Delay(3000);
 8000fba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fbe:	f000 fbc5 	bl	800174c <HAL_Delay>

		lcd_clear();
 8000fc2:	f7ff ff77 	bl	8000eb4 <lcd_clear>
	get_Time();
 8000fc6:	e7aa      	b.n	8000f1e <main+0x56>
 8000fc8:	20000197 	.word	0x20000197
 8000fcc:	200001b8 	.word	0x200001b8
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	200000dc 	.word	0x200000dc
 8000fd8:	080054a0 	.word	0x080054a0
 8000fdc:	2000018c 	.word	0x2000018c
 8000fe0:	080054b0 	.word	0x080054b0
 8000fe4:	200000d8 	.word	0x200000d8
 8000fe8:	080054c4 	.word	0x080054c4
 8000fec:	080054d0 	.word	0x080054d0

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b098      	sub	sp, #96	; 0x60
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fe04 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <SystemClock_Config+0x100>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <SystemClock_Config+0x100>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <SystemClock_Config+0x100>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <SystemClock_Config+0x104>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800104c:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <SystemClock_Config+0x104>)
 800104e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <SystemClock_Config+0x104>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001060:	230a      	movs	r3, #10
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001078:	2308      	movs	r3, #8
 800107a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 800107c:	2354      	movs	r3, #84	; 0x54
 800107e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe0b 	bl	8002ca8 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001098:	f000 f846 	bl	8001128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2102      	movs	r1, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f865 	bl	8003188 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80010c4:	f000 f830 	bl	8001128 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fa22 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010e2:	f000 f821 	bl	8001128 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3760      	adds	r7, #96	; 0x60
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart2, a nie coś innego
	if(huart->Instance==USART2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a05      	ldr	r2, [pc, #20]	; (800111c <HAL_UART_RxCpltCallback+0x24>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d104      	bne.n	8001114 <HAL_UART_RxCpltCallback+0x1c>
	{
		// TODO

		// Nasłuchuj ponownie na kolejne znaki
		HAL_UART_Receive_IT(&huart2, &received_uart_data, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	4904      	ldr	r1, [pc, #16]	; (8001120 <HAL_UART_RxCpltCallback+0x28>)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_UART_RxCpltCallback+0x2c>)
 8001110:	f002 ff4b 	bl	8003faa <HAL_UART_Receive_IT>
	}

}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004400 	.word	0x40004400
 8001120:	20000197 	.word	0x20000197
 8001124:	200001b8 	.word	0x200001b8

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	; 0x40
 800113c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2228      	movs	r2, #40	; 0x28
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fd57 	bl	8004c0c <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <MX_RTC_Init+0x110>)
 8001160:	4a3a      	ldr	r2, [pc, #232]	; (800124c <MX_RTC_Init+0x114>)
 8001162:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_RTC_Init+0x110>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <MX_RTC_Init+0x110>)
 800116c:	227f      	movs	r2, #127	; 0x7f
 800116e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <MX_RTC_Init+0x110>)
 8001172:	22ff      	movs	r2, #255	; 0xff
 8001174:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <MX_RTC_Init+0x110>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <MX_RTC_Init+0x110>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_RTC_Init+0x110>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001188:	482f      	ldr	r0, [pc, #188]	; (8001248 <MX_RTC_Init+0x110>)
 800118a:	f002 fab7 	bl	80036fc <HAL_RTC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001194:	f7ff ffc8 	bl	8001128 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8001198:	2318      	movs	r3, #24
 800119a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x33;
 800119e:	2333      	movs	r3, #51	; 0x33
 80011a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	4823      	ldr	r0, [pc, #140]	; (8001248 <MX_RTC_Init+0x110>)
 80011bc:	f002 fb2f 	bl	800381e <HAL_RTC_SetTime>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80011c6:	f7ff ffaf 	bl	8001128 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80011ca:	2307      	movs	r3, #7
 80011cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 80011d0:	2310      	movs	r3, #16
 80011d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x25;
 80011d6:	2325      	movs	r3, #37	; 0x25
 80011d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 80011dc:	2320      	movs	r3, #32
 80011de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e6:	2201      	movs	r2, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	4817      	ldr	r0, [pc, #92]	; (8001248 <MX_RTC_Init+0x110>)
 80011ec:	f002 fbd4 	bl	8003998 <HAL_RTC_SetDate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80011f6:	f7ff ff97 	bl	8001128 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 80011fa:	2319      	movs	r3, #25
 80011fc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 80011fe:	2323      	movs	r3, #35	; 0x23
 8001200:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001202:	2310      	movs	r3, #16
 8001204:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 800121e:	2312      	movs	r3, #18
 8001220:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_RTC_Init+0x110>)
 8001232:	f002 fc59 	bl	8003ae8 <HAL_RTC_SetAlarm_IT>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800123c:	f7ff ff74 	bl	8001128 <Error_Handler>
  }

}
 8001240:	bf00      	nop
 8001242:	3740      	adds	r7, #64	; 0x40
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000198 	.word	0x20000198
 800124c:	40002800 	.word	0x40002800

08001250 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_RTC_MspInit+0x30>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10a      	bne.n	8001278 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_RTC_MspInit+0x34>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2029      	movs	r0, #41	; 0x29
 800126e:	f000 fb6a 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001272:	2029      	movs	r0, #41	; 0x29
 8001274:	f000 fb83 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40002800 	.word	0x40002800
 8001284:	42470e3c 	.word	0x42470e3c

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f9ee 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <USART2_IRQHandler+0x10>)
 800133a:	f002 fe8b 	bl	8004054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001b8 	.word	0x200001b8

08001348 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800134c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001350:	f000 fcee 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <RTC_Alarm_IRQHandler+0x10>)
 800135e:	f002 fcfb 	bl	8003d58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000198 	.word	0x20000198

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f003 fc0c 	bl	8004bb8 <__errno>
 80013a0:	4602      	mov	r2, r0
 80013a2:	230c      	movs	r3, #12
 80013a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20018000 	.word	0x20018000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	200000cc 	.word	0x200000cc
 80013d4:	20000200 	.word	0x20000200

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <SystemInit+0x28>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <SystemInit+0x28>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SystemInit+0x28>)
 80013ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f2:	609a      	str	r2, [r3, #8]
#endif
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <decToBcd>:
#define DS3231_ADDRESS 0xD0

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <decToBcd+0x48>)
 8001410:	fb82 1203 	smull	r1, r2, r2, r3
 8001414:	1092      	asrs	r2, r2, #2
 8001416:	17db      	asrs	r3, r3, #31
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <decToBcd+0x48>)
 8001424:	fb83 1302 	smull	r1, r3, r3, r2
 8001428:	1099      	asrs	r1, r3, #2
 800142a:	17d3      	asrs	r3, r2, #31
 800142c:	1ac9      	subs	r1, r1, r3
 800142e:	460b      	mov	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	1ad1      	subs	r1, r2, r3
 8001438:	b2cb      	uxtb	r3, r1
 800143a:	4403      	add	r3, r0
 800143c:	b2db      	uxtb	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	66666667 	.word	0x66666667

08001450 <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	461a      	mov	r2, r3
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	4413      	add	r3, r2
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <get_Time>:

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
}

void get_Time (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af04      	add	r7, sp, #16
	uint8_t time_to_red[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_red, 7, 1000);
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2307      	movs	r3, #7
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	463b      	mov	r3, r7
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	2200      	movs	r2, #0
 8001498:	21d0      	movs	r1, #208	; 0xd0
 800149a:	481f      	ldr	r0, [pc, #124]	; (8001518 <get_Time+0x98>)
 800149c:	f000 fe96 	bl	80021cc <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_red[0]);
 80014a0:	783b      	ldrb	r3, [r7, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffd4 	bl	8001450 <bcdToDec>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <get_Time+0x9c>)
 80014ae:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_red[1]);
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ffcc 	bl	8001450 <bcdToDec>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <get_Time+0x9c>)
 80014be:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_red[2]);
 80014c0:	78bb      	ldrb	r3, [r7, #2]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ffc4 	bl	8001450 <bcdToDec>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <get_Time+0x9c>)
 80014ce:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_red[3]);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffbc 	bl	8001450 <bcdToDec>
 80014d8:	4603      	mov	r3, r0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <get_Time+0x9c>)
 80014de:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_red[4]);
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ffb4 	bl	8001450 <bcdToDec>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <get_Time+0x9c>)
 80014ee:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_red[5]);
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffac 	bl	8001450 <bcdToDec>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <get_Time+0x9c>)
 80014fe:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_red[6]);
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ffa4 	bl	8001450 <bcdToDec>
 8001508:	4603      	mov	r3, r0
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <get_Time+0x9c>)
 800150e:	719a      	strb	r2, [r3, #6]
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000138 	.word	0x20000138
 800151c:	200000dc 	.word	0x200000dc

08001520 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART2_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001558:	f002 fcda 	bl	8003f10 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f7ff fde1 	bl	8001128 <Error_Handler>
  }

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001b8 	.word	0x200001b8
 8001570:	40004400 	.word	0x40004400

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_UART_MspInit+0x94>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d133      	bne.n	80015fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_UART_MspInit+0x98>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_UART_MspInit+0x98>)
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_UART_MspInit+0x98>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x98>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_UART_MspInit+0x98>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_UART_MspInit+0x98>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ce:	230c      	movs	r3, #12
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015de:	2307      	movs	r3, #7
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_UART_MspInit+0x9c>)
 80015ea:	f000 fa05 	bl	80019f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2026      	movs	r0, #38	; 0x26
 80015f4:	f000 f9a7 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f8:	2026      	movs	r0, #38	; 0x26
 80015fa:	f000 f9c0 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001618:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161a:	e003      	b.n	8001624 <LoopCopyDataInit>

0800161c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800161e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001620:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001622:	3104      	adds	r1, #4

08001624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001628:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800162c:	d3f6      	bcc.n	800161c <CopyDataInit>
  ldr  r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001630:	e002      	b.n	8001638 <LoopFillZerobss>

08001632 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001632:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001634:	f842 3b04 	str.w	r3, [r2], #4

08001638 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800163a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800163c:	d3f9      	bcc.n	8001632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff fecb 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f003 fabf 	bl	8004bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fc3f 	bl	8000ec8 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001650:	08005534 	.word	0x08005534
  ldr  r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001658:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 800165c:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8001660:	20000200 	.word	0x20000200

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f94d 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fdf4 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f965 	bl	800199a <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f92d 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000040 	.word	0x20000040
 8001704:	20000048 	.word	0x20000048
 8001708:	20000044 	.word	0x20000044

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000048 	.word	0x20000048
 8001730:	200001f8 	.word	0x200001f8

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200001f8 	.word	0x200001f8

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_Delay+0x40>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000048 	.word	0x20000048

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e00c      	b.n	80019ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2205      	movs	r2, #5
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e159      	b.n	8001cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8148 	bne.w	8001cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d00b      	beq.n	8001a52 <HAL_GPIO_Init+0x5a>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a46:	2b11      	cmp	r3, #17
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b12      	cmp	r3, #18
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0xfc>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b12      	cmp	r3, #18
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a2 	beq.w	8001cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x2e4>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a55      	ldr	r2, [pc, #340]	; (8001cdc <HAL_GPIO_Init+0x2e4>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_GPIO_Init+0x2e4>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x202>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x1fe>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a46      	ldr	r2, [pc, #280]	; (8001cec <HAL_GPIO_Init+0x2f4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x1fa>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_GPIO_Init+0x2f8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x1f2>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4934      	ldr	r1, [pc, #208]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c3e:	4a2e      	ldr	r2, [pc, #184]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f aea2 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3724      	adds	r7, #36	; 0x24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fd7e 	bl	8000850 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e11f      	b.n	8001fb2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fe44 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f001 fb84 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a7b      	ldr	r2, [pc, #492]	; (8001fbc <HAL_I2C_Init+0x25c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_Init+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a7a      	ldr	r2, [pc, #488]	; (8001fc0 <HAL_I2C_Init+0x260>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e006      	b.n	8001df2 <HAL_I2C_Init+0x92>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a77      	ldr	r2, [pc, #476]	; (8001fc4 <HAL_I2C_Init+0x264>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0db      	b.n	8001fb2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a72      	ldr	r2, [pc, #456]	; (8001fc8 <HAL_I2C_Init+0x268>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a64      	ldr	r2, [pc, #400]	; (8001fbc <HAL_I2C_Init+0x25c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d802      	bhi.n	8001e34 <HAL_I2C_Init+0xd4>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_I2C_Init+0xe8>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a63      	ldr	r2, [pc, #396]	; (8001fcc <HAL_I2C_Init+0x26c>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4956      	ldr	r1, [pc, #344]	; (8001fbc <HAL_I2C_Init+0x25c>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d80d      	bhi.n	8001e84 <HAL_I2C_Init+0x124>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	bf38      	it	cc
 8001e80:	2304      	movcc	r3, #4
 8001e82:	e04f      	b.n	8001f24 <HAL_I2C_Init+0x1c4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d111      	bne.n	8001eb0 <HAL_I2C_Init+0x150>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e58      	subs	r0, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e012      	b.n	8001ed6 <HAL_I2C_Init+0x176>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	0099      	lsls	r1, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Init+0x17e>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e022      	b.n	8001f24 <HAL_I2C_Init+0x1c4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10e      	bne.n	8001f04 <HAL_I2C_Init+0x1a4>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e58      	subs	r0, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f02:	e00f      	b.n	8001f24 <HAL_I2C_Init+0x1c4>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	6809      	ldr	r1, [r1, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6911      	ldr	r1, [r2, #16]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	000186a0 	.word	0x000186a0
 8001fc0:	001e847f 	.word	0x001e847f
 8001fc4:	003d08ff 	.word	0x003d08ff
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	10624dd3 	.word	0x10624dd3

08001fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	460b      	mov	r3, r1
 8001fde:	817b      	strh	r3, [r7, #10]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fba6 	bl	8001734 <HAL_GetTick>
 8001fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 80e0 	bne.w	80021b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2319      	movs	r3, #25
 8001ffe:	2201      	movs	r2, #1
 8002000:	4970      	ldr	r1, [pc, #448]	; (80021c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fc72 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	e0d3      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x50>
 800201c:	2302      	movs	r3, #2
 800201e:	e0cc      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d007      	beq.n	8002046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2221      	movs	r2, #33	; 0x21
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2210      	movs	r2, #16
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	893a      	ldrh	r2, [r7, #8]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fac2 	bl	8002618 <I2C_MasterRequestWrite>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e08d      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020b4:	e066      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fcec 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d107      	bne.n	80020de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11b      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x188>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fcdc 	bl	8002b1a <I2C_WaitOnBTFFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b04      	cmp	r3, #4
 800216e:	d107      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e01a      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d194      	bne.n	80020b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	00100002 	.word	0x00100002
 80021c8:	ffff0000 	.word	0xffff0000

080021cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	817b      	strh	r3, [r7, #10]
 80021de:	460b      	mov	r3, r1
 80021e0:	813b      	strh	r3, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e6:	f7ff faa5 	bl	8001734 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	f040 8208 	bne.w	800260a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2319      	movs	r3, #25
 8002200:	2201      	movs	r2, #1
 8002202:	497b      	ldr	r1, [pc, #492]	; (80023f0 <HAL_I2C_Mem_Read+0x224>)
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fb71 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
 8002212:	e1fb      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Mem_Read+0x56>
 800221e:	2302      	movs	r3, #2
 8002220:	e1f4      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d007      	beq.n	8002248 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2222      	movs	r2, #34	; 0x22
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a5b      	ldr	r2, [pc, #364]	; (80023f4 <HAL_I2C_Mem_Read+0x228>)
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800228a:	88f8      	ldrh	r0, [r7, #6]
 800228c:	893a      	ldrh	r2, [r7, #8]
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4603      	mov	r3, r0
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fa3e 	bl	800271c <I2C_RequestMemoryRead>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1b0      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d113      	bne.n	80022da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	623b      	str	r3, [r7, #32]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e184      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d11b      	bne.n	800231a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e164      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	2b02      	cmp	r3, #2
 8002320:	d11b      	bne.n	800235a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002330:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	e144      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002370:	e138      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	2b03      	cmp	r3, #3
 8002378:	f200 80f1 	bhi.w	800255e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b01      	cmp	r3, #1
 8002382:	d123      	bne.n	80023cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fc07 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e139      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ca:	e10b      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d14e      	bne.n	8002472 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	2200      	movs	r2, #0
 80023dc:	4906      	ldr	r1, [pc, #24]	; (80023f8 <HAL_I2C_Mem_Read+0x22c>)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fa84 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e10e      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
 80023ee:	bf00      	nop
 80023f0:	00100002 	.word	0x00100002
 80023f4:	ffff0000 	.word	0xffff0000
 80023f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002470:	e0b8      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	2200      	movs	r2, #0
 800247a:	4966      	ldr	r1, [pc, #408]	; (8002614 <HAL_I2C_Mem_Read+0x448>)
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fa35 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0bf      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	2200      	movs	r2, #0
 80024d6:	494f      	ldr	r1, [pc, #316]	; (8002614 <HAL_I2C_Mem_Read+0x448>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fa07 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e091      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800255c:	e042      	b.n	80025e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fb1a 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e04c      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d118      	bne.n	80025e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f47f aec2 	bne.w	8002372 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	00010004 	.word	0x00010004

08002618 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d006      	beq.n	8002642 <I2C_MasterRequestWrite+0x2a>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d003      	beq.n	8002642 <I2C_MasterRequestWrite+0x2a>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002640:	d108      	bne.n	8002654 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00b      	b.n	800266c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	2b12      	cmp	r3, #18
 800265a:	d107      	bne.n	800266c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f937 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002692:	d103      	bne.n	800269c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e035      	b.n	800270c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a8:	d108      	bne.n	80026bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e01b      	b.n	80026f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026bc:	897b      	ldrh	r3, [r7, #10]
 80026be:	11db      	asrs	r3, r3, #7
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 0306 	and.w	r3, r3, #6
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f063 030f 	orn	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <I2C_MasterRequestWrite+0xfc>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f95d 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e010      	b.n	800270c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <I2C_MasterRequestWrite+0x100>)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f94d 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	00010008 	.word	0x00010008
 8002718:	00010002 	.word	0x00010002

0800271c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	2200      	movs	r2, #0
 800275e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8c2 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277c:	d103      	bne.n	8002786 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0aa      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	4952      	ldr	r1, [pc, #328]	; (80028e8 <I2C_RequestMemoryRead+0x1cc>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f8fa 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e097      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f964 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e076      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e021      	b.n	8002848 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002804:	893b      	ldrh	r3, [r7, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	6a39      	ldr	r1, [r7, #32]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f93e 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b04      	cmp	r3, #4
 8002828:	d107      	bne.n	800283a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e050      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800283e:	893b      	ldrh	r3, [r7, #8]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	6a39      	ldr	r1, [r7, #32]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f923 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b04      	cmp	r3, #4
 800285e:	d107      	bne.n	8002870 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e035      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002882:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2200      	movs	r2, #0
 800288c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f82b 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	d103      	bne.n	80028b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e013      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <I2C_RequestMemoryRead+0x1cc>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f863 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010002 	.word	0x00010002

080028ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	e025      	b.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d021      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe ff15 	bl	8001734 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d116      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e023      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10d      	bne.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	e00c      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	429a      	cmp	r2, r3
 800298e:	d0b6      	beq.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a8:	e051      	b.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d123      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0204 	orr.w	r2, r3, #4
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e046      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d021      	beq.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0a:	f7fe fe93 	bl	8001734 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e020      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e00b      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d18d      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa4:	e02d      	b.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8ce 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e02d      	b.n	8002b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d021      	beq.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fe39 	bl	8001734 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d1ca      	bne.n	8002aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b26:	e02d      	b.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f88d 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02d      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d021      	beq.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b40:	f7fe fdf8 	bl	8001734 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d302      	bcc.n	8002b56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d1ca      	bne.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba8:	e042      	b.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d119      	bne.n	8002bec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e029      	b.n	8002c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7fe fda2 	bl	8001734 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d1b5      	bne.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d11b      	bne.n	8002c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e25b      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d075      	beq.n	8002db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc6:	4ba3      	ldr	r3, [pc, #652]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4ba0      	ldr	r3, [pc, #640]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b9d      	ldr	r3, [pc, #628]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b99      	ldr	r3, [pc, #612]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e236      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x74>
 8002d0e:	4b91      	ldr	r3, [pc, #580]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a90      	ldr	r2, [pc, #576]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a8a      	ldr	r2, [pc, #552]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a87      	ldr	r2, [pc, #540]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d40:	4b84      	ldr	r3, [pc, #528]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a83      	ldr	r2, [pc, #524]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b81      	ldr	r3, [pc, #516]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a80      	ldr	r2, [pc, #512]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fce8 	bl	8001734 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fce4 	bl	8001734 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1fb      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xc0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fcd4 	bl	8001734 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fcd0 	bl	8001734 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1e7      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe8>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dbe:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b62      	ldr	r3, [pc, #392]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b5f      	ldr	r3, [pc, #380]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b5c      	ldr	r3, [pc, #368]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1bb      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4952      	ldr	r1, [pc, #328]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <HAL_RCC_OscConfig+0x2b0>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fc89 	bl	8001734 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fc85 	bl	8001734 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e19c      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b46      	ldr	r3, [pc, #280]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4940      	ldr	r1, [pc, #256]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_OscConfig+0x2b0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fc68 	bl	8001734 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe fc64 	bl	8001734 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e17b      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d030      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_RCC_OscConfig+0x2b4>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fc48 	bl	8001734 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fc44 	bl	8001734 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e15b      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x200>
 8002ec6:	e015      	b.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_OscConfig+0x2b4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fc31 	bl	8001734 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fc2d 	bl	8001734 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e144      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a0 	beq.w	8003042 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_OscConfig+0x2b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d121      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_RCC_OscConfig+0x2b8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <HAL_RCC_OscConfig+0x2b8>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fbf3 	bl	8001734 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e011      	b.n	8002f76 <HAL_RCC_OscConfig+0x2ce>
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	42470000 	.word	0x42470000
 8002f5c:	42470e80 	.word	0x42470e80
 8002f60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f64:	f7fe fbe6 	bl	8001734 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0fd      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x4d4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2f0>
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	e01c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x32a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCC_OscConfig+0x312>
 8002fa0:	4b77      	ldr	r3, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a76      	ldr	r2, [pc, #472]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
 8002fac:	4b74      	ldr	r3, [pc, #464]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a73      	ldr	r2, [pc, #460]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	e00b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x32a>
 8002fba:	4b71      	ldr	r3, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a70      	ldr	r2, [pc, #448]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	4b6e      	ldr	r3, [pc, #440]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d015      	beq.n	8003006 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fda:	f7fe fbab 	bl	8001734 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe fba7 	bl	8001734 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0bc      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	4b61      	ldr	r3, [pc, #388]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ee      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x33a>
 8003004:	e014      	b.n	8003030 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fe fb95 	bl	8001734 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fb91 	bl	8001734 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0a6      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ee      	bne.n	800300e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d105      	bne.n	8003042 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003036:	4b52      	ldr	r3, [pc, #328]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a51      	ldr	r2, [pc, #324]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8092 	beq.w	8003170 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304c:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d05c      	beq.n	8003112 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d141      	bne.n	80030e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b48      	ldr	r3, [pc, #288]	; (8003184 <HAL_RCC_OscConfig+0x4dc>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe fb65 	bl	8001734 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe fb61 	bl	8001734 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e078      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	019b      	lsls	r3, r3, #6
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	4933      	ldr	r1, [pc, #204]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_RCC_OscConfig+0x4dc>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fb3a 	bl	8001734 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fb36 	bl	8001734 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04d      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x41c>
 80030e2:	e045      	b.n	8003170 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x4dc>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fb23 	bl	8001734 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fb1f 	bl	8001734 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e036      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003104:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x44a>
 8003110:	e02e      	b.n	8003170 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e029      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_RCC_OscConfig+0x4d8>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	429a      	cmp	r2, r3
 8003130:	d11c      	bne.n	800316c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d115      	bne.n	800316c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003146:	4013      	ands	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800314c:	4293      	cmp	r3, r2
 800314e:	d10d      	bne.n	800316c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40007000 	.word	0x40007000
 8003180:	40023800 	.word	0x40023800
 8003184:	42470060 	.word	0x42470060

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe fa5c 	bl	8001734 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe fa58 	bl	8001734 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	fa21 f303 	lsr.w	r3, r1, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe f9bc 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	080054d8 	.word	0x080054d8
 800334c:	20000040 	.word	0x20000040
 8003350:	20000044 	.word	0x20000044

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	2300      	movs	r3, #0
 8003364:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336a:	4b50      	ldr	r3, [pc, #320]	; (80034ac <HAL_RCC_GetSysClockFreq+0x158>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d007      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x32>
 8003376:	2b08      	cmp	r3, #8
 8003378:	d008      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x38>
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 808d 	bne.w	800349a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003382:	60bb      	str	r3, [r7, #8]
       break;
 8003384:	e08c      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003386:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003388:	60bb      	str	r3, [r7, #8]
      break;
 800338a:	e089      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800338c:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCC_GetSysClockFreq+0x158>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003394:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003396:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_RCC_GetSysClockFreq+0x158>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d023      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b42      	ldr	r3, [pc, #264]	; (80034ac <HAL_RCC_GetSysClockFreq+0x158>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	f04f 0400 	mov.w	r4, #0
 80033ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	ea03 0501 	and.w	r5, r3, r1
 80033b8:	ea04 0602 	and.w	r6, r4, r2
 80033bc:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033be:	fb02 f106 	mul.w	r1, r2, r6
 80033c2:	2200      	movs	r2, #0
 80033c4:	fb02 f205 	mul.w	r2, r2, r5
 80033c8:	440a      	add	r2, r1
 80033ca:	493a      	ldr	r1, [pc, #232]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033cc:	fba5 0101 	umull	r0, r1, r5, r1
 80033d0:	1853      	adds	r3, r2, r1
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	461a      	mov	r2, r3
 80033dc:	4623      	mov	r3, r4
 80033de:	f7fc ff4f 	bl	8000280 <__aeabi_uldivmod>
 80033e2:	4603      	mov	r3, r0
 80033e4:	460c      	mov	r4, r1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e049      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_GetSysClockFreq+0x158>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	f04f 0400 	mov.w	r4, #0
 80033f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	ea03 0501 	and.w	r5, r3, r1
 8003400:	ea04 0602 	and.w	r6, r4, r2
 8003404:	4629      	mov	r1, r5
 8003406:	4632      	mov	r2, r6
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	0154      	lsls	r4, r2, #5
 8003412:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003416:	014b      	lsls	r3, r1, #5
 8003418:	4619      	mov	r1, r3
 800341a:	4622      	mov	r2, r4
 800341c:	1b49      	subs	r1, r1, r5
 800341e:	eb62 0206 	sbc.w	r2, r2, r6
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	f04f 0400 	mov.w	r4, #0
 800342a:	0194      	lsls	r4, r2, #6
 800342c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003430:	018b      	lsls	r3, r1, #6
 8003432:	1a5b      	subs	r3, r3, r1
 8003434:	eb64 0402 	sbc.w	r4, r4, r2
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	00e2      	lsls	r2, r4, #3
 8003442:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003446:	00d9      	lsls	r1, r3, #3
 8003448:	460b      	mov	r3, r1
 800344a:	4614      	mov	r4, r2
 800344c:	195b      	adds	r3, r3, r5
 800344e:	eb44 0406 	adc.w	r4, r4, r6
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	02a2      	lsls	r2, r4, #10
 800345c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003460:	0299      	lsls	r1, r3, #10
 8003462:	460b      	mov	r3, r1
 8003464:	4614      	mov	r4, r2
 8003466:	4618      	mov	r0, r3
 8003468:	4621      	mov	r1, r4
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f04f 0400 	mov.w	r4, #0
 8003470:	461a      	mov	r2, r3
 8003472:	4623      	mov	r3, r4
 8003474:	f7fc ff04 	bl	8000280 <__aeabi_uldivmod>
 8003478:	4603      	mov	r3, r0
 800347a:	460c      	mov	r4, r1
 800347c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_GetSysClockFreq+0x158>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	3301      	adds	r3, #1
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	60bb      	str	r3, [r7, #8]
      break;
 8003498:	e002      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800349c:	60bb      	str	r3, [r7, #8]
      break;
 800349e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a0:	68bb      	ldr	r3, [r7, #8]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	017d7840 	.word	0x017d7840

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000040 	.word	0x20000040

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d8:	4601      	mov	r1, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4a03      	ldr	r2, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	080054e8 	.word	0x080054e8

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffdc 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8003500:	4601      	mov	r1, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0b5b      	lsrs	r3, r3, #13
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4a03      	ldr	r2, [pc, #12]	; (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	080054e8 	.word	0x080054e8

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003544:	2b00      	cmp	r3, #0
 8003546:	d035      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003548:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800354e:	f7fe f8f1 	bl	8001734 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003556:	f7fe f8ed 	bl	8001734 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0ba      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003568:	4b60      	ldr	r3, [pc, #384]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	019a      	lsls	r2, r3, #6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	071b      	lsls	r3, r3, #28
 8003580:	495a      	ldr	r1, [pc, #360]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003588:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800358e:	f7fe f8d1 	bl	8001734 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003596:	f7fe f8cd 	bl	8001734 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e09a      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8083 	beq.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b49      	ldr	r3, [pc, #292]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a48      	ldr	r2, [pc, #288]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035de:	4b44      	ldr	r3, [pc, #272]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a43      	ldr	r2, [pc, #268]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035ea:	f7fe f8a3 	bl	8001734 <HAL_GetTick>
 80035ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fe f89f 	bl	8001734 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e06c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003618:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	429a      	cmp	r2, r3
 800362c:	d028      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362e:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d114      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe f86d 	bl	8001734 <HAL_GetTick>
 800365a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fe f869 	bl	8001734 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e034      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ee      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368c:	d10d      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	4912      	ldr	r1, [pc, #72]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	490a      	ldr	r1, [pc, #40]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7c1a      	ldrb	r2, [r3, #16]
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036da:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	42470068 	.word	0x42470068
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	42470e40 	.word	0x42470e40
 80036f8:	424711e0 	.word	0x424711e0

080036fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e083      	b.n	8003816 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7f5b      	ldrb	r3, [r3, #29]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fd96 	bl	8001250 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	22ca      	movs	r2, #202	; 0xca
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2253      	movs	r2, #83	; 0x53
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb7a 	bl	8003e34 <RTC_EnterInitMode>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2204      	movs	r2, #4
 8003752:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e05e      	b.n	8003816 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68d2      	ldr	r2, [r2, #12]
 8003792:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6919      	ldr	r1, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	041a      	lsls	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10e      	bne.n	80037e4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fb0c 	bl	8003de4 <HAL_RTC_WaitForSynchro>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e018      	b.n	8003816 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	22ff      	movs	r2, #255	; 0xff
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800381e:	b590      	push	{r4, r7, lr}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	7f1b      	ldrb	r3, [r3, #28]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_RTC_SetTime+0x1c>
 8003836:	2302      	movs	r3, #2
 8003838:	e0aa      	b.n	8003990 <HAL_RTC_SetTime+0x172>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d126      	bne.n	800389a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2200      	movs	r2, #0
 800385e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fb11 	bl	8003e8c <RTC_ByteToBcd2>
 800386a:	4603      	mov	r3, r0
 800386c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb0a 	bl	8003e8c <RTC_ByteToBcd2>
 8003878:	4603      	mov	r3, r0
 800387a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800387c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	789b      	ldrb	r3, [r3, #2]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb02 	bl	8003e8c <RTC_ByteToBcd2>
 8003888:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800388a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e018      	b.n	80038cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038ba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22ca      	movs	r2, #202	; 0xca
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2253      	movs	r2, #83	; 0x53
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 faa9 	bl	8003e34 <RTC_EnterInitMode>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	22ff      	movs	r2, #255	; 0xff
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2204      	movs	r2, #4
 80038f4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e047      	b.n	8003990 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800390a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800391e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003946:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d111      	bne.n	800397a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa44 	bl	8003de4 <HAL_RTC_WaitForSynchro>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2204      	movs	r2, #4
 800396e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00a      	b.n	8003990 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	22ff      	movs	r2, #255	; 0xff
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800398e:	2300      	movs	r3, #0
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}

08003998 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	7f1b      	ldrb	r3, [r3, #28]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_RTC_SetDate+0x1c>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e094      	b.n	8003ade <HAL_RTC_SetDate+0x146>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2202      	movs	r2, #2
 80039be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10e      	bne.n	80039e4 <HAL_RTC_SetDate+0x4c>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	f023 0310 	bic.w	r3, r3, #16
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	330a      	adds	r3, #10
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11c      	bne.n	8003a24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fa4c 	bl	8003e8c <RTC_ByteToBcd2>
 80039f4:	4603      	mov	r3, r0
 80039f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa45 	bl	8003e8c <RTC_ByteToBcd2>
 8003a02:	4603      	mov	r3, r0
 8003a04:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a06:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa3d 	bl	8003e8c <RTC_ByteToBcd2>
 8003a12:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a14:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e00e      	b.n	8003a42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	78db      	ldrb	r3, [r3, #3]
 8003a28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a30:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003a36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	22ca      	movs	r2, #202	; 0xca
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2253      	movs	r2, #83	; 0x53
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f9ee 	bl	8003e34 <RTC_EnterInitMode>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	22ff      	movs	r2, #255	; 0xff
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e033      	b.n	8003ade <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a94:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f99d 	bl	8003de4 <HAL_RTC_WaitForSynchro>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	22ff      	movs	r2, #255	; 0xff
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2204      	movs	r2, #4
 8003abc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e00a      	b.n	8003ade <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
	...

08003ae8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003afc:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <HAL_RTC_SetAlarm_IT+0x264>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a93      	ldr	r2, [pc, #588]	; (8003d50 <HAL_RTC_SetAlarm_IT+0x268>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0adb      	lsrs	r3, r3, #11
 8003b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	7f1b      	ldrb	r3, [r3, #28]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_RTC_SetAlarm_IT+0x36>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e111      	b.n	8003d42 <HAL_RTC_SetAlarm_IT+0x25a>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2202      	movs	r2, #2
 8003b28:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d137      	bne.n	8003ba0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f99f 	bl	8003e8c <RTC_ByteToBcd2>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f998 	bl	8003e8c <RTC_ByteToBcd2>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b60:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	789b      	ldrb	r3, [r3, #2]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f990 	bl	8003e8c <RTC_ByteToBcd2>
 8003b6c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	78db      	ldrb	r3, [r3, #3]
 8003b76:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003b78:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f982 	bl	8003e8c <RTC_ByteToBcd2>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e023      	b.n	8003be8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003bc0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003bc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	78db      	ldrb	r3, [r3, #3]
 8003bcc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003bce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003bd8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003bde:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	22ca      	movs	r2, #202	; 0xca
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2253      	movs	r2, #83	; 0x53
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0c:	d141      	bne.n	8003c92 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003c2e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	617a      	str	r2, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	22ff      	movs	r2, #255	; 0xff
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2203      	movs	r2, #3
 8003c46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e077      	b.n	8003d42 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0e7      	beq.n	8003c30 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	e040      	b.n	8003d14 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003cb2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1e5a      	subs	r2, r3, #1
 8003cb8:	617a      	str	r2, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10b      	bne.n	8003cd6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e035      	b.n	8003d42 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0e7      	beq.n	8003cb4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	22ff      	movs	r2, #255	; 0xff
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000040 	.word	0x20000040
 8003d50:	10624dd3 	.word	0x10624dd3
 8003d54:	40013c00 	.word	0x40013c00

08003d58 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fc fd35 	bl	80007ec <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003d92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d012      	beq.n	8003dc8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8a3 	bl	8003efc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003dc6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dce:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	775a      	strb	r2, [r3, #29]
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40013c00 	.word	0x40013c00

08003de4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fd fc98 	bl	8001734 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e06:	e009      	b.n	8003e1c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e08:	f7fd fc94 	bl	8001734 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e16:	d901      	bls.n	8003e1c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e007      	b.n	8003e2c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ee      	beq.n	8003e08 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295
 8003e56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fc6c 	bl	8001734 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e5e:	e009      	b.n	8003e74 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e60:	f7fd fc68 	bl	8001734 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6e:	d901      	bls.n	8003e74 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e007      	b.n	8003e84 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003e9a:	e005      	b.n	8003ea8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	3b0a      	subs	r3, #10
 8003ea6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	d8f6      	bhi.n	8003e9c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b2db      	uxtb	r3, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3350      	adds	r3, #80	; 0x50
 8003ede:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03f      	b.n	8003fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fb1c 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fab3 	bl	80044c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d140      	bne.n	8004046 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Receive_IT+0x26>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e039      	b.n	8004048 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x38>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e032      	b.n	8004048 <HAL_UART_Receive_IT+0x9e>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2222      	movs	r2, #34	; 0x22
 8004006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0220 	orr.w	r2, r2, #32
 8004040:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_UART_IRQHandler+0x52>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f98c 	bl	80043bc <UART_Receive_IT>
      return;
 80040a4:	e0d1      	b.n	800424a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80b0 	beq.w	800420e <HAL_UART_IRQHandler+0x1ba>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_UART_IRQHandler+0x70>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a5 	beq.w	800420e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_UART_IRQHandler+0x90>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	f043 0201 	orr.w	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_UART_IRQHandler+0xb0>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	f043 0202 	orr.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_UART_IRQHandler+0xd0>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00f      	beq.n	800414e <HAL_UART_IRQHandler+0xfa>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_UART_IRQHandler+0xee>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	f043 0208 	orr.w	r2, r3, #8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d078      	beq.n	8004248 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_UART_IRQHandler+0x11c>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f926 	bl	80043bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_UART_IRQHandler+0x144>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d031      	beq.n	80041fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f86f 	bl	800427c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d123      	bne.n	80041f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d013      	beq.n	80041ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	4a21      	ldr	r2, [pc, #132]	; (8004250 <HAL_UART_IRQHandler+0x1fc>)
 80041ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd fbee 	bl	80019b2 <HAL_DMA_Abort_IT>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041e6:	4610      	mov	r0, r2
 80041e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ea:	e00e      	b.n	800420a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f83b 	bl	8004268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f2:	e00a      	b.n	800420a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f837 	bl	8004268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fa:	e006      	b.n	800420a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f833 	bl	8004268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004208:	e01e      	b.n	8004248 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420a:	bf00      	nop
    return;
 800420c:	e01c      	b.n	8004248 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f85c 	bl	80042e0 <UART_Transmit_IT>
    return;
 8004228:	e00f      	b.n	800424a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_UART_IRQHandler+0x1f6>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8a4 	bl	800438c <UART_EndTransmit_IT>
    return;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004248:	bf00      	nop
  }
}
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	080042b9 	.word	0x080042b9

08004254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004292:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ffc8 	bl	8004268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b21      	cmp	r3, #33	; 0x21
 80042f2:	d144      	bne.n	800437e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d11a      	bne.n	8004334 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004312:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]
 8004326:	e00e      	b.n	8004346 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	e008      	b.n	8004346 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6211      	str	r1, [r2, #32]
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4619      	mov	r1, r3
 8004354:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10f      	bne.n	800437a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004378:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff51 	bl	8004254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b22      	cmp	r3, #34	; 0x22
 80043ce:	d171      	bne.n	80044b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d8:	d123      	bne.n	8004422 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10e      	bne.n	8004406 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
 8004404:	e029      	b.n	800445a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
 8004420:	e01b      	b.n	800445a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6858      	ldr	r0, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6291      	str	r1, [r2, #40]	; 0x28
 800443a:	b2c2      	uxtb	r2, r0
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e00c      	b.n	800445a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	1c58      	adds	r0, r3, #1
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	6288      	str	r0, [r1, #40]	; 0x28
 8004452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4619      	mov	r1, r3
 8004468:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800446a:	2b00      	cmp	r3, #0
 800446c:	d120      	bne.n	80044b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0220 	bic.w	r2, r2, #32
 800447c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc fe26 	bl	80010f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e002      	b.n	80044b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004502:	f023 030c 	bic.w	r3, r3, #12
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	430b      	orrs	r3, r1
 800450e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	f040 818b 	bne.w	8004848 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4ac1      	ldr	r2, [pc, #772]	; (800483c <UART_SetConfig+0x37c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d005      	beq.n	8004548 <UART_SetConfig+0x88>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4abf      	ldr	r2, [pc, #764]	; (8004840 <UART_SetConfig+0x380>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f040 80bd 	bne.w	80046c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7fe ffd6 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 800454c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	461d      	mov	r5, r3
 8004552:	f04f 0600 	mov.w	r6, #0
 8004556:	46a8      	mov	r8, r5
 8004558:	46b1      	mov	r9, r6
 800455a:	eb18 0308 	adds.w	r3, r8, r8
 800455e:	eb49 0409 	adc.w	r4, r9, r9
 8004562:	4698      	mov	r8, r3
 8004564:	46a1      	mov	r9, r4
 8004566:	eb18 0805 	adds.w	r8, r8, r5
 800456a:	eb49 0906 	adc.w	r9, r9, r6
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800457a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800457e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004582:	4688      	mov	r8, r1
 8004584:	4691      	mov	r9, r2
 8004586:	eb18 0005 	adds.w	r0, r8, r5
 800458a:	eb49 0106 	adc.w	r1, r9, r6
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	461d      	mov	r5, r3
 8004594:	f04f 0600 	mov.w	r6, #0
 8004598:	196b      	adds	r3, r5, r5
 800459a:	eb46 0406 	adc.w	r4, r6, r6
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7fb fe6d 	bl	8000280 <__aeabi_uldivmod>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	461a      	mov	r2, r3
 80045ac:	4ba5      	ldr	r3, [pc, #660]	; (8004844 <UART_SetConfig+0x384>)
 80045ae:	fba3 2302 	umull	r2, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	461d      	mov	r5, r3
 80045bc:	f04f 0600 	mov.w	r6, #0
 80045c0:	46a9      	mov	r9, r5
 80045c2:	46b2      	mov	sl, r6
 80045c4:	eb19 0309 	adds.w	r3, r9, r9
 80045c8:	eb4a 040a 	adc.w	r4, sl, sl
 80045cc:	4699      	mov	r9, r3
 80045ce:	46a2      	mov	sl, r4
 80045d0:	eb19 0905 	adds.w	r9, r9, r5
 80045d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ec:	4689      	mov	r9, r1
 80045ee:	4692      	mov	sl, r2
 80045f0:	eb19 0005 	adds.w	r0, r9, r5
 80045f4:	eb4a 0106 	adc.w	r1, sl, r6
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	461d      	mov	r5, r3
 80045fe:	f04f 0600 	mov.w	r6, #0
 8004602:	196b      	adds	r3, r5, r5
 8004604:	eb46 0406 	adc.w	r4, r6, r6
 8004608:	461a      	mov	r2, r3
 800460a:	4623      	mov	r3, r4
 800460c:	f7fb fe38 	bl	8000280 <__aeabi_uldivmod>
 8004610:	4603      	mov	r3, r0
 8004612:	460c      	mov	r4, r1
 8004614:	461a      	mov	r2, r3
 8004616:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <UART_SetConfig+0x384>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	; 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	3332      	adds	r3, #50	; 0x32
 800462a:	4a86      	ldr	r2, [pc, #536]	; (8004844 <UART_SetConfig+0x384>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004638:	4498      	add	r8, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	46a9      	mov	r9, r5
 8004644:	46b2      	mov	sl, r6
 8004646:	eb19 0309 	adds.w	r3, r9, r9
 800464a:	eb4a 040a 	adc.w	r4, sl, sl
 800464e:	4699      	mov	r9, r3
 8004650:	46a2      	mov	sl, r4
 8004652:	eb19 0905 	adds.w	r9, r9, r5
 8004656:	eb4a 0a06 	adc.w	sl, sl, r6
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004666:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800466a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800466e:	4689      	mov	r9, r1
 8004670:	4692      	mov	sl, r2
 8004672:	eb19 0005 	adds.w	r0, r9, r5
 8004676:	eb4a 0106 	adc.w	r1, sl, r6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	461d      	mov	r5, r3
 8004680:	f04f 0600 	mov.w	r6, #0
 8004684:	196b      	adds	r3, r5, r5
 8004686:	eb46 0406 	adc.w	r4, r6, r6
 800468a:	461a      	mov	r2, r3
 800468c:	4623      	mov	r3, r4
 800468e:	f7fb fdf7 	bl	8000280 <__aeabi_uldivmod>
 8004692:	4603      	mov	r3, r0
 8004694:	460c      	mov	r4, r1
 8004696:	461a      	mov	r2, r3
 8004698:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <UART_SetConfig+0x384>)
 800469a:	fba3 1302 	umull	r1, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2164      	movs	r1, #100	; 0x64
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	3332      	adds	r3, #50	; 0x32
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <UART_SetConfig+0x384>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 0207 	and.w	r2, r3, #7
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4442      	add	r2, r8
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	e26f      	b.n	8004ba2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046c2:	f7fe ff05 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 80046c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	461d      	mov	r5, r3
 80046cc:	f04f 0600 	mov.w	r6, #0
 80046d0:	46a8      	mov	r8, r5
 80046d2:	46b1      	mov	r9, r6
 80046d4:	eb18 0308 	adds.w	r3, r8, r8
 80046d8:	eb49 0409 	adc.w	r4, r9, r9
 80046dc:	4698      	mov	r8, r3
 80046de:	46a1      	mov	r9, r4
 80046e0:	eb18 0805 	adds.w	r8, r8, r5
 80046e4:	eb49 0906 	adc.w	r9, r9, r6
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046fc:	4688      	mov	r8, r1
 80046fe:	4691      	mov	r9, r2
 8004700:	eb18 0005 	adds.w	r0, r8, r5
 8004704:	eb49 0106 	adc.w	r1, r9, r6
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	461d      	mov	r5, r3
 800470e:	f04f 0600 	mov.w	r6, #0
 8004712:	196b      	adds	r3, r5, r5
 8004714:	eb46 0406 	adc.w	r4, r6, r6
 8004718:	461a      	mov	r2, r3
 800471a:	4623      	mov	r3, r4
 800471c:	f7fb fdb0 	bl	8000280 <__aeabi_uldivmod>
 8004720:	4603      	mov	r3, r0
 8004722:	460c      	mov	r4, r1
 8004724:	461a      	mov	r2, r3
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <UART_SetConfig+0x384>)
 8004728:	fba3 2302 	umull	r2, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	461d      	mov	r5, r3
 8004736:	f04f 0600 	mov.w	r6, #0
 800473a:	46a9      	mov	r9, r5
 800473c:	46b2      	mov	sl, r6
 800473e:	eb19 0309 	adds.w	r3, r9, r9
 8004742:	eb4a 040a 	adc.w	r4, sl, sl
 8004746:	4699      	mov	r9, r3
 8004748:	46a2      	mov	sl, r4
 800474a:	eb19 0905 	adds.w	r9, r9, r5
 800474e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800475e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004762:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004766:	4689      	mov	r9, r1
 8004768:	4692      	mov	sl, r2
 800476a:	eb19 0005 	adds.w	r0, r9, r5
 800476e:	eb4a 0106 	adc.w	r1, sl, r6
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	461d      	mov	r5, r3
 8004778:	f04f 0600 	mov.w	r6, #0
 800477c:	196b      	adds	r3, r5, r5
 800477e:	eb46 0406 	adc.w	r4, r6, r6
 8004782:	461a      	mov	r2, r3
 8004784:	4623      	mov	r3, r4
 8004786:	f7fb fd7b 	bl	8000280 <__aeabi_uldivmod>
 800478a:	4603      	mov	r3, r0
 800478c:	460c      	mov	r4, r1
 800478e:	461a      	mov	r2, r3
 8004790:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <UART_SetConfig+0x384>)
 8004792:	fba3 1302 	umull	r1, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2164      	movs	r1, #100	; 0x64
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <UART_SetConfig+0x384>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b2:	4498      	add	r8, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	461d      	mov	r5, r3
 80047b8:	f04f 0600 	mov.w	r6, #0
 80047bc:	46a9      	mov	r9, r5
 80047be:	46b2      	mov	sl, r6
 80047c0:	eb19 0309 	adds.w	r3, r9, r9
 80047c4:	eb4a 040a 	adc.w	r4, sl, sl
 80047c8:	4699      	mov	r9, r3
 80047ca:	46a2      	mov	sl, r4
 80047cc:	eb19 0905 	adds.w	r9, r9, r5
 80047d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047e8:	4689      	mov	r9, r1
 80047ea:	4692      	mov	sl, r2
 80047ec:	eb19 0005 	adds.w	r0, r9, r5
 80047f0:	eb4a 0106 	adc.w	r1, sl, r6
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	461d      	mov	r5, r3
 80047fa:	f04f 0600 	mov.w	r6, #0
 80047fe:	196b      	adds	r3, r5, r5
 8004800:	eb46 0406 	adc.w	r4, r6, r6
 8004804:	461a      	mov	r2, r3
 8004806:	4623      	mov	r3, r4
 8004808:	f7fb fd3a 	bl	8000280 <__aeabi_uldivmod>
 800480c:	4603      	mov	r3, r0
 800480e:	460c      	mov	r4, r1
 8004810:	461a      	mov	r2, r3
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <UART_SetConfig+0x384>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	; 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <UART_SetConfig+0x384>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4442      	add	r2, r8
 8004838:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800483a:	e1b2      	b.n	8004ba2 <UART_SetConfig+0x6e2>
 800483c:	40011000 	.word	0x40011000
 8004840:	40011400 	.word	0x40011400
 8004844:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4ad7      	ldr	r2, [pc, #860]	; (8004bac <UART_SetConfig+0x6ec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d005      	beq.n	800485e <UART_SetConfig+0x39e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4ad6      	ldr	r2, [pc, #856]	; (8004bb0 <UART_SetConfig+0x6f0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 80d1 	bne.w	8004a00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800485e:	f7fe fe4b 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8004862:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	469a      	mov	sl, r3
 8004868:	f04f 0b00 	mov.w	fp, #0
 800486c:	46d0      	mov	r8, sl
 800486e:	46d9      	mov	r9, fp
 8004870:	eb18 0308 	adds.w	r3, r8, r8
 8004874:	eb49 0409 	adc.w	r4, r9, r9
 8004878:	4698      	mov	r8, r3
 800487a:	46a1      	mov	r9, r4
 800487c:	eb18 080a 	adds.w	r8, r8, sl
 8004880:	eb49 090b 	adc.w	r9, r9, fp
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004890:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004894:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004898:	4688      	mov	r8, r1
 800489a:	4691      	mov	r9, r2
 800489c:	eb1a 0508 	adds.w	r5, sl, r8
 80048a0:	eb4b 0609 	adc.w	r6, fp, r9
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	f04f 0400 	mov.w	r4, #0
 80048b6:	0094      	lsls	r4, r2, #2
 80048b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	461a      	mov	r2, r3
 80048c0:	4623      	mov	r3, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	4631      	mov	r1, r6
 80048c6:	f7fb fcdb 	bl	8000280 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	461a      	mov	r2, r3
 80048d0:	4bb8      	ldr	r3, [pc, #736]	; (8004bb4 <UART_SetConfig+0x6f4>)
 80048d2:	fba3 2302 	umull	r2, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	469b      	mov	fp, r3
 80048e0:	f04f 0c00 	mov.w	ip, #0
 80048e4:	46d9      	mov	r9, fp
 80048e6:	46e2      	mov	sl, ip
 80048e8:	eb19 0309 	adds.w	r3, r9, r9
 80048ec:	eb4a 040a 	adc.w	r4, sl, sl
 80048f0:	4699      	mov	r9, r3
 80048f2:	46a2      	mov	sl, r4
 80048f4:	eb19 090b 	adds.w	r9, r9, fp
 80048f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800490c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004910:	4689      	mov	r9, r1
 8004912:	4692      	mov	sl, r2
 8004914:	eb1b 0509 	adds.w	r5, fp, r9
 8004918:	eb4c 060a 	adc.w	r6, ip, sl
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	0094      	lsls	r4, r2, #2
 8004930:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004934:	008b      	lsls	r3, r1, #2
 8004936:	461a      	mov	r2, r3
 8004938:	4623      	mov	r3, r4
 800493a:	4628      	mov	r0, r5
 800493c:	4631      	mov	r1, r6
 800493e:	f7fb fc9f 	bl	8000280 <__aeabi_uldivmod>
 8004942:	4603      	mov	r3, r0
 8004944:	460c      	mov	r4, r1
 8004946:	461a      	mov	r2, r3
 8004948:	4b9a      	ldr	r3, [pc, #616]	; (8004bb4 <UART_SetConfig+0x6f4>)
 800494a:	fba3 1302 	umull	r1, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2164      	movs	r1, #100	; 0x64
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	3332      	adds	r3, #50	; 0x32
 800495c:	4a95      	ldr	r2, [pc, #596]	; (8004bb4 <UART_SetConfig+0x6f4>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004968:	4498      	add	r8, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	469b      	mov	fp, r3
 800496e:	f04f 0c00 	mov.w	ip, #0
 8004972:	46d9      	mov	r9, fp
 8004974:	46e2      	mov	sl, ip
 8004976:	eb19 0309 	adds.w	r3, r9, r9
 800497a:	eb4a 040a 	adc.w	r4, sl, sl
 800497e:	4699      	mov	r9, r3
 8004980:	46a2      	mov	sl, r4
 8004982:	eb19 090b 	adds.w	r9, r9, fp
 8004986:	eb4a 0a0c 	adc.w	sl, sl, ip
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800499e:	4689      	mov	r9, r1
 80049a0:	4692      	mov	sl, r2
 80049a2:	eb1b 0509 	adds.w	r5, fp, r9
 80049a6:	eb4c 060a 	adc.w	r6, ip, sl
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	0094      	lsls	r4, r2, #2
 80049be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	4631      	mov	r1, r6
 80049cc:	f7fb fc58 	bl	8000280 <__aeabi_uldivmod>
 80049d0:	4603      	mov	r3, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <UART_SetConfig+0x6f4>)
 80049d8:	fba3 1302 	umull	r1, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2164      	movs	r1, #100	; 0x64
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a72      	ldr	r2, [pc, #456]	; (8004bb4 <UART_SetConfig+0x6f4>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4442      	add	r2, r8
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e0d0      	b.n	8004ba2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe fd66 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8004a04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	469a      	mov	sl, r3
 8004a0a:	f04f 0b00 	mov.w	fp, #0
 8004a0e:	46d0      	mov	r8, sl
 8004a10:	46d9      	mov	r9, fp
 8004a12:	eb18 0308 	adds.w	r3, r8, r8
 8004a16:	eb49 0409 	adc.w	r4, r9, r9
 8004a1a:	4698      	mov	r8, r3
 8004a1c:	46a1      	mov	r9, r4
 8004a1e:	eb18 080a 	adds.w	r8, r8, sl
 8004a22:	eb49 090b 	adc.w	r9, r9, fp
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a3a:	4688      	mov	r8, r1
 8004a3c:	4691      	mov	r9, r2
 8004a3e:	eb1a 0508 	adds.w	r5, sl, r8
 8004a42:	eb4b 0609 	adc.w	r6, fp, r9
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	0094      	lsls	r4, r2, #2
 8004a5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a5e:	008b      	lsls	r3, r1, #2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	4631      	mov	r1, r6
 8004a68:	f7fb fc0a 	bl	8000280 <__aeabi_uldivmod>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004a74:	fba3 2302 	umull	r2, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	469b      	mov	fp, r3
 8004a82:	f04f 0c00 	mov.w	ip, #0
 8004a86:	46d9      	mov	r9, fp
 8004a88:	46e2      	mov	sl, ip
 8004a8a:	eb19 0309 	adds.w	r3, r9, r9
 8004a8e:	eb4a 040a 	adc.w	r4, sl, sl
 8004a92:	4699      	mov	r9, r3
 8004a94:	46a2      	mov	sl, r4
 8004a96:	eb19 090b 	adds.w	r9, r9, fp
 8004a9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	4692      	mov	sl, r2
 8004ab6:	eb1b 0509 	adds.w	r5, fp, r9
 8004aba:	eb4c 060a 	adc.w	r6, ip, sl
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	f04f 0400 	mov.w	r4, #0
 8004ad0:	0094      	lsls	r4, r2, #2
 8004ad2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ad6:	008b      	lsls	r3, r1, #2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	4631      	mov	r1, r6
 8004ae0:	f7fb fbce 	bl	8000280 <__aeabi_uldivmod>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	3332      	adds	r3, #50	; 0x32
 8004afe:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0a:	4498      	add	r8, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	469b      	mov	fp, r3
 8004b10:	f04f 0c00 	mov.w	ip, #0
 8004b14:	46d9      	mov	r9, fp
 8004b16:	46e2      	mov	sl, ip
 8004b18:	eb19 0309 	adds.w	r3, r9, r9
 8004b1c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b20:	4699      	mov	r9, r3
 8004b22:	46a2      	mov	sl, r4
 8004b24:	eb19 090b 	adds.w	r9, r9, fp
 8004b28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b40:	4689      	mov	r9, r1
 8004b42:	4692      	mov	sl, r2
 8004b44:	eb1b 0509 	adds.w	r5, fp, r9
 8004b48:	eb4c 060a 	adc.w	r6, ip, sl
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4619      	mov	r1, r3
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	f04f 0400 	mov.w	r4, #0
 8004b5e:	0094      	lsls	r4, r2, #2
 8004b60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	f7fb fb87 	bl	8000280 <__aeabi_uldivmod>
 8004b72:	4603      	mov	r3, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2164      	movs	r1, #100	; 0x64
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	3332      	adds	r3, #50	; 0x32
 8004b8c:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4442      	add	r2, r8
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	e7ff      	b.n	8004ba2 <UART_SetConfig+0x6e2>
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	51eb851f 	.word	0x51eb851f

08004bb8 <__errno>:
 8004bb8:	4b01      	ldr	r3, [pc, #4]	; (8004bc0 <__errno+0x8>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	2000004c 	.word	0x2000004c

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4e0d      	ldr	r6, [pc, #52]	; (8004bfc <__libc_init_array+0x38>)
 8004bc8:	4c0d      	ldr	r4, [pc, #52]	; (8004c00 <__libc_init_array+0x3c>)
 8004bca:	1ba4      	subs	r4, r4, r6
 8004bcc:	10a4      	asrs	r4, r4, #2
 8004bce:	2500      	movs	r5, #0
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	4e0b      	ldr	r6, [pc, #44]	; (8004c04 <__libc_init_array+0x40>)
 8004bd6:	4c0c      	ldr	r4, [pc, #48]	; (8004c08 <__libc_init_array+0x44>)
 8004bd8:	f000 fc26 	bl	8005428 <_init>
 8004bdc:	1ba4      	subs	r4, r4, r6
 8004bde:	10a4      	asrs	r4, r4, #2
 8004be0:	2500      	movs	r5, #0
 8004be2:	42a5      	cmp	r5, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bec:	4798      	blx	r3
 8004bee:	3501      	adds	r5, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf6:	4798      	blx	r3
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	0800552c 	.word	0x0800552c
 8004c00:	0800552c 	.word	0x0800552c
 8004c04:	0800552c 	.word	0x0800552c
 8004c08:	08005530 	.word	0x08005530

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <siprintf>:
 8004c1c:	b40e      	push	{r1, r2, r3}
 8004c1e:	b500      	push	{lr}
 8004c20:	b09c      	sub	sp, #112	; 0x70
 8004c22:	ab1d      	add	r3, sp, #116	; 0x74
 8004c24:	9002      	str	r0, [sp, #8]
 8004c26:	9006      	str	r0, [sp, #24]
 8004c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c2c:	4809      	ldr	r0, [pc, #36]	; (8004c54 <siprintf+0x38>)
 8004c2e:	9107      	str	r1, [sp, #28]
 8004c30:	9104      	str	r1, [sp, #16]
 8004c32:	4909      	ldr	r1, [pc, #36]	; (8004c58 <siprintf+0x3c>)
 8004c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c38:	9105      	str	r1, [sp, #20]
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	a902      	add	r1, sp, #8
 8004c40:	f000 f866 	bl	8004d10 <_svfiprintf_r>
 8004c44:	9b02      	ldr	r3, [sp, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	b01c      	add	sp, #112	; 0x70
 8004c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c50:	b003      	add	sp, #12
 8004c52:	4770      	bx	lr
 8004c54:	2000004c 	.word	0x2000004c
 8004c58:	ffff0208 	.word	0xffff0208

08004c5c <__ssputs_r>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	688e      	ldr	r6, [r1, #8]
 8004c62:	429e      	cmp	r6, r3
 8004c64:	4682      	mov	sl, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	4690      	mov	r8, r2
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	d837      	bhi.n	8004cde <__ssputs_r+0x82>
 8004c6e:	898a      	ldrh	r2, [r1, #12]
 8004c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c74:	d031      	beq.n	8004cda <__ssputs_r+0x7e>
 8004c76:	6825      	ldr	r5, [r4, #0]
 8004c78:	6909      	ldr	r1, [r1, #16]
 8004c7a:	1a6f      	subs	r7, r5, r1
 8004c7c:	6965      	ldr	r5, [r4, #20]
 8004c7e:	2302      	movs	r3, #2
 8004c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c84:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c88:	f109 0301 	add.w	r3, r9, #1
 8004c8c:	443b      	add	r3, r7
 8004c8e:	429d      	cmp	r5, r3
 8004c90:	bf38      	it	cc
 8004c92:	461d      	movcc	r5, r3
 8004c94:	0553      	lsls	r3, r2, #21
 8004c96:	d530      	bpl.n	8004cfa <__ssputs_r+0x9e>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	f000 fb2b 	bl	80052f4 <_malloc_r>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	b950      	cbnz	r0, 8004cb8 <__ssputs_r+0x5c>
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	f8ca 3000 	str.w	r3, [sl]
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb8:	463a      	mov	r2, r7
 8004cba:	6921      	ldr	r1, [r4, #16]
 8004cbc:	f000 faa8 	bl	8005210 <memcpy>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	6126      	str	r6, [r4, #16]
 8004cce:	6165      	str	r5, [r4, #20]
 8004cd0:	443e      	add	r6, r7
 8004cd2:	1bed      	subs	r5, r5, r7
 8004cd4:	6026      	str	r6, [r4, #0]
 8004cd6:	60a5      	str	r5, [r4, #8]
 8004cd8:	464e      	mov	r6, r9
 8004cda:	454e      	cmp	r6, r9
 8004cdc:	d900      	bls.n	8004ce0 <__ssputs_r+0x84>
 8004cde:	464e      	mov	r6, r9
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	6820      	ldr	r0, [r4, #0]
 8004ce6:	f000 fa9e 	bl	8005226 <memmove>
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	1b9b      	subs	r3, r3, r6
 8004cee:	60a3      	str	r3, [r4, #8]
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	441e      	add	r6, r3
 8004cf4:	6026      	str	r6, [r4, #0]
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e7dc      	b.n	8004cb4 <__ssputs_r+0x58>
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	f000 fb54 	bl	80053a8 <_realloc_r>
 8004d00:	4606      	mov	r6, r0
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d1e2      	bne.n	8004ccc <__ssputs_r+0x70>
 8004d06:	6921      	ldr	r1, [r4, #16]
 8004d08:	4650      	mov	r0, sl
 8004d0a:	f000 faa5 	bl	8005258 <_free_r>
 8004d0e:	e7c8      	b.n	8004ca2 <__ssputs_r+0x46>

08004d10 <_svfiprintf_r>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	461d      	mov	r5, r3
 8004d16:	898b      	ldrh	r3, [r1, #12]
 8004d18:	061f      	lsls	r7, r3, #24
 8004d1a:	b09d      	sub	sp, #116	; 0x74
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	4616      	mov	r6, r2
 8004d22:	d50f      	bpl.n	8004d44 <_svfiprintf_r+0x34>
 8004d24:	690b      	ldr	r3, [r1, #16]
 8004d26:	b96b      	cbnz	r3, 8004d44 <_svfiprintf_r+0x34>
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	f000 fae3 	bl	80052f4 <_malloc_r>
 8004d2e:	6020      	str	r0, [r4, #0]
 8004d30:	6120      	str	r0, [r4, #16]
 8004d32:	b928      	cbnz	r0, 8004d40 <_svfiprintf_r+0x30>
 8004d34:	230c      	movs	r3, #12
 8004d36:	f8c8 3000 	str.w	r3, [r8]
 8004d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3e:	e0c8      	b.n	8004ed2 <_svfiprintf_r+0x1c2>
 8004d40:	2340      	movs	r3, #64	; 0x40
 8004d42:	6163      	str	r3, [r4, #20]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9309      	str	r3, [sp, #36]	; 0x24
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d4e:	2330      	movs	r3, #48	; 0x30
 8004d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d54:	9503      	str	r5, [sp, #12]
 8004d56:	f04f 0b01 	mov.w	fp, #1
 8004d5a:	4637      	mov	r7, r6
 8004d5c:	463d      	mov	r5, r7
 8004d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d62:	b10b      	cbz	r3, 8004d68 <_svfiprintf_r+0x58>
 8004d64:	2b25      	cmp	r3, #37	; 0x25
 8004d66:	d13e      	bne.n	8004de6 <_svfiprintf_r+0xd6>
 8004d68:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d6c:	d00b      	beq.n	8004d86 <_svfiprintf_r+0x76>
 8004d6e:	4653      	mov	r3, sl
 8004d70:	4632      	mov	r2, r6
 8004d72:	4621      	mov	r1, r4
 8004d74:	4640      	mov	r0, r8
 8004d76:	f7ff ff71 	bl	8004c5c <__ssputs_r>
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f000 80a4 	beq.w	8004ec8 <_svfiprintf_r+0x1b8>
 8004d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d82:	4453      	add	r3, sl
 8004d84:	9309      	str	r3, [sp, #36]	; 0x24
 8004d86:	783b      	ldrb	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 809d 	beq.w	8004ec8 <_svfiprintf_r+0x1b8>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	9307      	str	r3, [sp, #28]
 8004d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da0:	931a      	str	r3, [sp, #104]	; 0x68
 8004da2:	462f      	mov	r7, r5
 8004da4:	2205      	movs	r2, #5
 8004da6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004daa:	4850      	ldr	r0, [pc, #320]	; (8004eec <_svfiprintf_r+0x1dc>)
 8004dac:	f7fb fa18 	bl	80001e0 <memchr>
 8004db0:	9b04      	ldr	r3, [sp, #16]
 8004db2:	b9d0      	cbnz	r0, 8004dea <_svfiprintf_r+0xda>
 8004db4:	06d9      	lsls	r1, r3, #27
 8004db6:	bf44      	itt	mi
 8004db8:	2220      	movmi	r2, #32
 8004dba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dbe:	071a      	lsls	r2, r3, #28
 8004dc0:	bf44      	itt	mi
 8004dc2:	222b      	movmi	r2, #43	; 0x2b
 8004dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dc8:	782a      	ldrb	r2, [r5, #0]
 8004dca:	2a2a      	cmp	r2, #42	; 0x2a
 8004dcc:	d015      	beq.n	8004dfa <_svfiprintf_r+0xea>
 8004dce:	9a07      	ldr	r2, [sp, #28]
 8004dd0:	462f      	mov	r7, r5
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	250a      	movs	r5, #10
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ddc:	3b30      	subs	r3, #48	; 0x30
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d94d      	bls.n	8004e7e <_svfiprintf_r+0x16e>
 8004de2:	b1b8      	cbz	r0, 8004e14 <_svfiprintf_r+0x104>
 8004de4:	e00f      	b.n	8004e06 <_svfiprintf_r+0xf6>
 8004de6:	462f      	mov	r7, r5
 8004de8:	e7b8      	b.n	8004d5c <_svfiprintf_r+0x4c>
 8004dea:	4a40      	ldr	r2, [pc, #256]	; (8004eec <_svfiprintf_r+0x1dc>)
 8004dec:	1a80      	subs	r0, r0, r2
 8004dee:	fa0b f000 	lsl.w	r0, fp, r0
 8004df2:	4318      	orrs	r0, r3
 8004df4:	9004      	str	r0, [sp, #16]
 8004df6:	463d      	mov	r5, r7
 8004df8:	e7d3      	b.n	8004da2 <_svfiprintf_r+0x92>
 8004dfa:	9a03      	ldr	r2, [sp, #12]
 8004dfc:	1d11      	adds	r1, r2, #4
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	9103      	str	r1, [sp, #12]
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	db01      	blt.n	8004e0a <_svfiprintf_r+0xfa>
 8004e06:	9207      	str	r2, [sp, #28]
 8004e08:	e004      	b.n	8004e14 <_svfiprintf_r+0x104>
 8004e0a:	4252      	negs	r2, r2
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	9207      	str	r2, [sp, #28]
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	783b      	ldrb	r3, [r7, #0]
 8004e16:	2b2e      	cmp	r3, #46	; 0x2e
 8004e18:	d10c      	bne.n	8004e34 <_svfiprintf_r+0x124>
 8004e1a:	787b      	ldrb	r3, [r7, #1]
 8004e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e1e:	d133      	bne.n	8004e88 <_svfiprintf_r+0x178>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	1d1a      	adds	r2, r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bfb8      	it	lt
 8004e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e30:	3702      	adds	r7, #2
 8004e32:	9305      	str	r3, [sp, #20]
 8004e34:	4d2e      	ldr	r5, [pc, #184]	; (8004ef0 <_svfiprintf_r+0x1e0>)
 8004e36:	7839      	ldrb	r1, [r7, #0]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fb f9d0 	bl	80001e0 <memchr>
 8004e40:	b138      	cbz	r0, 8004e52 <_svfiprintf_r+0x142>
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	1b40      	subs	r0, r0, r5
 8004e46:	fa03 f000 	lsl.w	r0, r3, r0
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	4303      	orrs	r3, r0
 8004e4e:	3701      	adds	r7, #1
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	7839      	ldrb	r1, [r7, #0]
 8004e54:	4827      	ldr	r0, [pc, #156]	; (8004ef4 <_svfiprintf_r+0x1e4>)
 8004e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e5a:	2206      	movs	r2, #6
 8004e5c:	1c7e      	adds	r6, r7, #1
 8004e5e:	f7fb f9bf 	bl	80001e0 <memchr>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d038      	beq.n	8004ed8 <_svfiprintf_r+0x1c8>
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <_svfiprintf_r+0x1e8>)
 8004e68:	bb13      	cbnz	r3, 8004eb0 <_svfiprintf_r+0x1a0>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	3307      	adds	r3, #7
 8004e6e:	f023 0307 	bic.w	r3, r3, #7
 8004e72:	3308      	adds	r3, #8
 8004e74:	9303      	str	r3, [sp, #12]
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	444b      	add	r3, r9
 8004e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7c:	e76d      	b.n	8004d5a <_svfiprintf_r+0x4a>
 8004e7e:	fb05 3202 	mla	r2, r5, r2, r3
 8004e82:	2001      	movs	r0, #1
 8004e84:	460f      	mov	r7, r1
 8004e86:	e7a6      	b.n	8004dd6 <_svfiprintf_r+0xc6>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	3701      	adds	r7, #1
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	250a      	movs	r5, #10
 8004e92:	4638      	mov	r0, r7
 8004e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e98:	3a30      	subs	r2, #48	; 0x30
 8004e9a:	2a09      	cmp	r2, #9
 8004e9c:	d903      	bls.n	8004ea6 <_svfiprintf_r+0x196>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0c8      	beq.n	8004e34 <_svfiprintf_r+0x124>
 8004ea2:	9105      	str	r1, [sp, #20]
 8004ea4:	e7c6      	b.n	8004e34 <_svfiprintf_r+0x124>
 8004ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4607      	mov	r7, r0
 8004eae:	e7f0      	b.n	8004e92 <_svfiprintf_r+0x182>
 8004eb0:	ab03      	add	r3, sp, #12
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <_svfiprintf_r+0x1ec>)
 8004eb8:	a904      	add	r1, sp, #16
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f3af 8000 	nop.w
 8004ec0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ec4:	4681      	mov	r9, r0
 8004ec6:	d1d6      	bne.n	8004e76 <_svfiprintf_r+0x166>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	065b      	lsls	r3, r3, #25
 8004ecc:	f53f af35 	bmi.w	8004d3a <_svfiprintf_r+0x2a>
 8004ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ed2:	b01d      	add	sp, #116	; 0x74
 8004ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed8:	ab03      	add	r3, sp, #12
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	4622      	mov	r2, r4
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <_svfiprintf_r+0x1ec>)
 8004ee0:	a904      	add	r1, sp, #16
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f000 f882 	bl	8004fec <_printf_i>
 8004ee8:	e7ea      	b.n	8004ec0 <_svfiprintf_r+0x1b0>
 8004eea:	bf00      	nop
 8004eec:	080054f0 	.word	0x080054f0
 8004ef0:	080054f6 	.word	0x080054f6
 8004ef4:	080054fa 	.word	0x080054fa
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	08004c5d 	.word	0x08004c5d

08004f00 <_printf_common>:
 8004f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	4691      	mov	r9, r2
 8004f06:	461f      	mov	r7, r3
 8004f08:	688a      	ldr	r2, [r1, #8]
 8004f0a:	690b      	ldr	r3, [r1, #16]
 8004f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bfb8      	it	lt
 8004f14:	4613      	movlt	r3, r2
 8004f16:	f8c9 3000 	str.w	r3, [r9]
 8004f1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f1e:	4606      	mov	r6, r0
 8004f20:	460c      	mov	r4, r1
 8004f22:	b112      	cbz	r2, 8004f2a <_printf_common+0x2a>
 8004f24:	3301      	adds	r3, #1
 8004f26:	f8c9 3000 	str.w	r3, [r9]
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	0699      	lsls	r1, r3, #26
 8004f2e:	bf42      	ittt	mi
 8004f30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f34:	3302      	addmi	r3, #2
 8004f36:	f8c9 3000 	strmi.w	r3, [r9]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	f015 0506 	ands.w	r5, r5, #6
 8004f40:	d107      	bne.n	8004f52 <_printf_common+0x52>
 8004f42:	f104 0a19 	add.w	sl, r4, #25
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	f8d9 2000 	ldr.w	r2, [r9]
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	42ab      	cmp	r3, r5
 8004f50:	dc28      	bgt.n	8004fa4 <_printf_common+0xa4>
 8004f52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	3300      	adds	r3, #0
 8004f5a:	bf18      	it	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	0692      	lsls	r2, r2, #26
 8004f60:	d42d      	bmi.n	8004fbe <_printf_common+0xbe>
 8004f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f66:	4639      	mov	r1, r7
 8004f68:	4630      	mov	r0, r6
 8004f6a:	47c0      	blx	r8
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d020      	beq.n	8004fb2 <_printf_common+0xb2>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	68e5      	ldr	r5, [r4, #12]
 8004f74:	f8d9 2000 	ldr.w	r2, [r9]
 8004f78:	f003 0306 	and.w	r3, r3, #6
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	bf08      	it	eq
 8004f80:	1aad      	subeq	r5, r5, r2
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	bf0c      	ite	eq
 8004f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f8c:	2500      	movne	r5, #0
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bfc4      	itt	gt
 8004f92:	1a9b      	subgt	r3, r3, r2
 8004f94:	18ed      	addgt	r5, r5, r3
 8004f96:	f04f 0900 	mov.w	r9, #0
 8004f9a:	341a      	adds	r4, #26
 8004f9c:	454d      	cmp	r5, r9
 8004f9e:	d11a      	bne.n	8004fd6 <_printf_common+0xd6>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e008      	b.n	8004fb6 <_printf_common+0xb6>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4652      	mov	r2, sl
 8004fa8:	4639      	mov	r1, r7
 8004faa:	4630      	mov	r0, r6
 8004fac:	47c0      	blx	r8
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d103      	bne.n	8004fba <_printf_common+0xba>
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fba:	3501      	adds	r5, #1
 8004fbc:	e7c3      	b.n	8004f46 <_printf_common+0x46>
 8004fbe:	18e1      	adds	r1, r4, r3
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	2030      	movs	r0, #48	; 0x30
 8004fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc8:	4422      	add	r2, r4
 8004fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	e7c5      	b.n	8004f62 <_printf_common+0x62>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4639      	mov	r1, r7
 8004fdc:	4630      	mov	r0, r6
 8004fde:	47c0      	blx	r8
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d0e6      	beq.n	8004fb2 <_printf_common+0xb2>
 8004fe4:	f109 0901 	add.w	r9, r9, #1
 8004fe8:	e7d8      	b.n	8004f9c <_printf_common+0x9c>
	...

08004fec <_printf_i>:
 8004fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ff0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	7e09      	ldrb	r1, [r1, #24]
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	296e      	cmp	r1, #110	; 0x6e
 8004ffc:	4617      	mov	r7, r2
 8004ffe:	4606      	mov	r6, r0
 8005000:	4698      	mov	r8, r3
 8005002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005004:	f000 80b3 	beq.w	800516e <_printf_i+0x182>
 8005008:	d822      	bhi.n	8005050 <_printf_i+0x64>
 800500a:	2963      	cmp	r1, #99	; 0x63
 800500c:	d036      	beq.n	800507c <_printf_i+0x90>
 800500e:	d80a      	bhi.n	8005026 <_printf_i+0x3a>
 8005010:	2900      	cmp	r1, #0
 8005012:	f000 80b9 	beq.w	8005188 <_printf_i+0x19c>
 8005016:	2958      	cmp	r1, #88	; 0x58
 8005018:	f000 8083 	beq.w	8005122 <_printf_i+0x136>
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005024:	e032      	b.n	800508c <_printf_i+0xa0>
 8005026:	2964      	cmp	r1, #100	; 0x64
 8005028:	d001      	beq.n	800502e <_printf_i+0x42>
 800502a:	2969      	cmp	r1, #105	; 0x69
 800502c:	d1f6      	bne.n	800501c <_printf_i+0x30>
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	0605      	lsls	r5, r0, #24
 8005034:	f103 0104 	add.w	r1, r3, #4
 8005038:	d52a      	bpl.n	8005090 <_printf_i+0xa4>
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	da03      	bge.n	800504a <_printf_i+0x5e>
 8005042:	222d      	movs	r2, #45	; 0x2d
 8005044:	425b      	negs	r3, r3
 8005046:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800504a:	486f      	ldr	r0, [pc, #444]	; (8005208 <_printf_i+0x21c>)
 800504c:	220a      	movs	r2, #10
 800504e:	e039      	b.n	80050c4 <_printf_i+0xd8>
 8005050:	2973      	cmp	r1, #115	; 0x73
 8005052:	f000 809d 	beq.w	8005190 <_printf_i+0x1a4>
 8005056:	d808      	bhi.n	800506a <_printf_i+0x7e>
 8005058:	296f      	cmp	r1, #111	; 0x6f
 800505a:	d020      	beq.n	800509e <_printf_i+0xb2>
 800505c:	2970      	cmp	r1, #112	; 0x70
 800505e:	d1dd      	bne.n	800501c <_printf_i+0x30>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	f043 0320 	orr.w	r3, r3, #32
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	e003      	b.n	8005072 <_printf_i+0x86>
 800506a:	2975      	cmp	r1, #117	; 0x75
 800506c:	d017      	beq.n	800509e <_printf_i+0xb2>
 800506e:	2978      	cmp	r1, #120	; 0x78
 8005070:	d1d4      	bne.n	800501c <_printf_i+0x30>
 8005072:	2378      	movs	r3, #120	; 0x78
 8005074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005078:	4864      	ldr	r0, [pc, #400]	; (800520c <_printf_i+0x220>)
 800507a:	e055      	b.n	8005128 <_printf_i+0x13c>
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	1d19      	adds	r1, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6011      	str	r1, [r2, #0]
 8005084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800508c:	2301      	movs	r3, #1
 800508e:	e08c      	b.n	80051aa <_printf_i+0x1be>
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6011      	str	r1, [r2, #0]
 8005094:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005098:	bf18      	it	ne
 800509a:	b21b      	sxthne	r3, r3
 800509c:	e7cf      	b.n	800503e <_printf_i+0x52>
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	6825      	ldr	r5, [r4, #0]
 80050a2:	1d18      	adds	r0, r3, #4
 80050a4:	6010      	str	r0, [r2, #0]
 80050a6:	0628      	lsls	r0, r5, #24
 80050a8:	d501      	bpl.n	80050ae <_printf_i+0xc2>
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	e002      	b.n	80050b4 <_printf_i+0xc8>
 80050ae:	0668      	lsls	r0, r5, #25
 80050b0:	d5fb      	bpl.n	80050aa <_printf_i+0xbe>
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	4854      	ldr	r0, [pc, #336]	; (8005208 <_printf_i+0x21c>)
 80050b6:	296f      	cmp	r1, #111	; 0x6f
 80050b8:	bf14      	ite	ne
 80050ba:	220a      	movne	r2, #10
 80050bc:	2208      	moveq	r2, #8
 80050be:	2100      	movs	r1, #0
 80050c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050c4:	6865      	ldr	r5, [r4, #4]
 80050c6:	60a5      	str	r5, [r4, #8]
 80050c8:	2d00      	cmp	r5, #0
 80050ca:	f2c0 8095 	blt.w	80051f8 <_printf_i+0x20c>
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	f021 0104 	bic.w	r1, r1, #4
 80050d4:	6021      	str	r1, [r4, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d13d      	bne.n	8005156 <_printf_i+0x16a>
 80050da:	2d00      	cmp	r5, #0
 80050dc:	f040 808e 	bne.w	80051fc <_printf_i+0x210>
 80050e0:	4665      	mov	r5, ip
 80050e2:	2a08      	cmp	r2, #8
 80050e4:	d10b      	bne.n	80050fe <_printf_i+0x112>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	07db      	lsls	r3, r3, #31
 80050ea:	d508      	bpl.n	80050fe <_printf_i+0x112>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	bfde      	ittt	le
 80050f4:	2330      	movle	r3, #48	; 0x30
 80050f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050fe:	ebac 0305 	sub.w	r3, ip, r5
 8005102:	6123      	str	r3, [r4, #16]
 8005104:	f8cd 8000 	str.w	r8, [sp]
 8005108:	463b      	mov	r3, r7
 800510a:	aa03      	add	r2, sp, #12
 800510c:	4621      	mov	r1, r4
 800510e:	4630      	mov	r0, r6
 8005110:	f7ff fef6 	bl	8004f00 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	d14d      	bne.n	80051b4 <_printf_i+0x1c8>
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	b005      	add	sp, #20
 800511e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005122:	4839      	ldr	r0, [pc, #228]	; (8005208 <_printf_i+0x21c>)
 8005124:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005128:	6813      	ldr	r3, [r2, #0]
 800512a:	6821      	ldr	r1, [r4, #0]
 800512c:	1d1d      	adds	r5, r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6015      	str	r5, [r2, #0]
 8005132:	060a      	lsls	r2, r1, #24
 8005134:	d50b      	bpl.n	800514e <_printf_i+0x162>
 8005136:	07ca      	lsls	r2, r1, #31
 8005138:	bf44      	itt	mi
 800513a:	f041 0120 	orrmi.w	r1, r1, #32
 800513e:	6021      	strmi	r1, [r4, #0]
 8005140:	b91b      	cbnz	r3, 800514a <_printf_i+0x15e>
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	f022 0220 	bic.w	r2, r2, #32
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	2210      	movs	r2, #16
 800514c:	e7b7      	b.n	80050be <_printf_i+0xd2>
 800514e:	064d      	lsls	r5, r1, #25
 8005150:	bf48      	it	mi
 8005152:	b29b      	uxthmi	r3, r3
 8005154:	e7ef      	b.n	8005136 <_printf_i+0x14a>
 8005156:	4665      	mov	r5, ip
 8005158:	fbb3 f1f2 	udiv	r1, r3, r2
 800515c:	fb02 3311 	mls	r3, r2, r1, r3
 8005160:	5cc3      	ldrb	r3, [r0, r3]
 8005162:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005166:	460b      	mov	r3, r1
 8005168:	2900      	cmp	r1, #0
 800516a:	d1f5      	bne.n	8005158 <_printf_i+0x16c>
 800516c:	e7b9      	b.n	80050e2 <_printf_i+0xf6>
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	6961      	ldr	r1, [r4, #20]
 8005174:	1d18      	adds	r0, r3, #4
 8005176:	6010      	str	r0, [r2, #0]
 8005178:	0628      	lsls	r0, r5, #24
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	d501      	bpl.n	8005182 <_printf_i+0x196>
 800517e:	6019      	str	r1, [r3, #0]
 8005180:	e002      	b.n	8005188 <_printf_i+0x19c>
 8005182:	066a      	lsls	r2, r5, #25
 8005184:	d5fb      	bpl.n	800517e <_printf_i+0x192>
 8005186:	8019      	strh	r1, [r3, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	4665      	mov	r5, ip
 800518e:	e7b9      	b.n	8005104 <_printf_i+0x118>
 8005190:	6813      	ldr	r3, [r2, #0]
 8005192:	1d19      	adds	r1, r3, #4
 8005194:	6011      	str	r1, [r2, #0]
 8005196:	681d      	ldr	r5, [r3, #0]
 8005198:	6862      	ldr	r2, [r4, #4]
 800519a:	2100      	movs	r1, #0
 800519c:	4628      	mov	r0, r5
 800519e:	f7fb f81f 	bl	80001e0 <memchr>
 80051a2:	b108      	cbz	r0, 80051a8 <_printf_i+0x1bc>
 80051a4:	1b40      	subs	r0, r0, r5
 80051a6:	6060      	str	r0, [r4, #4]
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	2300      	movs	r3, #0
 80051ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b2:	e7a7      	b.n	8005104 <_printf_i+0x118>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	462a      	mov	r2, r5
 80051b8:	4639      	mov	r1, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	47c0      	blx	r8
 80051be:	3001      	adds	r0, #1
 80051c0:	d0aa      	beq.n	8005118 <_printf_i+0x12c>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	079b      	lsls	r3, r3, #30
 80051c6:	d413      	bmi.n	80051f0 <_printf_i+0x204>
 80051c8:	68e0      	ldr	r0, [r4, #12]
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	4298      	cmp	r0, r3
 80051ce:	bfb8      	it	lt
 80051d0:	4618      	movlt	r0, r3
 80051d2:	e7a3      	b.n	800511c <_printf_i+0x130>
 80051d4:	2301      	movs	r3, #1
 80051d6:	464a      	mov	r2, r9
 80051d8:	4639      	mov	r1, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	47c0      	blx	r8
 80051de:	3001      	adds	r0, #1
 80051e0:	d09a      	beq.n	8005118 <_printf_i+0x12c>
 80051e2:	3501      	adds	r5, #1
 80051e4:	68e3      	ldr	r3, [r4, #12]
 80051e6:	9a03      	ldr	r2, [sp, #12]
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	42ab      	cmp	r3, r5
 80051ec:	dcf2      	bgt.n	80051d4 <_printf_i+0x1e8>
 80051ee:	e7eb      	b.n	80051c8 <_printf_i+0x1dc>
 80051f0:	2500      	movs	r5, #0
 80051f2:	f104 0919 	add.w	r9, r4, #25
 80051f6:	e7f5      	b.n	80051e4 <_printf_i+0x1f8>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ac      	bne.n	8005156 <_printf_i+0x16a>
 80051fc:	7803      	ldrb	r3, [r0, #0]
 80051fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005206:	e76c      	b.n	80050e2 <_printf_i+0xf6>
 8005208:	08005501 	.word	0x08005501
 800520c:	08005512 	.word	0x08005512

08005210 <memcpy>:
 8005210:	b510      	push	{r4, lr}
 8005212:	1e43      	subs	r3, r0, #1
 8005214:	440a      	add	r2, r1
 8005216:	4291      	cmp	r1, r2
 8005218:	d100      	bne.n	800521c <memcpy+0xc>
 800521a:	bd10      	pop	{r4, pc}
 800521c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005224:	e7f7      	b.n	8005216 <memcpy+0x6>

08005226 <memmove>:
 8005226:	4288      	cmp	r0, r1
 8005228:	b510      	push	{r4, lr}
 800522a:	eb01 0302 	add.w	r3, r1, r2
 800522e:	d807      	bhi.n	8005240 <memmove+0x1a>
 8005230:	1e42      	subs	r2, r0, #1
 8005232:	4299      	cmp	r1, r3
 8005234:	d00a      	beq.n	800524c <memmove+0x26>
 8005236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800523a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800523e:	e7f8      	b.n	8005232 <memmove+0xc>
 8005240:	4283      	cmp	r3, r0
 8005242:	d9f5      	bls.n	8005230 <memmove+0xa>
 8005244:	1881      	adds	r1, r0, r2
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	42d3      	cmn	r3, r2
 800524a:	d100      	bne.n	800524e <memmove+0x28>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005252:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005256:	e7f7      	b.n	8005248 <memmove+0x22>

08005258 <_free_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4605      	mov	r5, r0
 800525c:	2900      	cmp	r1, #0
 800525e:	d045      	beq.n	80052ec <_free_r+0x94>
 8005260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005264:	1f0c      	subs	r4, r1, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfb8      	it	lt
 800526a:	18e4      	addlt	r4, r4, r3
 800526c:	f000 f8d2 	bl	8005414 <__malloc_lock>
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <_free_r+0x98>)
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	4610      	mov	r0, r2
 8005276:	b933      	cbnz	r3, 8005286 <_free_r+0x2e>
 8005278:	6063      	str	r3, [r4, #4]
 800527a:	6014      	str	r4, [r2, #0]
 800527c:	4628      	mov	r0, r5
 800527e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005282:	f000 b8c8 	b.w	8005416 <__malloc_unlock>
 8005286:	42a3      	cmp	r3, r4
 8005288:	d90c      	bls.n	80052a4 <_free_r+0x4c>
 800528a:	6821      	ldr	r1, [r4, #0]
 800528c:	1862      	adds	r2, r4, r1
 800528e:	4293      	cmp	r3, r2
 8005290:	bf04      	itt	eq
 8005292:	681a      	ldreq	r2, [r3, #0]
 8005294:	685b      	ldreq	r3, [r3, #4]
 8005296:	6063      	str	r3, [r4, #4]
 8005298:	bf04      	itt	eq
 800529a:	1852      	addeq	r2, r2, r1
 800529c:	6022      	streq	r2, [r4, #0]
 800529e:	6004      	str	r4, [r0, #0]
 80052a0:	e7ec      	b.n	800527c <_free_r+0x24>
 80052a2:	4613      	mov	r3, r2
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	b10a      	cbz	r2, 80052ac <_free_r+0x54>
 80052a8:	42a2      	cmp	r2, r4
 80052aa:	d9fa      	bls.n	80052a2 <_free_r+0x4a>
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	1858      	adds	r0, r3, r1
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d10b      	bne.n	80052cc <_free_r+0x74>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	4401      	add	r1, r0
 80052b8:	1858      	adds	r0, r3, r1
 80052ba:	4282      	cmp	r2, r0
 80052bc:	6019      	str	r1, [r3, #0]
 80052be:	d1dd      	bne.n	800527c <_free_r+0x24>
 80052c0:	6810      	ldr	r0, [r2, #0]
 80052c2:	6852      	ldr	r2, [r2, #4]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	4401      	add	r1, r0
 80052c8:	6019      	str	r1, [r3, #0]
 80052ca:	e7d7      	b.n	800527c <_free_r+0x24>
 80052cc:	d902      	bls.n	80052d4 <_free_r+0x7c>
 80052ce:	230c      	movs	r3, #12
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	e7d3      	b.n	800527c <_free_r+0x24>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	1821      	adds	r1, r4, r0
 80052d8:	428a      	cmp	r2, r1
 80052da:	bf04      	itt	eq
 80052dc:	6811      	ldreq	r1, [r2, #0]
 80052de:	6852      	ldreq	r2, [r2, #4]
 80052e0:	6062      	str	r2, [r4, #4]
 80052e2:	bf04      	itt	eq
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	605c      	str	r4, [r3, #4]
 80052ea:	e7c7      	b.n	800527c <_free_r+0x24>
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
 80052ee:	bf00      	nop
 80052f0:	200000d0 	.word	0x200000d0

080052f4 <_malloc_r>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	1ccd      	adds	r5, r1, #3
 80052f8:	f025 0503 	bic.w	r5, r5, #3
 80052fc:	3508      	adds	r5, #8
 80052fe:	2d0c      	cmp	r5, #12
 8005300:	bf38      	it	cc
 8005302:	250c      	movcc	r5, #12
 8005304:	2d00      	cmp	r5, #0
 8005306:	4606      	mov	r6, r0
 8005308:	db01      	blt.n	800530e <_malloc_r+0x1a>
 800530a:	42a9      	cmp	r1, r5
 800530c:	d903      	bls.n	8005316 <_malloc_r+0x22>
 800530e:	230c      	movs	r3, #12
 8005310:	6033      	str	r3, [r6, #0]
 8005312:	2000      	movs	r0, #0
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	f000 f87d 	bl	8005414 <__malloc_lock>
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <_malloc_r+0xac>)
 800531c:	6814      	ldr	r4, [r2, #0]
 800531e:	4621      	mov	r1, r4
 8005320:	b991      	cbnz	r1, 8005348 <_malloc_r+0x54>
 8005322:	4c20      	ldr	r4, [pc, #128]	; (80053a4 <_malloc_r+0xb0>)
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	b91b      	cbnz	r3, 8005330 <_malloc_r+0x3c>
 8005328:	4630      	mov	r0, r6
 800532a:	f000 f863 	bl	80053f4 <_sbrk_r>
 800532e:	6020      	str	r0, [r4, #0]
 8005330:	4629      	mov	r1, r5
 8005332:	4630      	mov	r0, r6
 8005334:	f000 f85e 	bl	80053f4 <_sbrk_r>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d124      	bne.n	8005386 <_malloc_r+0x92>
 800533c:	230c      	movs	r3, #12
 800533e:	6033      	str	r3, [r6, #0]
 8005340:	4630      	mov	r0, r6
 8005342:	f000 f868 	bl	8005416 <__malloc_unlock>
 8005346:	e7e4      	b.n	8005312 <_malloc_r+0x1e>
 8005348:	680b      	ldr	r3, [r1, #0]
 800534a:	1b5b      	subs	r3, r3, r5
 800534c:	d418      	bmi.n	8005380 <_malloc_r+0x8c>
 800534e:	2b0b      	cmp	r3, #11
 8005350:	d90f      	bls.n	8005372 <_malloc_r+0x7e>
 8005352:	600b      	str	r3, [r1, #0]
 8005354:	50cd      	str	r5, [r1, r3]
 8005356:	18cc      	adds	r4, r1, r3
 8005358:	4630      	mov	r0, r6
 800535a:	f000 f85c 	bl	8005416 <__malloc_unlock>
 800535e:	f104 000b 	add.w	r0, r4, #11
 8005362:	1d23      	adds	r3, r4, #4
 8005364:	f020 0007 	bic.w	r0, r0, #7
 8005368:	1ac3      	subs	r3, r0, r3
 800536a:	d0d3      	beq.n	8005314 <_malloc_r+0x20>
 800536c:	425a      	negs	r2, r3
 800536e:	50e2      	str	r2, [r4, r3]
 8005370:	e7d0      	b.n	8005314 <_malloc_r+0x20>
 8005372:	428c      	cmp	r4, r1
 8005374:	684b      	ldr	r3, [r1, #4]
 8005376:	bf16      	itet	ne
 8005378:	6063      	strne	r3, [r4, #4]
 800537a:	6013      	streq	r3, [r2, #0]
 800537c:	460c      	movne	r4, r1
 800537e:	e7eb      	b.n	8005358 <_malloc_r+0x64>
 8005380:	460c      	mov	r4, r1
 8005382:	6849      	ldr	r1, [r1, #4]
 8005384:	e7cc      	b.n	8005320 <_malloc_r+0x2c>
 8005386:	1cc4      	adds	r4, r0, #3
 8005388:	f024 0403 	bic.w	r4, r4, #3
 800538c:	42a0      	cmp	r0, r4
 800538e:	d005      	beq.n	800539c <_malloc_r+0xa8>
 8005390:	1a21      	subs	r1, r4, r0
 8005392:	4630      	mov	r0, r6
 8005394:	f000 f82e 	bl	80053f4 <_sbrk_r>
 8005398:	3001      	adds	r0, #1
 800539a:	d0cf      	beq.n	800533c <_malloc_r+0x48>
 800539c:	6025      	str	r5, [r4, #0]
 800539e:	e7db      	b.n	8005358 <_malloc_r+0x64>
 80053a0:	200000d0 	.word	0x200000d0
 80053a4:	200000d4 	.word	0x200000d4

080053a8 <_realloc_r>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	4607      	mov	r7, r0
 80053ac:	4614      	mov	r4, r2
 80053ae:	460e      	mov	r6, r1
 80053b0:	b921      	cbnz	r1, 80053bc <_realloc_r+0x14>
 80053b2:	4611      	mov	r1, r2
 80053b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053b8:	f7ff bf9c 	b.w	80052f4 <_malloc_r>
 80053bc:	b922      	cbnz	r2, 80053c8 <_realloc_r+0x20>
 80053be:	f7ff ff4b 	bl	8005258 <_free_r>
 80053c2:	4625      	mov	r5, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c8:	f000 f826 	bl	8005418 <_malloc_usable_size_r>
 80053cc:	42a0      	cmp	r0, r4
 80053ce:	d20f      	bcs.n	80053f0 <_realloc_r+0x48>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4638      	mov	r0, r7
 80053d4:	f7ff ff8e 	bl	80052f4 <_malloc_r>
 80053d8:	4605      	mov	r5, r0
 80053da:	2800      	cmp	r0, #0
 80053dc:	d0f2      	beq.n	80053c4 <_realloc_r+0x1c>
 80053de:	4631      	mov	r1, r6
 80053e0:	4622      	mov	r2, r4
 80053e2:	f7ff ff15 	bl	8005210 <memcpy>
 80053e6:	4631      	mov	r1, r6
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff ff35 	bl	8005258 <_free_r>
 80053ee:	e7e9      	b.n	80053c4 <_realloc_r+0x1c>
 80053f0:	4635      	mov	r5, r6
 80053f2:	e7e7      	b.n	80053c4 <_realloc_r+0x1c>

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4c06      	ldr	r4, [pc, #24]	; (8005410 <_sbrk_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4605      	mov	r5, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	f7fb ffb4 	bl	800136c <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	200001fc 	.word	0x200001fc

08005414 <__malloc_lock>:
 8005414:	4770      	bx	lr

08005416 <__malloc_unlock>:
 8005416:	4770      	bx	lr

08005418 <_malloc_usable_size_r>:
 8005418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800541c:	1f18      	subs	r0, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	bfbc      	itt	lt
 8005422:	580b      	ldrlt	r3, [r1, r0]
 8005424:	18c0      	addlt	r0, r0, r3
 8005426:	4770      	bx	lr

08005428 <_init>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	bf00      	nop
 800542c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542e:	bc08      	pop	{r3}
 8005430:	469e      	mov	lr, r3
 8005432:	4770      	bx	lr

08005434 <_fini>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr
