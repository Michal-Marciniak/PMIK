
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800462c  0800462c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004634  08004634  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200000b0  080046ec  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080046ec  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbac  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d7e  00000000  00000000  0002bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164c8  00000000  00000000  0002edb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a31  00000000  00000000  00045278  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087515  00000000  00000000  0004eca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d61be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  000d623c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004558 	.word	0x08004558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08004558 	.word	0x08004558

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <MX_GPIO_Init+0xc4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a29      	ldr	r2, [pc, #164]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_GPIO_Init+0xc4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <MX_GPIO_Init+0xc8>)
 80005f0:	f001 f8fa 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80005f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_GPIO_Init+0xcc>)
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4619      	mov	r1, r3
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <MX_GPIO_Init+0xd0>)
 800060a:	f000 ff6b 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 800060e:	2320      	movs	r3, #32
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <MX_GPIO_Init+0xc8>)
 8000626:	f000 ff5d 	bl	80014e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2028      	movs	r0, #40	; 0x28
 8000630:	f000 feff 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000634:	2028      	movs	r0, #40	; 0x28
 8000636:	f000 ff18 	bl	800146a <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	10210000 	.word	0x10210000
 8000650:	40020800 	.word	0x40020800

08000654 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 f8f5 	bl	8001880 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fbfa 	bl	8000e94 <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000d8 	.word	0x200000d8
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C2_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C2_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C2_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C2_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C2_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C2_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C2_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C2_Init+0x50>)
 80006ee:	f001 f8c7 	bl	8001880 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 fbcc 	bl	8000e94 <Error_Handler>
  }

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000012c 	.word	0x2000012c
 8000704:	40005800 	.word	0x40005800
 8000708:	000186a0 	.word	0x000186a0

0800070c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a3b      	ldr	r2, [pc, #236]	; (8000818 <HAL_I2C_MspInit+0x10c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d12d      	bne.n	800078a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <HAL_I2C_MspInit+0x110>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a39      	ldr	r2, [pc, #228]	; (800081c <HAL_I2C_MspInit+0x110>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <HAL_I2C_MspInit+0x110>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800074a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000750:	2312      	movs	r3, #18
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	482e      	ldr	r0, [pc, #184]	; (8000820 <HAL_I2C_MspInit+0x114>)
 8000768:	f000 febc 	bl	80014e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <HAL_I2C_MspInit+0x110>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a29      	ldr	r2, [pc, #164]	; (800081c <HAL_I2C_MspInit+0x110>)
 8000776:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <HAL_I2C_MspInit+0x110>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000788:	e041      	b.n	800080e <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <HAL_I2C_MspInit+0x118>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d13c      	bne.n	800080e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <HAL_I2C_MspInit+0x110>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	4a1f      	ldr	r2, [pc, #124]	; (800081c <HAL_I2C_MspInit+0x110>)
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	6313      	str	r3, [r2, #48]	; 0x30
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_I2C_MspInit+0x110>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f003 0302 	and.w	r3, r3, #2
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b6:	2312      	movs	r3, #18
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007c2:	2304      	movs	r3, #4
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <HAL_I2C_MspInit+0x114>)
 80007ce:	f000 fe89 	bl	80014e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d6:	2312      	movs	r3, #18
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007da:	2301      	movs	r3, #1
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80007e2:	2309      	movs	r3, #9
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <HAL_I2C_MspInit+0x114>)
 80007ee:	f000 fe79 	bl	80014e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_I2C_MspInit+0x110>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_I2C_MspInit+0x110>)
 80007fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_I2C_MspInit+0x110>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40005400 	.word	0x40005400
 800081c:	40023800 	.word	0x40023800
 8000820:	40020400 	.word	0x40020400
 8000824:	40005800 	.word	0x40005800

08000828 <lcd_init>:

// RS = 0, wysyłamy instrukcje do LCD
// RS = 1, wysyłamy dane do LCD

void lcd_init()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	/* sekwencja inicjalizująca wyświetlacz, z dokumentacji */
	HAL_Delay(40);
 800082c:	2028      	movs	r0, #40	; 0x28
 800082e:	f000 fd03 	bl	8001238 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000832:	2030      	movs	r0, #48	; 0x30
 8000834:	f000 f854 	bl	80008e0 <lcd_write_command>
	HAL_Delay(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f000 fcfd 	bl	8001238 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 800083e:	2030      	movs	r0, #48	; 0x30
 8000840:	f000 f84e 	bl	80008e0 <lcd_write_command>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fcf7 	bl	8001238 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 800084a:	2030      	movs	r0, #48	; 0x30
 800084c:	f000 f848 	bl	80008e0 <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8000850:	2002      	movs	r0, #2
 8000852:	f000 f845 	bl	80008e0 <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8000856:	200c      	movs	r0, #12
 8000858:	f000 f842 	bl	80008e0 <lcd_write_command>

	lcd_generate_own_chars();
 800085c:	f000 f8e2 	bl	8000a24 <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8000860:	f000 f9a4 	bl	8000bac <lcd_clear>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <lcd_set_cursor>:

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <lcd_set_cursor+0x24>
 8000886:	2b01      	cmp	r3, #1
 8000888:	d009      	beq.n	800089e <lcd_set_cursor+0x36>
			col_number |= (0xc0);
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
			break;
	}

}
 800088a:	e011      	b.n	80008b0 <lcd_set_cursor+0x48>
			col_number |= (0x80);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000892:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f822 	bl	80008e0 <lcd_write_command>
			break;
 800089c:	e008      	b.n	80008b0 <lcd_set_cursor+0x48>
			col_number |= (0xc0);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008a4:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f819 	bl	80008e0 <lcd_write_command>
			break;
 80008ae:	bf00      	nop
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 80008bc:	2080      	movs	r0, #128	; 0x80
 80008be:	f000 f80f 	bl	80008e0 <lcd_write_command>
	HAL_Delay(5);
 80008c2:	2005      	movs	r0, #5
 80008c4:	f000 fcb8 	bl	8001238 <HAL_Delay>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 80008d0:	20c0      	movs	r0, #192	; 0xc0
 80008d2:	f000 f805 	bl	80008e0 <lcd_write_command>
	HAL_Delay(5);
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 fcae 	bl	8001238 <HAL_Delay>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 80008ea:	234e      	movs	r3, #78	; 0x4e
 80008ec:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL_PIN;		// EN = 1, RS = 0
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	f023 030f 	bic.w	r3, r3, #15
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	f043 030c 	orr.w	r3, r3, #12
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL_PIN;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	f023 030f 	bic.w	r3, r3, #15
 800090a:	b25b      	sxtb	r3, r3
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	b25b      	sxtb	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL_PIN;		// EN = 1, RS = 0
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	b25b      	sxtb	r3, r3
 800091c:	f043 030c 	orr.w	r3, r3, #12
 8000920:	b25b      	sxtb	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL_PIN;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	b25b      	sxtb	r3, r3
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	b25b      	sxtb	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	b299      	uxth	r1, r3
 800093a:	f107 0208 	add.w	r2, r7, #8
 800093e:	2364      	movs	r3, #100	; 0x64
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2304      	movs	r3, #4
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <lcd_write_command+0x78>)
 8000946:	f001 f8d3 	bl	8001af0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 800094a:	2005      	movs	r0, #5
 800094c:	f000 fc74 	bl	8001238 <HAL_Delay>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000d8 	.word	0x200000d8

0800095c <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af02      	add	r7, sp, #8
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000966:	234e      	movs	r3, #78	; 0x4e
 8000968:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 800096a:	2301      	movs	r3, #1
 800096c:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL_PIN;		// EN = 1, RS = 1
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f023 030f 	bic.w	r3, r3, #15
 8000974:	b2da      	uxtb	r2, r3
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	4313      	orrs	r3, r2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f043 030c 	orr.w	r3, r3, #12
 8000980:	b2db      	uxtb	r3, r3
 8000982:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL_PIN;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	f023 030f 	bic.w	r3, r3, #15
 800098c:	b25a      	sxtb	r2, r3
 800098e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000992:	4313      	orrs	r3, r2
 8000994:	b25b      	sxtb	r3, r3
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	b25b      	sxtb	r3, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL_PIN;		// EN = 1, RS = 1
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f043 030c 	orr.w	r3, r3, #12
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL_PIN;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009be:	4313      	orrs	r3, r2
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	b299      	uxth	r1, r3
 80009d0:	f107 0208 	add.w	r2, r7, #8
 80009d4:	2364      	movs	r3, #100	; 0x64
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2304      	movs	r3, #4
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <lcd_write_data+0x94>)
 80009dc:	f001 f888 	bl	8001af0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80009e0:	2005      	movs	r0, #5
 80009e2:	f000 fc29 	bl	8001238 <HAL_Delay>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000d8 	.word	0x200000d8

080009f4 <lcd_send_string>:

void lcd_send_string(const char * string)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	while(*string)
 80009fc:	e006      	b.n	8000a0c <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffa8 	bl	800095c <lcd_write_data>
	while(*string)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f4      	bne.n	80009fe <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8000a14:	2005      	movs	r0, #5
 8000a16:	f000 fc0f 	bl	8001238 <HAL_Delay>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 8000a2a:	2040      	movs	r0, #64	; 0x40
 8000a2c:	f7ff ff58 	bl	80008e0 <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	e015      	b.n	8000a62 <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	71bb      	strb	r3, [r7, #6]
 8000a3a:	e00c      	b.n	8000a56 <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	490b      	ldr	r1, [pc, #44]	; (8000a70 <lcd_generate_own_chars+0x4c>)
 8000a42:	00d2      	lsls	r2, r2, #3
 8000a44:	440a      	add	r2, r1
 8000a46:	4413      	add	r3, r2
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff86 	bl	800095c <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d9ef      	bls.n	8000a3c <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d9e6      	bls.n	8000a36 <lcd_generate_own_chars+0x12>
		}
	}
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000

08000a74 <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	2b07      	cmp	r3, #7
 8000a84:	d832      	bhi.n	8000aec <lcd_send_own_char+0x78>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <lcd_send_own_char+0x18>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000aad 	.word	0x08000aad
 8000a90:	08000ab5 	.word	0x08000ab5
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	08000ac5 	.word	0x08000ac5
 8000a9c:	08000acd 	.word	0x08000acd
 8000aa0:	08000ad5 	.word	0x08000ad5
 8000aa4:	08000add 	.word	0x08000add
 8000aa8:	08000ae5 	.word	0x08000ae5

		case 1:
			lcd_send_string("\x1");
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <lcd_send_own_char+0x80>)
 8000aae:	f7ff ffa1 	bl	80009f4 <lcd_send_string>
			break;
 8000ab2:	e01b      	b.n	8000aec <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <lcd_send_own_char+0x84>)
 8000ab6:	f7ff ff9d 	bl	80009f4 <lcd_send_string>
			break;
 8000aba:	e017      	b.n	8000aec <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 8000abc:	480f      	ldr	r0, [pc, #60]	; (8000afc <lcd_send_own_char+0x88>)
 8000abe:	f7ff ff99 	bl	80009f4 <lcd_send_string>
			break;
 8000ac2:	e013      	b.n	8000aec <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <lcd_send_own_char+0x8c>)
 8000ac6:	f7ff ff95 	bl	80009f4 <lcd_send_string>
			break;
 8000aca:	e00f      	b.n	8000aec <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <lcd_send_own_char+0x90>)
 8000ace:	f7ff ff91 	bl	80009f4 <lcd_send_string>
			break;
 8000ad2:	e00b      	b.n	8000aec <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <lcd_send_own_char+0x94>)
 8000ad6:	f7ff ff8d 	bl	80009f4 <lcd_send_string>
			break;
 8000ada:	e007      	b.n	8000aec <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <lcd_send_own_char+0x98>)
 8000ade:	f7ff ff89 	bl	80009f4 <lcd_send_string>
			break;
 8000ae2:	e003      	b.n	8000aec <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <lcd_send_own_char+0x9c>)
 8000ae6:	f7ff ff85 	bl	80009f4 <lcd_send_string>
			break;
 8000aea:	bf00      	nop
	}
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08004570 	.word	0x08004570
 8000af8:	08004574 	.word	0x08004574
 8000afc:	08004578 	.word	0x08004578
 8000b00:	0800457c 	.word	0x0800457c
 8000b04:	08004580 	.word	0x08004580
 8000b08:	08004584 	.word	0x08004584
 8000b0c:	08004588 	.word	0x08004588
 8000b10:	0800458c 	.word	0x0800458c

08000b14 <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

	switch(day_number) {
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d82f      	bhi.n	8000b86 <lcd_show_week_day_name+0x72>
 8000b26:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <lcd_show_week_day_name+0x18>)
 8000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2c:	08000b49 	.word	0x08000b49
 8000b30:	08000b51 	.word	0x08000b51
 8000b34:	08000b59 	.word	0x08000b59
 8000b38:	08000b67 	.word	0x08000b67
 8000b3c:	08000b6f 	.word	0x08000b6f
 8000b40:	08000b77 	.word	0x08000b77
 8000b44:	08000b7f 	.word	0x08000b7f

		case 1:
			lcd_send_string("pon.");
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <lcd_show_week_day_name+0x7c>)
 8000b4a:	f7ff ff53 	bl	80009f4 <lcd_send_string>
			break;
 8000b4e:	e01a      	b.n	8000b86 <lcd_show_week_day_name+0x72>

		case 2:
			lcd_send_string("wt.");
 8000b50:	4810      	ldr	r0, [pc, #64]	; (8000b94 <lcd_show_week_day_name+0x80>)
 8000b52:	f7ff ff4f 	bl	80009f4 <lcd_send_string>
			break;
 8000b56:	e016      	b.n	8000b86 <lcd_show_week_day_name+0x72>

		case 3:
			lcd_send_own_char(7);
 8000b58:	2007      	movs	r0, #7
 8000b5a:	f7ff ff8b 	bl	8000a74 <lcd_send_own_char>
			lcd_send_string("r.");
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <lcd_show_week_day_name+0x84>)
 8000b60:	f7ff ff48 	bl	80009f4 <lcd_send_string>
			break;
 8000b64:	e00f      	b.n	8000b86 <lcd_show_week_day_name+0x72>

		case 4:
			lcd_send_string("czw.");
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <lcd_show_week_day_name+0x88>)
 8000b68:	f7ff ff44 	bl	80009f4 <lcd_send_string>
			break;
 8000b6c:	e00b      	b.n	8000b86 <lcd_show_week_day_name+0x72>

		case 5:
			lcd_send_string("pt.");
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <lcd_show_week_day_name+0x8c>)
 8000b70:	f7ff ff40 	bl	80009f4 <lcd_send_string>
			break;
 8000b74:	e007      	b.n	8000b86 <lcd_show_week_day_name+0x72>

		case 6:
			lcd_send_string("sob.");
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <lcd_show_week_day_name+0x90>)
 8000b78:	f7ff ff3c 	bl	80009f4 <lcd_send_string>
			break;
 8000b7c:	e003      	b.n	8000b86 <lcd_show_week_day_name+0x72>

		case 7:
			lcd_send_string("niedz.");
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <lcd_show_week_day_name+0x94>)
 8000b80:	f7ff ff38 	bl	80009f4 <lcd_send_string>
			break;
 8000b84:	bf00      	nop

	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08004590 	.word	0x08004590
 8000b94:	08004598 	.word	0x08004598
 8000b98:	0800459c 	.word	0x0800459c
 8000b9c:	080045a0 	.word	0x080045a0
 8000ba0:	080045a8 	.word	0x080045a8
 8000ba4:	080045ac 	.word	0x080045ac
 8000ba8:	080045b4 	.word	0x080045b4

08000bac <lcd_clear>:

void lcd_clear(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	/* clear display */
	lcd_write_command(CLEAR_LCD);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fe95 	bl	80008e0 <lcd_write_command>
	HAL_Delay(5);
 8000bb6:	2005      	movs	r0, #5
 8000bb8:	f000 fb3e 	bl	8001238 <HAL_Delay>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <bcdToDec>:
}

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	461a      	mov	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	4413      	add	r3, r2
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <get_Time>:

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
}

void get_Time (void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af04      	add	r7, sp, #16
	uint8_t time_to_red[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_red, 7, 1000);
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	463b      	mov	r3, r7
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2200      	movs	r2, #0
 8000c08:	21d0      	movs	r1, #208	; 0xd0
 8000c0a:	481f      	ldr	r0, [pc, #124]	; (8000c88 <get_Time+0x98>)
 8000c0c:	f001 f86e 	bl	8001cec <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_red[0]);
 8000c10:	783b      	ldrb	r3, [r7, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffd4 	bl	8000bc0 <bcdToDec>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <get_Time+0x9c>)
 8000c1e:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_red[1]);
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ffcc 	bl	8000bc0 <bcdToDec>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <get_Time+0x9c>)
 8000c2e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_red[2]);
 8000c30:	78bb      	ldrb	r3, [r7, #2]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ffc4 	bl	8000bc0 <bcdToDec>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <get_Time+0x9c>)
 8000c3e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_red[3]);
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ffbc 	bl	8000bc0 <bcdToDec>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <get_Time+0x9c>)
 8000c4e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_red[4]);
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffb4 	bl	8000bc0 <bcdToDec>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <get_Time+0x9c>)
 8000c5e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_red[5]);
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffac 	bl	8000bc0 <bcdToDec>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <get_Time+0x9c>)
 8000c6e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_red[6]);
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffa4 	bl	8000bc0 <bcdToDec>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <get_Time+0x9c>)
 8000c7e:	719a      	strb	r2, [r3, #6]
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000012c 	.word	0x2000012c
 8000c8c:	2000018c 	.word	0x2000018c

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f000 fa5d 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f859 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f7ff fc6f 	bl	8000580 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ca2:	f7ff fcd7 	bl	8000654 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ca6:	f7ff fd03 	bl	80006b0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000caa:	f000 f9af 	bl	800100c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
  // Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback.
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4920      	ldr	r1, [pc, #128]	; (8000d34 <main+0xa4>)
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xa8>)
 8000cb4:	f002 fa11 	bl	80030da <HAL_UART_Receive_IT>

  lcd_init();
 8000cb8:	f7ff fdb6 	bl	8000828 <lcd_init>

  // Tutaj domyślnie będzie pin z brzęczykiem
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	481e      	ldr	r0, [pc, #120]	; (8000d3c <main+0xac>)
 8000cc2:	f000 fd91 	bl	80017e8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	get_Time();
 8000cc6:	f7ff ff93 	bl	8000bf0 <get_Time>

	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <main+0xb0>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xb0>)
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <main+0xb0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4919      	ldr	r1, [pc, #100]	; (8000d44 <main+0xb4>)
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <main+0xb8>)
 8000ce2:	f003 f833 	bl	8003d4c <siprintf>
	lcd_first_line();
 8000ce6:	f7ff fde7 	bl	80008b8 <lcd_first_line>
	lcd_send_string(time_date_buffer);
 8000cea:	4817      	ldr	r0, [pc, #92]	; (8000d48 <main+0xb8>)
 8000cec:	f7ff fe82 	bl	80009f4 <lcd_send_string>

	// wyświetl nazwę dnia tygodnia
	lcd_set_cursor(0, 10);
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fdb8 	bl	8000868 <lcd_set_cursor>
	lcd_show_week_day_name(time.dayofweek);
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <main+0xb0>)
 8000cfa:	78db      	ldrb	r3, [r3, #3]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff09 	bl	8000b14 <lcd_show_week_day_name>

	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <main+0xb0>)
 8000d04:	791b      	ldrb	r3, [r3, #4]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <main+0xb0>)
 8000d0a:	795b      	ldrb	r3, [r3, #5]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <main+0xb0>)
 8000d10:	799b      	ldrb	r3, [r3, #6]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	460b      	mov	r3, r1
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <main+0xbc>)
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <main+0xb8>)
 8000d1a:	f003 f817 	bl	8003d4c <siprintf>
	lcd_second_line();
 8000d1e:	f7ff fdd5 	bl	80008cc <lcd_second_line>
	lcd_send_string(time_date_buffer);
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <main+0xb8>)
 8000d24:	f7ff fe66 	bl	80009f4 <lcd_send_string>

	HAL_Delay(1000);
 8000d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2c:	f000 fa84 	bl	8001238 <HAL_Delay>
	get_Time();
 8000d30:	e7c9      	b.n	8000cc6 <main+0x36>
 8000d32:	bf00      	nop
 8000d34:	20000193 	.word	0x20000193
 8000d38:	20000194 	.word	0x20000194
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	2000018c 	.word	0x2000018c
 8000d44:	080045bc 	.word	0x080045bc
 8000d48:	20000180 	.word	0x20000180
 8000d4c:	080045cc 	.word	0x080045cc

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	; 0x50
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	2230      	movs	r2, #48	; 0x30
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 ffec 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <SystemClock_Config+0xd0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <SystemClock_Config+0xd0>)
 8000d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db8:	2310      	movs	r3, #16
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000dc8:	2354      	movs	r3, #84	; 0x54
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fcf5 	bl	80027c8 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000de4:	f000 f856 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2302      	movs	r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2102      	movs	r1, #2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 ff4f 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e10:	f000 f840 	bl	8000e94 <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	3750      	adds	r7, #80	; 0x50
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart2, a nie coś innego
	if(huart->Instance == USART2) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_UART_RxCpltCallback+0x38>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10d      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0x2e>

		if(uart_rx_data == 'd') {
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_UART_RxCpltCallback+0x3c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d104      	bne.n	8000e48 <HAL_UART_RxCpltCallback+0x24>
			HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2120      	movs	r1, #32
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <HAL_UART_RxCpltCallback+0x40>)
 8000e44:	f000 fcd0 	bl	80017e8 <HAL_GPIO_WritePin>
		}

		// Po obsłużeniu przerwania, znowu nasłuchujemy czy nie przyszedł kolejny znak z uarta
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <HAL_UART_RxCpltCallback+0x3c>)
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <HAL_UART_RxCpltCallback+0x44>)
 8000e4e:	f002 f944 	bl	80030da <HAL_UART_Receive_IT>
	}
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	20000193 	.word	0x20000193
 8000e64:	40020000 	.word	0x40020000
 8000e68:	20000194 	.word	0x20000194

08000e6c <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7c:	d103      	bne.n	8000e86 <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e82:	f000 fcca 	bl	800181a <HAL_GPIO_TogglePin>
	}
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f956 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <USART2_IRQHandler+0x10>)
 8000f56:	f002 f915 	bl	8003184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000194 	.word	0x20000194

08000f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f6c:	f000 fc70 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f002 fea0 	bl	8003ce8 <__errno>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	230c      	movs	r3, #12
 8000fac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20018000 	.word	0x20018000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	200000cc 	.word	0x200000cc
 8000fdc:	200001e0 	.word	0x200001e0

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <SystemInit+0x28>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <SystemInit+0x28>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SystemInit+0x28>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	609a      	str	r2, [r3, #8]
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_USART2_UART_Init+0x50>)
 8001014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART2_UART_Init+0x4c>)
 8001044:	f001 fffc 	bl	8003040 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800104e:	f7ff ff21 	bl	8000e94 <Error_Handler>
  }

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000194 	.word	0x20000194
 800105c:	40004400 	.word	0x40004400

08001060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_UART_MspInit+0x94>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d133      	bne.n	80010ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_UART_MspInit+0x98>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_UART_MspInit+0x98>)
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_UART_MspInit+0x98>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_UART_MspInit+0x98>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0x98>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_UART_MspInit+0x98>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ba:	230c      	movs	r3, #12
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <HAL_UART_MspInit+0x9c>)
 80010d6:	f000 fa05 	bl	80014e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2026      	movs	r0, #38	; 0x26
 80010e0:	f000 f9a7 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e4:	2026      	movs	r0, #38	; 0x26
 80010e6:	f000 f9c0 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40004400 	.word	0x40004400
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001106:	e003      	b.n	8001110 <LoopCopyDataInit>

08001108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800110a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800110c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800110e:	3104      	adds	r1, #4

08001110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001118:	d3f6      	bcc.n	8001108 <CopyDataInit>
  ldr  r2, =_sbss
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800111c:	e002      	b.n	8001124 <LoopFillZerobss>

0800111e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800111e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001120:	f842 3b04 	str.w	r3, [r2], #4

08001124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001128:	d3f9      	bcc.n	800111e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112a:	f7ff ff59 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112e:	f002 fde1 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fdad 	bl	8000c90 <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001138:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800113c:	0800463c 	.word	0x0800463c
  ldr  r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001144:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8001148:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 800114c:	200001dc 	.word	0x200001dc

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f94d 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fe8c 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f965 	bl	8001486 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f92d 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000040 	.word	0x20000040
 80011f0:	20000048 	.word	0x20000048
 80011f4:	20000044 	.word	0x20000044

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000048 	.word	0x20000048
 800121c:	200001d4 	.word	0x200001d4

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200001d4 	.word	0x200001d4

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_Delay+0x40>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000048 	.word	0x20000048

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d004      	beq.n	80014bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e00c      	b.n	80014d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2205      	movs	r2, #5
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e159      	b.n	80017b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001500:	2201      	movs	r2, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	f040 8148 	bne.w	80017ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d00b      	beq.n	800153e <HAL_GPIO_Init+0x5a>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001532:	2b11      	cmp	r3, #17
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b12      	cmp	r3, #18
 800153c:	d130      	bne.n	80015a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0xfc>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d123      	bne.n	8001628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80a2 	beq.w	80017ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_GPIO_Init+0x2e4>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a55      	ldr	r2, [pc, #340]	; (80017c8 <HAL_GPIO_Init+0x2e4>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_GPIO_Init+0x2e4>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001686:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_GPIO_Init+0x2e8>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2ec>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x202>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_GPIO_Init+0x2f0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x1fe>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_GPIO_Init+0x2f4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x1fa>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_GPIO_Init+0x2f8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x1f6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <HAL_GPIO_Init+0x2fc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x1f2>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_Init+0x204>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x204>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x204>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x204>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x204>
 80016e6:	2300      	movs	r3, #0
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f8:	4934      	ldr	r1, [pc, #208]	; (80017cc <HAL_GPIO_Init+0x2e8>)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800172a:	4a2e      	ldr	r2, [pc, #184]	; (80017e4 <HAL_GPIO_Init+0x300>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x300>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_GPIO_Init+0x300>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	f67f aea2 	bls.w	8001500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	3724      	adds	r7, #36	; 0x24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40013800 	.word	0x40013800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001804:	e003      	b.n	800180e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	401a      	ands	r2, r3
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	429a      	cmp	r2, r3
 8001832:	d104      	bne.n	800183e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800183c:	e002      	b.n	8001844 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fafc 	bl	8000e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e11f      	b.n	8001ad2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ff30 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e4:	f001 fb84 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a7b      	ldr	r2, [pc, #492]	; (8001adc <HAL_I2C_Init+0x25c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d807      	bhi.n	8001904 <HAL_I2C_Init+0x84>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a7a      	ldr	r2, [pc, #488]	; (8001ae0 <HAL_I2C_Init+0x260>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e006      	b.n	8001912 <HAL_I2C_Init+0x92>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a77      	ldr	r2, [pc, #476]	; (8001ae4 <HAL_I2C_Init+0x264>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0db      	b.n	8001ad2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <HAL_I2C_Init+0x268>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9b      	lsrs	r3, r3, #18
 8001924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a64      	ldr	r2, [pc, #400]	; (8001adc <HAL_I2C_Init+0x25c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d802      	bhi.n	8001954 <HAL_I2C_Init+0xd4>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	e009      	b.n	8001968 <HAL_I2C_Init+0xe8>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a63      	ldr	r2, [pc, #396]	; (8001aec <HAL_I2C_Init+0x26c>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	3301      	adds	r3, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800197a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4956      	ldr	r1, [pc, #344]	; (8001adc <HAL_I2C_Init+0x25c>)
 8001984:	428b      	cmp	r3, r1
 8001986:	d80d      	bhi.n	80019a4 <HAL_I2C_Init+0x124>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e59      	subs	r1, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fbb1 f3f3 	udiv	r3, r1, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	bf38      	it	cc
 80019a0:	2304      	movcc	r3, #4
 80019a2:	e04f      	b.n	8001a44 <HAL_I2C_Init+0x1c4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d111      	bne.n	80019d0 <HAL_I2C_Init+0x150>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e012      	b.n	80019f6 <HAL_I2C_Init+0x176>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Init+0x17e>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e022      	b.n	8001a44 <HAL_I2C_Init+0x1c4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10e      	bne.n	8001a24 <HAL_I2C_Init+0x1a4>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1e58      	subs	r0, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	440b      	add	r3, r1
 8001a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a22:	e00f      	b.n	8001a44 <HAL_I2C_Init+0x1c4>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	0099      	lsls	r1, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6911      	ldr	r1, [r2, #16]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68d2      	ldr	r2, [r2, #12]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	000186a0 	.word	0x000186a0
 8001ae0:	001e847f 	.word	0x001e847f
 8001ae4:	003d08ff 	.word	0x003d08ff
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	817b      	strh	r3, [r7, #10]
 8001b00:	4613      	mov	r3, r2
 8001b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff fb8c 	bl	8001220 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	f040 80e0 	bne.w	8001cd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2319      	movs	r3, #25
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4970      	ldr	r1, [pc, #448]	; (8001ce4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fc72 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0d3      	b.n	8001cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2C_Master_Transmit+0x50>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0cc      	b.n	8001cda <HAL_I2C_Master_Transmit+0x1ea>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d007      	beq.n	8001b66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2221      	movs	r2, #33	; 0x21
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2210      	movs	r2, #16
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	893a      	ldrh	r2, [r7, #8]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	6a3a      	ldr	r2, [r7, #32]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fac2 	bl	8002138 <I2C_MasterRequestWrite>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e08d      	b.n	8001cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bd4:	e066      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6a39      	ldr	r1, [r7, #32]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fcec 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00d      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d107      	bne.n	8001bfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06b      	b.n	8001cda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d11b      	bne.n	8001c78 <HAL_I2C_Master_Transmit+0x188>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	6a39      	ldr	r1, [r7, #32]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fcdc 	bl	800263a <I2C_WaitOnBTFFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d107      	bne.n	8001ca0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e01a      	b.n	8001cda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d194      	bne.n	8001bd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e000      	b.n	8001cda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	00100002 	.word	0x00100002
 8001ce8:	ffff0000 	.word	0xffff0000

08001cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	817b      	strh	r3, [r7, #10]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	813b      	strh	r3, [r7, #8]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d06:	f7ff fa8b 	bl	8001220 <HAL_GetTick>
 8001d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	f040 8208 	bne.w	800212a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2319      	movs	r3, #25
 8001d20:	2201      	movs	r2, #1
 8001d22:	497b      	ldr	r1, [pc, #492]	; (8001f10 <HAL_I2C_Mem_Read+0x224>)
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fb71 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
 8001d32:	e1fb      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2C_Mem_Read+0x56>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e1f4      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d007      	beq.n	8001d68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2222      	movs	r2, #34	; 0x22
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a5b      	ldr	r2, [pc, #364]	; (8001f14 <HAL_I2C_Mem_Read+0x228>)
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001daa:	88f8      	ldrh	r0, [r7, #6]
 8001dac:	893a      	ldrh	r2, [r7, #8]
 8001dae:	8979      	ldrh	r1, [r7, #10]
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4603      	mov	r3, r0
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fa3e 	bl	800223c <I2C_RequestMemoryRead>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1b0      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d113      	bne.n	8001dfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	623b      	str	r3, [r7, #32]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e184      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d11b      	bne.n	8001e3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e164      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d11b      	bne.n	8001e7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	e144      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e90:	e138      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	f200 80f1 	bhi.w	800207e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d123      	bne.n	8001eec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fc07 	bl	80026bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e139      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eea:	e10b      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d14e      	bne.n	8001f92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	2200      	movs	r2, #0
 8001efc:	4906      	ldr	r1, [pc, #24]	; (8001f18 <HAL_I2C_Mem_Read+0x22c>)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fa84 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e10e      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
 8001f0e:	bf00      	nop
 8001f10:	00100002 	.word	0x00100002
 8001f14:	ffff0000 	.word	0xffff0000
 8001f18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f90:	e0b8      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4966      	ldr	r1, [pc, #408]	; (8002134 <HAL_I2C_Mem_Read+0x448>)
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fa35 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0bf      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	494f      	ldr	r1, [pc, #316]	; (8002134 <HAL_I2C_Mem_Read+0x448>)
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fa07 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e091      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207c:	e042      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fb1a 	bl	80026bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04c      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d118      	bne.n	8002104 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f aec2 	bne.w	8001e92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3728      	adds	r7, #40	; 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	00010004 	.word	0x00010004

08002138 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	460b      	mov	r3, r1
 8002146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d006      	beq.n	8002162 <I2C_MasterRequestWrite+0x2a>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d003      	beq.n	8002162 <I2C_MasterRequestWrite+0x2a>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002160:	d108      	bne.n	8002174 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e00b      	b.n	800218c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	2b12      	cmp	r3, #18
 800217a:	d107      	bne.n	800218c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f937 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b2:	d103      	bne.n	80021bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e035      	b.n	800222c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021c8:	d108      	bne.n	80021dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e01b      	b.n	8002214 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021dc:	897b      	ldrh	r3, [r7, #10]
 80021de:	11db      	asrs	r3, r3, #7
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 0306 	and.w	r3, r3, #6
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f063 030f 	orn	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <I2C_MasterRequestWrite+0xfc>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f95d 	bl	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e010      	b.n	800222c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4907      	ldr	r1, [pc, #28]	; (8002238 <I2C_MasterRequestWrite+0x100>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f94d 	bl	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	00010008 	.word	0x00010008
 8002238:	00010002 	.word	0x00010002

0800223c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002264:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f8c2 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d103      	bne.n	80022a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0aa      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	4952      	ldr	r1, [pc, #328]	; (8002408 <I2C_RequestMemoryRead+0x1cc>)
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f8fa 	bl	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e097      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f964 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d107      	bne.n	800230e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e076      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002318:	893b      	ldrh	r3, [r7, #8]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	e021      	b.n	8002368 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002324:	893b      	ldrh	r3, [r7, #8]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	6a39      	ldr	r1, [r7, #32]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f93e 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b04      	cmp	r3, #4
 8002348:	d107      	bne.n	800235a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e050      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800235e:	893b      	ldrh	r3, [r7, #8]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f923 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e035      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f82b 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ca:	d103      	bne.n	80023d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e013      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <I2C_RequestMemoryRead+0x1cc>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f863 	bl	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241c:	e025      	b.n	800246a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d021      	beq.n	800246a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7fe fefb 	bl	8001220 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d116      	bne.n	800246a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e023      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10d      	bne.n	8002490 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4013      	ands	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	e00c      	b.n	80024aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4013      	ands	r3, r2
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d0b6      	beq.n	800241e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c8:	e051      	b.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d123      	bne.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e046      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d021      	beq.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7fe fe79 	bl	8001220 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d116      	bne.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e020      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d10c      	bne.n	8002592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e00b      	b.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	43da      	mvns	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4013      	ands	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d18d      	bne.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c4:	e02d      	b.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f8ce 	bl	8002768 <I2C_IsAcknowledgeFailed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02d      	b.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d021      	beq.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7fe fe1f 	bl	8001220 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d116      	bne.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e007      	b.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d1ca      	bne.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002646:	e02d      	b.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f88d 	bl	8002768 <I2C_IsAcknowledgeFailed>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e02d      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d021      	beq.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7fe fdde 	bl	8001220 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d1ca      	bne.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026c8:	e042      	b.n	8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d119      	bne.n	800270c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0210 	mvn.w	r2, #16
 80026e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e029      	b.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fd88 	bl	8001220 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e007      	b.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d1b5      	bne.n	80026ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	d11b      	bne.n	80027b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002788:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e25b      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d075      	beq.n	80028d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	4ba3      	ldr	r3, [pc, #652]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d00c      	beq.n	800280c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4ba0      	ldr	r3, [pc, #640]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d112      	bne.n	8002824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fe:	4b9d      	ldr	r3, [pc, #628]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280a:	d10b      	bne.n	8002824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	4b99      	ldr	r3, [pc, #612]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d05b      	beq.n	80028d0 <HAL_RCC_OscConfig+0x108>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d157      	bne.n	80028d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e236      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282c:	d106      	bne.n	800283c <HAL_RCC_OscConfig+0x74>
 800282e:	4b91      	ldr	r3, [pc, #580]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a90      	ldr	r2, [pc, #576]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e01d      	b.n	8002878 <HAL_RCC_OscConfig+0xb0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x98>
 8002846:	4b8b      	ldr	r3, [pc, #556]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a8a      	ldr	r2, [pc, #552]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a87      	ldr	r2, [pc, #540]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0xb0>
 8002860:	4b84      	ldr	r3, [pc, #528]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a83      	ldr	r2, [pc, #524]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a80      	ldr	r2, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fcce 	bl	8001220 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe fcca 	bl	8001220 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1fb      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0xc0>
 80028a6:	e014      	b.n	80028d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fcba 	bl	8001220 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7fe fcb6 	bl	8001220 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1e7      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0xe8>
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d063      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d11c      	bne.n	8002930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x152>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1bb      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4952      	ldr	r1, [pc, #328]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	e03a      	b.n	80029a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002938:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <HAL_RCC_OscConfig+0x2b0>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fc6f 	bl	8001220 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fc6b 	bl	8001220 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e19c      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4940      	ldr	r1, [pc, #256]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCC_OscConfig+0x2b0>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fc4e 	bl	8001220 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fc4a 	bl	8001220 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e17b      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d030      	beq.n	8002a14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_OscConfig+0x2b4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fc2e 	bl	8001220 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fc2a 	bl	8001220 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e15b      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x200>
 80029e6:	e015      	b.n	8002a14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_OscConfig+0x2b4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fc17 	bl	8001220 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe fc13 	bl	8001220 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e144      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a0 	beq.w	8002b62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x2b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCC_OscConfig+0x2b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_RCC_OscConfig+0x2b8>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fbd9 	bl	8001220 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e011      	b.n	8002a96 <HAL_RCC_OscConfig+0x2ce>
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470000 	.word	0x42470000
 8002a7c:	42470e80 	.word	0x42470e80
 8002a80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fe fbcc 	bl	8001220 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0fd      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x4d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a7c      	ldr	r2, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x32a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x312>
 8002ac0:	4b77      	ldr	r3, [pc, #476]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a76      	ldr	r2, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a73      	ldr	r2, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x32a>
 8002ada:	4b71      	ldr	r3, [pc, #452]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a70      	ldr	r2, [pc, #448]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	4b6e      	ldr	r3, [pc, #440]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a6d      	ldr	r2, [pc, #436]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fb91 	bl	8001220 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fb8d 	bl	8001220 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0bc      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x33a>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fb7b 	bl	8001220 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fb77 	bl	8001220 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0a6      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a51      	ldr	r2, [pc, #324]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8092 	beq.w	8002c90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d05c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d141      	bne.n	8002c04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_RCC_OscConfig+0x4dc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fb4b 	bl	8001220 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fb47 	bl	8001220 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e078      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba0:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	019b      	lsls	r3, r3, #6
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	4933      	ldr	r1, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd6:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_OscConfig+0x4dc>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fb20 	bl	8001220 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fb1c 	bl	8001220 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04d      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x41c>
 8002c02:	e045      	b.n	8002c90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x4dc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fb09 	bl	8001220 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe fb05 	bl	8001220 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e036      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x44a>
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e029      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_RCC_OscConfig+0x4d8>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d11c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d115      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470060 	.word	0x42470060

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fa42 	bl	8001220 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe fa3e 	bl	8001220 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f821 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e32:	4601      	mov	r1, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	fa21 f303 	lsr.w	r3, r1, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f9a2 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	080045e0 	.word	0x080045e0
 8002e6c:	20000040 	.word	0x20000040
 8002e70:	20000044 	.word	0x20000044

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8a:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d007      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x32>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d008      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x38>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 808d 	bne.w	8002fba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ea2:	60bb      	str	r3, [r7, #8]
       break;
 8002ea4:	e08c      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ea8:	60bb      	str	r3, [r7, #8]
      break;
 8002eaa:	e089      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eac:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb6:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d023      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	ea03 0501 	and.w	r5, r3, r1
 8002ed8:	ea04 0602 	and.w	r6, r4, r2
 8002edc:	4a3d      	ldr	r2, [pc, #244]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ede:	fb02 f106 	mul.w	r1, r2, r6
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	fb02 f205 	mul.w	r2, r2, r5
 8002ee8:	440a      	add	r2, r1
 8002eea:	493a      	ldr	r1, [pc, #232]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eec:	fba5 0101 	umull	r0, r1, r5, r1
 8002ef0:	1853      	adds	r3, r2, r1
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f04f 0400 	mov.w	r4, #0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4623      	mov	r3, r4
 8002efe:	f7fd f9bf 	bl	8000280 <__aeabi_uldivmod>
 8002f02:	4603      	mov	r3, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e049      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	f04f 0400 	mov.w	r4, #0
 8002f14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	ea03 0501 	and.w	r5, r3, r1
 8002f20:	ea04 0602 	and.w	r6, r4, r2
 8002f24:	4629      	mov	r1, r5
 8002f26:	4632      	mov	r2, r6
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	f04f 0400 	mov.w	r4, #0
 8002f30:	0154      	lsls	r4, r2, #5
 8002f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f36:	014b      	lsls	r3, r1, #5
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	1b49      	subs	r1, r1, r5
 8002f3e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	f04f 0400 	mov.w	r4, #0
 8002f4a:	0194      	lsls	r4, r2, #6
 8002f4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f50:	018b      	lsls	r3, r1, #6
 8002f52:	1a5b      	subs	r3, r3, r1
 8002f54:	eb64 0402 	sbc.w	r4, r4, r2
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	00e2      	lsls	r2, r4, #3
 8002f62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f66:	00d9      	lsls	r1, r3, #3
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4614      	mov	r4, r2
 8002f6c:	195b      	adds	r3, r3, r5
 8002f6e:	eb44 0406 	adc.w	r4, r4, r6
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	02a2      	lsls	r2, r4, #10
 8002f7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f80:	0299      	lsls	r1, r3, #10
 8002f82:	460b      	mov	r3, r1
 8002f84:	4614      	mov	r4, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	4621      	mov	r1, r4
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f04f 0400 	mov.w	r4, #0
 8002f90:	461a      	mov	r2, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	f7fd f974 	bl	8000280 <__aeabi_uldivmod>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	60bb      	str	r3, [r7, #8]
      break;
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fbc:	60bb      	str	r3, [r7, #8]
      break;
 8002fbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	017d7840 	.word	0x017d7840

08002fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000040 	.word	0x20000040

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4a03      	ldr	r2, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	fa21 f303 	lsr.w	r3, r1, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	080045f0 	.word	0x080045f0

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800301c:	f7ff ffdc 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003020:	4601      	mov	r1, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0b5b      	lsrs	r3, r3, #13
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	080045f0 	.word	0x080045f0

08003040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e03f      	b.n	80030d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fffa 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fab3 	bl	80035f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d140      	bne.n	8003176 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_UART_Receive_IT+0x26>
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e039      	b.n	8003178 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_UART_Receive_IT+0x38>
 800310e:	2302      	movs	r3, #2
 8003110:	e032      	b.n	8003178 <HAL_UART_Receive_IT+0x9e>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	88fa      	ldrh	r2, [r7, #6]
 8003124:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2222      	movs	r2, #34	; 0x22
 8003136:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003150:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0220 	orr.w	r2, r2, #32
 8003170:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_UART_IRQHandler+0x52>
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f98c 	bl	80034ec <UART_Receive_IT>
      return;
 80031d4:	e0d1      	b.n	800337a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80b0 	beq.w	800333e <HAL_UART_IRQHandler+0x1ba>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_UART_IRQHandler+0x70>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80a5 	beq.w	800333e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_UART_IRQHandler+0x90>
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_UART_IRQHandler+0xb0>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_UART_IRQHandler+0xd0>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00f      	beq.n	800327e <HAL_UART_IRQHandler+0xfa>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_UART_IRQHandler+0xee>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	f043 0208 	orr.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d078      	beq.n	8003378 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_UART_IRQHandler+0x11c>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f926 	bl	80034ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_UART_IRQHandler+0x144>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d031      	beq.n	800332c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f86f 	bl	80033ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d123      	bne.n	8003324 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f8:	4a21      	ldr	r2, [pc, #132]	; (8003380 <HAL_UART_IRQHandler+0x1fc>)
 80032fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe f8cc 	bl	800149e <HAL_DMA_Abort_IT>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d016      	beq.n	800333a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003316:	4610      	mov	r0, r2
 8003318:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331a:	e00e      	b.n	800333a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f83b 	bl	8003398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003322:	e00a      	b.n	800333a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f837 	bl	8003398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332a:	e006      	b.n	800333a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f833 	bl	8003398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003338:	e01e      	b.n	8003378 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	bf00      	nop
    return;
 800333c:	e01c      	b.n	8003378 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_UART_IRQHandler+0x1d6>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f85c 	bl	8003410 <UART_Transmit_IT>
    return;
 8003358:	e00f      	b.n	800337a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_UART_IRQHandler+0x1f6>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8a4 	bl	80034bc <UART_EndTransmit_IT>
    return;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003378:	bf00      	nop
  }
}
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	080033e9 	.word	0x080033e9

08003384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7ff ffc8 	bl	8003398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b21      	cmp	r3, #33	; 0x21
 8003422:	d144      	bne.n	80034ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342c:	d11a      	bne.n	8003464 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003442:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]
 8003456:	e00e      	b.n	8003476 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	e008      	b.n	8003476 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	1c59      	adds	r1, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6211      	str	r1, [r2, #32]
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29b      	uxth	r3, r3
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff51 	bl	8003384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b22      	cmp	r3, #34	; 0x22
 80034fe:	d171      	bne.n	80035e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d123      	bne.n	8003552 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
 8003534:	e029      	b.n	800358a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	b29b      	uxth	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
 8003550:	e01b      	b.n	800358a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6858      	ldr	r0, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	1c59      	adds	r1, r3, #1
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6291      	str	r1, [r2, #40]	; 0x28
 800356a:	b2c2      	uxtb	r2, r0
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e00c      	b.n	800358a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	1c58      	adds	r0, r3, #1
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	6288      	str	r0, [r1, #40]	; 0x28
 8003582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29b      	uxth	r3, r3
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4619      	mov	r1, r3
 8003598:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800359a:	2b00      	cmp	r3, #0
 800359c:	d120      	bne.n	80035e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0220 	bic.w	r2, r2, #32
 80035ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fc24 	bl	8000e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	e002      	b.n	80035e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003632:	f023 030c 	bic.w	r3, r3, #12
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	430b      	orrs	r3, r1
 800363e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365e:	f040 818b 	bne.w	8003978 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4ac1      	ldr	r2, [pc, #772]	; (800396c <UART_SetConfig+0x37c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d005      	beq.n	8003678 <UART_SetConfig+0x88>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4abf      	ldr	r2, [pc, #764]	; (8003970 <UART_SetConfig+0x380>)
 8003672:	4293      	cmp	r3, r2
 8003674:	f040 80bd 	bne.w	80037f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7ff fcce 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 800367c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	461d      	mov	r5, r3
 8003682:	f04f 0600 	mov.w	r6, #0
 8003686:	46a8      	mov	r8, r5
 8003688:	46b1      	mov	r9, r6
 800368a:	eb18 0308 	adds.w	r3, r8, r8
 800368e:	eb49 0409 	adc.w	r4, r9, r9
 8003692:	4698      	mov	r8, r3
 8003694:	46a1      	mov	r9, r4
 8003696:	eb18 0805 	adds.w	r8, r8, r5
 800369a:	eb49 0906 	adc.w	r9, r9, r6
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036b2:	4688      	mov	r8, r1
 80036b4:	4691      	mov	r9, r2
 80036b6:	eb18 0005 	adds.w	r0, r8, r5
 80036ba:	eb49 0106 	adc.w	r1, r9, r6
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	461d      	mov	r5, r3
 80036c4:	f04f 0600 	mov.w	r6, #0
 80036c8:	196b      	adds	r3, r5, r5
 80036ca:	eb46 0406 	adc.w	r4, r6, r6
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	f7fc fdd5 	bl	8000280 <__aeabi_uldivmod>
 80036d6:	4603      	mov	r3, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	461a      	mov	r2, r3
 80036dc:	4ba5      	ldr	r3, [pc, #660]	; (8003974 <UART_SetConfig+0x384>)
 80036de:	fba3 2302 	umull	r2, r3, r3, r2
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	461d      	mov	r5, r3
 80036ec:	f04f 0600 	mov.w	r6, #0
 80036f0:	46a9      	mov	r9, r5
 80036f2:	46b2      	mov	sl, r6
 80036f4:	eb19 0309 	adds.w	r3, r9, r9
 80036f8:	eb4a 040a 	adc.w	r4, sl, sl
 80036fc:	4699      	mov	r9, r3
 80036fe:	46a2      	mov	sl, r4
 8003700:	eb19 0905 	adds.w	r9, r9, r5
 8003704:	eb4a 0a06 	adc.w	sl, sl, r6
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003714:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003718:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800371c:	4689      	mov	r9, r1
 800371e:	4692      	mov	sl, r2
 8003720:	eb19 0005 	adds.w	r0, r9, r5
 8003724:	eb4a 0106 	adc.w	r1, sl, r6
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	461d      	mov	r5, r3
 800372e:	f04f 0600 	mov.w	r6, #0
 8003732:	196b      	adds	r3, r5, r5
 8003734:	eb46 0406 	adc.w	r4, r6, r6
 8003738:	461a      	mov	r2, r3
 800373a:	4623      	mov	r3, r4
 800373c:	f7fc fda0 	bl	8000280 <__aeabi_uldivmod>
 8003740:	4603      	mov	r3, r0
 8003742:	460c      	mov	r4, r1
 8003744:	461a      	mov	r2, r3
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <UART_SetConfig+0x384>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	; 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a86      	ldr	r2, [pc, #536]	; (8003974 <UART_SetConfig+0x384>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003768:	4498      	add	r8, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	461d      	mov	r5, r3
 800376e:	f04f 0600 	mov.w	r6, #0
 8003772:	46a9      	mov	r9, r5
 8003774:	46b2      	mov	sl, r6
 8003776:	eb19 0309 	adds.w	r3, r9, r9
 800377a:	eb4a 040a 	adc.w	r4, sl, sl
 800377e:	4699      	mov	r9, r3
 8003780:	46a2      	mov	sl, r4
 8003782:	eb19 0905 	adds.w	r9, r9, r5
 8003786:	eb4a 0a06 	adc.w	sl, sl, r6
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003796:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800379a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800379e:	4689      	mov	r9, r1
 80037a0:	4692      	mov	sl, r2
 80037a2:	eb19 0005 	adds.w	r0, r9, r5
 80037a6:	eb4a 0106 	adc.w	r1, sl, r6
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	461d      	mov	r5, r3
 80037b0:	f04f 0600 	mov.w	r6, #0
 80037b4:	196b      	adds	r3, r5, r5
 80037b6:	eb46 0406 	adc.w	r4, r6, r6
 80037ba:	461a      	mov	r2, r3
 80037bc:	4623      	mov	r3, r4
 80037be:	f7fc fd5f 	bl	8000280 <__aeabi_uldivmod>
 80037c2:	4603      	mov	r3, r0
 80037c4:	460c      	mov	r4, r1
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <UART_SetConfig+0x384>)
 80037ca:	fba3 1302 	umull	r1, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2164      	movs	r1, #100	; 0x64
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	3332      	adds	r3, #50	; 0x32
 80037dc:	4a65      	ldr	r2, [pc, #404]	; (8003974 <UART_SetConfig+0x384>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 0207 	and.w	r2, r3, #7
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4442      	add	r2, r8
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	e26f      	b.n	8003cd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037f2:	f7ff fbfd 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80037f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	461d      	mov	r5, r3
 80037fc:	f04f 0600 	mov.w	r6, #0
 8003800:	46a8      	mov	r8, r5
 8003802:	46b1      	mov	r9, r6
 8003804:	eb18 0308 	adds.w	r3, r8, r8
 8003808:	eb49 0409 	adc.w	r4, r9, r9
 800380c:	4698      	mov	r8, r3
 800380e:	46a1      	mov	r9, r4
 8003810:	eb18 0805 	adds.w	r8, r8, r5
 8003814:	eb49 0906 	adc.w	r9, r9, r6
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003824:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003828:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800382c:	4688      	mov	r8, r1
 800382e:	4691      	mov	r9, r2
 8003830:	eb18 0005 	adds.w	r0, r8, r5
 8003834:	eb49 0106 	adc.w	r1, r9, r6
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	461d      	mov	r5, r3
 800383e:	f04f 0600 	mov.w	r6, #0
 8003842:	196b      	adds	r3, r5, r5
 8003844:	eb46 0406 	adc.w	r4, r6, r6
 8003848:	461a      	mov	r2, r3
 800384a:	4623      	mov	r3, r4
 800384c:	f7fc fd18 	bl	8000280 <__aeabi_uldivmod>
 8003850:	4603      	mov	r3, r0
 8003852:	460c      	mov	r4, r1
 8003854:	461a      	mov	r2, r3
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <UART_SetConfig+0x384>)
 8003858:	fba3 2302 	umull	r2, r3, r3, r2
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	461d      	mov	r5, r3
 8003866:	f04f 0600 	mov.w	r6, #0
 800386a:	46a9      	mov	r9, r5
 800386c:	46b2      	mov	sl, r6
 800386e:	eb19 0309 	adds.w	r3, r9, r9
 8003872:	eb4a 040a 	adc.w	r4, sl, sl
 8003876:	4699      	mov	r9, r3
 8003878:	46a2      	mov	sl, r4
 800387a:	eb19 0905 	adds.w	r9, r9, r5
 800387e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003882:	f04f 0100 	mov.w	r1, #0
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800388e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003896:	4689      	mov	r9, r1
 8003898:	4692      	mov	sl, r2
 800389a:	eb19 0005 	adds.w	r0, r9, r5
 800389e:	eb4a 0106 	adc.w	r1, sl, r6
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	461d      	mov	r5, r3
 80038a8:	f04f 0600 	mov.w	r6, #0
 80038ac:	196b      	adds	r3, r5, r5
 80038ae:	eb46 0406 	adc.w	r4, r6, r6
 80038b2:	461a      	mov	r2, r3
 80038b4:	4623      	mov	r3, r4
 80038b6:	f7fc fce3 	bl	8000280 <__aeabi_uldivmod>
 80038ba:	4603      	mov	r3, r0
 80038bc:	460c      	mov	r4, r1
 80038be:	461a      	mov	r2, r3
 80038c0:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <UART_SetConfig+0x384>)
 80038c2:	fba3 1302 	umull	r1, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2164      	movs	r1, #100	; 0x64
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a27      	ldr	r2, [pc, #156]	; (8003974 <UART_SetConfig+0x384>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e2:	4498      	add	r8, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	461d      	mov	r5, r3
 80038e8:	f04f 0600 	mov.w	r6, #0
 80038ec:	46a9      	mov	r9, r5
 80038ee:	46b2      	mov	sl, r6
 80038f0:	eb19 0309 	adds.w	r3, r9, r9
 80038f4:	eb4a 040a 	adc.w	r4, sl, sl
 80038f8:	4699      	mov	r9, r3
 80038fa:	46a2      	mov	sl, r4
 80038fc:	eb19 0905 	adds.w	r9, r9, r5
 8003900:	eb4a 0a06 	adc.w	sl, sl, r6
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003910:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003914:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003918:	4689      	mov	r9, r1
 800391a:	4692      	mov	sl, r2
 800391c:	eb19 0005 	adds.w	r0, r9, r5
 8003920:	eb4a 0106 	adc.w	r1, sl, r6
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	461d      	mov	r5, r3
 800392a:	f04f 0600 	mov.w	r6, #0
 800392e:	196b      	adds	r3, r5, r5
 8003930:	eb46 0406 	adc.w	r4, r6, r6
 8003934:	461a      	mov	r2, r3
 8003936:	4623      	mov	r3, r4
 8003938:	f7fc fca2 	bl	8000280 <__aeabi_uldivmod>
 800393c:	4603      	mov	r3, r0
 800393e:	460c      	mov	r4, r1
 8003940:	461a      	mov	r2, r3
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <UART_SetConfig+0x384>)
 8003944:	fba3 1302 	umull	r1, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	2164      	movs	r1, #100	; 0x64
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	3332      	adds	r3, #50	; 0x32
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <UART_SetConfig+0x384>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	f003 0207 	and.w	r2, r3, #7
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4442      	add	r2, r8
 8003968:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800396a:	e1b2      	b.n	8003cd2 <UART_SetConfig+0x6e2>
 800396c:	40011000 	.word	0x40011000
 8003970:	40011400 	.word	0x40011400
 8003974:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4ad7      	ldr	r2, [pc, #860]	; (8003cdc <UART_SetConfig+0x6ec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d005      	beq.n	800398e <UART_SetConfig+0x39e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4ad6      	ldr	r2, [pc, #856]	; (8003ce0 <UART_SetConfig+0x6f0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	f040 80d1 	bne.w	8003b30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800398e:	f7ff fb43 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8003992:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	469a      	mov	sl, r3
 8003998:	f04f 0b00 	mov.w	fp, #0
 800399c:	46d0      	mov	r8, sl
 800399e:	46d9      	mov	r9, fp
 80039a0:	eb18 0308 	adds.w	r3, r8, r8
 80039a4:	eb49 0409 	adc.w	r4, r9, r9
 80039a8:	4698      	mov	r8, r3
 80039aa:	46a1      	mov	r9, r4
 80039ac:	eb18 080a 	adds.w	r8, r8, sl
 80039b0:	eb49 090b 	adc.w	r9, r9, fp
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039c8:	4688      	mov	r8, r1
 80039ca:	4691      	mov	r9, r2
 80039cc:	eb1a 0508 	adds.w	r5, sl, r8
 80039d0:	eb4b 0609 	adc.w	r6, fp, r9
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4619      	mov	r1, r3
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	0094      	lsls	r4, r2, #2
 80039e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039ec:	008b      	lsls	r3, r1, #2
 80039ee:	461a      	mov	r2, r3
 80039f0:	4623      	mov	r3, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	4631      	mov	r1, r6
 80039f6:	f7fc fc43 	bl	8000280 <__aeabi_uldivmod>
 80039fa:	4603      	mov	r3, r0
 80039fc:	460c      	mov	r4, r1
 80039fe:	461a      	mov	r2, r3
 8003a00:	4bb8      	ldr	r3, [pc, #736]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	469b      	mov	fp, r3
 8003a10:	f04f 0c00 	mov.w	ip, #0
 8003a14:	46d9      	mov	r9, fp
 8003a16:	46e2      	mov	sl, ip
 8003a18:	eb19 0309 	adds.w	r3, r9, r9
 8003a1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a20:	4699      	mov	r9, r3
 8003a22:	46a2      	mov	sl, r4
 8003a24:	eb19 090b 	adds.w	r9, r9, fp
 8003a28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a40:	4689      	mov	r9, r1
 8003a42:	4692      	mov	sl, r2
 8003a44:	eb1b 0509 	adds.w	r5, fp, r9
 8003a48:	eb4c 060a 	adc.w	r6, ip, sl
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	f04f 0400 	mov.w	r4, #0
 8003a5e:	0094      	lsls	r4, r2, #2
 8003a60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a64:	008b      	lsls	r3, r1, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	4623      	mov	r3, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	f7fc fc07 	bl	8000280 <__aeabi_uldivmod>
 8003a72:	4603      	mov	r3, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b9a      	ldr	r3, [pc, #616]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2164      	movs	r1, #100	; 0x64
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a95      	ldr	r2, [pc, #596]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	4498      	add	r8, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	469b      	mov	fp, r3
 8003a9e:	f04f 0c00 	mov.w	ip, #0
 8003aa2:	46d9      	mov	r9, fp
 8003aa4:	46e2      	mov	sl, ip
 8003aa6:	eb19 0309 	adds.w	r3, r9, r9
 8003aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8003aae:	4699      	mov	r9, r3
 8003ab0:	46a2      	mov	sl, r4
 8003ab2:	eb19 090b 	adds.w	r9, r9, fp
 8003ab6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aba:	f04f 0100 	mov.w	r1, #0
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ace:	4689      	mov	r9, r1
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	eb1b 0509 	adds.w	r5, fp, r9
 8003ad6:	eb4c 060a 	adc.w	r6, ip, sl
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f04f 0400 	mov.w	r4, #0
 8003aec:	0094      	lsls	r4, r2, #2
 8003aee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003af2:	008b      	lsls	r3, r1, #2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	4628      	mov	r0, r5
 8003afa:	4631      	mov	r1, r6
 8003afc:	f7fc fbc0 	bl	8000280 <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b77      	ldr	r3, [pc, #476]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a72      	ldr	r2, [pc, #456]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4442      	add	r2, r8
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	e0d0      	b.n	8003cd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7ff fa5e 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8003b34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	469a      	mov	sl, r3
 8003b3a:	f04f 0b00 	mov.w	fp, #0
 8003b3e:	46d0      	mov	r8, sl
 8003b40:	46d9      	mov	r9, fp
 8003b42:	eb18 0308 	adds.w	r3, r8, r8
 8003b46:	eb49 0409 	adc.w	r4, r9, r9
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	46a1      	mov	r9, r4
 8003b4e:	eb18 080a 	adds.w	r8, r8, sl
 8003b52:	eb49 090b 	adc.w	r9, r9, fp
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b6a:	4688      	mov	r8, r1
 8003b6c:	4691      	mov	r9, r2
 8003b6e:	eb1a 0508 	adds.w	r5, sl, r8
 8003b72:	eb4b 0609 	adc.w	r6, fp, r9
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	0094      	lsls	r4, r2, #2
 8003b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b8e:	008b      	lsls	r3, r1, #2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	4628      	mov	r0, r5
 8003b96:	4631      	mov	r1, r6
 8003b98:	f7fc fb72 	bl	8000280 <__aeabi_uldivmod>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	469b      	mov	fp, r3
 8003bb2:	f04f 0c00 	mov.w	ip, #0
 8003bb6:	46d9      	mov	r9, fp
 8003bb8:	46e2      	mov	sl, ip
 8003bba:	eb19 0309 	adds.w	r3, r9, r9
 8003bbe:	eb4a 040a 	adc.w	r4, sl, sl
 8003bc2:	4699      	mov	r9, r3
 8003bc4:	46a2      	mov	sl, r4
 8003bc6:	eb19 090b 	adds.w	r9, r9, fp
 8003bca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003be2:	4689      	mov	r9, r1
 8003be4:	4692      	mov	sl, r2
 8003be6:	eb1b 0509 	adds.w	r5, fp, r9
 8003bea:	eb4c 060a 	adc.w	r6, ip, sl
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f04f 0400 	mov.w	r4, #0
 8003c00:	0094      	lsls	r4, r2, #2
 8003c02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c06:	008b      	lsls	r3, r1, #2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	4631      	mov	r1, r6
 8003c10:	f7fc fb36 	bl	8000280 <__aeabi_uldivmod>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b32      	ldr	r3, [pc, #200]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	3332      	adds	r3, #50	; 0x32
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3a:	4498      	add	r8, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	469b      	mov	fp, r3
 8003c40:	f04f 0c00 	mov.w	ip, #0
 8003c44:	46d9      	mov	r9, fp
 8003c46:	46e2      	mov	sl, ip
 8003c48:	eb19 0309 	adds.w	r3, r9, r9
 8003c4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c50:	4699      	mov	r9, r3
 8003c52:	46a2      	mov	sl, r4
 8003c54:	eb19 090b 	adds.w	r9, r9, fp
 8003c58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c70:	4689      	mov	r9, r1
 8003c72:	4692      	mov	sl, r2
 8003c74:	eb1b 0509 	adds.w	r5, fp, r9
 8003c78:	eb4c 060a 	adc.w	r6, ip, sl
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4619      	mov	r1, r3
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	f04f 0400 	mov.w	r4, #0
 8003c8e:	0094      	lsls	r4, r2, #2
 8003c90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c94:	008b      	lsls	r3, r1, #2
 8003c96:	461a      	mov	r2, r3
 8003c98:	4623      	mov	r3, r4
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	f7fc faef 	bl	8000280 <__aeabi_uldivmod>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003caa:	fba3 1302 	umull	r1, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2164      	movs	r1, #100	; 0x64
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	3332      	adds	r3, #50	; 0x32
 8003cbc:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <UART_SetConfig+0x6f4>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4442      	add	r2, r8
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	e7ff      	b.n	8003cd2 <UART_SetConfig+0x6e2>
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cdc:	40011000 	.word	0x40011000
 8003ce0:	40011400 	.word	0x40011400
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <__errno>:
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <__errno+0x8>)
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	2000004c 	.word	0x2000004c

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4e0d      	ldr	r6, [pc, #52]	; (8003d2c <__libc_init_array+0x38>)
 8003cf8:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfa:	1ba4      	subs	r4, r4, r6
 8003cfc:	10a4      	asrs	r4, r4, #2
 8003cfe:	2500      	movs	r5, #0
 8003d00:	42a5      	cmp	r5, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	4e0b      	ldr	r6, [pc, #44]	; (8003d34 <__libc_init_array+0x40>)
 8003d06:	4c0c      	ldr	r4, [pc, #48]	; (8003d38 <__libc_init_array+0x44>)
 8003d08:	f000 fc26 	bl	8004558 <_init>
 8003d0c:	1ba4      	subs	r4, r4, r6
 8003d0e:	10a4      	asrs	r4, r4, #2
 8003d10:	2500      	movs	r5, #0
 8003d12:	42a5      	cmp	r5, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d1c:	4798      	blx	r3
 8003d1e:	3501      	adds	r5, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d26:	4798      	blx	r3
 8003d28:	3501      	adds	r5, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08004634 	.word	0x08004634
 8003d30:	08004634 	.word	0x08004634
 8003d34:	08004634 	.word	0x08004634
 8003d38:	08004638 	.word	0x08004638

08003d3c <memset>:
 8003d3c:	4402      	add	r2, r0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <siprintf>:
 8003d4c:	b40e      	push	{r1, r2, r3}
 8003d4e:	b500      	push	{lr}
 8003d50:	b09c      	sub	sp, #112	; 0x70
 8003d52:	ab1d      	add	r3, sp, #116	; 0x74
 8003d54:	9002      	str	r0, [sp, #8]
 8003d56:	9006      	str	r0, [sp, #24]
 8003d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d5c:	4809      	ldr	r0, [pc, #36]	; (8003d84 <siprintf+0x38>)
 8003d5e:	9107      	str	r1, [sp, #28]
 8003d60:	9104      	str	r1, [sp, #16]
 8003d62:	4909      	ldr	r1, [pc, #36]	; (8003d88 <siprintf+0x3c>)
 8003d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d68:	9105      	str	r1, [sp, #20]
 8003d6a:	6800      	ldr	r0, [r0, #0]
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	a902      	add	r1, sp, #8
 8003d70:	f000 f866 	bl	8003e40 <_svfiprintf_r>
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	b01c      	add	sp, #112	; 0x70
 8003d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d80:	b003      	add	sp, #12
 8003d82:	4770      	bx	lr
 8003d84:	2000004c 	.word	0x2000004c
 8003d88:	ffff0208 	.word	0xffff0208

08003d8c <__ssputs_r>:
 8003d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	688e      	ldr	r6, [r1, #8]
 8003d92:	429e      	cmp	r6, r3
 8003d94:	4682      	mov	sl, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	4690      	mov	r8, r2
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	d837      	bhi.n	8003e0e <__ssputs_r+0x82>
 8003d9e:	898a      	ldrh	r2, [r1, #12]
 8003da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003da4:	d031      	beq.n	8003e0a <__ssputs_r+0x7e>
 8003da6:	6825      	ldr	r5, [r4, #0]
 8003da8:	6909      	ldr	r1, [r1, #16]
 8003daa:	1a6f      	subs	r7, r5, r1
 8003dac:	6965      	ldr	r5, [r4, #20]
 8003dae:	2302      	movs	r3, #2
 8003db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003db8:	f109 0301 	add.w	r3, r9, #1
 8003dbc:	443b      	add	r3, r7
 8003dbe:	429d      	cmp	r5, r3
 8003dc0:	bf38      	it	cc
 8003dc2:	461d      	movcc	r5, r3
 8003dc4:	0553      	lsls	r3, r2, #21
 8003dc6:	d530      	bpl.n	8003e2a <__ssputs_r+0x9e>
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f000 fb2b 	bl	8004424 <_malloc_r>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	b950      	cbnz	r0, 8003de8 <__ssputs_r+0x5c>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	f8ca 3000 	str.w	r3, [sl]
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dde:	81a3      	strh	r3, [r4, #12]
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de8:	463a      	mov	r2, r7
 8003dea:	6921      	ldr	r1, [r4, #16]
 8003dec:	f000 faa8 	bl	8004340 <memcpy>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	6126      	str	r6, [r4, #16]
 8003dfe:	6165      	str	r5, [r4, #20]
 8003e00:	443e      	add	r6, r7
 8003e02:	1bed      	subs	r5, r5, r7
 8003e04:	6026      	str	r6, [r4, #0]
 8003e06:	60a5      	str	r5, [r4, #8]
 8003e08:	464e      	mov	r6, r9
 8003e0a:	454e      	cmp	r6, r9
 8003e0c:	d900      	bls.n	8003e10 <__ssputs_r+0x84>
 8003e0e:	464e      	mov	r6, r9
 8003e10:	4632      	mov	r2, r6
 8003e12:	4641      	mov	r1, r8
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	f000 fa9e 	bl	8004356 <memmove>
 8003e1a:	68a3      	ldr	r3, [r4, #8]
 8003e1c:	1b9b      	subs	r3, r3, r6
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	441e      	add	r6, r3
 8003e24:	6026      	str	r6, [r4, #0]
 8003e26:	2000      	movs	r0, #0
 8003e28:	e7dc      	b.n	8003de4 <__ssputs_r+0x58>
 8003e2a:	462a      	mov	r2, r5
 8003e2c:	f000 fb54 	bl	80044d8 <_realloc_r>
 8003e30:	4606      	mov	r6, r0
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d1e2      	bne.n	8003dfc <__ssputs_r+0x70>
 8003e36:	6921      	ldr	r1, [r4, #16]
 8003e38:	4650      	mov	r0, sl
 8003e3a:	f000 faa5 	bl	8004388 <_free_r>
 8003e3e:	e7c8      	b.n	8003dd2 <__ssputs_r+0x46>

08003e40 <_svfiprintf_r>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	461d      	mov	r5, r3
 8003e46:	898b      	ldrh	r3, [r1, #12]
 8003e48:	061f      	lsls	r7, r3, #24
 8003e4a:	b09d      	sub	sp, #116	; 0x74
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	4616      	mov	r6, r2
 8003e52:	d50f      	bpl.n	8003e74 <_svfiprintf_r+0x34>
 8003e54:	690b      	ldr	r3, [r1, #16]
 8003e56:	b96b      	cbnz	r3, 8003e74 <_svfiprintf_r+0x34>
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	f000 fae3 	bl	8004424 <_malloc_r>
 8003e5e:	6020      	str	r0, [r4, #0]
 8003e60:	6120      	str	r0, [r4, #16]
 8003e62:	b928      	cbnz	r0, 8003e70 <_svfiprintf_r+0x30>
 8003e64:	230c      	movs	r3, #12
 8003e66:	f8c8 3000 	str.w	r3, [r8]
 8003e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6e:	e0c8      	b.n	8004002 <_svfiprintf_r+0x1c2>
 8003e70:	2340      	movs	r3, #64	; 0x40
 8003e72:	6163      	str	r3, [r4, #20]
 8003e74:	2300      	movs	r3, #0
 8003e76:	9309      	str	r3, [sp, #36]	; 0x24
 8003e78:	2320      	movs	r3, #32
 8003e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e7e:	2330      	movs	r3, #48	; 0x30
 8003e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e84:	9503      	str	r5, [sp, #12]
 8003e86:	f04f 0b01 	mov.w	fp, #1
 8003e8a:	4637      	mov	r7, r6
 8003e8c:	463d      	mov	r5, r7
 8003e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e92:	b10b      	cbz	r3, 8003e98 <_svfiprintf_r+0x58>
 8003e94:	2b25      	cmp	r3, #37	; 0x25
 8003e96:	d13e      	bne.n	8003f16 <_svfiprintf_r+0xd6>
 8003e98:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e9c:	d00b      	beq.n	8003eb6 <_svfiprintf_r+0x76>
 8003e9e:	4653      	mov	r3, sl
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	f7ff ff71 	bl	8003d8c <__ssputs_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f000 80a4 	beq.w	8003ff8 <_svfiprintf_r+0x1b8>
 8003eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb2:	4453      	add	r3, sl
 8003eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb6:	783b      	ldrb	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 809d 	beq.w	8003ff8 <_svfiprintf_r+0x1b8>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec8:	9304      	str	r3, [sp, #16]
 8003eca:	9307      	str	r3, [sp, #28]
 8003ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed2:	462f      	mov	r7, r5
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003eda:	4850      	ldr	r0, [pc, #320]	; (800401c <_svfiprintf_r+0x1dc>)
 8003edc:	f7fc f980 	bl	80001e0 <memchr>
 8003ee0:	9b04      	ldr	r3, [sp, #16]
 8003ee2:	b9d0      	cbnz	r0, 8003f1a <_svfiprintf_r+0xda>
 8003ee4:	06d9      	lsls	r1, r3, #27
 8003ee6:	bf44      	itt	mi
 8003ee8:	2220      	movmi	r2, #32
 8003eea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003eee:	071a      	lsls	r2, r3, #28
 8003ef0:	bf44      	itt	mi
 8003ef2:	222b      	movmi	r2, #43	; 0x2b
 8003ef4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ef8:	782a      	ldrb	r2, [r5, #0]
 8003efa:	2a2a      	cmp	r2, #42	; 0x2a
 8003efc:	d015      	beq.n	8003f2a <_svfiprintf_r+0xea>
 8003efe:	9a07      	ldr	r2, [sp, #28]
 8003f00:	462f      	mov	r7, r5
 8003f02:	2000      	movs	r0, #0
 8003f04:	250a      	movs	r5, #10
 8003f06:	4639      	mov	r1, r7
 8003f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0c:	3b30      	subs	r3, #48	; 0x30
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	d94d      	bls.n	8003fae <_svfiprintf_r+0x16e>
 8003f12:	b1b8      	cbz	r0, 8003f44 <_svfiprintf_r+0x104>
 8003f14:	e00f      	b.n	8003f36 <_svfiprintf_r+0xf6>
 8003f16:	462f      	mov	r7, r5
 8003f18:	e7b8      	b.n	8003e8c <_svfiprintf_r+0x4c>
 8003f1a:	4a40      	ldr	r2, [pc, #256]	; (800401c <_svfiprintf_r+0x1dc>)
 8003f1c:	1a80      	subs	r0, r0, r2
 8003f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8003f22:	4318      	orrs	r0, r3
 8003f24:	9004      	str	r0, [sp, #16]
 8003f26:	463d      	mov	r5, r7
 8003f28:	e7d3      	b.n	8003ed2 <_svfiprintf_r+0x92>
 8003f2a:	9a03      	ldr	r2, [sp, #12]
 8003f2c:	1d11      	adds	r1, r2, #4
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	9103      	str	r1, [sp, #12]
 8003f32:	2a00      	cmp	r2, #0
 8003f34:	db01      	blt.n	8003f3a <_svfiprintf_r+0xfa>
 8003f36:	9207      	str	r2, [sp, #28]
 8003f38:	e004      	b.n	8003f44 <_svfiprintf_r+0x104>
 8003f3a:	4252      	negs	r2, r2
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	9207      	str	r2, [sp, #28]
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	783b      	ldrb	r3, [r7, #0]
 8003f46:	2b2e      	cmp	r3, #46	; 0x2e
 8003f48:	d10c      	bne.n	8003f64 <_svfiprintf_r+0x124>
 8003f4a:	787b      	ldrb	r3, [r7, #1]
 8003f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4e:	d133      	bne.n	8003fb8 <_svfiprintf_r+0x178>
 8003f50:	9b03      	ldr	r3, [sp, #12]
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	9203      	str	r2, [sp, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bfb8      	it	lt
 8003f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f60:	3702      	adds	r7, #2
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	4d2e      	ldr	r5, [pc, #184]	; (8004020 <_svfiprintf_r+0x1e0>)
 8003f66:	7839      	ldrb	r1, [r7, #0]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f7fc f938 	bl	80001e0 <memchr>
 8003f70:	b138      	cbz	r0, 8003f82 <_svfiprintf_r+0x142>
 8003f72:	2340      	movs	r3, #64	; 0x40
 8003f74:	1b40      	subs	r0, r0, r5
 8003f76:	fa03 f000 	lsl.w	r0, r3, r0
 8003f7a:	9b04      	ldr	r3, [sp, #16]
 8003f7c:	4303      	orrs	r3, r0
 8003f7e:	3701      	adds	r7, #1
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	7839      	ldrb	r1, [r7, #0]
 8003f84:	4827      	ldr	r0, [pc, #156]	; (8004024 <_svfiprintf_r+0x1e4>)
 8003f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f8a:	2206      	movs	r2, #6
 8003f8c:	1c7e      	adds	r6, r7, #1
 8003f8e:	f7fc f927 	bl	80001e0 <memchr>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d038      	beq.n	8004008 <_svfiprintf_r+0x1c8>
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <_svfiprintf_r+0x1e8>)
 8003f98:	bb13      	cbnz	r3, 8003fe0 <_svfiprintf_r+0x1a0>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	9303      	str	r3, [sp, #12]
 8003fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa8:	444b      	add	r3, r9
 8003faa:	9309      	str	r3, [sp, #36]	; 0x24
 8003fac:	e76d      	b.n	8003e8a <_svfiprintf_r+0x4a>
 8003fae:	fb05 3202 	mla	r2, r5, r2, r3
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	460f      	mov	r7, r1
 8003fb6:	e7a6      	b.n	8003f06 <_svfiprintf_r+0xc6>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	3701      	adds	r7, #1
 8003fbc:	9305      	str	r3, [sp, #20]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	250a      	movs	r5, #10
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc8:	3a30      	subs	r2, #48	; 0x30
 8003fca:	2a09      	cmp	r2, #9
 8003fcc:	d903      	bls.n	8003fd6 <_svfiprintf_r+0x196>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0c8      	beq.n	8003f64 <_svfiprintf_r+0x124>
 8003fd2:	9105      	str	r1, [sp, #20]
 8003fd4:	e7c6      	b.n	8003f64 <_svfiprintf_r+0x124>
 8003fd6:	fb05 2101 	mla	r1, r5, r1, r2
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4607      	mov	r7, r0
 8003fde:	e7f0      	b.n	8003fc2 <_svfiprintf_r+0x182>
 8003fe0:	ab03      	add	r3, sp, #12
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <_svfiprintf_r+0x1ec>)
 8003fe8:	a904      	add	r1, sp, #16
 8003fea:	4640      	mov	r0, r8
 8003fec:	f3af 8000 	nop.w
 8003ff0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ff4:	4681      	mov	r9, r0
 8003ff6:	d1d6      	bne.n	8003fa6 <_svfiprintf_r+0x166>
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	065b      	lsls	r3, r3, #25
 8003ffc:	f53f af35 	bmi.w	8003e6a <_svfiprintf_r+0x2a>
 8004000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004002:	b01d      	add	sp, #116	; 0x74
 8004004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004008:	ab03      	add	r3, sp, #12
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	4622      	mov	r2, r4
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <_svfiprintf_r+0x1ec>)
 8004010:	a904      	add	r1, sp, #16
 8004012:	4640      	mov	r0, r8
 8004014:	f000 f882 	bl	800411c <_printf_i>
 8004018:	e7ea      	b.n	8003ff0 <_svfiprintf_r+0x1b0>
 800401a:	bf00      	nop
 800401c:	080045f8 	.word	0x080045f8
 8004020:	080045fe 	.word	0x080045fe
 8004024:	08004602 	.word	0x08004602
 8004028:	00000000 	.word	0x00000000
 800402c:	08003d8d 	.word	0x08003d8d

08004030 <_printf_common>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	4691      	mov	r9, r2
 8004036:	461f      	mov	r7, r3
 8004038:	688a      	ldr	r2, [r1, #8]
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004040:	4293      	cmp	r3, r2
 8004042:	bfb8      	it	lt
 8004044:	4613      	movlt	r3, r2
 8004046:	f8c9 3000 	str.w	r3, [r9]
 800404a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800404e:	4606      	mov	r6, r0
 8004050:	460c      	mov	r4, r1
 8004052:	b112      	cbz	r2, 800405a <_printf_common+0x2a>
 8004054:	3301      	adds	r3, #1
 8004056:	f8c9 3000 	str.w	r3, [r9]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0699      	lsls	r1, r3, #26
 800405e:	bf42      	ittt	mi
 8004060:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004064:	3302      	addmi	r3, #2
 8004066:	f8c9 3000 	strmi.w	r3, [r9]
 800406a:	6825      	ldr	r5, [r4, #0]
 800406c:	f015 0506 	ands.w	r5, r5, #6
 8004070:	d107      	bne.n	8004082 <_printf_common+0x52>
 8004072:	f104 0a19 	add.w	sl, r4, #25
 8004076:	68e3      	ldr	r3, [r4, #12]
 8004078:	f8d9 2000 	ldr.w	r2, [r9]
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	42ab      	cmp	r3, r5
 8004080:	dc28      	bgt.n	80040d4 <_printf_common+0xa4>
 8004082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	3300      	adds	r3, #0
 800408a:	bf18      	it	ne
 800408c:	2301      	movne	r3, #1
 800408e:	0692      	lsls	r2, r2, #26
 8004090:	d42d      	bmi.n	80040ee <_printf_common+0xbe>
 8004092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004096:	4639      	mov	r1, r7
 8004098:	4630      	mov	r0, r6
 800409a:	47c0      	blx	r8
 800409c:	3001      	adds	r0, #1
 800409e:	d020      	beq.n	80040e2 <_printf_common+0xb2>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	68e5      	ldr	r5, [r4, #12]
 80040a4:	f8d9 2000 	ldr.w	r2, [r9]
 80040a8:	f003 0306 	and.w	r3, r3, #6
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	bf08      	it	eq
 80040b0:	1aad      	subeq	r5, r5, r2
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	6922      	ldr	r2, [r4, #16]
 80040b6:	bf0c      	ite	eq
 80040b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040bc:	2500      	movne	r5, #0
 80040be:	4293      	cmp	r3, r2
 80040c0:	bfc4      	itt	gt
 80040c2:	1a9b      	subgt	r3, r3, r2
 80040c4:	18ed      	addgt	r5, r5, r3
 80040c6:	f04f 0900 	mov.w	r9, #0
 80040ca:	341a      	adds	r4, #26
 80040cc:	454d      	cmp	r5, r9
 80040ce:	d11a      	bne.n	8004106 <_printf_common+0xd6>
 80040d0:	2000      	movs	r0, #0
 80040d2:	e008      	b.n	80040e6 <_printf_common+0xb6>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4652      	mov	r2, sl
 80040d8:	4639      	mov	r1, r7
 80040da:	4630      	mov	r0, r6
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d103      	bne.n	80040ea <_printf_common+0xba>
 80040e2:	f04f 30ff 	mov.w	r0, #4294967295
 80040e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7c3      	b.n	8004076 <_printf_common+0x46>
 80040ee:	18e1      	adds	r1, r4, r3
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	2030      	movs	r0, #48	; 0x30
 80040f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f8:	4422      	add	r2, r4
 80040fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004102:	3302      	adds	r3, #2
 8004104:	e7c5      	b.n	8004092 <_printf_common+0x62>
 8004106:	2301      	movs	r3, #1
 8004108:	4622      	mov	r2, r4
 800410a:	4639      	mov	r1, r7
 800410c:	4630      	mov	r0, r6
 800410e:	47c0      	blx	r8
 8004110:	3001      	adds	r0, #1
 8004112:	d0e6      	beq.n	80040e2 <_printf_common+0xb2>
 8004114:	f109 0901 	add.w	r9, r9, #1
 8004118:	e7d8      	b.n	80040cc <_printf_common+0x9c>
	...

0800411c <_printf_i>:
 800411c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004120:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004124:	460c      	mov	r4, r1
 8004126:	7e09      	ldrb	r1, [r1, #24]
 8004128:	b085      	sub	sp, #20
 800412a:	296e      	cmp	r1, #110	; 0x6e
 800412c:	4617      	mov	r7, r2
 800412e:	4606      	mov	r6, r0
 8004130:	4698      	mov	r8, r3
 8004132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004134:	f000 80b3 	beq.w	800429e <_printf_i+0x182>
 8004138:	d822      	bhi.n	8004180 <_printf_i+0x64>
 800413a:	2963      	cmp	r1, #99	; 0x63
 800413c:	d036      	beq.n	80041ac <_printf_i+0x90>
 800413e:	d80a      	bhi.n	8004156 <_printf_i+0x3a>
 8004140:	2900      	cmp	r1, #0
 8004142:	f000 80b9 	beq.w	80042b8 <_printf_i+0x19c>
 8004146:	2958      	cmp	r1, #88	; 0x58
 8004148:	f000 8083 	beq.w	8004252 <_printf_i+0x136>
 800414c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004150:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004154:	e032      	b.n	80041bc <_printf_i+0xa0>
 8004156:	2964      	cmp	r1, #100	; 0x64
 8004158:	d001      	beq.n	800415e <_printf_i+0x42>
 800415a:	2969      	cmp	r1, #105	; 0x69
 800415c:	d1f6      	bne.n	800414c <_printf_i+0x30>
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	0605      	lsls	r5, r0, #24
 8004164:	f103 0104 	add.w	r1, r3, #4
 8004168:	d52a      	bpl.n	80041c0 <_printf_i+0xa4>
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6011      	str	r1, [r2, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	da03      	bge.n	800417a <_printf_i+0x5e>
 8004172:	222d      	movs	r2, #45	; 0x2d
 8004174:	425b      	negs	r3, r3
 8004176:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800417a:	486f      	ldr	r0, [pc, #444]	; (8004338 <_printf_i+0x21c>)
 800417c:	220a      	movs	r2, #10
 800417e:	e039      	b.n	80041f4 <_printf_i+0xd8>
 8004180:	2973      	cmp	r1, #115	; 0x73
 8004182:	f000 809d 	beq.w	80042c0 <_printf_i+0x1a4>
 8004186:	d808      	bhi.n	800419a <_printf_i+0x7e>
 8004188:	296f      	cmp	r1, #111	; 0x6f
 800418a:	d020      	beq.n	80041ce <_printf_i+0xb2>
 800418c:	2970      	cmp	r1, #112	; 0x70
 800418e:	d1dd      	bne.n	800414c <_printf_i+0x30>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	f043 0320 	orr.w	r3, r3, #32
 8004196:	6023      	str	r3, [r4, #0]
 8004198:	e003      	b.n	80041a2 <_printf_i+0x86>
 800419a:	2975      	cmp	r1, #117	; 0x75
 800419c:	d017      	beq.n	80041ce <_printf_i+0xb2>
 800419e:	2978      	cmp	r1, #120	; 0x78
 80041a0:	d1d4      	bne.n	800414c <_printf_i+0x30>
 80041a2:	2378      	movs	r3, #120	; 0x78
 80041a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041a8:	4864      	ldr	r0, [pc, #400]	; (800433c <_printf_i+0x220>)
 80041aa:	e055      	b.n	8004258 <_printf_i+0x13c>
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	1d19      	adds	r1, r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6011      	str	r1, [r2, #0]
 80041b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041bc:	2301      	movs	r3, #1
 80041be:	e08c      	b.n	80042da <_printf_i+0x1be>
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6011      	str	r1, [r2, #0]
 80041c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041c8:	bf18      	it	ne
 80041ca:	b21b      	sxthne	r3, r3
 80041cc:	e7cf      	b.n	800416e <_printf_i+0x52>
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	6825      	ldr	r5, [r4, #0]
 80041d2:	1d18      	adds	r0, r3, #4
 80041d4:	6010      	str	r0, [r2, #0]
 80041d6:	0628      	lsls	r0, r5, #24
 80041d8:	d501      	bpl.n	80041de <_printf_i+0xc2>
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	e002      	b.n	80041e4 <_printf_i+0xc8>
 80041de:	0668      	lsls	r0, r5, #25
 80041e0:	d5fb      	bpl.n	80041da <_printf_i+0xbe>
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	4854      	ldr	r0, [pc, #336]	; (8004338 <_printf_i+0x21c>)
 80041e6:	296f      	cmp	r1, #111	; 0x6f
 80041e8:	bf14      	ite	ne
 80041ea:	220a      	movne	r2, #10
 80041ec:	2208      	moveq	r2, #8
 80041ee:	2100      	movs	r1, #0
 80041f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041f4:	6865      	ldr	r5, [r4, #4]
 80041f6:	60a5      	str	r5, [r4, #8]
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	f2c0 8095 	blt.w	8004328 <_printf_i+0x20c>
 80041fe:	6821      	ldr	r1, [r4, #0]
 8004200:	f021 0104 	bic.w	r1, r1, #4
 8004204:	6021      	str	r1, [r4, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d13d      	bne.n	8004286 <_printf_i+0x16a>
 800420a:	2d00      	cmp	r5, #0
 800420c:	f040 808e 	bne.w	800432c <_printf_i+0x210>
 8004210:	4665      	mov	r5, ip
 8004212:	2a08      	cmp	r2, #8
 8004214:	d10b      	bne.n	800422e <_printf_i+0x112>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	07db      	lsls	r3, r3, #31
 800421a:	d508      	bpl.n	800422e <_printf_i+0x112>
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	6862      	ldr	r2, [r4, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	bfde      	ittt	le
 8004224:	2330      	movle	r3, #48	; 0x30
 8004226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800422a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800422e:	ebac 0305 	sub.w	r3, ip, r5
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	f8cd 8000 	str.w	r8, [sp]
 8004238:	463b      	mov	r3, r7
 800423a:	aa03      	add	r2, sp, #12
 800423c:	4621      	mov	r1, r4
 800423e:	4630      	mov	r0, r6
 8004240:	f7ff fef6 	bl	8004030 <_printf_common>
 8004244:	3001      	adds	r0, #1
 8004246:	d14d      	bne.n	80042e4 <_printf_i+0x1c8>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	b005      	add	sp, #20
 800424e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004252:	4839      	ldr	r0, [pc, #228]	; (8004338 <_printf_i+0x21c>)
 8004254:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	1d1d      	adds	r5, r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6015      	str	r5, [r2, #0]
 8004262:	060a      	lsls	r2, r1, #24
 8004264:	d50b      	bpl.n	800427e <_printf_i+0x162>
 8004266:	07ca      	lsls	r2, r1, #31
 8004268:	bf44      	itt	mi
 800426a:	f041 0120 	orrmi.w	r1, r1, #32
 800426e:	6021      	strmi	r1, [r4, #0]
 8004270:	b91b      	cbnz	r3, 800427a <_printf_i+0x15e>
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	f022 0220 	bic.w	r2, r2, #32
 8004278:	6022      	str	r2, [r4, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	e7b7      	b.n	80041ee <_printf_i+0xd2>
 800427e:	064d      	lsls	r5, r1, #25
 8004280:	bf48      	it	mi
 8004282:	b29b      	uxthmi	r3, r3
 8004284:	e7ef      	b.n	8004266 <_printf_i+0x14a>
 8004286:	4665      	mov	r5, ip
 8004288:	fbb3 f1f2 	udiv	r1, r3, r2
 800428c:	fb02 3311 	mls	r3, r2, r1, r3
 8004290:	5cc3      	ldrb	r3, [r0, r3]
 8004292:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004296:	460b      	mov	r3, r1
 8004298:	2900      	cmp	r1, #0
 800429a:	d1f5      	bne.n	8004288 <_printf_i+0x16c>
 800429c:	e7b9      	b.n	8004212 <_printf_i+0xf6>
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	6825      	ldr	r5, [r4, #0]
 80042a2:	6961      	ldr	r1, [r4, #20]
 80042a4:	1d18      	adds	r0, r3, #4
 80042a6:	6010      	str	r0, [r2, #0]
 80042a8:	0628      	lsls	r0, r5, #24
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	d501      	bpl.n	80042b2 <_printf_i+0x196>
 80042ae:	6019      	str	r1, [r3, #0]
 80042b0:	e002      	b.n	80042b8 <_printf_i+0x19c>
 80042b2:	066a      	lsls	r2, r5, #25
 80042b4:	d5fb      	bpl.n	80042ae <_printf_i+0x192>
 80042b6:	8019      	strh	r1, [r3, #0]
 80042b8:	2300      	movs	r3, #0
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	4665      	mov	r5, ip
 80042be:	e7b9      	b.n	8004234 <_printf_i+0x118>
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	1d19      	adds	r1, r3, #4
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	681d      	ldr	r5, [r3, #0]
 80042c8:	6862      	ldr	r2, [r4, #4]
 80042ca:	2100      	movs	r1, #0
 80042cc:	4628      	mov	r0, r5
 80042ce:	f7fb ff87 	bl	80001e0 <memchr>
 80042d2:	b108      	cbz	r0, 80042d8 <_printf_i+0x1bc>
 80042d4:	1b40      	subs	r0, r0, r5
 80042d6:	6060      	str	r0, [r4, #4]
 80042d8:	6863      	ldr	r3, [r4, #4]
 80042da:	6123      	str	r3, [r4, #16]
 80042dc:	2300      	movs	r3, #0
 80042de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e2:	e7a7      	b.n	8004234 <_printf_i+0x118>
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	462a      	mov	r2, r5
 80042e8:	4639      	mov	r1, r7
 80042ea:	4630      	mov	r0, r6
 80042ec:	47c0      	blx	r8
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0aa      	beq.n	8004248 <_printf_i+0x12c>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	079b      	lsls	r3, r3, #30
 80042f6:	d413      	bmi.n	8004320 <_printf_i+0x204>
 80042f8:	68e0      	ldr	r0, [r4, #12]
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	4298      	cmp	r0, r3
 80042fe:	bfb8      	it	lt
 8004300:	4618      	movlt	r0, r3
 8004302:	e7a3      	b.n	800424c <_printf_i+0x130>
 8004304:	2301      	movs	r3, #1
 8004306:	464a      	mov	r2, r9
 8004308:	4639      	mov	r1, r7
 800430a:	4630      	mov	r0, r6
 800430c:	47c0      	blx	r8
 800430e:	3001      	adds	r0, #1
 8004310:	d09a      	beq.n	8004248 <_printf_i+0x12c>
 8004312:	3501      	adds	r5, #1
 8004314:	68e3      	ldr	r3, [r4, #12]
 8004316:	9a03      	ldr	r2, [sp, #12]
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	42ab      	cmp	r3, r5
 800431c:	dcf2      	bgt.n	8004304 <_printf_i+0x1e8>
 800431e:	e7eb      	b.n	80042f8 <_printf_i+0x1dc>
 8004320:	2500      	movs	r5, #0
 8004322:	f104 0919 	add.w	r9, r4, #25
 8004326:	e7f5      	b.n	8004314 <_printf_i+0x1f8>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ac      	bne.n	8004286 <_printf_i+0x16a>
 800432c:	7803      	ldrb	r3, [r0, #0]
 800432e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004332:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004336:	e76c      	b.n	8004212 <_printf_i+0xf6>
 8004338:	08004609 	.word	0x08004609
 800433c:	0800461a 	.word	0x0800461a

08004340 <memcpy>:
 8004340:	b510      	push	{r4, lr}
 8004342:	1e43      	subs	r3, r0, #1
 8004344:	440a      	add	r2, r1
 8004346:	4291      	cmp	r1, r2
 8004348:	d100      	bne.n	800434c <memcpy+0xc>
 800434a:	bd10      	pop	{r4, pc}
 800434c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004354:	e7f7      	b.n	8004346 <memcpy+0x6>

08004356 <memmove>:
 8004356:	4288      	cmp	r0, r1
 8004358:	b510      	push	{r4, lr}
 800435a:	eb01 0302 	add.w	r3, r1, r2
 800435e:	d807      	bhi.n	8004370 <memmove+0x1a>
 8004360:	1e42      	subs	r2, r0, #1
 8004362:	4299      	cmp	r1, r3
 8004364:	d00a      	beq.n	800437c <memmove+0x26>
 8004366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800436a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800436e:	e7f8      	b.n	8004362 <memmove+0xc>
 8004370:	4283      	cmp	r3, r0
 8004372:	d9f5      	bls.n	8004360 <memmove+0xa>
 8004374:	1881      	adds	r1, r0, r2
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	42d3      	cmn	r3, r2
 800437a:	d100      	bne.n	800437e <memmove+0x28>
 800437c:	bd10      	pop	{r4, pc}
 800437e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004382:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004386:	e7f7      	b.n	8004378 <memmove+0x22>

08004388 <_free_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	2900      	cmp	r1, #0
 800438e:	d045      	beq.n	800441c <_free_r+0x94>
 8004390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004394:	1f0c      	subs	r4, r1, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	bfb8      	it	lt
 800439a:	18e4      	addlt	r4, r4, r3
 800439c:	f000 f8d2 	bl	8004544 <__malloc_lock>
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <_free_r+0x98>)
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	4610      	mov	r0, r2
 80043a6:	b933      	cbnz	r3, 80043b6 <_free_r+0x2e>
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	6014      	str	r4, [r2, #0]
 80043ac:	4628      	mov	r0, r5
 80043ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043b2:	f000 b8c8 	b.w	8004546 <__malloc_unlock>
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	d90c      	bls.n	80043d4 <_free_r+0x4c>
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	1862      	adds	r2, r4, r1
 80043be:	4293      	cmp	r3, r2
 80043c0:	bf04      	itt	eq
 80043c2:	681a      	ldreq	r2, [r3, #0]
 80043c4:	685b      	ldreq	r3, [r3, #4]
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	bf04      	itt	eq
 80043ca:	1852      	addeq	r2, r2, r1
 80043cc:	6022      	streq	r2, [r4, #0]
 80043ce:	6004      	str	r4, [r0, #0]
 80043d0:	e7ec      	b.n	80043ac <_free_r+0x24>
 80043d2:	4613      	mov	r3, r2
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	b10a      	cbz	r2, 80043dc <_free_r+0x54>
 80043d8:	42a2      	cmp	r2, r4
 80043da:	d9fa      	bls.n	80043d2 <_free_r+0x4a>
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	1858      	adds	r0, r3, r1
 80043e0:	42a0      	cmp	r0, r4
 80043e2:	d10b      	bne.n	80043fc <_free_r+0x74>
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	4401      	add	r1, r0
 80043e8:	1858      	adds	r0, r3, r1
 80043ea:	4282      	cmp	r2, r0
 80043ec:	6019      	str	r1, [r3, #0]
 80043ee:	d1dd      	bne.n	80043ac <_free_r+0x24>
 80043f0:	6810      	ldr	r0, [r2, #0]
 80043f2:	6852      	ldr	r2, [r2, #4]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	4401      	add	r1, r0
 80043f8:	6019      	str	r1, [r3, #0]
 80043fa:	e7d7      	b.n	80043ac <_free_r+0x24>
 80043fc:	d902      	bls.n	8004404 <_free_r+0x7c>
 80043fe:	230c      	movs	r3, #12
 8004400:	602b      	str	r3, [r5, #0]
 8004402:	e7d3      	b.n	80043ac <_free_r+0x24>
 8004404:	6820      	ldr	r0, [r4, #0]
 8004406:	1821      	adds	r1, r4, r0
 8004408:	428a      	cmp	r2, r1
 800440a:	bf04      	itt	eq
 800440c:	6811      	ldreq	r1, [r2, #0]
 800440e:	6852      	ldreq	r2, [r2, #4]
 8004410:	6062      	str	r2, [r4, #4]
 8004412:	bf04      	itt	eq
 8004414:	1809      	addeq	r1, r1, r0
 8004416:	6021      	streq	r1, [r4, #0]
 8004418:	605c      	str	r4, [r3, #4]
 800441a:	e7c7      	b.n	80043ac <_free_r+0x24>
 800441c:	bd38      	pop	{r3, r4, r5, pc}
 800441e:	bf00      	nop
 8004420:	200000d0 	.word	0x200000d0

08004424 <_malloc_r>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	1ccd      	adds	r5, r1, #3
 8004428:	f025 0503 	bic.w	r5, r5, #3
 800442c:	3508      	adds	r5, #8
 800442e:	2d0c      	cmp	r5, #12
 8004430:	bf38      	it	cc
 8004432:	250c      	movcc	r5, #12
 8004434:	2d00      	cmp	r5, #0
 8004436:	4606      	mov	r6, r0
 8004438:	db01      	blt.n	800443e <_malloc_r+0x1a>
 800443a:	42a9      	cmp	r1, r5
 800443c:	d903      	bls.n	8004446 <_malloc_r+0x22>
 800443e:	230c      	movs	r3, #12
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	2000      	movs	r0, #0
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	f000 f87d 	bl	8004544 <__malloc_lock>
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <_malloc_r+0xac>)
 800444c:	6814      	ldr	r4, [r2, #0]
 800444e:	4621      	mov	r1, r4
 8004450:	b991      	cbnz	r1, 8004478 <_malloc_r+0x54>
 8004452:	4c20      	ldr	r4, [pc, #128]	; (80044d4 <_malloc_r+0xb0>)
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	b91b      	cbnz	r3, 8004460 <_malloc_r+0x3c>
 8004458:	4630      	mov	r0, r6
 800445a:	f000 f863 	bl	8004524 <_sbrk_r>
 800445e:	6020      	str	r0, [r4, #0]
 8004460:	4629      	mov	r1, r5
 8004462:	4630      	mov	r0, r6
 8004464:	f000 f85e 	bl	8004524 <_sbrk_r>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d124      	bne.n	80044b6 <_malloc_r+0x92>
 800446c:	230c      	movs	r3, #12
 800446e:	6033      	str	r3, [r6, #0]
 8004470:	4630      	mov	r0, r6
 8004472:	f000 f868 	bl	8004546 <__malloc_unlock>
 8004476:	e7e4      	b.n	8004442 <_malloc_r+0x1e>
 8004478:	680b      	ldr	r3, [r1, #0]
 800447a:	1b5b      	subs	r3, r3, r5
 800447c:	d418      	bmi.n	80044b0 <_malloc_r+0x8c>
 800447e:	2b0b      	cmp	r3, #11
 8004480:	d90f      	bls.n	80044a2 <_malloc_r+0x7e>
 8004482:	600b      	str	r3, [r1, #0]
 8004484:	50cd      	str	r5, [r1, r3]
 8004486:	18cc      	adds	r4, r1, r3
 8004488:	4630      	mov	r0, r6
 800448a:	f000 f85c 	bl	8004546 <__malloc_unlock>
 800448e:	f104 000b 	add.w	r0, r4, #11
 8004492:	1d23      	adds	r3, r4, #4
 8004494:	f020 0007 	bic.w	r0, r0, #7
 8004498:	1ac3      	subs	r3, r0, r3
 800449a:	d0d3      	beq.n	8004444 <_malloc_r+0x20>
 800449c:	425a      	negs	r2, r3
 800449e:	50e2      	str	r2, [r4, r3]
 80044a0:	e7d0      	b.n	8004444 <_malloc_r+0x20>
 80044a2:	428c      	cmp	r4, r1
 80044a4:	684b      	ldr	r3, [r1, #4]
 80044a6:	bf16      	itet	ne
 80044a8:	6063      	strne	r3, [r4, #4]
 80044aa:	6013      	streq	r3, [r2, #0]
 80044ac:	460c      	movne	r4, r1
 80044ae:	e7eb      	b.n	8004488 <_malloc_r+0x64>
 80044b0:	460c      	mov	r4, r1
 80044b2:	6849      	ldr	r1, [r1, #4]
 80044b4:	e7cc      	b.n	8004450 <_malloc_r+0x2c>
 80044b6:	1cc4      	adds	r4, r0, #3
 80044b8:	f024 0403 	bic.w	r4, r4, #3
 80044bc:	42a0      	cmp	r0, r4
 80044be:	d005      	beq.n	80044cc <_malloc_r+0xa8>
 80044c0:	1a21      	subs	r1, r4, r0
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 f82e 	bl	8004524 <_sbrk_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	d0cf      	beq.n	800446c <_malloc_r+0x48>
 80044cc:	6025      	str	r5, [r4, #0]
 80044ce:	e7db      	b.n	8004488 <_malloc_r+0x64>
 80044d0:	200000d0 	.word	0x200000d0
 80044d4:	200000d4 	.word	0x200000d4

080044d8 <_realloc_r>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	4607      	mov	r7, r0
 80044dc:	4614      	mov	r4, r2
 80044de:	460e      	mov	r6, r1
 80044e0:	b921      	cbnz	r1, 80044ec <_realloc_r+0x14>
 80044e2:	4611      	mov	r1, r2
 80044e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044e8:	f7ff bf9c 	b.w	8004424 <_malloc_r>
 80044ec:	b922      	cbnz	r2, 80044f8 <_realloc_r+0x20>
 80044ee:	f7ff ff4b 	bl	8004388 <_free_r>
 80044f2:	4625      	mov	r5, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f8:	f000 f826 	bl	8004548 <_malloc_usable_size_r>
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d20f      	bcs.n	8004520 <_realloc_r+0x48>
 8004500:	4621      	mov	r1, r4
 8004502:	4638      	mov	r0, r7
 8004504:	f7ff ff8e 	bl	8004424 <_malloc_r>
 8004508:	4605      	mov	r5, r0
 800450a:	2800      	cmp	r0, #0
 800450c:	d0f2      	beq.n	80044f4 <_realloc_r+0x1c>
 800450e:	4631      	mov	r1, r6
 8004510:	4622      	mov	r2, r4
 8004512:	f7ff ff15 	bl	8004340 <memcpy>
 8004516:	4631      	mov	r1, r6
 8004518:	4638      	mov	r0, r7
 800451a:	f7ff ff35 	bl	8004388 <_free_r>
 800451e:	e7e9      	b.n	80044f4 <_realloc_r+0x1c>
 8004520:	4635      	mov	r5, r6
 8004522:	e7e7      	b.n	80044f4 <_realloc_r+0x1c>

08004524 <_sbrk_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4c06      	ldr	r4, [pc, #24]	; (8004540 <_sbrk_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4605      	mov	r5, r0
 800452c:	4608      	mov	r0, r1
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	f7fc fd20 	bl	8000f74 <_sbrk>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_sbrk_r+0x1a>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	b103      	cbz	r3, 800453e <_sbrk_r+0x1a>
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	200001d8 	.word	0x200001d8

08004544 <__malloc_lock>:
 8004544:	4770      	bx	lr

08004546 <__malloc_unlock>:
 8004546:	4770      	bx	lr

08004548 <_malloc_usable_size_r>:
 8004548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800454c:	1f18      	subs	r0, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	bfbc      	itt	lt
 8004552:	580b      	ldrlt	r3, [r1, r0]
 8004554:	18c0      	addlt	r0, r0, r3
 8004556:	4770      	bx	lr

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
