
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005810  08005810  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005818  08005818  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08005820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000ec  0800590c  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800590c  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001118b  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028b7  00000000  00000000  000312a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017daf  00000000  00000000  00035490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7b4  00000000  00000000  0004d23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d777  00000000  00000000  0005a9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e816a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  000e81e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056ec 	.word	0x080056ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	080056ec 	.word	0x080056ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <rtc_set_time>:
char alarm_on_msg[20] = "Wylacz alarm!\n\r";
char alarm_off_msg[20] = "Alarm wylaczony!\n\r";
char alarm_set_msg[20] = "Alarm ustawiony!\n\r";

void rtc_set_time (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	  /**Initialize RTC and set the Time and Date
	  */

	get_Time();
 8000586:	f001 f897 	bl	80016b8 <get_Time>

	uint8_t hour = time.hour;
 800058a:	4b61      	ldr	r3, [pc, #388]	; (8000710 <rtc_set_time+0x190>)
 800058c:	789b      	ldrb	r3, [r3, #2]
 800058e:	77fb      	strb	r3, [r7, #31]
	uint8_t min = time.minutes;
 8000590:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <rtc_set_time+0x190>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	77bb      	strb	r3, [r7, #30]
	uint8_t sec = time.seconds;
 8000596:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <rtc_set_time+0x190>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	777b      	strb	r3, [r7, #29]

	uint8_t day = time.dayofmonth;
 800059c:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <rtc_set_time+0x190>)
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	773b      	strb	r3, [r7, #28]
	uint8_t year = time.year;
 80005a2:	4b5b      	ldr	r3, [pc, #364]	; (8000710 <rtc_set_time+0x190>)
 80005a4:	799b      	ldrb	r3, [r3, #6]
 80005a6:	76fb      	strb	r3, [r7, #27]

	// czas w RTC będzie taki sam jak w naszym DS3231
	sTime.Hours = decToBcd(hour);
 80005a8:	7ffb      	ldrb	r3, [r7, #31]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f846 	bl	800163c <decToBcd>
 80005b0:	4603      	mov	r3, r0
 80005b2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = decToBcd(min);
 80005b4:	7fbb      	ldrb	r3, [r7, #30]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f840 	bl	800163c <decToBcd>
 80005bc:	4603      	mov	r3, r0
 80005be:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = decToBcd(sec);
 80005c0:	7f7b      	ldrb	r3, [r7, #29]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f83a 	bl	800163c <decToBcd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	71bb      	strb	r3, [r7, #6]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	484e      	ldr	r0, [pc, #312]	; (8000714 <rtc_set_time+0x194>)
 80005dc:	f003 fa3b 	bl	8003a56 <HAL_RTC_SetTime>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <rtc_set_time+0x6a>
	{
	  Error_Handler();
 80005e6:	f000 febb 	bl	8001360 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <rtc_set_time+0x190>)
 80005ec:	78db      	ldrb	r3, [r3, #3]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d826      	bhi.n	8000642 <rtc_set_time+0xc2>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <rtc_set_time+0x7c>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000619 	.word	0x08000619
 8000600:	0800061f 	.word	0x0800061f
 8000604:	08000625 	.word	0x08000625
 8000608:	0800062b 	.word	0x0800062b
 800060c:	08000631 	.word	0x08000631
 8000610:	08000637 	.word	0x08000637
 8000614:	0800063d 	.word	0x0800063d

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000618:	2301      	movs	r3, #1
 800061a:	703b      	strb	r3, [r7, #0]
		break;
 800061c:	e011      	b.n	8000642 <rtc_set_time+0xc2>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800061e:	2302      	movs	r3, #2
 8000620:	703b      	strb	r3, [r7, #0]
		break;
 8000622:	e00e      	b.n	8000642 <rtc_set_time+0xc2>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000624:	2303      	movs	r3, #3
 8000626:	703b      	strb	r3, [r7, #0]
		break;
 8000628:	e00b      	b.n	8000642 <rtc_set_time+0xc2>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800062a:	2304      	movs	r3, #4
 800062c:	703b      	strb	r3, [r7, #0]
		break;
 800062e:	e008      	b.n	8000642 <rtc_set_time+0xc2>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000630:	2305      	movs	r3, #5
 8000632:	703b      	strb	r3, [r7, #0]
		break;
 8000634:	e005      	b.n	8000642 <rtc_set_time+0xc2>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000636:	2306      	movs	r3, #6
 8000638:	703b      	strb	r3, [r7, #0]
		break;
 800063a:	e002      	b.n	8000642 <rtc_set_time+0xc2>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800063c:	2307      	movs	r3, #7
 800063e:	703b      	strb	r3, [r7, #0]
		break;
 8000640:	bf00      	nop

	}


	switch( (int) time.month) {
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <rtc_set_time+0x190>)
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	3b01      	subs	r3, #1
 8000648:	2b0b      	cmp	r3, #11
 800064a:	d83f      	bhi.n	80006cc <rtc_set_time+0x14c>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <rtc_set_time+0xd4>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000685 	.word	0x08000685
 8000658:	0800068b 	.word	0x0800068b
 800065c:	08000691 	.word	0x08000691
 8000660:	08000697 	.word	0x08000697
 8000664:	0800069d 	.word	0x0800069d
 8000668:	080006a3 	.word	0x080006a3
 800066c:	080006a9 	.word	0x080006a9
 8000670:	080006af 	.word	0x080006af
 8000674:	080006b5 	.word	0x080006b5
 8000678:	080006bb 	.word	0x080006bb
 800067c:	080006c1 	.word	0x080006c1
 8000680:	080006c7 	.word	0x080006c7

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 8000684:	2301      	movs	r3, #1
 8000686:	707b      	strb	r3, [r7, #1]
		  break;
 8000688:	e020      	b.n	80006cc <rtc_set_time+0x14c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 800068a:	2302      	movs	r3, #2
 800068c:	707b      	strb	r3, [r7, #1]
		  break;
 800068e:	e01d      	b.n	80006cc <rtc_set_time+0x14c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 8000690:	2303      	movs	r3, #3
 8000692:	707b      	strb	r3, [r7, #1]
		  break;
 8000694:	e01a      	b.n	80006cc <rtc_set_time+0x14c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 8000696:	2304      	movs	r3, #4
 8000698:	707b      	strb	r3, [r7, #1]
		  break;
 800069a:	e017      	b.n	80006cc <rtc_set_time+0x14c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 800069c:	2305      	movs	r3, #5
 800069e:	707b      	strb	r3, [r7, #1]
		  break;
 80006a0:	e014      	b.n	80006cc <rtc_set_time+0x14c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80006a2:	2306      	movs	r3, #6
 80006a4:	707b      	strb	r3, [r7, #1]
		  break;
 80006a6:	e011      	b.n	80006cc <rtc_set_time+0x14c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80006a8:	2307      	movs	r3, #7
 80006aa:	707b      	strb	r3, [r7, #1]
		  break;
 80006ac:	e00e      	b.n	80006cc <rtc_set_time+0x14c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80006ae:	2308      	movs	r3, #8
 80006b0:	707b      	strb	r3, [r7, #1]
		  break;
 80006b2:	e00b      	b.n	80006cc <rtc_set_time+0x14c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 80006b4:	2309      	movs	r3, #9
 80006b6:	707b      	strb	r3, [r7, #1]
		  break;
 80006b8:	e008      	b.n	80006cc <rtc_set_time+0x14c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 80006ba:	2310      	movs	r3, #16
 80006bc:	707b      	strb	r3, [r7, #1]
		  break;
 80006be:	e005      	b.n	80006cc <rtc_set_time+0x14c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 80006c0:	2311      	movs	r3, #17
 80006c2:	707b      	strb	r3, [r7, #1]
		  break;
 80006c4:	e002      	b.n	80006cc <rtc_set_time+0x14c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 80006c6:	2312      	movs	r3, #18
 80006c8:	707b      	strb	r3, [r7, #1]
		  break;
 80006ca:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 80006cc:	7f3b      	ldrb	r3, [r7, #28]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 ffb4 	bl	800163c <decToBcd>
 80006d4:	4603      	mov	r3, r0
 80006d6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = decToBcd(year);
 80006d8:	7efb      	ldrb	r3, [r7, #27]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 ffae 	bl	800163c <decToBcd>
 80006e0:	4603      	mov	r3, r0
 80006e2:	70fb      	strb	r3, [r7, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <rtc_set_time+0x194>)
 80006ec:	f003 fa70 	bl	8003bd0 <HAL_RTC_SetDate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <rtc_set_time+0x17a>
	{
		Error_Handler();
 80006f6:	f000 fe33 	bl	8001360 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80006fa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80006fe:	2101      	movs	r1, #1
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <rtc_set_time+0x194>)
 8000702:	f003 fcfd 	bl	8004100 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000124 	.word	0x20000124
 8000714:	200001e8 	.word	0x200001e8

08000718 <activate_alarm>:

void activate_alarm() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	if(uart_rx_data == 'a') {
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <activate_alarm+0x50>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b61      	cmp	r3, #97	; 0x61
 8000722:	d102      	bne.n	800072a <activate_alarm+0x12>
		alarm_activated_flag = 1;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <activate_alarm+0x54>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <activate_alarm+0x54>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d013      	beq.n	800075a <activate_alarm+0x42>

		new_alarm_time[alarm_counter] = uart_rx_data;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <activate_alarm+0x58>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <activate_alarm+0x50>)
 800073a:	7819      	ldrb	r1, [r3, #0]
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <activate_alarm+0x5c>)
 800073e:	5499      	strb	r1, [r3, r2]

		++alarm_counter;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <activate_alarm+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <activate_alarm+0x58>)
 800074a:	701a      	strb	r2, [r3, #0]

		if(alarm_counter == 5) {
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <activate_alarm+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b05      	cmp	r3, #5
 8000752:	d102      	bne.n	800075a <activate_alarm+0x42>
			alarm_set_flag = 1;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <activate_alarm+0x60>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
		}

	}

	// Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	4902      	ldr	r1, [pc, #8]	; (8000768 <activate_alarm+0x50>)
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <activate_alarm+0x64>)
 8000760:	f003 fd84 	bl	800426c <HAL_UART_Receive_IT>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000012c 	.word	0x2000012c
 800076c:	20000118 	.word	0x20000118
 8000770:	20000108 	.word	0x20000108
 8000774:	2000011c 	.word	0x2000011c
 8000778:	2000012b 	.word	0x2000012b
 800077c:	20000208 	.word	0x20000208

08000780 <rtc_set_alarm>:

// Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
// Jako parametry przyjmuje ilość godzin, minut, sekund oraz dni, pozostałych do włączenia alarmu
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08f      	sub	sp, #60	; 0x3c
 8000784:	af00      	add	r7, sp, #0
 8000786:	4604      	mov	r4, r0
 8000788:	4608      	mov	r0, r1
 800078a:	4611      	mov	r1, r2
 800078c:	461a      	mov	r2, r3
 800078e:	4623      	mov	r3, r4
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4603      	mov	r3, r0
 8000794:	71bb      	strb	r3, [r7, #6]
 8000796:	460b      	mov	r3, r1
 8000798:	717b      	strb	r3, [r7, #5]
 800079a:	4613      	mov	r3, r2
 800079c:	713b      	strb	r3, [r7, #4]

	get_Time();
 800079e:	f000 ff8b 	bl	80016b8 <get_Time>

	uint8_t alarm_day = time.dayofmonth + day;
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <rtc_set_alarm+0xd8>)
 80007a4:	791a      	ldrb	r2, [r3, #4]
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4413      	add	r3, r2
 80007aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t alarm_hour = time.hour + hour;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <rtc_set_alarm+0xd8>)
 80007b0:	789a      	ldrb	r2, [r3, #2]
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	4413      	add	r3, r2
 80007b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t alarm_min = time.minutes + min;
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <rtc_set_alarm+0xd8>)
 80007bc:	785a      	ldrb	r2, [r3, #1]
 80007be:	797b      	ldrb	r3, [r7, #5]
 80007c0:	4413      	add	r3, r2
 80007c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// włączamy alarm 2 sekundy wcześniej niż zaplanowany, ponieważ transmisja uartem trwa 2s
	uint8_t alarm_sec = time.seconds + sec - 2;
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <rtc_set_alarm+0xd8>)
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	793b      	ldrb	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3b02      	subs	r3, #2
 80007d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
	sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 80007d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 ff2e 	bl	800163c <decToBcd>
 80007e0:	4603      	mov	r3, r0
 80007e2:	733b      	strb	r3, [r7, #12]
	sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 80007e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff27 	bl	800163c <decToBcd>
 80007ee:	4603      	mov	r3, r0
 80007f0:	737b      	strb	r3, [r7, #13]
	sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 80007f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 ff20 	bl	800163c <decToBcd>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73bb      	strb	r3, [r7, #14]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 8000818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800081c:	4618      	mov	r0, r3
 800081e:	f000 ff0d 	bl	800163c <decToBcd>
 8000822:	4603      	mov	r3, r0
 8000824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 8000828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <rtc_set_alarm+0xdc>)
 8000838:	f003 fa72 	bl	8003d20 <HAL_RTC_SetAlarm_IT>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <rtc_set_alarm+0xc6>
	{
		Error_Handler();
 8000842:	f000 fd8d 	bl	8001360 <Error_Handler>
	}

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_set_msg, 20);
 8000846:	2214      	movs	r2, #20
 8000848:	4905      	ldr	r1, [pc, #20]	; (8000860 <rtc_set_alarm+0xe0>)
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <rtc_set_alarm+0xe4>)
 800084c:	f003 fcc9 	bl	80041e2 <HAL_UART_Transmit_IT>
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 8000850:	bf00      	nop
 8000852:	373c      	adds	r7, #60	; 0x3c
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	20000124 	.word	0x20000124
 800085c:	200001e8 	.word	0x200001e8
 8000860:	20000028 	.word	0x20000028
 8000864:	20000208 	.word	0x20000208

08000868 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000121 	.word	0x20000121

08000888 <to_do_on_alarm>:

void to_do_on_alarm(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	lcd_clear();
 800088c:	f000 fa0c 	bl	8000ca8 <lcd_clear>
	//lcd_back_light_on();

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <to_do_on_alarm+0x30>)
 8000898:	f001 fb4c 	bl	8001f34 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_on_msg, 20);
 800089c:	2214      	movs	r2, #20
 800089e:	4907      	ldr	r1, [pc, #28]	; (80008bc <to_do_on_alarm+0x34>)
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <to_do_on_alarm+0x38>)
 80008a2:	f003 fc9e 	bl	80041e2 <HAL_UART_Transmit_IT>
	lcd_send_alarm_on_msg();
 80008a6:	f000 fb11 	bl	8000ecc <lcd_send_alarm_on_msg>

	HAL_Delay(1000);
 80008aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ae:	f001 f869 	bl	8001984 <HAL_Delay>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000208 	.word	0x20000208

080008c4 <to_do_on_alarm_off>:

void to_do_on_alarm_off(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

	lcd_clear();
 80008c8:	f000 f9ee 	bl	8000ca8 <lcd_clear>
	//lcd_back_light_on();

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)alarm_off_msg, 20);
 80008cc:	2214      	movs	r2, #20
 80008ce:	4907      	ldr	r1, [pc, #28]	; (80008ec <to_do_on_alarm_off+0x28>)
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <to_do_on_alarm_off+0x2c>)
 80008d2:	f003 fc86 	bl	80041e2 <HAL_UART_Transmit_IT>
	lcd_send_alarm_off_msg();
 80008d6:	f000 fb11 	bl	8000efc <lcd_send_alarm_off_msg>
	HAL_Delay(3000);
 80008da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008de:	f001 f851 	bl	8001984 <HAL_Delay>

	lcd_clear();
 80008e2:	f000 f9e1 	bl	8000ca8 <lcd_clear>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000014 	.word	0x20000014
 80008f0:	20000208 	.word	0x20000208

080008f4 <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]

	// Sprawdzamy czy przerwanie wywołał niebieski przycisk
	if(GPIO_Pin == Blue_Button_Pin) {
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000904:	d108      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <HAL_GPIO_EXTI_Callback+0x2c>)
 800090e:	f001 fb11 	bl	8001f34 <HAL_GPIO_WritePin>
		alarm_flag = 0;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_GPIO_EXTI_Callback+0x30>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	}
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020000 	.word	0x40020000
 8000924:	20000121 	.word	0x20000121

08000928 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xc8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_GPIO_Init+0xc8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_GPIO_Init+0xc8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_GPIO_Init+0xcc>)
 800099a:	f001 facb 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_GPIO_Init+0xd0>)
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0xd4>)
 80009b4:	f001 f93c 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin;
 80009b8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80009bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_GPIO_Init+0xcc>)
 80009d2:	f001 f92d 	bl	8001c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f001 f8cf 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f001 f8e8 	bl	8001bb6 <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	10210000 	.word	0x10210000
 80009fc:	40020800 	.word	0x40020800

08000a00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x58>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a3e:	f001 faab 	bl	8001f98 <HAL_I2C_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 fc8a 	bl	8001360 <Error_Handler>
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000130 	.word	0x20000130
 8000a54:	40005400 	.word	0x40005400
 8000a58:	000186a0 	.word	0x000186a0

08000a5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C2_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C2_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a9a:	f001 fa7d 	bl	8001f98 <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 fc5c 	bl	8001360 <Error_Handler>
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000184 	.word	0x20000184
 8000ab0:	40005800 	.word	0x40005800
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <HAL_I2C_MspInit+0x10c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12d      	bne.n	8000b36 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <HAL_I2C_MspInit+0x114>)
 8000b14:	f001 f88c 	bl	8001c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b34:	e041      	b.n	8000bba <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <HAL_I2C_MspInit+0x118>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d13c      	bne.n	8000bba <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4814      	ldr	r0, [pc, #80]	; (8000bcc <HAL_I2C_MspInit+0x114>)
 8000b7a:	f001 f859 	bl	8001c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b82:	2312      	movs	r3, #18
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000b8e:	2309      	movs	r3, #9
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x114>)
 8000b9a:	f001 f849 	bl	8001c30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_I2C_MspInit+0x110>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40005800 	.word	0x40005800

08000bd4 <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	/* sekwencja inicjalizująca wyświetlacz, z dokumentacji */
	HAL_Delay(40);
 8000bd8:	2028      	movs	r0, #40	; 0x28
 8000bda:	f000 fed3 	bl	8001984 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000bde:	2030      	movs	r0, #48	; 0x30
 8000be0:	f000 f8b8 	bl	8000d54 <lcd_write_command>
	HAL_Delay(5);
 8000be4:	2005      	movs	r0, #5
 8000be6:	f000 fecd 	bl	8001984 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000bea:	2030      	movs	r0, #48	; 0x30
 8000bec:	f000 f8b2 	bl	8000d54 <lcd_write_command>
	HAL_Delay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fec7 	bl	8001984 <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8000bf6:	2030      	movs	r0, #48	; 0x30
 8000bf8:	f000 f8ac 	bl	8000d54 <lcd_write_command>

	/* ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f000 f8a9 	bl	8000d54 <lcd_write_command>

	/* włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f000 f8a6 	bl	8000d54 <lcd_write_command>

	HAL_Delay(5);
 8000c08:	2005      	movs	r0, #5
 8000c0a:	f000 febb 	bl	8001984 <HAL_Delay>

	lcd_generate_own_chars();
 8000c0e:	f000 f98d 	bl	8000f2c <lcd_generate_own_chars>

	/* wyczyszczenie wyświetlacza */
	lcd_clear();
 8000c12:	f000 f849 	bl	8000ca8 <lcd_clear>

	/* włączenie podświetlenia */
	//lcd_back_light_off();
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <lcd_time_and_date_init>:

void lcd_time_and_date_init() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af02      	add	r7, sp, #8

	get_Time();
 8000c22:	f000 fd49 	bl	80016b8 <get_Time>

	// wyświetlanie godziny na LCD
	lcd_first_line();
 8000c26:	f000 f880 	bl	8000d2a <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4916      	ldr	r1, [pc, #88]	; (8000c98 <lcd_time_and_date_init+0x7c>)
 8000c40:	4816      	ldr	r0, [pc, #88]	; (8000c9c <lcd_time_and_date_init+0x80>)
 8000c42:	f004 f94d 	bl	8004ee0 <siprintf>
	lcd_send_string(time_date_buffer);
 8000c46:	4815      	ldr	r0, [pc, #84]	; (8000c9c <lcd_time_and_date_init+0x80>)
 8000c48:	f000 f928 	bl	8000e9c <lcd_send_string>

	//wyświetlenie poziomu baterii
	battery_level = 100;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <lcd_time_and_date_init+0x84>)
 8000c4e:	2264      	movs	r2, #100	; 0x64
 8000c50:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <lcd_time_and_date_init+0x84>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fa2c 	bl	80010b4 <lcd_show_battery_level>

	// wyświetlanie daty na LCD
	lcd_second_line();
 8000c5c:	f000 f86f 	bl	8000d3e <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c6e:	799b      	ldrb	r3, [r3, #6]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	460b      	mov	r3, r1
 8000c74:	490b      	ldr	r1, [pc, #44]	; (8000ca4 <lcd_time_and_date_init+0x88>)
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <lcd_time_and_date_init+0x80>)
 8000c78:	f004 f932 	bl	8004ee0 <siprintf>
	lcd_send_string(time_date_buffer);
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <lcd_time_and_date_init+0x80>)
 8000c7e:	f000 f90d 	bl	8000e9c <lcd_send_string>

	// wyświetlanie nazwy dnia tygodnia na LCD
	lcd_show_week_day_name(time.dayofweek);
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <lcd_time_and_date_init+0x78>)
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f9c8 	bl	800101c <lcd_show_week_day_name>
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000124 	.word	0x20000124
 8000c98:	08005704 	.word	0x08005704
 8000c9c:	200001d8 	.word	0x200001d8
 8000ca0:	200001e5 	.word	0x200001e5
 8000ca4:	08005714 	.word	0x08005714

08000ca8 <lcd_clear>:

void lcd_clear(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f851 	bl	8000d54 <lcd_write_command>
	HAL_Delay(5);
 8000cb2:	2005      	movs	r0, #5
 8000cb4:	f000 fe66 	bl	8001984 <HAL_Delay>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <lcd_back_light_on>:

// Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD
void lcd_back_light_on(void) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	BL = 0x08;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <lcd_back_light_on+0x14>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	701a      	strb	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	200001e6 	.word	0x200001e6

08000cd4 <lcd_set_cursor>:
void lcd_back_light_off(void) {
	BL = 0x00;
}

// ustawienie kursora w danym wierszu i kolumnie
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]

	uint8_t col_number;
	col_number = (col) & 0x0F;
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	73fb      	strb	r3, [r7, #15]

	switch(row) {
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <lcd_set_cursor+0x24>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d009      	beq.n	8000d0a <lcd_set_cursor+0x36>
 8000cf6:	e011      	b.n	8000d1c <lcd_set_cursor+0x48>

		case 0:
			col_number |= (0x80);
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfe:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w pierwszym wierszu
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f826 	bl	8000d54 <lcd_write_command>
			break;
 8000d08:	e008      	b.n	8000d1c <lcd_set_cursor+0x48>

		case 1:
			col_number |= (0xc0);
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d10:	73fb      	strb	r3, [r7, #15]
			lcd_write_command(col_number);	// ustawienie kursora w kolumnie x w drugim wierszu
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f81d 	bl	8000d54 <lcd_write_command>
			break;
 8000d1a:	bf00      	nop
	}

	HAL_Delay(5);
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f000 fe31 	bl	8001984 <HAL_Delay>
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <lcd_first_line>:

// ustawienie kursora na początku pierwszej linni
void lcd_first_line(void) {
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	f000 f810 	bl	8000d54 <lcd_write_command>
	HAL_Delay(5);
 8000d34:	2005      	movs	r0, #5
 8000d36:	f000 fe25 	bl	8001984 <HAL_Delay>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <lcd_second_line>:

// ustawienie kursora na początku drugiej linni
void lcd_second_line(void) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 8000d42:	20c0      	movs	r0, #192	; 0xc0
 8000d44:	f000 f806 	bl	8000d54 <lcd_write_command>
	HAL_Delay(5);
 8000d48:	2005      	movs	r0, #5
 8000d4a:	f000 fe1b 	bl	8001984 <HAL_Delay>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <lcd_write_command>:

// wysłanie instrukcji do wyświetlacza
void lcd_write_command(uint8_t data)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000d5e:	234e      	movs	r3, #78	; 0x4e
 8000d60:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		// EN = 1, RS = 0
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f023 030f 	bic.w	r3, r3, #15
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <lcd_write_command+0x8c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	f023 030f 	bic.w	r3, r3, #15
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <lcd_write_command+0x8c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		// EN = 1, RS = 0
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <lcd_write_command+0x8c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | BL;		// EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	b25a      	sxtb	r2, r3
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <lcd_write_command+0x8c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	f107 0208 	add.w	r2, r7, #8
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2304      	movs	r3, #4
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <lcd_write_command+0x90>)
 8000dcc:	f001 fa1c 	bl	8002208 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f000 fdd7 	bl	8001984 <HAL_Delay>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001e6 	.word	0x200001e6
 8000de4:	20000130 	.word	0x20000130

08000de8 <lcd_write_data>:

// wysłanie danych do wyświetlacza
void lcd_write_data(uint8_t data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = LCD_ADDRESS;
 8000df2:	234e      	movs	r3, #78	; 0x4e
 8000df4:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	uint8_t RS = 0x01;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73bb      	strb	r3, [r7, #14]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f023 030f 	bic.w	r3, r3, #15
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <lcd_write_data+0xac>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xF0) | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	f023 030f 	bic.w	r3, r3, #15
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b25a      	sxtb	r2, r3
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <lcd_write_data+0xac>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	727b      	strb	r3, [r7, #9]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		// EN = 1, RS = 1
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <lcd_write_data+0xac>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	72bb      	strb	r3, [r7, #10]
	tx_data[3] = (data << 4)   | RS | BL;		// EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <lcd_write_data+0xac>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	72fb      	strb	r3, [r7, #11]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	b299      	uxth	r1, r3
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	2364      	movs	r3, #100	; 0x64
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <lcd_write_data+0xb0>)
 8000e80:	f001 f9c2 	bl	8002208 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000e84:	2005      	movs	r0, #5
 8000e86:	f000 fd7d 	bl	8001984 <HAL_Delay>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200001e6 	.word	0x200001e6
 8000e98:	20000130 	.word	0x20000130

08000e9c <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	while(*string)
 8000ea4:	e006      	b.n	8000eb4 <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff9a 	bl	8000de8 <lcd_write_data>
	while(*string)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f4      	bne.n	8000ea6 <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 fd61 	bl	8001984 <HAL_Delay>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

	lcd_send_string("Wy");
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <lcd_send_alarm_on_msg+0x28>)
 8000ed2:	f7ff ffe3 	bl	8000e9c <lcd_send_string>
	lcd_send_own_char(3);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f850 	bl	8000f7c <lcd_send_own_char>
	lcd_send_own_char(8);
 8000edc:	2008      	movs	r0, #8
 8000ede:	f000 f84d 	bl	8000f7c <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <lcd_send_alarm_on_msg+0x2c>)
 8000ee4:	f7ff ffda 	bl	8000e9c <lcd_send_string>

	HAL_Delay(5);
 8000ee8:	2005      	movs	r0, #5
 8000eea:	f000 fd4b 	bl	8001984 <HAL_Delay>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08005728 	.word	0x08005728
 8000ef8:	0800572c 	.word	0x0800572c

08000efc <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

	lcd_send_string("Alarm wy");
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <lcd_send_alarm_off_msg+0x28>)
 8000f02:	f7ff ffcb 	bl	8000e9c <lcd_send_string>
	lcd_send_own_char(3);
 8000f06:	2003      	movs	r0, #3
 8000f08:	f000 f838 	bl	8000f7c <lcd_send_own_char>
	lcd_send_own_char(8);
 8000f0c:	2008      	movs	r0, #8
 8000f0e:	f000 f835 	bl	8000f7c <lcd_send_own_char>
	lcd_send_string("czony");
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <lcd_send_alarm_off_msg+0x2c>)
 8000f14:	f7ff ffc2 	bl	8000e9c <lcd_send_string>

	HAL_Delay(5);
 8000f18:	2005      	movs	r0, #5
 8000f1a:	f000 fd33 	bl	8001984 <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	0800573c 	.word	0x0800573c
 8000f28:	08005748 	.word	0x08005748

08000f2c <lcd_generate_own_chars>:

// funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków
void lcd_generate_own_chars(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

	uint8_t i, j;

	lcd_write_command(CG_RAM_ADDRESS);	// Przechodzimy na początek pamięci CG RAM
 8000f32:	2040      	movs	r0, #64	; 0x40
 8000f34:	f7ff ff0e 	bl	8000d54 <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e015      	b.n	8000f6a <lcd_generate_own_chars+0x3e>
		for(j = 0; j <= 7; j ++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	e00c      	b.n	8000f5e <lcd_generate_own_chars+0x32>
			lcd_write_data(own_chars[i][j]);	// Zapisujemy własne znaki do pamięci CG RAM
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	490b      	ldr	r1, [pc, #44]	; (8000f78 <lcd_generate_own_chars+0x4c>)
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	440a      	add	r2, r1
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff48 	bl	8000de8 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	2b07      	cmp	r3, #7
 8000f62:	d9ef      	bls.n	8000f44 <lcd_generate_own_chars+0x18>
	for(i = 0; i <= 7; i ++) {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	3301      	adds	r3, #1
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	d9e6      	bls.n	8000f3e <lcd_generate_own_chars+0x12>
		}
	}
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000003c 	.word	0x2000003c

08000f7c <lcd_send_own_char>:

// funkcja wyświetlająca wybrany znak własny
void lcd_send_own_char(uint8_t char_number) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	d832      	bhi.n	8000ff4 <lcd_send_own_char+0x78>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <lcd_send_own_char+0x18>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fb5 	.word	0x08000fb5
 8000f98:	08000fbd 	.word	0x08000fbd
 8000f9c:	08000fc5 	.word	0x08000fc5
 8000fa0:	08000fcd 	.word	0x08000fcd
 8000fa4:	08000fd5 	.word	0x08000fd5
 8000fa8:	08000fdd 	.word	0x08000fdd
 8000fac:	08000fe5 	.word	0x08000fe5
 8000fb0:	08000fed 	.word	0x08000fed

		case 1:
			lcd_send_string("\x1");
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <lcd_send_own_char+0x80>)
 8000fb6:	f7ff ff71 	bl	8000e9c <lcd_send_string>
			break;
 8000fba:	e01b      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <lcd_send_own_char+0x84>)
 8000fbe:	f7ff ff6d 	bl	8000e9c <lcd_send_string>
			break;
 8000fc2:	e017      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <lcd_send_own_char+0x88>)
 8000fc6:	f7ff ff69 	bl	8000e9c <lcd_send_string>
			break;
 8000fca:	e013      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <lcd_send_own_char+0x8c>)
 8000fce:	f7ff ff65 	bl	8000e9c <lcd_send_string>
			break;
 8000fd2:	e00f      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <lcd_send_own_char+0x90>)
 8000fd6:	f7ff ff61 	bl	8000e9c <lcd_send_string>
			break;
 8000fda:	e00b      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <lcd_send_own_char+0x94>)
 8000fde:	f7ff ff5d 	bl	8000e9c <lcd_send_string>
			break;
 8000fe2:	e007      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <lcd_send_own_char+0x98>)
 8000fe6:	f7ff ff59 	bl	8000e9c <lcd_send_string>
			break;
 8000fea:	e003      	b.n	8000ff4 <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 8000fec:	480a      	ldr	r0, [pc, #40]	; (8001018 <lcd_send_own_char+0x9c>)
 8000fee:	f7ff ff55 	bl	8000e9c <lcd_send_string>
			break;
 8000ff2:	bf00      	nop
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08005750 	.word	0x08005750
 8001000:	08005754 	.word	0x08005754
 8001004:	08005758 	.word	0x08005758
 8001008:	0800575c 	.word	0x0800575c
 800100c:	08005760 	.word	0x08005760
 8001010:	08005764 	.word	0x08005764
 8001014:	08005768 	.word	0x08005768
 8001018:	0800576c 	.word	0x0800576c

0800101c <lcd_show_week_day_name>:

// Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia
void lcd_show_week_day_name(uint8_t day_number) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 8001026:	210c      	movs	r1, #12
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff fe53 	bl	8000cd4 <lcd_set_cursor>

	switch(day_number) {
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	3b01      	subs	r3, #1
 8001032:	2b06      	cmp	r3, #6
 8001034:	d82c      	bhi.n	8001090 <lcd_show_week_day_name+0x74>
 8001036:	a201      	add	r2, pc, #4	; (adr r2, 800103c <lcd_show_week_day_name+0x20>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	08001059 	.word	0x08001059
 8001040:	08001061 	.word	0x08001061
 8001044:	08001069 	.word	0x08001069
 8001048:	08001071 	.word	0x08001071
 800104c:	08001079 	.word	0x08001079
 8001050:	08001081 	.word	0x08001081
 8001054:	08001089 	.word	0x08001089

		case 1:
			lcd_send_string("pon.");
 8001058:	480f      	ldr	r0, [pc, #60]	; (8001098 <lcd_show_week_day_name+0x7c>)
 800105a:	f7ff ff1f 	bl	8000e9c <lcd_send_string>
			break;
 800105e:	e017      	b.n	8001090 <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <lcd_show_week_day_name+0x80>)
 8001062:	f7ff ff1b 	bl	8000e9c <lcd_send_string>
			break;
 8001066:	e013      	b.n	8001090 <lcd_show_week_day_name+0x74>

		case 3:
			//lcd_send_own_char(6);
			lcd_send_string("sr.");
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <lcd_show_week_day_name+0x84>)
 800106a:	f7ff ff17 	bl	8000e9c <lcd_send_string>
			break;
 800106e:	e00f      	b.n	8001090 <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <lcd_show_week_day_name+0x88>)
 8001072:	f7ff ff13 	bl	8000e9c <lcd_send_string>
			break;
 8001076:	e00b      	b.n	8001090 <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <lcd_show_week_day_name+0x8c>)
 800107a:	f7ff ff0f 	bl	8000e9c <lcd_send_string>
			break;
 800107e:	e007      	b.n	8001090 <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <lcd_show_week_day_name+0x90>)
 8001082:	f7ff ff0b 	bl	8000e9c <lcd_send_string>
			break;
 8001086:	e003      	b.n	8001090 <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <lcd_show_week_day_name+0x94>)
 800108a:	f7ff ff07 	bl	8000e9c <lcd_send_string>
			break;
 800108e:	bf00      	nop
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08005770 	.word	0x08005770
 800109c:	08005778 	.word	0x08005778
 80010a0:	0800577c 	.word	0x0800577c
 80010a4:	08005780 	.word	0x08005780
 80010a8:	08005788 	.word	0x08005788
 80010ac:	0800578c 	.word	0x0800578c
 80010b0:	08005794 	.word	0x08005794

080010b4 <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 80010be:	210b      	movs	r1, #11
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fe07 	bl	8000cd4 <lcd_set_cursor>
	lcd_send_own_char(6);
 80010c6:	2006      	movs	r0, #6
 80010c8:	f7ff ff58 	bl	8000f7c <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <lcd_show_battery_level+0x40>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 ff03 	bl	8004ee0 <siprintf>

	lcd_send_string(battery_level);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fedc 	bl	8000e9c <lcd_send_string>
	lcd_send_string("%");
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <lcd_show_battery_level+0x44>)
 80010e6:	f7ff fed9 	bl	8000e9c <lcd_send_string>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800579c 	.word	0x0800579c
 80010f8:	080057a0 	.word	0x080057a0

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 fbcd 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f895 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f7ff fc0d 	bl	8000928 <MX_GPIO_Init>
  MX_I2C1_Init();
 800110e:	f7ff fc77 	bl	8000a00 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001112:	f7ff fca3 	bl	8000a5c <MX_I2C2_Init>
  MX_RTC_Init();
 8001116:	f000 f92b 	bl	8001370 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800111a:	f000 fb1d 	bl	8001758 <MX_USART2_UART_Init>

  /****************** UART BEGIN ******************/

  // Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
  // Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback.
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800111e:	2201      	movs	r2, #1
 8001120:	4939      	ldr	r1, [pc, #228]	; (8001208 <main+0x10c>)
 8001122:	483a      	ldr	r0, [pc, #232]	; (800120c <main+0x110>)
 8001124:	f003 f8a2 	bl	800426c <HAL_UART_Receive_IT>

  // wystąpienie przerwania po ukończeniu odbioru informacji (RXNE - Register Not Empty)
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  // wystąpienie przerwania po ukończeniu transmisji (TC - Transmition Complete)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <main+0x110>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <main+0x110>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001136:	60da      	str	r2, [r3, #12]

  /****************** UART END ******************/

  /****************** LCD BEGIN ******************/

  lcd_init();
 8001138:	f7ff fd4c 	bl	8000bd4 <lcd_init>
  lcd_back_light_on();
 800113c:	f7ff fdbe 	bl	8000cbc <lcd_back_light_on>

  /****************** LCD END ******************/

  // Wyłączenie brzęczyka oraz diody po włączeniu uC
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001146:	4832      	ldr	r0, [pc, #200]	; (8001210 <main+0x114>)
 8001148:	f000 fef4 	bl	8001f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2120      	movs	r1, #32
 8001150:	482f      	ldr	r0, [pc, #188]	; (8001210 <main+0x114>)
 8001152:	f000 feef 	bl	8001f34 <HAL_GPIO_WritePin>
  // Metoda odpowiedzialna za ustawienie czasu i daty
  // set_Time(sec, min, hours, dow, dom, month, year)
  // set_Time(10, 39, 13, 6, 31, 10, 20);

  // Wpisanie do rejestru RTC, czasu i daty pobranych z DS3231, aby czas w RTC był aktualny
  rtc_set_time();
 8001156:	f7ff fa13 	bl	8000580 <rtc_set_time>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	lcd_time_and_date_init();
 800115a:	f7ff fd5f 	bl	8000c1c <lcd_time_and_date_init>

	if(alarm_flag) {
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x118>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <main+0x7c>

		while (alarm_flag) {
 8001166:	e001      	b.n	800116c <main+0x70>
			to_do_on_alarm();
 8001168:	f7ff fb8e 	bl	8000888 <to_do_on_alarm>
		while (alarm_flag) {
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <main+0x118>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f9      	bne.n	8001168 <main+0x6c>
		}

		to_do_on_alarm_off();
 8001174:	f7ff fba6 	bl	80008c4 <to_do_on_alarm_off>
	}

	// wykonaj jeśli użytkownik ustawił nowy czas alarmu
	if(alarm_set_flag) {
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <main+0x11c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ec      	beq.n	800115a <main+0x5e>

		get_Time();
 8001180:	f000 fa9a 	bl	80016b8 <get_Time>

		uint8_t days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm;
		char alarm_details_msg[9];

		days_to_alarm = new_alarm_time[1];	// dni to drugi element, ponieważ pierwszy to literka a
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <main+0x120>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	73fb      	strb	r3, [r7, #15]
											// mówiąca o tym, że ustawiamy alarm.
											// a jak alarm
		hours_to_alarm = new_alarm_time[2];
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <main+0x120>)
 800118c:	789b      	ldrb	r3, [r3, #2]
 800118e:	73bb      	strb	r3, [r7, #14]
		minutes_to_alarm = new_alarm_time[3];
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <main+0x120>)
 8001192:	78db      	ldrb	r3, [r3, #3]
 8001194:	737b      	strb	r3, [r7, #13]
		seconds_to_alarm = new_alarm_time[4];
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <main+0x120>)
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	733b      	strb	r3, [r7, #12]

		rtc_set_alarm(days_to_alarm, hours_to_alarm, minutes_to_alarm, seconds_to_alarm);
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	7b7a      	ldrb	r2, [r7, #13]
 80011a0:	7bb9      	ldrb	r1, [r7, #14]
 80011a2:	7bf8      	ldrb	r0, [r7, #15]
 80011a4:	f7ff faec 	bl	8000780 <rtc_set_alarm>

		lcd_clear();
 80011a8:	f7ff fd7e 	bl	8000ca8 <lcd_clear>

		sprintf(alarm_details_msg, "%02d:%02d:%02d", time.hour + hours_to_alarm, time.minutes + minutes_to_alarm, time.seconds + seconds_to_alarm);
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <main+0x124>)
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	461a      	mov	r2, r3
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	441a      	add	r2, r3
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <main+0x124>)
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	4619      	mov	r1, r3
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	4419      	add	r1, r3
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <main+0x124>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
 80011c8:	4403      	add	r3, r0
 80011ca:	4638      	mov	r0, r7
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	460b      	mov	r3, r1
 80011d0:	4914      	ldr	r1, [pc, #80]	; (8001224 <main+0x128>)
 80011d2:	f003 fe85 	bl	8004ee0 <siprintf>
		lcd_send_string("Alarm na godz.:");
 80011d6:	4814      	ldr	r0, [pc, #80]	; (8001228 <main+0x12c>)
 80011d8:	f7ff fe60 	bl	8000e9c <lcd_send_string>
		lcd_second_line();
 80011dc:	f7ff fdaf 	bl	8000d3e <lcd_second_line>
		lcd_send_string(alarm_details_msg);
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe5a 	bl	8000e9c <lcd_send_string>

		HAL_Delay(3000);
 80011e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011ec:	f000 fbca 	bl	8001984 <HAL_Delay>
		lcd_clear();
 80011f0:	f7ff fd5a 	bl	8000ca8 <lcd_clear>

		alarm_set_flag = 0;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <main+0x11c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <main+0x130>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
		alarm_counter = 0;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <main+0x134>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
	lcd_time_and_date_init();
 8001206:	e7a8      	b.n	800115a <main+0x5e>
 8001208:	2000012c 	.word	0x2000012c
 800120c:	20000208 	.word	0x20000208
 8001210:	40020000 	.word	0x40020000
 8001214:	20000121 	.word	0x20000121
 8001218:	2000012b 	.word	0x2000012b
 800121c:	2000011c 	.word	0x2000011c
 8001220:	20000124 	.word	0x20000124
 8001224:	080057a4 	.word	0x080057a4
 8001228:	080057b4 	.word	0x080057b4
 800122c:	20000118 	.word	0x20000118
 8001230:	20000108 	.word	0x20000108

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b098      	sub	sp, #96	; 0x60
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fe44 	bl	8004ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <SystemClock_Config+0x100>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <SystemClock_Config+0x100>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <SystemClock_Config+0x100>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <SystemClock_Config+0x104>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <SystemClock_Config+0x104>)
 8001292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <SystemClock_Config+0x104>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80012a4:	230a      	movs	r3, #10
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2310      	movs	r3, #16
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012bc:	2308      	movs	r3, #8
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80012c0:	2340      	movs	r3, #64	; 0x40
 80012c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fe05 	bl	8002ee0 <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80012dc:	f000 f840 	bl	8001360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80012e8:	23a0      	movs	r3, #160	; 0xa0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 f85f 	bl	80033c0 <HAL_RCC_ClockConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001308:	f000 f82a 	bl	8001360 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800130c:	2302      	movs	r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fa1c 	bl	8003758 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001326:	f000 f81b 	bl	8001360 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	3760      	adds	r7, #96	; 0x60
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

	// Musimy sprawdzić czy przerwanie wywołał uart1, a nie coś innego
	if(huart->Instance==USART2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_UART_RxCpltCallback+0x20>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_UART_RxCpltCallback+0x16>
	{
		activate_alarm();
 800134e:	f7ff f9e3 	bl	8000718 <activate_alarm>
	}

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40004400 	.word	0x40004400

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2228      	movs	r2, #40	; 0x28
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fd9d 	bl	8004ed0 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <MX_RTC_Init+0x110>)
 8001398:	4a3a      	ldr	r2, [pc, #232]	; (8001484 <MX_RTC_Init+0x114>)
 800139a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <MX_RTC_Init+0x110>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <MX_RTC_Init+0x110>)
 80013a4:	227f      	movs	r2, #127	; 0x7f
 80013a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <MX_RTC_Init+0x110>)
 80013aa:	22ff      	movs	r2, #255	; 0xff
 80013ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <MX_RTC_Init+0x110>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <MX_RTC_Init+0x110>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <MX_RTC_Init+0x110>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013c0:	482f      	ldr	r0, [pc, #188]	; (8001480 <MX_RTC_Init+0x110>)
 80013c2:	f002 fab7 	bl	8003934 <HAL_RTC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80013cc:	f7ff ffc8 	bl	8001360 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80013d0:	2318      	movs	r3, #24
 80013d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x33;
 80013d6:	2333      	movs	r3, #51	; 0x33
 80013d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_RTC_Init+0x110>)
 80013f4:	f002 fb2f 	bl	8003a56 <HAL_RTC_SetTime>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80013fe:	f7ff ffaf 	bl	8001360 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001402:	2307      	movs	r3, #7
 8001404:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 8001408:	2310      	movs	r3, #16
 800140a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x25;
 800140e:	2325      	movs	r3, #37	; 0x25
 8001410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 8001414:	2320      	movs	r3, #32
 8001416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800141a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141e:	2201      	movs	r2, #1
 8001420:	4619      	mov	r1, r3
 8001422:	4817      	ldr	r0, [pc, #92]	; (8001480 <MX_RTC_Init+0x110>)
 8001424:	f002 fbd4 	bl	8003bd0 <HAL_RTC_SetDate>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800142e:	f7ff ff97 	bl	8001360 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8001432:	2319      	movs	r3, #25
 8001434:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 8001436:	2323      	movs	r3, #35	; 0x23
 8001438:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800143a:	2310      	movs	r3, #16
 800143c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 8001456:	2312      	movs	r3, #18
 8001458:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800145c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	2201      	movs	r2, #1
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_RTC_Init+0x110>)
 800146a:	f002 fc59 	bl	8003d20 <HAL_RTC_SetAlarm_IT>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001474:	f7ff ff74 	bl	8001360 <Error_Handler>
  }

}
 8001478:	bf00      	nop
 800147a:	3740      	adds	r7, #64	; 0x40
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001e8 	.word	0x200001e8
 8001484:	40002800 	.word	0x40002800

08001488 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_RTC_MspInit+0x30>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10a      	bne.n	80014b0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_RTC_MspInit+0x34>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2029      	movs	r0, #41	; 0x29
 80014a6:	f000 fb6a 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014aa:	2029      	movs	r0, #41	; 0x29
 80014ac:	f000 fb83 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40002800 	.word	0x40002800
 80014bc:	42470e3c 	.word	0x42470e3c

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f9ee 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <USART2_IRQHandler+0x10>)
 8001572:	f002 fed1 	bl	8004318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000208 	.word	0x20000208

08001580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001588:	f000 fcee 	bl	8001f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <RTC_Alarm_IRQHandler+0x10>)
 8001596:	f002 fcfb 	bl	8003f90 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001e8 	.word	0x200001e8

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f003 fc52 	bl	8004e7c <__errno>
 80015d8:	4602      	mov	r2, r0
 80015da:	230c      	movs	r3, #12
 80015dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20018000 	.word	0x20018000
 8001604:	00000400 	.word	0x00000400
 8001608:	2000010c 	.word	0x2000010c
 800160c:	20000250 	.word	0x20000250

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <SystemInit+0x28>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <SystemInit+0x28>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x28>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <decToBcd>:
#define DS3231_ADDRESS 0xD0

// Funkcja konwertująca wartość dziesiętną na binarną,
// ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
uint8_t decToBcd(int val)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <decToBcd+0x48>)
 8001648:	fb82 1203 	smull	r1, r2, r2, r3
 800164c:	1092      	asrs	r2, r2, #2
 800164e:	17db      	asrs	r3, r3, #31
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	b2d8      	uxtb	r0, r3
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <decToBcd+0x48>)
 800165c:	fb83 1302 	smull	r1, r3, r3, r2
 8001660:	1099      	asrs	r1, r3, #2
 8001662:	17d3      	asrs	r3, r2, #31
 8001664:	1ac9      	subs	r1, r1, r3
 8001666:	460b      	mov	r3, r1
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	1ad1      	subs	r1, r2, r3
 8001670:	b2cb      	uxtb	r3, r1
 8001672:	4403      	add	r3, r0
 8001674:	b2db      	uxtb	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	66666667 	.word	0x66666667

08001688 <bcdToDec>:

// Funkcja konwertująca wartość binarną na decymalną,
// ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
int bcdToDec(uint8_t val)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	461a      	mov	r2, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4413      	add	r3, r2
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <get_Time>:

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
}

void get_Time (void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af04      	add	r7, sp, #16
	uint8_t time_to_red[7];

	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_red, 7, 1000);
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2307      	movs	r3, #7
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	463b      	mov	r3, r7
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	2200      	movs	r2, #0
 80016d0:	21d0      	movs	r1, #208	; 0xd0
 80016d2:	481f      	ldr	r0, [pc, #124]	; (8001750 <get_Time+0x98>)
 80016d4:	f000 fe96 	bl	8002404 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_red[0]);
 80016d8:	783b      	ldrb	r3, [r7, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ffd4 	bl	8001688 <bcdToDec>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <get_Time+0x9c>)
 80016e6:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_red[1]);
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ffcc 	bl	8001688 <bcdToDec>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <get_Time+0x9c>)
 80016f6:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_red[2]);
 80016f8:	78bb      	ldrb	r3, [r7, #2]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffc4 	bl	8001688 <bcdToDec>
 8001700:	4603      	mov	r3, r0
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <get_Time+0x9c>)
 8001706:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_red[3]);
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ffbc 	bl	8001688 <bcdToDec>
 8001710:	4603      	mov	r3, r0
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <get_Time+0x9c>)
 8001716:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_red[4]);
 8001718:	793b      	ldrb	r3, [r7, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffb4 	bl	8001688 <bcdToDec>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <get_Time+0x9c>)
 8001726:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_red[5]);
 8001728:	797b      	ldrb	r3, [r7, #5]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffac 	bl	8001688 <bcdToDec>
 8001730:	4603      	mov	r3, r0
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <get_Time+0x9c>)
 8001736:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_red[6]);
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffa4 	bl	8001688 <bcdToDec>
 8001740:	4603      	mov	r3, r0
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <get_Time+0x9c>)
 8001746:	719a      	strb	r2, [r3, #6]
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000184 	.word	0x20000184
 8001754:	20000124 	.word	0x20000124

08001758 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_USART2_UART_Init+0x50>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001764:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001790:	f002 fcda 	bl	8004148 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179a:	f7ff fde1 	bl	8001360 <Error_Handler>
  }

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000208 	.word	0x20000208
 80017a8:	40004400 	.word	0x40004400

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_UART_MspInit+0x94>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d133      	bne.n	8001836 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001806:	230c      	movs	r3, #12
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001816:	2307      	movs	r3, #7
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_UART_MspInit+0x9c>)
 8001822:	f000 fa05 	bl	8001c30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2026      	movs	r0, #38	; 0x26
 800182c:	f000 f9a7 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001830:	2026      	movs	r0, #38	; 0x26
 8001832:	f000 f9c0 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40004400 	.word	0x40004400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800184c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
  ldr  r2, =_sbss
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800186a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001876:	f7ff fecb 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187a:	f003 fb05 	bl	8004e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187e:	f7ff fc3d 	bl	80010fc <main>
  bx  lr    
 8001882:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001884:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001888:	08005820 	.word	0x08005820
  ldr  r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001890:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001894:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001898:	20000250 	.word	0x20000250

0800189c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_Init+0x40>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_Init+0x40>)
 80018b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_Init+0x40>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f94d 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fdf4 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f965 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f92d 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000007c 	.word	0x2000007c
 800193c:	20000084 	.word	0x20000084
 8001940:	20000080 	.word	0x20000080

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000084 	.word	0x20000084
 8001968:	20000248 	.word	0x20000248

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000248 	.word	0x20000248

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_Delay+0x40>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000084 	.word	0x20000084

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e00c      	b.n	8001c22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2205      	movs	r2, #5
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e159      	b.n	8001f00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8148 	bne.w	8001efa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d00b      	beq.n	8001c8a <HAL_GPIO_Init+0x5a>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7e:	2b11      	cmp	r3, #17
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0xfc>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b12      	cmp	r3, #18
 8001d2a:	d123      	bne.n	8001d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0203 	and.w	r2, r3, #3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a2 	beq.w	8001efa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_GPIO_Init+0x2ec>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x202>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a47      	ldr	r2, [pc, #284]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x1fe>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <HAL_GPIO_Init+0x2f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_GPIO_Init+0x2f8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x1f6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a44      	ldr	r2, [pc, #272]	; (8001f2c <HAL_GPIO_Init+0x2fc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x1f2>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x204>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x204>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x204>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x204>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x204>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	4934      	ldr	r1, [pc, #208]	; (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e76:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f aea2 	bls.w	8001c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	; 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fcb4 	bl	80008f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40013c00 	.word	0x40013c00

08001f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e11f      	b.n	80021ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd7a 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ffc:	f001 fb84 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8002000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a7b      	ldr	r2, [pc, #492]	; (80021f4 <HAL_I2C_Init+0x25c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d807      	bhi.n	800201c <HAL_I2C_Init+0x84>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a7a      	ldr	r2, [pc, #488]	; (80021f8 <HAL_I2C_Init+0x260>)
 8002010:	4293      	cmp	r3, r2
 8002012:	bf94      	ite	ls
 8002014:	2301      	movls	r3, #1
 8002016:	2300      	movhi	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e006      	b.n	800202a <HAL_I2C_Init+0x92>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a77      	ldr	r2, [pc, #476]	; (80021fc <HAL_I2C_Init+0x264>)
 8002020:	4293      	cmp	r3, r2
 8002022:	bf94      	ite	ls
 8002024:	2301      	movls	r3, #1
 8002026:	2300      	movhi	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0db      	b.n	80021ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a72      	ldr	r2, [pc, #456]	; (8002200 <HAL_I2C_Init+0x268>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a64      	ldr	r2, [pc, #400]	; (80021f4 <HAL_I2C_Init+0x25c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d802      	bhi.n	800206c <HAL_I2C_Init+0xd4>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	e009      	b.n	8002080 <HAL_I2C_Init+0xe8>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_I2C_Init+0x26c>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	3301      	adds	r3, #1
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4956      	ldr	r1, [pc, #344]	; (80021f4 <HAL_I2C_Init+0x25c>)
 800209c:	428b      	cmp	r3, r1
 800209e:	d80d      	bhi.n	80020bc <HAL_I2C_Init+0x124>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e59      	subs	r1, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	bf38      	it	cc
 80020b8:	2304      	movcc	r3, #4
 80020ba:	e04f      	b.n	800215c <HAL_I2C_Init+0x1c4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_I2C_Init+0x150>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e012      	b.n	800210e <HAL_I2C_Init+0x176>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e58      	subs	r0, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	0099      	lsls	r1, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Init+0x17e>
 8002112:	2301      	movs	r3, #1
 8002114:	e022      	b.n	800215c <HAL_I2C_Init+0x1c4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10e      	bne.n	800213c <HAL_I2C_Init+0x1a4>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e58      	subs	r0, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	440b      	add	r3, r1
 800212c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213a:	e00f      	b.n	800215c <HAL_I2C_Init+0x1c4>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	0099      	lsls	r1, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	6809      	ldr	r1, [r1, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800218a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6911      	ldr	r1, [r2, #16]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68d2      	ldr	r2, [r2, #12]
 8002196:	4311      	orrs	r1, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	430b      	orrs	r3, r1
 800219e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	000186a0 	.word	0x000186a0
 80021f8:	001e847f 	.word	0x001e847f
 80021fc:	003d08ff 	.word	0x003d08ff
 8002200:	431bde83 	.word	0x431bde83
 8002204:	10624dd3 	.word	0x10624dd3

08002208 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	461a      	mov	r2, r3
 8002214:	460b      	mov	r3, r1
 8002216:	817b      	strh	r3, [r7, #10]
 8002218:	4613      	mov	r3, r2
 800221a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff fba6 	bl	800196c <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	f040 80e0 	bne.w	80023f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2319      	movs	r3, #25
 8002236:	2201      	movs	r2, #1
 8002238:	4970      	ldr	r1, [pc, #448]	; (80023fc <HAL_I2C_Master_Transmit+0x1f4>)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fc72 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
 8002248:	e0d3      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x50>
 8002254:	2302      	movs	r3, #2
 8002256:	e0cc      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d007      	beq.n	800227e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2221      	movs	r2, #33	; 0x21
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2210      	movs	r2, #16
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	893a      	ldrh	r2, [r7, #8]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a50      	ldr	r2, [pc, #320]	; (8002400 <HAL_I2C_Master_Transmit+0x1f8>)
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fac2 	bl	8002850 <I2C_MasterRequestWrite>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e08d      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022ec:	e066      	b.n	80023bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fcec 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b04      	cmp	r3, #4
 8002356:	d11b      	bne.n	8002390 <HAL_I2C_Master_Transmit+0x188>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d017      	beq.n	8002390 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	6a39      	ldr	r1, [r7, #32]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fcdc 	bl	8002d52 <I2C_WaitOnBTFFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d107      	bne.n	80023b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e01a      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d194      	bne.n	80022ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	00100002 	.word	0x00100002
 8002400:	ffff0000 	.word	0xffff0000

08002404 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	817b      	strh	r3, [r7, #10]
 8002416:	460b      	mov	r3, r1
 8002418:	813b      	strh	r3, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800241e:	f7ff faa5 	bl	800196c <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b20      	cmp	r3, #32
 800242e:	f040 8208 	bne.w	8002842 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2319      	movs	r3, #25
 8002438:	2201      	movs	r2, #1
 800243a:	497b      	ldr	r1, [pc, #492]	; (8002628 <HAL_I2C_Mem_Read+0x224>)
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fb71 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
 800244a:	e1fb      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2C_Mem_Read+0x56>
 8002456:	2302      	movs	r3, #2
 8002458:	e1f4      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d007      	beq.n	8002480 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2222      	movs	r2, #34	; 0x22
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a5b      	ldr	r2, [pc, #364]	; (800262c <HAL_I2C_Mem_Read+0x228>)
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c2:	88f8      	ldrh	r0, [r7, #6]
 80024c4:	893a      	ldrh	r2, [r7, #8]
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa3e 	bl	8002954 <I2C_RequestMemoryRead>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1b0      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d113      	bne.n	8002512 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e184      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	2b01      	cmp	r3, #1
 8002518:	d11b      	bne.n	8002552 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e164      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	2b02      	cmp	r3, #2
 8002558:	d11b      	bne.n	8002592 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002568:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	e144      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025a8:	e138      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	f200 80f1 	bhi.w	8002796 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d123      	bne.n	8002604 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fc07 	bl	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e139      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002602:	e10b      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b02      	cmp	r3, #2
 800260a:	d14e      	bne.n	80026aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	2200      	movs	r2, #0
 8002614:	4906      	ldr	r1, [pc, #24]	; (8002630 <HAL_I2C_Mem_Read+0x22c>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa84 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e10e      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
 8002626:	bf00      	nop
 8002628:	00100002 	.word	0x00100002
 800262c:	ffff0000 	.word	0xffff0000
 8002630:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a8:	e0b8      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	2200      	movs	r2, #0
 80026b2:	4966      	ldr	r1, [pc, #408]	; (800284c <HAL_I2C_Mem_Read+0x448>)
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fa35 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0bf      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	2200      	movs	r2, #0
 800270e:	494f      	ldr	r1, [pc, #316]	; (800284c <HAL_I2C_Mem_Read+0x448>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fa07 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e091      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002794:	e042      	b.n	800281c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fb1a 	bl	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e04c      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d118      	bne.n	800281c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f aec2 	bne.w	80025aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	00010004 	.word	0x00010004

08002850 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d006      	beq.n	800287a <I2C_MasterRequestWrite+0x2a>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d003      	beq.n	800287a <I2C_MasterRequestWrite+0x2a>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002878:	d108      	bne.n	800288c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e00b      	b.n	80028a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	2b12      	cmp	r3, #18
 8002892:	d107      	bne.n	80028a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f937 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ca:	d103      	bne.n	80028d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e035      	b.n	8002944 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e0:	d108      	bne.n	80028f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	e01b      	b.n	800292c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028f4:	897b      	ldrh	r3, [r7, #10]
 80028f6:	11db      	asrs	r3, r3, #7
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0306 	and.w	r3, r3, #6
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f063 030f 	orn	r3, r3, #15
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <I2C_MasterRequestWrite+0xfc>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f95d 	bl	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e010      	b.n	8002944 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <I2C_MasterRequestWrite+0x100>)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f94d 	bl	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00010008 	.word	0x00010008
 8002950:	00010002 	.word	0x00010002

08002954 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2200      	movs	r2, #0
 8002996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8c2 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d103      	bne.n	80029be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0aa      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	4952      	ldr	r1, [pc, #328]	; (8002b20 <I2C_RequestMemoryRead+0x1cc>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f8fa 	bl	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e097      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f964 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e076      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a30:	893b      	ldrh	r3, [r7, #8]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	e021      	b.n	8002a80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a3c:	893b      	ldrh	r3, [r7, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f93e 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d107      	bne.n	8002a72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e050      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a76:	893b      	ldrh	r3, [r7, #8]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6a39      	ldr	r1, [r7, #32]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f923 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d107      	bne.n	8002aa8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e035      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f82b 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d103      	bne.n	8002aec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e013      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	6a3a      	ldr	r2, [r7, #32]
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <I2C_RequestMemoryRead+0x1cc>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f863 	bl	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	00010002 	.word	0x00010002

08002b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b34:	e025      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d021      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe ff15 	bl	800196c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e023      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10d      	bne.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	e00c      	b.n	8002bc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d0b6      	beq.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be0:	e051      	b.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf0:	d123      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e046      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d021      	beq.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe fe93 	bl	800196c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e020      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10c      	bne.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d18d      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cdc:	e02d      	b.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f8ce 	bl	8002e80 <I2C_IsAcknowledgeFailed>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02d      	b.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d021      	beq.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe fe39 	bl	800196c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e007      	b.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d1ca      	bne.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5e:	e02d      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f88d 	bl	8002e80 <I2C_IsAcknowledgeFailed>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e02d      	b.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d021      	beq.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d78:	f7fe fdf8 	bl	800196c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e007      	b.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d1ca      	bne.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de0:	e042      	b.n	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d119      	bne.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0210 	mvn.w	r2, #16
 8002df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e029      	b.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e24:	f7fe fda2 	bl	800196c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e007      	b.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d1b5      	bne.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d11b      	bne.n	8002ed0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f043 0204 	orr.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e25b      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d075      	beq.n	8002fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	4ba3      	ldr	r3, [pc, #652]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0a:	4ba0      	ldr	r3, [pc, #640]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e236      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x74>
 8002f46:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a90      	ldr	r2, [pc, #576]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a8a      	ldr	r2, [pc, #552]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a83      	ldr	r2, [pc, #524]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fce8 	bl	800196c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fce4 	bl	800196c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1fb      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fcd4 	bl	800196c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fcd0 	bl	800196c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1e7      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b62      	ldr	r3, [pc, #392]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1bb      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4952      	ldr	r1, [pc, #328]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fc89 	bl	800196c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe fc85 	bl	800196c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e19c      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fc68 	bl	800196c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe fc64 	bl	800196c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e17b      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d030      	beq.n	800312c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fc48 	bl	800196c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe fc44 	bl	800196c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e15b      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x200>
 80030fe:	e015      	b.n	800312c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fc31 	bl	800196c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe fc2d 	bl	800196c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e144      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a0 	beq.w	800327a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d121      	bne.n	80031ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fe fbf3 	bl	800196c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e011      	b.n	80031ae <HAL_RCC_OscConfig+0x2ce>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	42470000 	.word	0x42470000
 8003194:	42470e80 	.word	0x42470e80
 8003198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fe fbe6 	bl	800196c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0fd      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x4d4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
 80031c2:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a76      	ldr	r2, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	4b74      	ldr	r3, [pc, #464]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a73      	ldr	r2, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031f2:	4b71      	ldr	r3, [pc, #452]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a70      	ldr	r2, [pc, #448]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b6e      	ldr	r3, [pc, #440]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe fbab 	bl	800196c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fba7 	bl	800196c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0bc      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x33a>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fb95 	bl	800196c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe fb91 	bl	800196c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0a6      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a51      	ldr	r2, [pc, #324]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8092 	beq.w	80033a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003284:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d05c      	beq.n	800334a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d141      	bne.n	800331c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b48      	ldr	r3, [pc, #288]	; (80033bc <HAL_RCC_OscConfig+0x4dc>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fb65 	bl	800196c <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fb61 	bl	800196c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e078      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b8:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	4933      	ldr	r1, [pc, #204]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4dc>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb3a 	bl	800196c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fb36 	bl	800196c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04d      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x41c>
 800331a:	e045      	b.n	80033a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_OscConfig+0x4dc>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe fb23 	bl	800196c <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe fb1f 	bl	800196c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x44a>
 8003348:	e02e      	b.n	80033a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e029      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCC_OscConfig+0x4d8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	429a      	cmp	r2, r3
 8003368:	d11c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d115      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337e:	4013      	ands	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40007000 	.word	0x40007000
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470060 	.word	0x42470060

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe fa5c 	bl	800196c <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe fa58 	bl	800196c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4601      	mov	r1, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe f9bc 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	080057c4 	.word	0x080057c4
 8003584:	2000007c 	.word	0x2000007c
 8003588:	20000080 	.word	0x20000080

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d007      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x32>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d008      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x38>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 808d 	bne.w	80036d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80035ba:	60bb      	str	r3, [r7, #8]
       break;
 80035bc:	e08c      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035c0:	60bb      	str	r3, [r7, #8]
      break;
 80035c2:	e089      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d023      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	f04f 0400 	mov.w	r4, #0
 80035e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	ea03 0501 	and.w	r5, r3, r1
 80035f0:	ea04 0602 	and.w	r6, r4, r2
 80035f4:	4a3d      	ldr	r2, [pc, #244]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035f6:	fb02 f106 	mul.w	r1, r2, r6
 80035fa:	2200      	movs	r2, #0
 80035fc:	fb02 f205 	mul.w	r2, r2, r5
 8003600:	440a      	add	r2, r1
 8003602:	493a      	ldr	r1, [pc, #232]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 8003604:	fba5 0101 	umull	r0, r1, r5, r1
 8003608:	1853      	adds	r3, r2, r1
 800360a:	4619      	mov	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f04f 0400 	mov.w	r4, #0
 8003612:	461a      	mov	r2, r3
 8003614:	4623      	mov	r3, r4
 8003616:	f7fc fe33 	bl	8000280 <__aeabi_uldivmod>
 800361a:	4603      	mov	r3, r0
 800361c:	460c      	mov	r4, r1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e049      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	ea03 0501 	and.w	r5, r3, r1
 8003638:	ea04 0602 	and.w	r6, r4, r2
 800363c:	4629      	mov	r1, r5
 800363e:	4632      	mov	r2, r6
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	f04f 0400 	mov.w	r4, #0
 8003648:	0154      	lsls	r4, r2, #5
 800364a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800364e:	014b      	lsls	r3, r1, #5
 8003650:	4619      	mov	r1, r3
 8003652:	4622      	mov	r2, r4
 8003654:	1b49      	subs	r1, r1, r5
 8003656:	eb62 0206 	sbc.w	r2, r2, r6
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	f04f 0400 	mov.w	r4, #0
 8003662:	0194      	lsls	r4, r2, #6
 8003664:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003668:	018b      	lsls	r3, r1, #6
 800366a:	1a5b      	subs	r3, r3, r1
 800366c:	eb64 0402 	sbc.w	r4, r4, r2
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	00e2      	lsls	r2, r4, #3
 800367a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800367e:	00d9      	lsls	r1, r3, #3
 8003680:	460b      	mov	r3, r1
 8003682:	4614      	mov	r4, r2
 8003684:	195b      	adds	r3, r3, r5
 8003686:	eb44 0406 	adc.w	r4, r4, r6
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	02a2      	lsls	r2, r4, #10
 8003694:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003698:	0299      	lsls	r1, r3, #10
 800369a:	460b      	mov	r3, r1
 800369c:	4614      	mov	r4, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	4621      	mov	r1, r4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f04f 0400 	mov.w	r4, #0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	f7fc fde8 	bl	8000280 <__aeabi_uldivmod>
 80036b0:	4603      	mov	r3, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0c1b      	lsrs	r3, r3, #16
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	3301      	adds	r3, #1
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	60bb      	str	r3, [r7, #8]
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80036d4:	60bb      	str	r3, [r7, #8]
      break;
 80036d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d8:	68bb      	ldr	r3, [r7, #8]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	017d7840 	.word	0x017d7840

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000007c 	.word	0x2000007c

08003708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800370c:	f7ff fff0 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003710:	4601      	mov	r1, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <HAL_RCC_GetPCLK1Freq+0x24>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	080057d4 	.word	0x080057d4

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003734:	f7ff ffdc 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003738:	4601      	mov	r1, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0b5b      	lsrs	r3, r3, #13
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	080057d4 	.word	0x080057d4

08003758 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800377c:	2b00      	cmp	r3, #0
 800377e:	d035      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003786:	f7fe f8f1 	bl	800196c <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800378e:	f7fe f8ed 	bl	800196c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0ba      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a0:	4b60      	ldr	r3, [pc, #384]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	019a      	lsls	r2, r3, #6
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	071b      	lsls	r3, r3, #28
 80037b8:	495a      	ldr	r1, [pc, #360]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037c0:	4b57      	ldr	r3, [pc, #348]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037c6:	f7fe f8d1 	bl	800196c <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037ce:	f7fe f8cd 	bl	800196c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e09a      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8083 	beq.w	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	4b49      	ldr	r3, [pc, #292]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a48      	ldr	r2, [pc, #288]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a43      	ldr	r2, [pc, #268]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003822:	f7fe f8a3 	bl	800196c <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe f89f 	bl	800196c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e06c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800383c:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003850:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	429a      	cmp	r2, r3
 8003864:	d028      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003870:	4b2e      	ldr	r3, [pc, #184]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800387c:	4a29      	ldr	r2, [pc, #164]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d114      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe f86d 	bl	800196c <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe f869 	bl	800196c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e034      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c4:	d10d      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038da:	4912      	ldr	r1, [pc, #72]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]
 80038e0:	e005      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7c1a      	ldrb	r2, [r3, #16]
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003912:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	42470068 	.word	0x42470068
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
 800392c:	42470e40 	.word	0x42470e40
 8003930:	424711e0 	.word	0x424711e0

08003934 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e083      	b.n	8003a4e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7f5b      	ldrb	r3, [r3, #29]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fd96 	bl	8001488 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	22ca      	movs	r2, #202	; 0xca
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2253      	movs	r2, #83	; 0x53
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb7a 	bl	800406c <RTC_EnterInitMode>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e05e      	b.n	8003a4e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800399e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68d2      	ldr	r2, [r2, #12]
 80039ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	041a      	lsls	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fb0c 	bl	800401c <HAL_RTC_WaitForSynchro>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	22ff      	movs	r2, #255	; 0xff
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e018      	b.n	8003a4e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	22ff      	movs	r2, #255	; 0xff
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b087      	sub	sp, #28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	7f1b      	ldrb	r3, [r3, #28]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_RTC_SetTime+0x1c>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e0aa      	b.n	8003bc8 <HAL_RTC_SetTime+0x172>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d126      	bne.n	8003ad2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fb11 	bl	80040c4 <RTC_ByteToBcd2>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fb0a 	bl	80040c4 <RTC_ByteToBcd2>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003ab4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	789b      	ldrb	r3, [r3, #2]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb02 	bl	80040c4 <RTC_ByteToBcd2>
 8003ac0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003ac2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e018      	b.n	8003b04 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003af2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003af8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	78db      	ldrb	r3, [r3, #3]
 8003afe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	22ca      	movs	r2, #202	; 0xca
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2253      	movs	r2, #83	; 0x53
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 faa9 	bl	800406c <RTC_EnterInitMode>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e047      	b.n	8003bc8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6899      	ldr	r1, [r3, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d111      	bne.n	8003bb2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa44 	bl	800401c <HAL_RTC_WaitForSynchro>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	22ff      	movs	r2, #255	; 0xff
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	22ff      	movs	r2, #255	; 0xff
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd90      	pop	{r4, r7, pc}

08003bd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	7f1b      	ldrb	r3, [r3, #28]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_RTC_SetDate+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e094      	b.n	8003d16 <HAL_RTC_SetDate+0x146>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10e      	bne.n	8003c1c <HAL_RTC_SetDate+0x4c>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	785b      	ldrb	r3, [r3, #1]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	f023 0310 	bic.w	r3, r3, #16
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	330a      	adds	r3, #10
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11c      	bne.n	8003c5c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa4c 	bl	80040c4 <RTC_ByteToBcd2>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fa45 	bl	80040c4 <RTC_ByteToBcd2>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c3e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	789b      	ldrb	r3, [r3, #2]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa3d 	bl	80040c4 <RTC_ByteToBcd2>
 8003c4a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c4c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e00e      	b.n	8003c7a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	78db      	ldrb	r3, [r3, #3]
 8003c60:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c68:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c6e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	22ca      	movs	r2, #202	; 0xca
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2253      	movs	r2, #83	; 0x53
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f9ee 	bl	800406c <RTC_EnterInitMode>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	22ff      	movs	r2, #255	; 0xff
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e033      	b.n	8003d16 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cbc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ccc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d111      	bne.n	8003d00 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f99d 	bl	800401c <HAL_RTC_WaitForSynchro>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	22ff      	movs	r2, #255	; 0xff
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e00a      	b.n	8003d16 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd90      	pop	{r4, r7, pc}
	...

08003d20 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003d34:	4b93      	ldr	r3, [pc, #588]	; (8003f84 <HAL_RTC_SetAlarm_IT+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a93      	ldr	r2, [pc, #588]	; (8003f88 <HAL_RTC_SetAlarm_IT+0x268>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0adb      	lsrs	r3, r3, #11
 8003d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	7f1b      	ldrb	r3, [r3, #28]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_RTC_SetAlarm_IT+0x36>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e111      	b.n	8003f7a <HAL_RTC_SetAlarm_IT+0x25a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d137      	bne.n	8003dd8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f99f 	bl	80040c4 <RTC_ByteToBcd2>
 8003d86:	4603      	mov	r3, r0
 8003d88:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f998 	bl	80040c4 <RTC_ByteToBcd2>
 8003d94:	4603      	mov	r3, r0
 8003d96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003d98:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	789b      	ldrb	r3, [r3, #2]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f990 	bl	80040c4 <RTC_ByteToBcd2>
 8003da4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003da6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	78db      	ldrb	r3, [r3, #3]
 8003dae:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003db0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f982 	bl	80040c4 <RTC_ByteToBcd2>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003dc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003dcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e023      	b.n	8003e20 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003df8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003dfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	78db      	ldrb	r3, [r3, #3]
 8003e04:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	22ca      	movs	r2, #202	; 0xca
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2253      	movs	r2, #83	; 0x53
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e44:	d141      	bne.n	8003eca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e54:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003e66:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1e5a      	subs	r2, r3, #1
 8003e6c:	617a      	str	r2, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e077      	b.n	8003f7a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0e7      	beq.n	8003e68 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	e040      	b.n	8003f4c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ed8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003eea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1e5a      	subs	r2, r3, #1
 8003ef0:	617a      	str	r2, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2203      	movs	r2, #3
 8003f02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e035      	b.n	8003f7a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0e7      	beq.n	8003eec <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f56:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f62:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	2000007c 	.word	0x2000007c
 8003f88:	10624dd3 	.word	0x10624dd3
 8003f8c:	40013c00 	.word	0x40013c00

08003f90 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc fc57 	bl	8000868 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003fca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d012      	beq.n	8004000 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8a3 	bl	8004134 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003ffe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004006:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	775a      	strb	r2, [r3, #29]
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40013c00 	.word	0x40013c00

0800401c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004036:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004038:	f7fd fc98 	bl	800196c <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800403e:	e009      	b.n	8004054 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004040:	f7fd fc94 	bl	800196c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404e:	d901      	bls.n	8004054 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e007      	b.n	8004064 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d119      	bne.n	80040ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f04f 32ff 	mov.w	r2, #4294967295
 800408e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004090:	f7fd fc6c 	bl	800196c <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004096:	e009      	b.n	80040ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004098:	f7fd fc68 	bl	800196c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040a6:	d901      	bls.n	80040ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e007      	b.n	80040bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ee      	beq.n	8004098 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80040d2:	e005      	b.n	80040e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	3b0a      	subs	r3, #10
 80040de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	d8f6      	bhi.n	80040d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	b2db      	uxtb	r3, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3350      	adds	r3, #80	; 0x50
 8004116:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e03f      	b.n	80041da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fb1c 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800418a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 faf9 	bl	8004784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d130      	bne.n	800425e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UART_Transmit_IT+0x26>
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e029      	b.n	8004260 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_UART_Transmit_IT+0x38>
 8004216:	2302      	movs	r3, #2
 8004218:	e022      	b.n	8004260 <HAL_UART_Transmit_IT+0x7e>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	; 0x21
 800423e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004258:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b20      	cmp	r3, #32
 8004284:	d140      	bne.n	8004308 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_Receive_IT+0x26>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e039      	b.n	800430a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_IT+0x38>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e032      	b.n	800430a <HAL_UART_Receive_IT+0x9e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2222      	movs	r2, #34	; 0x22
 80042c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0220 	orr.w	r2, r2, #32
 8004302:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_UART_IRQHandler+0x52>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f98c 	bl	8004680 <UART_Receive_IT>
      return;
 8004368:	e0d1      	b.n	800450e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80b0 	beq.w	80044d2 <HAL_UART_IRQHandler+0x1ba>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <HAL_UART_IRQHandler+0x70>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80a5 	beq.w	80044d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_UART_IRQHandler+0x90>
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_UART_IRQHandler+0xb0>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	f043 0202 	orr.w	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_UART_IRQHandler+0xd0>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <HAL_UART_IRQHandler+0xfa>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_UART_IRQHandler+0xee>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d078      	beq.n	800450c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_UART_IRQHandler+0x11c>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f926 	bl	8004680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <HAL_UART_IRQHandler+0x144>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d031      	beq.n	80044c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f86f 	bl	8004540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d123      	bne.n	80044b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	4a21      	ldr	r2, [pc, #132]	; (8004514 <HAL_UART_IRQHandler+0x1fc>)
 800448e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd fba8 	bl	8001bea <HAL_DMA_Abort_IT>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d016      	beq.n	80044ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044aa:	4610      	mov	r0, r2
 80044ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ae:	e00e      	b.n	80044ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f83b 	bl	800452c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b6:	e00a      	b.n	80044ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f837 	bl	800452c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	e006      	b.n	80044ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f833 	bl	800452c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80044cc:	e01e      	b.n	800450c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	bf00      	nop
    return;
 80044d0:	e01c      	b.n	800450c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f85c 	bl	80045a4 <UART_Transmit_IT>
    return;
 80044ec:	e00f      	b.n	800450e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_UART_IRQHandler+0x1f6>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8a4 	bl	8004650 <UART_EndTransmit_IT>
    return;
 8004508:	bf00      	nop
 800450a:	e000      	b.n	800450e <HAL_UART_IRQHandler+0x1f6>
    return;
 800450c:	bf00      	nop
  }
}
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0800457d 	.word	0x0800457d

08004518 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004556:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff ffc8 	bl	800452c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b21      	cmp	r3, #33	; 0x21
 80045b6:	d144      	bne.n	8004642 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d11a      	bne.n	80045f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d105      	bne.n	80045ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]
 80045ea:	e00e      	b.n	800460a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]
 80045f6:	e008      	b.n	800460a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	1c59      	adds	r1, r3, #1
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6211      	str	r1, [r2, #32]
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29b      	uxth	r3, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4619      	mov	r1, r3
 8004618:	84d1      	strh	r1, [r2, #38]	; 0x26
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800463c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
  }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff51 	bl	8004518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b22      	cmp	r3, #34	; 0x22
 8004692:	d171      	bne.n	8004778 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d123      	bne.n	80046e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10e      	bne.n	80046ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
 80046c8:	e029      	b.n	800471e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
 80046e4:	e01b      	b.n	800471e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6858      	ldr	r0, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6291      	str	r1, [r2, #40]	; 0x28
 80046fe:	b2c2      	uxtb	r2, r0
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e00c      	b.n	800471e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	b2da      	uxtb	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	1c58      	adds	r0, r3, #1
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	6288      	str	r0, [r1, #40]	; 0x28
 8004716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4619      	mov	r1, r3
 800472c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800472e:	2b00      	cmp	r3, #0
 8004730:	d120      	bne.n	8004774 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0220 	bic.w	r2, r2, #32
 8004740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fde6 	bl	800133c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e002      	b.n	800477a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047c6:	f023 030c 	bic.w	r3, r3, #12
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f2:	f040 818b 	bne.w	8004b0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4ac1      	ldr	r2, [pc, #772]	; (8004b00 <UART_SetConfig+0x37c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d005      	beq.n	800480c <UART_SetConfig+0x88>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4abf      	ldr	r2, [pc, #764]	; (8004b04 <UART_SetConfig+0x380>)
 8004806:	4293      	cmp	r3, r2
 8004808:	f040 80bd 	bne.w	8004986 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe ff90 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8004810:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	461d      	mov	r5, r3
 8004816:	f04f 0600 	mov.w	r6, #0
 800481a:	46a8      	mov	r8, r5
 800481c:	46b1      	mov	r9, r6
 800481e:	eb18 0308 	adds.w	r3, r8, r8
 8004822:	eb49 0409 	adc.w	r4, r9, r9
 8004826:	4698      	mov	r8, r3
 8004828:	46a1      	mov	r9, r4
 800482a:	eb18 0805 	adds.w	r8, r8, r5
 800482e:	eb49 0906 	adc.w	r9, r9, r6
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800483e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004842:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004846:	4688      	mov	r8, r1
 8004848:	4691      	mov	r9, r2
 800484a:	eb18 0005 	adds.w	r0, r8, r5
 800484e:	eb49 0106 	adc.w	r1, r9, r6
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	461d      	mov	r5, r3
 8004858:	f04f 0600 	mov.w	r6, #0
 800485c:	196b      	adds	r3, r5, r5
 800485e:	eb46 0406 	adc.w	r4, r6, r6
 8004862:	461a      	mov	r2, r3
 8004864:	4623      	mov	r3, r4
 8004866:	f7fb fd0b 	bl	8000280 <__aeabi_uldivmod>
 800486a:	4603      	mov	r3, r0
 800486c:	460c      	mov	r4, r1
 800486e:	461a      	mov	r2, r3
 8004870:	4ba5      	ldr	r3, [pc, #660]	; (8004b08 <UART_SetConfig+0x384>)
 8004872:	fba3 2302 	umull	r2, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	461d      	mov	r5, r3
 8004880:	f04f 0600 	mov.w	r6, #0
 8004884:	46a9      	mov	r9, r5
 8004886:	46b2      	mov	sl, r6
 8004888:	eb19 0309 	adds.w	r3, r9, r9
 800488c:	eb4a 040a 	adc.w	r4, sl, sl
 8004890:	4699      	mov	r9, r3
 8004892:	46a2      	mov	sl, r4
 8004894:	eb19 0905 	adds.w	r9, r9, r5
 8004898:	eb4a 0a06 	adc.w	sl, sl, r6
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048b0:	4689      	mov	r9, r1
 80048b2:	4692      	mov	sl, r2
 80048b4:	eb19 0005 	adds.w	r0, r9, r5
 80048b8:	eb4a 0106 	adc.w	r1, sl, r6
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	461d      	mov	r5, r3
 80048c2:	f04f 0600 	mov.w	r6, #0
 80048c6:	196b      	adds	r3, r5, r5
 80048c8:	eb46 0406 	adc.w	r4, r6, r6
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	f7fb fcd6 	bl	8000280 <__aeabi_uldivmod>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	461a      	mov	r2, r3
 80048da:	4b8b      	ldr	r3, [pc, #556]	; (8004b08 <UART_SetConfig+0x384>)
 80048dc:	fba3 1302 	umull	r1, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2164      	movs	r1, #100	; 0x64
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	3332      	adds	r3, #50	; 0x32
 80048ee:	4a86      	ldr	r2, [pc, #536]	; (8004b08 <UART_SetConfig+0x384>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048fc:	4498      	add	r8, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	461d      	mov	r5, r3
 8004902:	f04f 0600 	mov.w	r6, #0
 8004906:	46a9      	mov	r9, r5
 8004908:	46b2      	mov	sl, r6
 800490a:	eb19 0309 	adds.w	r3, r9, r9
 800490e:	eb4a 040a 	adc.w	r4, sl, sl
 8004912:	4699      	mov	r9, r3
 8004914:	46a2      	mov	sl, r4
 8004916:	eb19 0905 	adds.w	r9, r9, r5
 800491a:	eb4a 0a06 	adc.w	sl, sl, r6
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800492e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004932:	4689      	mov	r9, r1
 8004934:	4692      	mov	sl, r2
 8004936:	eb19 0005 	adds.w	r0, r9, r5
 800493a:	eb4a 0106 	adc.w	r1, sl, r6
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	461d      	mov	r5, r3
 8004944:	f04f 0600 	mov.w	r6, #0
 8004948:	196b      	adds	r3, r5, r5
 800494a:	eb46 0406 	adc.w	r4, r6, r6
 800494e:	461a      	mov	r2, r3
 8004950:	4623      	mov	r3, r4
 8004952:	f7fb fc95 	bl	8000280 <__aeabi_uldivmod>
 8004956:	4603      	mov	r3, r0
 8004958:	460c      	mov	r4, r1
 800495a:	461a      	mov	r2, r3
 800495c:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <UART_SetConfig+0x384>)
 800495e:	fba3 1302 	umull	r1, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2164      	movs	r1, #100	; 0x64
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	3332      	adds	r3, #50	; 0x32
 8004970:	4a65      	ldr	r2, [pc, #404]	; (8004b08 <UART_SetConfig+0x384>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	f003 0207 	and.w	r2, r3, #7
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4442      	add	r2, r8
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	e26f      	b.n	8004e66 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fe febf 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 800498a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	461d      	mov	r5, r3
 8004990:	f04f 0600 	mov.w	r6, #0
 8004994:	46a8      	mov	r8, r5
 8004996:	46b1      	mov	r9, r6
 8004998:	eb18 0308 	adds.w	r3, r8, r8
 800499c:	eb49 0409 	adc.w	r4, r9, r9
 80049a0:	4698      	mov	r8, r3
 80049a2:	46a1      	mov	r9, r4
 80049a4:	eb18 0805 	adds.w	r8, r8, r5
 80049a8:	eb49 0906 	adc.w	r9, r9, r6
 80049ac:	f04f 0100 	mov.w	r1, #0
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049c0:	4688      	mov	r8, r1
 80049c2:	4691      	mov	r9, r2
 80049c4:	eb18 0005 	adds.w	r0, r8, r5
 80049c8:	eb49 0106 	adc.w	r1, r9, r6
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	461d      	mov	r5, r3
 80049d2:	f04f 0600 	mov.w	r6, #0
 80049d6:	196b      	adds	r3, r5, r5
 80049d8:	eb46 0406 	adc.w	r4, r6, r6
 80049dc:	461a      	mov	r2, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	f7fb fc4e 	bl	8000280 <__aeabi_uldivmod>
 80049e4:	4603      	mov	r3, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <UART_SetConfig+0x384>)
 80049ec:	fba3 2302 	umull	r2, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	461d      	mov	r5, r3
 80049fa:	f04f 0600 	mov.w	r6, #0
 80049fe:	46a9      	mov	r9, r5
 8004a00:	46b2      	mov	sl, r6
 8004a02:	eb19 0309 	adds.w	r3, r9, r9
 8004a06:	eb4a 040a 	adc.w	r4, sl, sl
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	46a2      	mov	sl, r4
 8004a0e:	eb19 0905 	adds.w	r9, r9, r5
 8004a12:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a2a:	4689      	mov	r9, r1
 8004a2c:	4692      	mov	sl, r2
 8004a2e:	eb19 0005 	adds.w	r0, r9, r5
 8004a32:	eb4a 0106 	adc.w	r1, sl, r6
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	f04f 0600 	mov.w	r6, #0
 8004a40:	196b      	adds	r3, r5, r5
 8004a42:	eb46 0406 	adc.w	r4, r6, r6
 8004a46:	461a      	mov	r2, r3
 8004a48:	4623      	mov	r3, r4
 8004a4a:	f7fb fc19 	bl	8000280 <__aeabi_uldivmod>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	460c      	mov	r4, r1
 8004a52:	461a      	mov	r2, r3
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <UART_SetConfig+0x384>)
 8004a56:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2164      	movs	r1, #100	; 0x64
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	3332      	adds	r3, #50	; 0x32
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <UART_SetConfig+0x384>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a76:	4498      	add	r8, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	461d      	mov	r5, r3
 8004a7c:	f04f 0600 	mov.w	r6, #0
 8004a80:	46a9      	mov	r9, r5
 8004a82:	46b2      	mov	sl, r6
 8004a84:	eb19 0309 	adds.w	r3, r9, r9
 8004a88:	eb4a 040a 	adc.w	r4, sl, sl
 8004a8c:	4699      	mov	r9, r3
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	eb19 0905 	adds.w	r9, r9, r5
 8004a94:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aac:	4689      	mov	r9, r1
 8004aae:	4692      	mov	sl, r2
 8004ab0:	eb19 0005 	adds.w	r0, r9, r5
 8004ab4:	eb4a 0106 	adc.w	r1, sl, r6
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	461d      	mov	r5, r3
 8004abe:	f04f 0600 	mov.w	r6, #0
 8004ac2:	196b      	adds	r3, r5, r5
 8004ac4:	eb46 0406 	adc.w	r4, r6, r6
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	f7fb fbd8 	bl	8000280 <__aeabi_uldivmod>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <UART_SetConfig+0x384>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <UART_SetConfig+0x384>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 0207 	and.w	r2, r3, #7
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4442      	add	r2, r8
 8004afc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004afe:	e1b2      	b.n	8004e66 <UART_SetConfig+0x6e2>
 8004b00:	40011000 	.word	0x40011000
 8004b04:	40011400 	.word	0x40011400
 8004b08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4ad7      	ldr	r2, [pc, #860]	; (8004e70 <UART_SetConfig+0x6ec>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d005      	beq.n	8004b22 <UART_SetConfig+0x39e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4ad6      	ldr	r2, [pc, #856]	; (8004e74 <UART_SetConfig+0x6f0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	f040 80d1 	bne.w	8004cc4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b22:	f7fe fe05 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8004b26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	469a      	mov	sl, r3
 8004b2c:	f04f 0b00 	mov.w	fp, #0
 8004b30:	46d0      	mov	r8, sl
 8004b32:	46d9      	mov	r9, fp
 8004b34:	eb18 0308 	adds.w	r3, r8, r8
 8004b38:	eb49 0409 	adc.w	r4, r9, r9
 8004b3c:	4698      	mov	r8, r3
 8004b3e:	46a1      	mov	r9, r4
 8004b40:	eb18 080a 	adds.w	r8, r8, sl
 8004b44:	eb49 090b 	adc.w	r9, r9, fp
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b5c:	4688      	mov	r8, r1
 8004b5e:	4691      	mov	r9, r2
 8004b60:	eb1a 0508 	adds.w	r5, sl, r8
 8004b64:	eb4b 0609 	adc.w	r6, fp, r9
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	f04f 0400 	mov.w	r4, #0
 8004b7a:	0094      	lsls	r4, r2, #2
 8004b7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b80:	008b      	lsls	r3, r1, #2
 8004b82:	461a      	mov	r2, r3
 8004b84:	4623      	mov	r3, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	4631      	mov	r1, r6
 8004b8a:	f7fb fb79 	bl	8000280 <__aeabi_uldivmod>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	461a      	mov	r2, r3
 8004b94:	4bb8      	ldr	r3, [pc, #736]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004b96:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	469b      	mov	fp, r3
 8004ba4:	f04f 0c00 	mov.w	ip, #0
 8004ba8:	46d9      	mov	r9, fp
 8004baa:	46e2      	mov	sl, ip
 8004bac:	eb19 0309 	adds.w	r3, r9, r9
 8004bb0:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb4:	4699      	mov	r9, r3
 8004bb6:	46a2      	mov	sl, r4
 8004bb8:	eb19 090b 	adds.w	r9, r9, fp
 8004bbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd4:	4689      	mov	r9, r1
 8004bd6:	4692      	mov	sl, r2
 8004bd8:	eb1b 0509 	adds.w	r5, fp, r9
 8004bdc:	eb4c 060a 	adc.w	r6, ip, sl
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4619      	mov	r1, r3
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	0094      	lsls	r4, r2, #2
 8004bf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bf8:	008b      	lsls	r3, r1, #2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	4631      	mov	r1, r6
 8004c02:	f7fb fb3d 	bl	8000280 <__aeabi_uldivmod>
 8004c06:	4603      	mov	r3, r0
 8004c08:	460c      	mov	r4, r1
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b9a      	ldr	r3, [pc, #616]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2164      	movs	r1, #100	; 0x64
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	3332      	adds	r3, #50	; 0x32
 8004c20:	4a95      	ldr	r2, [pc, #596]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c2c:	4498      	add	r8, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	469b      	mov	fp, r3
 8004c32:	f04f 0c00 	mov.w	ip, #0
 8004c36:	46d9      	mov	r9, fp
 8004c38:	46e2      	mov	sl, ip
 8004c3a:	eb19 0309 	adds.w	r3, r9, r9
 8004c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8004c42:	4699      	mov	r9, r3
 8004c44:	46a2      	mov	sl, r4
 8004c46:	eb19 090b 	adds.w	r9, r9, fp
 8004c4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c62:	4689      	mov	r9, r1
 8004c64:	4692      	mov	sl, r2
 8004c66:	eb1b 0509 	adds.w	r5, fp, r9
 8004c6a:	eb4c 060a 	adc.w	r6, ip, sl
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4619      	mov	r1, r3
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	0094      	lsls	r4, r2, #2
 8004c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c86:	008b      	lsls	r3, r1, #2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	4631      	mov	r1, r6
 8004c90:	f7fb faf6 	bl	8000280 <__aeabi_uldivmod>
 8004c94:	4603      	mov	r3, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b77      	ldr	r3, [pc, #476]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2164      	movs	r1, #100	; 0x64
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a72      	ldr	r2, [pc, #456]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4442      	add	r2, r8
 8004cc0:	609a      	str	r2, [r3, #8]
 8004cc2:	e0d0      	b.n	8004e66 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe fd20 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	469a      	mov	sl, r3
 8004cce:	f04f 0b00 	mov.w	fp, #0
 8004cd2:	46d0      	mov	r8, sl
 8004cd4:	46d9      	mov	r9, fp
 8004cd6:	eb18 0308 	adds.w	r3, r8, r8
 8004cda:	eb49 0409 	adc.w	r4, r9, r9
 8004cde:	4698      	mov	r8, r3
 8004ce0:	46a1      	mov	r9, r4
 8004ce2:	eb18 080a 	adds.w	r8, r8, sl
 8004ce6:	eb49 090b 	adc.w	r9, r9, fp
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cfe:	4688      	mov	r8, r1
 8004d00:	4691      	mov	r9, r2
 8004d02:	eb1a 0508 	adds.w	r5, sl, r8
 8004d06:	eb4b 0609 	adc.w	r6, fp, r9
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	f04f 0400 	mov.w	r4, #0
 8004d1c:	0094      	lsls	r4, r2, #2
 8004d1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d22:	008b      	lsls	r3, r1, #2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	4628      	mov	r0, r5
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	f7fb faa8 	bl	8000280 <__aeabi_uldivmod>
 8004d30:	4603      	mov	r3, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004d38:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	469b      	mov	fp, r3
 8004d46:	f04f 0c00 	mov.w	ip, #0
 8004d4a:	46d9      	mov	r9, fp
 8004d4c:	46e2      	mov	sl, ip
 8004d4e:	eb19 0309 	adds.w	r3, r9, r9
 8004d52:	eb4a 040a 	adc.w	r4, sl, sl
 8004d56:	4699      	mov	r9, r3
 8004d58:	46a2      	mov	sl, r4
 8004d5a:	eb19 090b 	adds.w	r9, r9, fp
 8004d5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d76:	4689      	mov	r9, r1
 8004d78:	4692      	mov	sl, r2
 8004d7a:	eb1b 0509 	adds.w	r5, fp, r9
 8004d7e:	eb4c 060a 	adc.w	r6, ip, sl
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4619      	mov	r1, r3
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	0094      	lsls	r4, r2, #2
 8004d96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d9a:	008b      	lsls	r3, r1, #2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	4631      	mov	r1, r6
 8004da4:	f7fb fa6c 	bl	8000280 <__aeabi_uldivmod>
 8004da8:	4603      	mov	r3, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	; 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	3332      	adds	r3, #50	; 0x32
 8004dc2:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dce:	4498      	add	r8, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	469b      	mov	fp, r3
 8004dd4:	f04f 0c00 	mov.w	ip, #0
 8004dd8:	46d9      	mov	r9, fp
 8004dda:	46e2      	mov	sl, ip
 8004ddc:	eb19 0309 	adds.w	r3, r9, r9
 8004de0:	eb4a 040a 	adc.w	r4, sl, sl
 8004de4:	4699      	mov	r9, r3
 8004de6:	46a2      	mov	sl, r4
 8004de8:	eb19 090b 	adds.w	r9, r9, fp
 8004dec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e04:	4689      	mov	r9, r1
 8004e06:	4692      	mov	sl, r2
 8004e08:	eb1b 0509 	adds.w	r5, fp, r9
 8004e0c:	eb4c 060a 	adc.w	r6, ip, sl
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4619      	mov	r1, r3
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f04f 0400 	mov.w	r4, #0
 8004e22:	0094      	lsls	r4, r2, #2
 8004e24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	4628      	mov	r0, r5
 8004e30:	4631      	mov	r1, r6
 8004e32:	f7fb fa25 	bl	8000280 <__aeabi_uldivmod>
 8004e36:	4603      	mov	r3, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2164      	movs	r1, #100	; 0x64
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	3332      	adds	r3, #50	; 0x32
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <UART_SetConfig+0x6f4>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4442      	add	r2, r8
 8004e62:	609a      	str	r2, [r3, #8]
}
 8004e64:	e7ff      	b.n	8004e66 <UART_SetConfig+0x6e2>
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e70:	40011000 	.word	0x40011000
 8004e74:	40011400 	.word	0x40011400
 8004e78:	51eb851f 	.word	0x51eb851f

08004e7c <__errno>:
 8004e7c:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <__errno+0x8>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000088 	.word	0x20000088

08004e88 <__libc_init_array>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4e0d      	ldr	r6, [pc, #52]	; (8004ec0 <__libc_init_array+0x38>)
 8004e8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ec4 <__libc_init_array+0x3c>)
 8004e8e:	1ba4      	subs	r4, r4, r6
 8004e90:	10a4      	asrs	r4, r4, #2
 8004e92:	2500      	movs	r5, #0
 8004e94:	42a5      	cmp	r5, r4
 8004e96:	d109      	bne.n	8004eac <__libc_init_array+0x24>
 8004e98:	4e0b      	ldr	r6, [pc, #44]	; (8004ec8 <__libc_init_array+0x40>)
 8004e9a:	4c0c      	ldr	r4, [pc, #48]	; (8004ecc <__libc_init_array+0x44>)
 8004e9c:	f000 fc26 	bl	80056ec <_init>
 8004ea0:	1ba4      	subs	r4, r4, r6
 8004ea2:	10a4      	asrs	r4, r4, #2
 8004ea4:	2500      	movs	r5, #0
 8004ea6:	42a5      	cmp	r5, r4
 8004ea8:	d105      	bne.n	8004eb6 <__libc_init_array+0x2e>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb0:	4798      	blx	r3
 8004eb2:	3501      	adds	r5, #1
 8004eb4:	e7ee      	b.n	8004e94 <__libc_init_array+0xc>
 8004eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eba:	4798      	blx	r3
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	e7f2      	b.n	8004ea6 <__libc_init_array+0x1e>
 8004ec0:	08005818 	.word	0x08005818
 8004ec4:	08005818 	.word	0x08005818
 8004ec8:	08005818 	.word	0x08005818
 8004ecc:	0800581c 	.word	0x0800581c

08004ed0 <memset>:
 8004ed0:	4402      	add	r2, r0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d100      	bne.n	8004eda <memset+0xa>
 8004ed8:	4770      	bx	lr
 8004eda:	f803 1b01 	strb.w	r1, [r3], #1
 8004ede:	e7f9      	b.n	8004ed4 <memset+0x4>

08004ee0 <siprintf>:
 8004ee0:	b40e      	push	{r1, r2, r3}
 8004ee2:	b500      	push	{lr}
 8004ee4:	b09c      	sub	sp, #112	; 0x70
 8004ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ee8:	9002      	str	r0, [sp, #8]
 8004eea:	9006      	str	r0, [sp, #24]
 8004eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ef0:	4809      	ldr	r0, [pc, #36]	; (8004f18 <siprintf+0x38>)
 8004ef2:	9107      	str	r1, [sp, #28]
 8004ef4:	9104      	str	r1, [sp, #16]
 8004ef6:	4909      	ldr	r1, [pc, #36]	; (8004f1c <siprintf+0x3c>)
 8004ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004efc:	9105      	str	r1, [sp, #20]
 8004efe:	6800      	ldr	r0, [r0, #0]
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	a902      	add	r1, sp, #8
 8004f04:	f000 f866 	bl	8004fd4 <_svfiprintf_r>
 8004f08:	9b02      	ldr	r3, [sp, #8]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	b01c      	add	sp, #112	; 0x70
 8004f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f14:	b003      	add	sp, #12
 8004f16:	4770      	bx	lr
 8004f18:	20000088 	.word	0x20000088
 8004f1c:	ffff0208 	.word	0xffff0208

08004f20 <__ssputs_r>:
 8004f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	688e      	ldr	r6, [r1, #8]
 8004f26:	429e      	cmp	r6, r3
 8004f28:	4682      	mov	sl, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4690      	mov	r8, r2
 8004f2e:	4699      	mov	r9, r3
 8004f30:	d837      	bhi.n	8004fa2 <__ssputs_r+0x82>
 8004f32:	898a      	ldrh	r2, [r1, #12]
 8004f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f38:	d031      	beq.n	8004f9e <__ssputs_r+0x7e>
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	6909      	ldr	r1, [r1, #16]
 8004f3e:	1a6f      	subs	r7, r5, r1
 8004f40:	6965      	ldr	r5, [r4, #20]
 8004f42:	2302      	movs	r3, #2
 8004f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f48:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f4c:	f109 0301 	add.w	r3, r9, #1
 8004f50:	443b      	add	r3, r7
 8004f52:	429d      	cmp	r5, r3
 8004f54:	bf38      	it	cc
 8004f56:	461d      	movcc	r5, r3
 8004f58:	0553      	lsls	r3, r2, #21
 8004f5a:	d530      	bpl.n	8004fbe <__ssputs_r+0x9e>
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f000 fb2b 	bl	80055b8 <_malloc_r>
 8004f62:	4606      	mov	r6, r0
 8004f64:	b950      	cbnz	r0, 8004f7c <__ssputs_r+0x5c>
 8004f66:	230c      	movs	r3, #12
 8004f68:	f8ca 3000 	str.w	r3, [sl]
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7c:	463a      	mov	r2, r7
 8004f7e:	6921      	ldr	r1, [r4, #16]
 8004f80:	f000 faa8 	bl	80054d4 <memcpy>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	6126      	str	r6, [r4, #16]
 8004f92:	6165      	str	r5, [r4, #20]
 8004f94:	443e      	add	r6, r7
 8004f96:	1bed      	subs	r5, r5, r7
 8004f98:	6026      	str	r6, [r4, #0]
 8004f9a:	60a5      	str	r5, [r4, #8]
 8004f9c:	464e      	mov	r6, r9
 8004f9e:	454e      	cmp	r6, r9
 8004fa0:	d900      	bls.n	8004fa4 <__ssputs_r+0x84>
 8004fa2:	464e      	mov	r6, r9
 8004fa4:	4632      	mov	r2, r6
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	f000 fa9e 	bl	80054ea <memmove>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	60a3      	str	r3, [r4, #8]
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	441e      	add	r6, r3
 8004fb8:	6026      	str	r6, [r4, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e7dc      	b.n	8004f78 <__ssputs_r+0x58>
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	f000 fb54 	bl	800566c <_realloc_r>
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d1e2      	bne.n	8004f90 <__ssputs_r+0x70>
 8004fca:	6921      	ldr	r1, [r4, #16]
 8004fcc:	4650      	mov	r0, sl
 8004fce:	f000 faa5 	bl	800551c <_free_r>
 8004fd2:	e7c8      	b.n	8004f66 <__ssputs_r+0x46>

08004fd4 <_svfiprintf_r>:
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	461d      	mov	r5, r3
 8004fda:	898b      	ldrh	r3, [r1, #12]
 8004fdc:	061f      	lsls	r7, r3, #24
 8004fde:	b09d      	sub	sp, #116	; 0x74
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	4616      	mov	r6, r2
 8004fe6:	d50f      	bpl.n	8005008 <_svfiprintf_r+0x34>
 8004fe8:	690b      	ldr	r3, [r1, #16]
 8004fea:	b96b      	cbnz	r3, 8005008 <_svfiprintf_r+0x34>
 8004fec:	2140      	movs	r1, #64	; 0x40
 8004fee:	f000 fae3 	bl	80055b8 <_malloc_r>
 8004ff2:	6020      	str	r0, [r4, #0]
 8004ff4:	6120      	str	r0, [r4, #16]
 8004ff6:	b928      	cbnz	r0, 8005004 <_svfiprintf_r+0x30>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	f8c8 3000 	str.w	r3, [r8]
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8005002:	e0c8      	b.n	8005196 <_svfiprintf_r+0x1c2>
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	6163      	str	r3, [r4, #20]
 8005008:	2300      	movs	r3, #0
 800500a:	9309      	str	r3, [sp, #36]	; 0x24
 800500c:	2320      	movs	r3, #32
 800500e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005012:	2330      	movs	r3, #48	; 0x30
 8005014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005018:	9503      	str	r5, [sp, #12]
 800501a:	f04f 0b01 	mov.w	fp, #1
 800501e:	4637      	mov	r7, r6
 8005020:	463d      	mov	r5, r7
 8005022:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005026:	b10b      	cbz	r3, 800502c <_svfiprintf_r+0x58>
 8005028:	2b25      	cmp	r3, #37	; 0x25
 800502a:	d13e      	bne.n	80050aa <_svfiprintf_r+0xd6>
 800502c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005030:	d00b      	beq.n	800504a <_svfiprintf_r+0x76>
 8005032:	4653      	mov	r3, sl
 8005034:	4632      	mov	r2, r6
 8005036:	4621      	mov	r1, r4
 8005038:	4640      	mov	r0, r8
 800503a:	f7ff ff71 	bl	8004f20 <__ssputs_r>
 800503e:	3001      	adds	r0, #1
 8005040:	f000 80a4 	beq.w	800518c <_svfiprintf_r+0x1b8>
 8005044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005046:	4453      	add	r3, sl
 8005048:	9309      	str	r3, [sp, #36]	; 0x24
 800504a:	783b      	ldrb	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 809d 	beq.w	800518c <_svfiprintf_r+0x1b8>
 8005052:	2300      	movs	r3, #0
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	9307      	str	r3, [sp, #28]
 8005060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005064:	931a      	str	r3, [sp, #104]	; 0x68
 8005066:	462f      	mov	r7, r5
 8005068:	2205      	movs	r2, #5
 800506a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800506e:	4850      	ldr	r0, [pc, #320]	; (80051b0 <_svfiprintf_r+0x1dc>)
 8005070:	f7fb f8b6 	bl	80001e0 <memchr>
 8005074:	9b04      	ldr	r3, [sp, #16]
 8005076:	b9d0      	cbnz	r0, 80050ae <_svfiprintf_r+0xda>
 8005078:	06d9      	lsls	r1, r3, #27
 800507a:	bf44      	itt	mi
 800507c:	2220      	movmi	r2, #32
 800507e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005082:	071a      	lsls	r2, r3, #28
 8005084:	bf44      	itt	mi
 8005086:	222b      	movmi	r2, #43	; 0x2b
 8005088:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800508c:	782a      	ldrb	r2, [r5, #0]
 800508e:	2a2a      	cmp	r2, #42	; 0x2a
 8005090:	d015      	beq.n	80050be <_svfiprintf_r+0xea>
 8005092:	9a07      	ldr	r2, [sp, #28]
 8005094:	462f      	mov	r7, r5
 8005096:	2000      	movs	r0, #0
 8005098:	250a      	movs	r5, #10
 800509a:	4639      	mov	r1, r7
 800509c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a0:	3b30      	subs	r3, #48	; 0x30
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d94d      	bls.n	8005142 <_svfiprintf_r+0x16e>
 80050a6:	b1b8      	cbz	r0, 80050d8 <_svfiprintf_r+0x104>
 80050a8:	e00f      	b.n	80050ca <_svfiprintf_r+0xf6>
 80050aa:	462f      	mov	r7, r5
 80050ac:	e7b8      	b.n	8005020 <_svfiprintf_r+0x4c>
 80050ae:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <_svfiprintf_r+0x1dc>)
 80050b0:	1a80      	subs	r0, r0, r2
 80050b2:	fa0b f000 	lsl.w	r0, fp, r0
 80050b6:	4318      	orrs	r0, r3
 80050b8:	9004      	str	r0, [sp, #16]
 80050ba:	463d      	mov	r5, r7
 80050bc:	e7d3      	b.n	8005066 <_svfiprintf_r+0x92>
 80050be:	9a03      	ldr	r2, [sp, #12]
 80050c0:	1d11      	adds	r1, r2, #4
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	db01      	blt.n	80050ce <_svfiprintf_r+0xfa>
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	e004      	b.n	80050d8 <_svfiprintf_r+0x104>
 80050ce:	4252      	negs	r2, r2
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	9207      	str	r2, [sp, #28]
 80050d6:	9304      	str	r3, [sp, #16]
 80050d8:	783b      	ldrb	r3, [r7, #0]
 80050da:	2b2e      	cmp	r3, #46	; 0x2e
 80050dc:	d10c      	bne.n	80050f8 <_svfiprintf_r+0x124>
 80050de:	787b      	ldrb	r3, [r7, #1]
 80050e0:	2b2a      	cmp	r3, #42	; 0x2a
 80050e2:	d133      	bne.n	800514c <_svfiprintf_r+0x178>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	9203      	str	r2, [sp, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfb8      	it	lt
 80050f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050f4:	3702      	adds	r7, #2
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	4d2e      	ldr	r5, [pc, #184]	; (80051b4 <_svfiprintf_r+0x1e0>)
 80050fa:	7839      	ldrb	r1, [r7, #0]
 80050fc:	2203      	movs	r2, #3
 80050fe:	4628      	mov	r0, r5
 8005100:	f7fb f86e 	bl	80001e0 <memchr>
 8005104:	b138      	cbz	r0, 8005116 <_svfiprintf_r+0x142>
 8005106:	2340      	movs	r3, #64	; 0x40
 8005108:	1b40      	subs	r0, r0, r5
 800510a:	fa03 f000 	lsl.w	r0, r3, r0
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	4303      	orrs	r3, r0
 8005112:	3701      	adds	r7, #1
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	7839      	ldrb	r1, [r7, #0]
 8005118:	4827      	ldr	r0, [pc, #156]	; (80051b8 <_svfiprintf_r+0x1e4>)
 800511a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800511e:	2206      	movs	r2, #6
 8005120:	1c7e      	adds	r6, r7, #1
 8005122:	f7fb f85d 	bl	80001e0 <memchr>
 8005126:	2800      	cmp	r0, #0
 8005128:	d038      	beq.n	800519c <_svfiprintf_r+0x1c8>
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <_svfiprintf_r+0x1e8>)
 800512c:	bb13      	cbnz	r3, 8005174 <_svfiprintf_r+0x1a0>
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	3307      	adds	r3, #7
 8005132:	f023 0307 	bic.w	r3, r3, #7
 8005136:	3308      	adds	r3, #8
 8005138:	9303      	str	r3, [sp, #12]
 800513a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513c:	444b      	add	r3, r9
 800513e:	9309      	str	r3, [sp, #36]	; 0x24
 8005140:	e76d      	b.n	800501e <_svfiprintf_r+0x4a>
 8005142:	fb05 3202 	mla	r2, r5, r2, r3
 8005146:	2001      	movs	r0, #1
 8005148:	460f      	mov	r7, r1
 800514a:	e7a6      	b.n	800509a <_svfiprintf_r+0xc6>
 800514c:	2300      	movs	r3, #0
 800514e:	3701      	adds	r7, #1
 8005150:	9305      	str	r3, [sp, #20]
 8005152:	4619      	mov	r1, r3
 8005154:	250a      	movs	r5, #10
 8005156:	4638      	mov	r0, r7
 8005158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515c:	3a30      	subs	r2, #48	; 0x30
 800515e:	2a09      	cmp	r2, #9
 8005160:	d903      	bls.n	800516a <_svfiprintf_r+0x196>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0c8      	beq.n	80050f8 <_svfiprintf_r+0x124>
 8005166:	9105      	str	r1, [sp, #20]
 8005168:	e7c6      	b.n	80050f8 <_svfiprintf_r+0x124>
 800516a:	fb05 2101 	mla	r1, r5, r1, r2
 800516e:	2301      	movs	r3, #1
 8005170:	4607      	mov	r7, r0
 8005172:	e7f0      	b.n	8005156 <_svfiprintf_r+0x182>
 8005174:	ab03      	add	r3, sp, #12
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	4622      	mov	r2, r4
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <_svfiprintf_r+0x1ec>)
 800517c:	a904      	add	r1, sp, #16
 800517e:	4640      	mov	r0, r8
 8005180:	f3af 8000 	nop.w
 8005184:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005188:	4681      	mov	r9, r0
 800518a:	d1d6      	bne.n	800513a <_svfiprintf_r+0x166>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	065b      	lsls	r3, r3, #25
 8005190:	f53f af35 	bmi.w	8004ffe <_svfiprintf_r+0x2a>
 8005194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005196:	b01d      	add	sp, #116	; 0x74
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519c:	ab03      	add	r3, sp, #12
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4622      	mov	r2, r4
 80051a2:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <_svfiprintf_r+0x1ec>)
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	4640      	mov	r0, r8
 80051a8:	f000 f882 	bl	80052b0 <_printf_i>
 80051ac:	e7ea      	b.n	8005184 <_svfiprintf_r+0x1b0>
 80051ae:	bf00      	nop
 80051b0:	080057dc 	.word	0x080057dc
 80051b4:	080057e2 	.word	0x080057e2
 80051b8:	080057e6 	.word	0x080057e6
 80051bc:	00000000 	.word	0x00000000
 80051c0:	08004f21 	.word	0x08004f21

080051c4 <_printf_common>:
 80051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c8:	4691      	mov	r9, r2
 80051ca:	461f      	mov	r7, r3
 80051cc:	688a      	ldr	r2, [r1, #8]
 80051ce:	690b      	ldr	r3, [r1, #16]
 80051d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d4:	4293      	cmp	r3, r2
 80051d6:	bfb8      	it	lt
 80051d8:	4613      	movlt	r3, r2
 80051da:	f8c9 3000 	str.w	r3, [r9]
 80051de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051e2:	4606      	mov	r6, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	b112      	cbz	r2, 80051ee <_printf_common+0x2a>
 80051e8:	3301      	adds	r3, #1
 80051ea:	f8c9 3000 	str.w	r3, [r9]
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	0699      	lsls	r1, r3, #26
 80051f2:	bf42      	ittt	mi
 80051f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051f8:	3302      	addmi	r3, #2
 80051fa:	f8c9 3000 	strmi.w	r3, [r9]
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	f015 0506 	ands.w	r5, r5, #6
 8005204:	d107      	bne.n	8005216 <_printf_common+0x52>
 8005206:	f104 0a19 	add.w	sl, r4, #25
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	f8d9 2000 	ldr.w	r2, [r9]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	42ab      	cmp	r3, r5
 8005214:	dc28      	bgt.n	8005268 <_printf_common+0xa4>
 8005216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	3300      	adds	r3, #0
 800521e:	bf18      	it	ne
 8005220:	2301      	movne	r3, #1
 8005222:	0692      	lsls	r2, r2, #26
 8005224:	d42d      	bmi.n	8005282 <_printf_common+0xbe>
 8005226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800522a:	4639      	mov	r1, r7
 800522c:	4630      	mov	r0, r6
 800522e:	47c0      	blx	r8
 8005230:	3001      	adds	r0, #1
 8005232:	d020      	beq.n	8005276 <_printf_common+0xb2>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	68e5      	ldr	r5, [r4, #12]
 8005238:	f8d9 2000 	ldr.w	r2, [r9]
 800523c:	f003 0306 	and.w	r3, r3, #6
 8005240:	2b04      	cmp	r3, #4
 8005242:	bf08      	it	eq
 8005244:	1aad      	subeq	r5, r5, r2
 8005246:	68a3      	ldr	r3, [r4, #8]
 8005248:	6922      	ldr	r2, [r4, #16]
 800524a:	bf0c      	ite	eq
 800524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005250:	2500      	movne	r5, #0
 8005252:	4293      	cmp	r3, r2
 8005254:	bfc4      	itt	gt
 8005256:	1a9b      	subgt	r3, r3, r2
 8005258:	18ed      	addgt	r5, r5, r3
 800525a:	f04f 0900 	mov.w	r9, #0
 800525e:	341a      	adds	r4, #26
 8005260:	454d      	cmp	r5, r9
 8005262:	d11a      	bne.n	800529a <_printf_common+0xd6>
 8005264:	2000      	movs	r0, #0
 8005266:	e008      	b.n	800527a <_printf_common+0xb6>
 8005268:	2301      	movs	r3, #1
 800526a:	4652      	mov	r2, sl
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	47c0      	blx	r8
 8005272:	3001      	adds	r0, #1
 8005274:	d103      	bne.n	800527e <_printf_common+0xba>
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	3501      	adds	r5, #1
 8005280:	e7c3      	b.n	800520a <_printf_common+0x46>
 8005282:	18e1      	adds	r1, r4, r3
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	2030      	movs	r0, #48	; 0x30
 8005288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800528c:	4422      	add	r2, r4
 800528e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005296:	3302      	adds	r3, #2
 8005298:	e7c5      	b.n	8005226 <_printf_common+0x62>
 800529a:	2301      	movs	r3, #1
 800529c:	4622      	mov	r2, r4
 800529e:	4639      	mov	r1, r7
 80052a0:	4630      	mov	r0, r6
 80052a2:	47c0      	blx	r8
 80052a4:	3001      	adds	r0, #1
 80052a6:	d0e6      	beq.n	8005276 <_printf_common+0xb2>
 80052a8:	f109 0901 	add.w	r9, r9, #1
 80052ac:	e7d8      	b.n	8005260 <_printf_common+0x9c>
	...

080052b0 <_printf_i>:
 80052b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052b8:	460c      	mov	r4, r1
 80052ba:	7e09      	ldrb	r1, [r1, #24]
 80052bc:	b085      	sub	sp, #20
 80052be:	296e      	cmp	r1, #110	; 0x6e
 80052c0:	4617      	mov	r7, r2
 80052c2:	4606      	mov	r6, r0
 80052c4:	4698      	mov	r8, r3
 80052c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052c8:	f000 80b3 	beq.w	8005432 <_printf_i+0x182>
 80052cc:	d822      	bhi.n	8005314 <_printf_i+0x64>
 80052ce:	2963      	cmp	r1, #99	; 0x63
 80052d0:	d036      	beq.n	8005340 <_printf_i+0x90>
 80052d2:	d80a      	bhi.n	80052ea <_printf_i+0x3a>
 80052d4:	2900      	cmp	r1, #0
 80052d6:	f000 80b9 	beq.w	800544c <_printf_i+0x19c>
 80052da:	2958      	cmp	r1, #88	; 0x58
 80052dc:	f000 8083 	beq.w	80053e6 <_printf_i+0x136>
 80052e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80052e8:	e032      	b.n	8005350 <_printf_i+0xa0>
 80052ea:	2964      	cmp	r1, #100	; 0x64
 80052ec:	d001      	beq.n	80052f2 <_printf_i+0x42>
 80052ee:	2969      	cmp	r1, #105	; 0x69
 80052f0:	d1f6      	bne.n	80052e0 <_printf_i+0x30>
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	0605      	lsls	r5, r0, #24
 80052f8:	f103 0104 	add.w	r1, r3, #4
 80052fc:	d52a      	bpl.n	8005354 <_printf_i+0xa4>
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6011      	str	r1, [r2, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da03      	bge.n	800530e <_printf_i+0x5e>
 8005306:	222d      	movs	r2, #45	; 0x2d
 8005308:	425b      	negs	r3, r3
 800530a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800530e:	486f      	ldr	r0, [pc, #444]	; (80054cc <_printf_i+0x21c>)
 8005310:	220a      	movs	r2, #10
 8005312:	e039      	b.n	8005388 <_printf_i+0xd8>
 8005314:	2973      	cmp	r1, #115	; 0x73
 8005316:	f000 809d 	beq.w	8005454 <_printf_i+0x1a4>
 800531a:	d808      	bhi.n	800532e <_printf_i+0x7e>
 800531c:	296f      	cmp	r1, #111	; 0x6f
 800531e:	d020      	beq.n	8005362 <_printf_i+0xb2>
 8005320:	2970      	cmp	r1, #112	; 0x70
 8005322:	d1dd      	bne.n	80052e0 <_printf_i+0x30>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f043 0320 	orr.w	r3, r3, #32
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	e003      	b.n	8005336 <_printf_i+0x86>
 800532e:	2975      	cmp	r1, #117	; 0x75
 8005330:	d017      	beq.n	8005362 <_printf_i+0xb2>
 8005332:	2978      	cmp	r1, #120	; 0x78
 8005334:	d1d4      	bne.n	80052e0 <_printf_i+0x30>
 8005336:	2378      	movs	r3, #120	; 0x78
 8005338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800533c:	4864      	ldr	r0, [pc, #400]	; (80054d0 <_printf_i+0x220>)
 800533e:	e055      	b.n	80053ec <_printf_i+0x13c>
 8005340:	6813      	ldr	r3, [r2, #0]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6011      	str	r1, [r2, #0]
 8005348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005350:	2301      	movs	r3, #1
 8005352:	e08c      	b.n	800546e <_printf_i+0x1be>
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6011      	str	r1, [r2, #0]
 8005358:	f010 0f40 	tst.w	r0, #64	; 0x40
 800535c:	bf18      	it	ne
 800535e:	b21b      	sxthne	r3, r3
 8005360:	e7cf      	b.n	8005302 <_printf_i+0x52>
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	6825      	ldr	r5, [r4, #0]
 8005366:	1d18      	adds	r0, r3, #4
 8005368:	6010      	str	r0, [r2, #0]
 800536a:	0628      	lsls	r0, r5, #24
 800536c:	d501      	bpl.n	8005372 <_printf_i+0xc2>
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	e002      	b.n	8005378 <_printf_i+0xc8>
 8005372:	0668      	lsls	r0, r5, #25
 8005374:	d5fb      	bpl.n	800536e <_printf_i+0xbe>
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	4854      	ldr	r0, [pc, #336]	; (80054cc <_printf_i+0x21c>)
 800537a:	296f      	cmp	r1, #111	; 0x6f
 800537c:	bf14      	ite	ne
 800537e:	220a      	movne	r2, #10
 8005380:	2208      	moveq	r2, #8
 8005382:	2100      	movs	r1, #0
 8005384:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005388:	6865      	ldr	r5, [r4, #4]
 800538a:	60a5      	str	r5, [r4, #8]
 800538c:	2d00      	cmp	r5, #0
 800538e:	f2c0 8095 	blt.w	80054bc <_printf_i+0x20c>
 8005392:	6821      	ldr	r1, [r4, #0]
 8005394:	f021 0104 	bic.w	r1, r1, #4
 8005398:	6021      	str	r1, [r4, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d13d      	bne.n	800541a <_printf_i+0x16a>
 800539e:	2d00      	cmp	r5, #0
 80053a0:	f040 808e 	bne.w	80054c0 <_printf_i+0x210>
 80053a4:	4665      	mov	r5, ip
 80053a6:	2a08      	cmp	r2, #8
 80053a8:	d10b      	bne.n	80053c2 <_printf_i+0x112>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	07db      	lsls	r3, r3, #31
 80053ae:	d508      	bpl.n	80053c2 <_printf_i+0x112>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	6862      	ldr	r2, [r4, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	bfde      	ittt	le
 80053b8:	2330      	movle	r3, #48	; 0x30
 80053ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c2:	ebac 0305 	sub.w	r3, ip, r5
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	f8cd 8000 	str.w	r8, [sp]
 80053cc:	463b      	mov	r3, r7
 80053ce:	aa03      	add	r2, sp, #12
 80053d0:	4621      	mov	r1, r4
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7ff fef6 	bl	80051c4 <_printf_common>
 80053d8:	3001      	adds	r0, #1
 80053da:	d14d      	bne.n	8005478 <_printf_i+0x1c8>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b005      	add	sp, #20
 80053e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053e6:	4839      	ldr	r0, [pc, #228]	; (80054cc <_printf_i+0x21c>)
 80053e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	6821      	ldr	r1, [r4, #0]
 80053f0:	1d1d      	adds	r5, r3, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	060a      	lsls	r2, r1, #24
 80053f8:	d50b      	bpl.n	8005412 <_printf_i+0x162>
 80053fa:	07ca      	lsls	r2, r1, #31
 80053fc:	bf44      	itt	mi
 80053fe:	f041 0120 	orrmi.w	r1, r1, #32
 8005402:	6021      	strmi	r1, [r4, #0]
 8005404:	b91b      	cbnz	r3, 800540e <_printf_i+0x15e>
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	f022 0220 	bic.w	r2, r2, #32
 800540c:	6022      	str	r2, [r4, #0]
 800540e:	2210      	movs	r2, #16
 8005410:	e7b7      	b.n	8005382 <_printf_i+0xd2>
 8005412:	064d      	lsls	r5, r1, #25
 8005414:	bf48      	it	mi
 8005416:	b29b      	uxthmi	r3, r3
 8005418:	e7ef      	b.n	80053fa <_printf_i+0x14a>
 800541a:	4665      	mov	r5, ip
 800541c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005420:	fb02 3311 	mls	r3, r2, r1, r3
 8005424:	5cc3      	ldrb	r3, [r0, r3]
 8005426:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800542a:	460b      	mov	r3, r1
 800542c:	2900      	cmp	r1, #0
 800542e:	d1f5      	bne.n	800541c <_printf_i+0x16c>
 8005430:	e7b9      	b.n	80053a6 <_printf_i+0xf6>
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	6825      	ldr	r5, [r4, #0]
 8005436:	6961      	ldr	r1, [r4, #20]
 8005438:	1d18      	adds	r0, r3, #4
 800543a:	6010      	str	r0, [r2, #0]
 800543c:	0628      	lsls	r0, r5, #24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	d501      	bpl.n	8005446 <_printf_i+0x196>
 8005442:	6019      	str	r1, [r3, #0]
 8005444:	e002      	b.n	800544c <_printf_i+0x19c>
 8005446:	066a      	lsls	r2, r5, #25
 8005448:	d5fb      	bpl.n	8005442 <_printf_i+0x192>
 800544a:	8019      	strh	r1, [r3, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	4665      	mov	r5, ip
 8005452:	e7b9      	b.n	80053c8 <_printf_i+0x118>
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	1d19      	adds	r1, r3, #4
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	681d      	ldr	r5, [r3, #0]
 800545c:	6862      	ldr	r2, [r4, #4]
 800545e:	2100      	movs	r1, #0
 8005460:	4628      	mov	r0, r5
 8005462:	f7fa febd 	bl	80001e0 <memchr>
 8005466:	b108      	cbz	r0, 800546c <_printf_i+0x1bc>
 8005468:	1b40      	subs	r0, r0, r5
 800546a:	6060      	str	r0, [r4, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2300      	movs	r3, #0
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005476:	e7a7      	b.n	80053c8 <_printf_i+0x118>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	462a      	mov	r2, r5
 800547c:	4639      	mov	r1, r7
 800547e:	4630      	mov	r0, r6
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d0aa      	beq.n	80053dc <_printf_i+0x12c>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	079b      	lsls	r3, r3, #30
 800548a:	d413      	bmi.n	80054b4 <_printf_i+0x204>
 800548c:	68e0      	ldr	r0, [r4, #12]
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	4298      	cmp	r0, r3
 8005492:	bfb8      	it	lt
 8005494:	4618      	movlt	r0, r3
 8005496:	e7a3      	b.n	80053e0 <_printf_i+0x130>
 8005498:	2301      	movs	r3, #1
 800549a:	464a      	mov	r2, r9
 800549c:	4639      	mov	r1, r7
 800549e:	4630      	mov	r0, r6
 80054a0:	47c0      	blx	r8
 80054a2:	3001      	adds	r0, #1
 80054a4:	d09a      	beq.n	80053dc <_printf_i+0x12c>
 80054a6:	3501      	adds	r5, #1
 80054a8:	68e3      	ldr	r3, [r4, #12]
 80054aa:	9a03      	ldr	r2, [sp, #12]
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	42ab      	cmp	r3, r5
 80054b0:	dcf2      	bgt.n	8005498 <_printf_i+0x1e8>
 80054b2:	e7eb      	b.n	800548c <_printf_i+0x1dc>
 80054b4:	2500      	movs	r5, #0
 80054b6:	f104 0919 	add.w	r9, r4, #25
 80054ba:	e7f5      	b.n	80054a8 <_printf_i+0x1f8>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ac      	bne.n	800541a <_printf_i+0x16a>
 80054c0:	7803      	ldrb	r3, [r0, #0]
 80054c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ca:	e76c      	b.n	80053a6 <_printf_i+0xf6>
 80054cc:	080057ed 	.word	0x080057ed
 80054d0:	080057fe 	.word	0x080057fe

080054d4 <memcpy>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	1e43      	subs	r3, r0, #1
 80054d8:	440a      	add	r2, r1
 80054da:	4291      	cmp	r1, r2
 80054dc:	d100      	bne.n	80054e0 <memcpy+0xc>
 80054de:	bd10      	pop	{r4, pc}
 80054e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e8:	e7f7      	b.n	80054da <memcpy+0x6>

080054ea <memmove>:
 80054ea:	4288      	cmp	r0, r1
 80054ec:	b510      	push	{r4, lr}
 80054ee:	eb01 0302 	add.w	r3, r1, r2
 80054f2:	d807      	bhi.n	8005504 <memmove+0x1a>
 80054f4:	1e42      	subs	r2, r0, #1
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d00a      	beq.n	8005510 <memmove+0x26>
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005502:	e7f8      	b.n	80054f6 <memmove+0xc>
 8005504:	4283      	cmp	r3, r0
 8005506:	d9f5      	bls.n	80054f4 <memmove+0xa>
 8005508:	1881      	adds	r1, r0, r2
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	42d3      	cmn	r3, r2
 800550e:	d100      	bne.n	8005512 <memmove+0x28>
 8005510:	bd10      	pop	{r4, pc}
 8005512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005516:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800551a:	e7f7      	b.n	800550c <memmove+0x22>

0800551c <_free_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4605      	mov	r5, r0
 8005520:	2900      	cmp	r1, #0
 8005522:	d045      	beq.n	80055b0 <_free_r+0x94>
 8005524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005528:	1f0c      	subs	r4, r1, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	bfb8      	it	lt
 800552e:	18e4      	addlt	r4, r4, r3
 8005530:	f000 f8d2 	bl	80056d8 <__malloc_lock>
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <_free_r+0x98>)
 8005536:	6813      	ldr	r3, [r2, #0]
 8005538:	4610      	mov	r0, r2
 800553a:	b933      	cbnz	r3, 800554a <_free_r+0x2e>
 800553c:	6063      	str	r3, [r4, #4]
 800553e:	6014      	str	r4, [r2, #0]
 8005540:	4628      	mov	r0, r5
 8005542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005546:	f000 b8c8 	b.w	80056da <__malloc_unlock>
 800554a:	42a3      	cmp	r3, r4
 800554c:	d90c      	bls.n	8005568 <_free_r+0x4c>
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	1862      	adds	r2, r4, r1
 8005552:	4293      	cmp	r3, r2
 8005554:	bf04      	itt	eq
 8005556:	681a      	ldreq	r2, [r3, #0]
 8005558:	685b      	ldreq	r3, [r3, #4]
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	bf04      	itt	eq
 800555e:	1852      	addeq	r2, r2, r1
 8005560:	6022      	streq	r2, [r4, #0]
 8005562:	6004      	str	r4, [r0, #0]
 8005564:	e7ec      	b.n	8005540 <_free_r+0x24>
 8005566:	4613      	mov	r3, r2
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	b10a      	cbz	r2, 8005570 <_free_r+0x54>
 800556c:	42a2      	cmp	r2, r4
 800556e:	d9fa      	bls.n	8005566 <_free_r+0x4a>
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	1858      	adds	r0, r3, r1
 8005574:	42a0      	cmp	r0, r4
 8005576:	d10b      	bne.n	8005590 <_free_r+0x74>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	4401      	add	r1, r0
 800557c:	1858      	adds	r0, r3, r1
 800557e:	4282      	cmp	r2, r0
 8005580:	6019      	str	r1, [r3, #0]
 8005582:	d1dd      	bne.n	8005540 <_free_r+0x24>
 8005584:	6810      	ldr	r0, [r2, #0]
 8005586:	6852      	ldr	r2, [r2, #4]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	4401      	add	r1, r0
 800558c:	6019      	str	r1, [r3, #0]
 800558e:	e7d7      	b.n	8005540 <_free_r+0x24>
 8005590:	d902      	bls.n	8005598 <_free_r+0x7c>
 8005592:	230c      	movs	r3, #12
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	e7d3      	b.n	8005540 <_free_r+0x24>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	1821      	adds	r1, r4, r0
 800559c:	428a      	cmp	r2, r1
 800559e:	bf04      	itt	eq
 80055a0:	6811      	ldreq	r1, [r2, #0]
 80055a2:	6852      	ldreq	r2, [r2, #4]
 80055a4:	6062      	str	r2, [r4, #4]
 80055a6:	bf04      	itt	eq
 80055a8:	1809      	addeq	r1, r1, r0
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	605c      	str	r4, [r3, #4]
 80055ae:	e7c7      	b.n	8005540 <_free_r+0x24>
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	bf00      	nop
 80055b4:	20000110 	.word	0x20000110

080055b8 <_malloc_r>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	1ccd      	adds	r5, r1, #3
 80055bc:	f025 0503 	bic.w	r5, r5, #3
 80055c0:	3508      	adds	r5, #8
 80055c2:	2d0c      	cmp	r5, #12
 80055c4:	bf38      	it	cc
 80055c6:	250c      	movcc	r5, #12
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	4606      	mov	r6, r0
 80055cc:	db01      	blt.n	80055d2 <_malloc_r+0x1a>
 80055ce:	42a9      	cmp	r1, r5
 80055d0:	d903      	bls.n	80055da <_malloc_r+0x22>
 80055d2:	230c      	movs	r3, #12
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	2000      	movs	r0, #0
 80055d8:	bd70      	pop	{r4, r5, r6, pc}
 80055da:	f000 f87d 	bl	80056d8 <__malloc_lock>
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <_malloc_r+0xac>)
 80055e0:	6814      	ldr	r4, [r2, #0]
 80055e2:	4621      	mov	r1, r4
 80055e4:	b991      	cbnz	r1, 800560c <_malloc_r+0x54>
 80055e6:	4c20      	ldr	r4, [pc, #128]	; (8005668 <_malloc_r+0xb0>)
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	b91b      	cbnz	r3, 80055f4 <_malloc_r+0x3c>
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 f863 	bl	80056b8 <_sbrk_r>
 80055f2:	6020      	str	r0, [r4, #0]
 80055f4:	4629      	mov	r1, r5
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 f85e 	bl	80056b8 <_sbrk_r>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d124      	bne.n	800564a <_malloc_r+0x92>
 8005600:	230c      	movs	r3, #12
 8005602:	6033      	str	r3, [r6, #0]
 8005604:	4630      	mov	r0, r6
 8005606:	f000 f868 	bl	80056da <__malloc_unlock>
 800560a:	e7e4      	b.n	80055d6 <_malloc_r+0x1e>
 800560c:	680b      	ldr	r3, [r1, #0]
 800560e:	1b5b      	subs	r3, r3, r5
 8005610:	d418      	bmi.n	8005644 <_malloc_r+0x8c>
 8005612:	2b0b      	cmp	r3, #11
 8005614:	d90f      	bls.n	8005636 <_malloc_r+0x7e>
 8005616:	600b      	str	r3, [r1, #0]
 8005618:	50cd      	str	r5, [r1, r3]
 800561a:	18cc      	adds	r4, r1, r3
 800561c:	4630      	mov	r0, r6
 800561e:	f000 f85c 	bl	80056da <__malloc_unlock>
 8005622:	f104 000b 	add.w	r0, r4, #11
 8005626:	1d23      	adds	r3, r4, #4
 8005628:	f020 0007 	bic.w	r0, r0, #7
 800562c:	1ac3      	subs	r3, r0, r3
 800562e:	d0d3      	beq.n	80055d8 <_malloc_r+0x20>
 8005630:	425a      	negs	r2, r3
 8005632:	50e2      	str	r2, [r4, r3]
 8005634:	e7d0      	b.n	80055d8 <_malloc_r+0x20>
 8005636:	428c      	cmp	r4, r1
 8005638:	684b      	ldr	r3, [r1, #4]
 800563a:	bf16      	itet	ne
 800563c:	6063      	strne	r3, [r4, #4]
 800563e:	6013      	streq	r3, [r2, #0]
 8005640:	460c      	movne	r4, r1
 8005642:	e7eb      	b.n	800561c <_malloc_r+0x64>
 8005644:	460c      	mov	r4, r1
 8005646:	6849      	ldr	r1, [r1, #4]
 8005648:	e7cc      	b.n	80055e4 <_malloc_r+0x2c>
 800564a:	1cc4      	adds	r4, r0, #3
 800564c:	f024 0403 	bic.w	r4, r4, #3
 8005650:	42a0      	cmp	r0, r4
 8005652:	d005      	beq.n	8005660 <_malloc_r+0xa8>
 8005654:	1a21      	subs	r1, r4, r0
 8005656:	4630      	mov	r0, r6
 8005658:	f000 f82e 	bl	80056b8 <_sbrk_r>
 800565c:	3001      	adds	r0, #1
 800565e:	d0cf      	beq.n	8005600 <_malloc_r+0x48>
 8005660:	6025      	str	r5, [r4, #0]
 8005662:	e7db      	b.n	800561c <_malloc_r+0x64>
 8005664:	20000110 	.word	0x20000110
 8005668:	20000114 	.word	0x20000114

0800566c <_realloc_r>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	4607      	mov	r7, r0
 8005670:	4614      	mov	r4, r2
 8005672:	460e      	mov	r6, r1
 8005674:	b921      	cbnz	r1, 8005680 <_realloc_r+0x14>
 8005676:	4611      	mov	r1, r2
 8005678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800567c:	f7ff bf9c 	b.w	80055b8 <_malloc_r>
 8005680:	b922      	cbnz	r2, 800568c <_realloc_r+0x20>
 8005682:	f7ff ff4b 	bl	800551c <_free_r>
 8005686:	4625      	mov	r5, r4
 8005688:	4628      	mov	r0, r5
 800568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568c:	f000 f826 	bl	80056dc <_malloc_usable_size_r>
 8005690:	42a0      	cmp	r0, r4
 8005692:	d20f      	bcs.n	80056b4 <_realloc_r+0x48>
 8005694:	4621      	mov	r1, r4
 8005696:	4638      	mov	r0, r7
 8005698:	f7ff ff8e 	bl	80055b8 <_malloc_r>
 800569c:	4605      	mov	r5, r0
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0f2      	beq.n	8005688 <_realloc_r+0x1c>
 80056a2:	4631      	mov	r1, r6
 80056a4:	4622      	mov	r2, r4
 80056a6:	f7ff ff15 	bl	80054d4 <memcpy>
 80056aa:	4631      	mov	r1, r6
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff ff35 	bl	800551c <_free_r>
 80056b2:	e7e9      	b.n	8005688 <_realloc_r+0x1c>
 80056b4:	4635      	mov	r5, r6
 80056b6:	e7e7      	b.n	8005688 <_realloc_r+0x1c>

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4c06      	ldr	r4, [pc, #24]	; (80056d4 <_sbrk_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4605      	mov	r5, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	f7fb ff6e 	bl	80015a4 <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000024c 	.word	0x2000024c

080056d8 <__malloc_lock>:
 80056d8:	4770      	bx	lr

080056da <__malloc_unlock>:
 80056da:	4770      	bx	lr

080056dc <_malloc_usable_size_r>:
 80056dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e0:	1f18      	subs	r0, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfbc      	itt	lt
 80056e6:	580b      	ldrlt	r3, [r1, r0]
 80056e8:	18c0      	addlt	r0, r0, r3
 80056ea:	4770      	bx	lr

080056ec <_init>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr

080056f8 <_fini>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	bf00      	nop
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr
