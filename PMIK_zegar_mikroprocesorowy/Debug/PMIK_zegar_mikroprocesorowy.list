
PMIK_zegar_mikroprocesorowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b664  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800b808  0800b808  0001b808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb0  0800bcb0  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb0  0800bcb0  0001bcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcb8  0800bcb8  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcb8  0800bcb8  0001bcb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcbc  0800bcbc  0001bcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800bcc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000260  0800bf20  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800bf20  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001833c  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003482  00000000  00000000  000385cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b8  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003ce08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197d6  00000000  00000000  0003e020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001254f  00000000  00000000  000577f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000958c0  00000000  00000000  00069d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e24  00000000  00000000  000ff680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7ec 	.word	0x0800b7ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0800b7ec 	.word	0x0800b7ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <rtc_set_time>:
uint8_t uart_rx_data, BT_rx_data;
/* UART */


void rtc_set_time ()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	get_Time();
 8000f9c:	f002 fb2a 	bl	80035f4 <get_Time>

	hour = time.hour;
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <rtc_set_time+0x1d4>)
 8000fa2:	789a      	ldrb	r2, [r3, #2]
 8000fa4:	4b72      	ldr	r3, [pc, #456]	; (8001170 <rtc_set_time+0x1d8>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	min = time.minutes;
 8000fa8:	4b70      	ldr	r3, [pc, #448]	; (800116c <rtc_set_time+0x1d4>)
 8000faa:	785a      	ldrb	r2, [r3, #1]
 8000fac:	4b71      	ldr	r3, [pc, #452]	; (8001174 <rtc_set_time+0x1dc>)
 8000fae:	701a      	strb	r2, [r3, #0]
	sec = time.seconds;
 8000fb0:	4b6e      	ldr	r3, [pc, #440]	; (800116c <rtc_set_time+0x1d4>)
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	4b70      	ldr	r3, [pc, #448]	; (8001178 <rtc_set_time+0x1e0>)
 8000fb6:	701a      	strb	r2, [r3, #0]

	day = time.dayofmonth;
 8000fb8:	4b6c      	ldr	r3, [pc, #432]	; (800116c <rtc_set_time+0x1d4>)
 8000fba:	791a      	ldrb	r2, [r3, #4]
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	; (800117c <rtc_set_time+0x1e4>)
 8000fbe:	701a      	strb	r2, [r3, #0]
	year = time.year;
 8000fc0:	4b6a      	ldr	r3, [pc, #424]	; (800116c <rtc_set_time+0x1d4>)
 8000fc2:	799a      	ldrb	r2, [r3, #6]
 8000fc4:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <rtc_set_time+0x1e8>)
 8000fc6:	701a      	strb	r2, [r3, #0]

	/**
	 * czas w RTC będzie taki sam jak w naszym DS3231
	 */
	sTime.Hours = decToBcd(hour);
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <rtc_set_time+0x1d8>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fa75 	bl	80034bc <decToBcd>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <rtc_set_time+0x1ec>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = decToBcd(min);
 8000fda:	4b66      	ldr	r3, [pc, #408]	; (8001174 <rtc_set_time+0x1dc>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fa6c 	bl	80034bc <decToBcd>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b66      	ldr	r3, [pc, #408]	; (8001184 <rtc_set_time+0x1ec>)
 8000fea:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = decToBcd(sec);
 8000fec:	4b62      	ldr	r3, [pc, #392]	; (8001178 <rtc_set_time+0x1e0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fa63 	bl	80034bc <decToBcd>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <rtc_set_time+0x1ec>)
 8000ffc:	709a      	strb	r2, [r3, #2]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffe:	4b61      	ldr	r3, [pc, #388]	; (8001184 <rtc_set_time+0x1ec>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001004:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <rtc_set_time+0x1ec>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800100a:	2201      	movs	r2, #1
 800100c:	495d      	ldr	r1, [pc, #372]	; (8001184 <rtc_set_time+0x1ec>)
 800100e:	485e      	ldr	r0, [pc, #376]	; (8001188 <rtc_set_time+0x1f0>)
 8001010:	f004 ff65 	bl	8005ede <HAL_RTC_SetTime>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <rtc_set_time+0x86>
	{
	  Error_Handler();
 800101a:	f001 fd21 	bl	8002a60 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	switch( (int) time.dayofweek) {
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <rtc_set_time+0x1d4>)
 8001020:	78db      	ldrb	r3, [r3, #3]
 8001022:	3b01      	subs	r3, #1
 8001024:	2b06      	cmp	r3, #6
 8001026:	d82d      	bhi.n	8001084 <rtc_set_time+0xec>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <rtc_set_time+0x98>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	0800104d 	.word	0x0800104d
 8001034:	08001055 	.word	0x08001055
 8001038:	0800105d 	.word	0x0800105d
 800103c:	08001065 	.word	0x08001065
 8001040:	0800106d 	.word	0x0800106d
 8001044:	08001075 	.word	0x08001075
 8001048:	0800107d 	.word	0x0800107d

	case 1:
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <rtc_set_time+0x1f4>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
		break;
 8001052:	e017      	b.n	8001084 <rtc_set_time+0xec>

	case 2:
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001054:	4b4d      	ldr	r3, [pc, #308]	; (800118c <rtc_set_time+0x1f4>)
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
		break;
 800105a:	e013      	b.n	8001084 <rtc_set_time+0xec>

	case 3:
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <rtc_set_time+0x1f4>)
 800105e:	2203      	movs	r2, #3
 8001060:	701a      	strb	r2, [r3, #0]
		break;
 8001062:	e00f      	b.n	8001084 <rtc_set_time+0xec>

	case 4:
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001064:	4b49      	ldr	r3, [pc, #292]	; (800118c <rtc_set_time+0x1f4>)
 8001066:	2204      	movs	r2, #4
 8001068:	701a      	strb	r2, [r3, #0]
		break;
 800106a:	e00b      	b.n	8001084 <rtc_set_time+0xec>

	case 5:
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <rtc_set_time+0x1f4>)
 800106e:	2205      	movs	r2, #5
 8001070:	701a      	strb	r2, [r3, #0]
		break;
 8001072:	e007      	b.n	8001084 <rtc_set_time+0xec>

	case 6:
		sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <rtc_set_time+0x1f4>)
 8001076:	2206      	movs	r2, #6
 8001078:	701a      	strb	r2, [r3, #0]
		break;
 800107a:	e003      	b.n	8001084 <rtc_set_time+0xec>

	case 7:
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <rtc_set_time+0x1f4>)
 800107e:	2207      	movs	r2, #7
 8001080:	701a      	strb	r2, [r3, #0]
		break;
 8001082:	bf00      	nop

	}


	switch( (int) time.month) {
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <rtc_set_time+0x1d4>)
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	3b01      	subs	r3, #1
 800108a:	2b0b      	cmp	r3, #11
 800108c:	d84a      	bhi.n	8001124 <rtc_set_time+0x18c>
 800108e:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <rtc_set_time+0xfc>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010cd 	.word	0x080010cd
 800109c:	080010d5 	.word	0x080010d5
 80010a0:	080010dd 	.word	0x080010dd
 80010a4:	080010e5 	.word	0x080010e5
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	080010f5 	.word	0x080010f5
 80010b0:	080010fd 	.word	0x080010fd
 80010b4:	08001105 	.word	0x08001105
 80010b8:	0800110d 	.word	0x0800110d
 80010bc:	08001115 	.word	0x08001115
 80010c0:	0800111d 	.word	0x0800111d

	  case 1:
		  sDate.Month = RTC_MONTH_JANUARY;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <rtc_set_time+0x1f4>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	705a      	strb	r2, [r3, #1]
		  break;
 80010ca:	e02b      	b.n	8001124 <rtc_set_time+0x18c>

	  case 2:
		  sDate.Month = RTC_MONTH_FEBRUARY;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <rtc_set_time+0x1f4>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	705a      	strb	r2, [r3, #1]
		  break;
 80010d2:	e027      	b.n	8001124 <rtc_set_time+0x18c>

	  case 3:
		  sDate.Month = RTC_MONTH_MARCH;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <rtc_set_time+0x1f4>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	705a      	strb	r2, [r3, #1]
		  break;
 80010da:	e023      	b.n	8001124 <rtc_set_time+0x18c>

	  case 4:
		  sDate.Month = RTC_MONTH_APRIL;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <rtc_set_time+0x1f4>)
 80010de:	2204      	movs	r2, #4
 80010e0:	705a      	strb	r2, [r3, #1]
		  break;
 80010e2:	e01f      	b.n	8001124 <rtc_set_time+0x18c>

	  case 5:
		  sDate.Month = RTC_MONTH_MAY;
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <rtc_set_time+0x1f4>)
 80010e6:	2205      	movs	r2, #5
 80010e8:	705a      	strb	r2, [r3, #1]
		  break;
 80010ea:	e01b      	b.n	8001124 <rtc_set_time+0x18c>

	  case 6:
		  sDate.Month = RTC_MONTH_JUNE;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <rtc_set_time+0x1f4>)
 80010ee:	2206      	movs	r2, #6
 80010f0:	705a      	strb	r2, [r3, #1]
		  break;
 80010f2:	e017      	b.n	8001124 <rtc_set_time+0x18c>

	  case 7:
		  sDate.Month = RTC_MONTH_JULY;
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <rtc_set_time+0x1f4>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	705a      	strb	r2, [r3, #1]
		  break;
 80010fa:	e013      	b.n	8001124 <rtc_set_time+0x18c>

	  case 8:
		  sDate.Month = RTC_MONTH_AUGUST;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <rtc_set_time+0x1f4>)
 80010fe:	2208      	movs	r2, #8
 8001100:	705a      	strb	r2, [r3, #1]
		  break;
 8001102:	e00f      	b.n	8001124 <rtc_set_time+0x18c>

	  case 9:
		  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <rtc_set_time+0x1f4>)
 8001106:	2209      	movs	r2, #9
 8001108:	705a      	strb	r2, [r3, #1]
		  break;
 800110a:	e00b      	b.n	8001124 <rtc_set_time+0x18c>

	  case 10:
		  sDate.Month = RTC_MONTH_OCTOBER;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <rtc_set_time+0x1f4>)
 800110e:	2210      	movs	r2, #16
 8001110:	705a      	strb	r2, [r3, #1]
		  break;
 8001112:	e007      	b.n	8001124 <rtc_set_time+0x18c>

	  case 11:
		  sDate.Month = RTC_MONTH_NOVEMBER;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <rtc_set_time+0x1f4>)
 8001116:	2211      	movs	r2, #17
 8001118:	705a      	strb	r2, [r3, #1]
		  break;
 800111a:	e003      	b.n	8001124 <rtc_set_time+0x18c>

	  case 12:
		  sDate.Month = RTC_MONTH_DECEMBER;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <rtc_set_time+0x1f4>)
 800111e:	2212      	movs	r2, #18
 8001120:	705a      	strb	r2, [r3, #1]
		  break;
 8001122:	bf00      	nop

	 }

	sDate.Date = decToBcd(day);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <rtc_set_time+0x1e4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f9c7 	bl	80034bc <decToBcd>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <rtc_set_time+0x1f4>)
 8001134:	709a      	strb	r2, [r3, #2]
	sDate.Year = decToBcd(year);
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <rtc_set_time+0x1e8>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f9be 	bl	80034bc <decToBcd>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <rtc_set_time+0x1f4>)
 8001146:	70da      	strb	r2, [r3, #3]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001148:	2201      	movs	r2, #1
 800114a:	4910      	ldr	r1, [pc, #64]	; (800118c <rtc_set_time+0x1f4>)
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <rtc_set_time+0x1f0>)
 800114e:	f004 ff83 	bl	8006058 <HAL_RTC_SetDate>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <rtc_set_time+0x1c4>
	{
		Error_Handler();
 8001158:	f001 fc82 	bl	8002a60 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 4 */

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800115c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001160:	2101      	movs	r1, #1
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <rtc_set_time+0x1f0>)
 8001164:	f005 fb56 	bl	8006814 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_Init 4 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000032c 	.word	0x2000032c
 8001170:	20000328 	.word	0x20000328
 8001174:	20000333 	.word	0x20000333
 8001178:	20000335 	.word	0x20000335
 800117c:	20000337 	.word	0x20000337
 8001180:	20000334 	.word	0x20000334
 8001184:	200002d4 	.word	0x200002d4
 8001188:	20000418 	.word	0x20000418
 800118c:	20000324 	.word	0x20000324

08001190 <rtc_set_alarm>:
/**
 * Funkcja odpowiedzialna za ustawienie alarmu o danej godzinie, i w danym dniu.
 * Jako parametry przyjmuje ilość dni do alarmu, godzinę, minutę oraz sekundę alarmu
 */
void rtc_set_alarm (uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b085      	sub	sp, #20
 8001194:	af02      	add	r7, sp, #8
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	4603      	mov	r3, r0
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	460b      	mov	r3, r1
 80011a8:	717b      	strb	r3, [r7, #5]
 80011aa:	4613      	mov	r3, r2
 80011ac:	713b      	strb	r3, [r7, #4]
	get_Time();
 80011ae:	f002 fa21 	bl	80035f4 <get_Time>

	if( (day >= 0) && (hour >= 0) && (hour < 24) && (min >= 0) && (min < 60) && (sec >= 0) && (sec < 60) ) {
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	2b17      	cmp	r3, #23
 80011b6:	f200 81ee 	bhi.w	8001596 <rtc_set_alarm+0x406>
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	2b3b      	cmp	r3, #59	; 0x3b
 80011be:	f200 81ea 	bhi.w	8001596 <rtc_set_alarm+0x406>
 80011c2:	793b      	ldrb	r3, [r7, #4]
 80011c4:	2b3b      	cmp	r3, #59	; 0x3b
 80011c6:	f200 81e6 	bhi.w	8001596 <rtc_set_alarm+0x406>

		if(hour > time.hour) {
 80011ca:	4b84      	ldr	r3, [pc, #528]	; (80013dc <rtc_set_alarm+0x24c>)
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	79ba      	ldrb	r2, [r7, #6]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d97a      	bls.n	80012ca <rtc_set_alarm+0x13a>

			alarm_day = (time.dayofmonth + day) % 31;
 80011d4:	4b81      	ldr	r3, [pc, #516]	; (80013dc <rtc_set_alarm+0x24c>)
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	461a      	mov	r2, r3
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	441a      	add	r2, r3
 80011de:	4b80      	ldr	r3, [pc, #512]	; (80013e0 <rtc_set_alarm+0x250>)
 80011e0:	fb83 1302 	smull	r1, r3, r3, r2
 80011e4:	4413      	add	r3, r2
 80011e6:	1119      	asrs	r1, r3, #4
 80011e8:	17d3      	asrs	r3, r2, #31
 80011ea:	1ac9      	subs	r1, r1, r3
 80011ec:	460b      	mov	r3, r1
 80011ee:	015b      	lsls	r3, r3, #5
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	1ad1      	subs	r1, r2, r3
 80011f4:	b2ca      	uxtb	r2, r1
 80011f6:	4b7b      	ldr	r3, [pc, #492]	; (80013e4 <rtc_set_alarm+0x254>)
 80011f8:	701a      	strb	r2, [r3, #0]
			alarm_hour = hour;
 80011fa:	4a7b      	ldr	r2, [pc, #492]	; (80013e8 <rtc_set_alarm+0x258>)
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	7013      	strb	r3, [r2, #0]
			alarm_min = min;
 8001200:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <rtc_set_alarm+0x25c>)
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	7013      	strb	r3, [r2, #0]
			alarm_sec = sec;
 8001206:	4a7a      	ldr	r2, [pc, #488]	; (80013f0 <rtc_set_alarm+0x260>)
 8001208:	793b      	ldrb	r3, [r7, #4]
 800120a:	7013      	strb	r3, [r2, #0]

			/**Enable the Alarm A*/
			sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800120c:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <rtc_set_alarm+0x258>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f002 f953 	bl	80034bc <decToBcd>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <rtc_set_alarm+0x264>)
 800121c:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800121e:	4b73      	ldr	r3, [pc, #460]	; (80013ec <rtc_set_alarm+0x25c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f002 f94a 	bl	80034bc <decToBcd>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <rtc_set_alarm+0x264>)
 800122e:	705a      	strb	r2, [r3, #1]
			sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec);
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <rtc_set_alarm+0x260>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f002 f941 	bl	80034bc <decToBcd>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <rtc_set_alarm+0x264>)
 8001240:	709a      	strb	r2, [r3, #2]
			sAlarm.AlarmTime.SubSeconds = 0x0;
 8001242:	4b6c      	ldr	r3, [pc, #432]	; (80013f4 <rtc_set_alarm+0x264>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
			sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <rtc_set_alarm+0x264>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
			sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800124e:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <rtc_set_alarm+0x264>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
			sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001254:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <rtc_set_alarm+0x264>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
			sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <rtc_set_alarm+0x264>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
			sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001260:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <rtc_set_alarm+0x264>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
			sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <rtc_set_alarm+0x254>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f926 	bl	80034bc <decToBcd>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <rtc_set_alarm+0x264>)
 8001276:	f883 2020 	strb.w	r2, [r3, #32]
			sAlarm.Alarm = RTC_ALARM_A;
 800127a:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <rtc_set_alarm+0x264>)
 800127c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
			if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001282:	2201      	movs	r2, #1
 8001284:	495b      	ldr	r1, [pc, #364]	; (80013f4 <rtc_set_alarm+0x264>)
 8001286:	485c      	ldr	r0, [pc, #368]	; (80013f8 <rtc_set_alarm+0x268>)
 8001288:	f004 ff8e 	bl	80061a8 <HAL_RTC_SetAlarm_IT>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <rtc_set_alarm+0x106>
			{
				Error_Handler();
 8001292:	f001 fbe5 	bl	8002a60 <Error_Handler>
			}

			lcd_clear();
 8001296:	f000 ffb3 	bl	8002200 <lcd_clear>
			sprintf(alarm_details_msg, "%02d:%02d:%02d", hour, min, sec);
 800129a:	79ba      	ldrb	r2, [r7, #6]
 800129c:	7979      	ldrb	r1, [r7, #5]
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	460b      	mov	r3, r1
 80012a4:	4955      	ldr	r1, [pc, #340]	; (80013fc <rtc_set_alarm+0x26c>)
 80012a6:	4856      	ldr	r0, [pc, #344]	; (8001400 <rtc_set_alarm+0x270>)
 80012a8:	f007 fb82 	bl	80089b0 <siprintf>
			lcd_send_string("Alarm na godz.:");
 80012ac:	4855      	ldr	r0, [pc, #340]	; (8001404 <rtc_set_alarm+0x274>)
 80012ae:	f001 f8d1 	bl	8002454 <lcd_send_string>
			lcd_second_line();
 80012b2:	f001 f809 	bl	80022c8 <lcd_second_line>
			lcd_send_string(alarm_details_msg);
 80012b6:	4852      	ldr	r0, [pc, #328]	; (8001400 <rtc_set_alarm+0x270>)
 80012b8:	f001 f8cc 	bl	8002454 <lcd_send_string>
			delay(1000);
 80012bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c0:	f002 f9f0 	bl	80036a4 <delay>
			lcd_clear();
 80012c4:	f000 ff9c 	bl	8002200 <lcd_clear>
		if(hour > time.hour) {
 80012c8:	e184      	b.n	80015d4 <rtc_set_alarm+0x444>

		}
		else if ( (hour == time.hour) ) {
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <rtc_set_alarm+0x24c>)
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	79ba      	ldrb	r2, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f040 8141 	bne.w	8001558 <rtc_set_alarm+0x3c8>

			if( (min > time.minutes) ) {
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <rtc_set_alarm+0x24c>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	797a      	ldrb	r2, [r7, #5]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f240 8095 	bls.w	800140c <rtc_set_alarm+0x27c>

				alarm_day = time.dayofmonth + (day % 7);
 80012e2:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <rtc_set_alarm+0x24c>)
 80012e4:	7918      	ldrb	r0, [r3, #4]
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <rtc_set_alarm+0x278>)
 80012ea:	fba3 1302 	umull	r1, r3, r3, r2
 80012ee:	1ad1      	subs	r1, r2, r3
 80012f0:	0849      	lsrs	r1, r1, #1
 80012f2:	440b      	add	r3, r1
 80012f4:	0899      	lsrs	r1, r3, #2
 80012f6:	460b      	mov	r3, r1
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	1a5b      	subs	r3, r3, r1
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4403      	add	r3, r0
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <rtc_set_alarm+0x254>)
 8001306:	701a      	strb	r2, [r3, #0]
				alarm_hour = hour;
 8001308:	4a37      	ldr	r2, [pc, #220]	; (80013e8 <rtc_set_alarm+0x258>)
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	7013      	strb	r3, [r2, #0]
				alarm_min = min;
 800130e:	4a37      	ldr	r2, [pc, #220]	; (80013ec <rtc_set_alarm+0x25c>)
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	7013      	strb	r3, [r2, #0]
				alarm_sec = sec;
 8001314:	4a36      	ldr	r2, [pc, #216]	; (80013f0 <rtc_set_alarm+0x260>)
 8001316:	793b      	ldrb	r3, [r7, #4]
 8001318:	7013      	strb	r3, [r2, #0]

				/**Enable the Alarm A*/
				sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <rtc_set_alarm+0x258>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f8cc 	bl	80034bc <decToBcd>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <rtc_set_alarm+0x264>)
 800132a:	701a      	strb	r2, [r3, #0]
				sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <rtc_set_alarm+0x25c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f8c3 	bl	80034bc <decToBcd>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <rtc_set_alarm+0x264>)
 800133c:	705a      	strb	r2, [r3, #1]
				sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec - 2);
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <rtc_set_alarm+0x260>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b02      	subs	r3, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f8b9 	bl	80034bc <decToBcd>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <rtc_set_alarm+0x264>)
 8001350:	709a      	strb	r2, [r3, #2]
				sAlarm.AlarmTime.SubSeconds = 0x0;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <rtc_set_alarm+0x264>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
				sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <rtc_set_alarm+0x264>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
				sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <rtc_set_alarm+0x264>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
				sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <rtc_set_alarm+0x264>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
				sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <rtc_set_alarm+0x264>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
				sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <rtc_set_alarm+0x264>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
				sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <rtc_set_alarm+0x254>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f89e 	bl	80034bc <decToBcd>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <rtc_set_alarm+0x264>)
 8001386:	f883 2020 	strb.w	r2, [r3, #32]
				sAlarm.Alarm = RTC_ALARM_A;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <rtc_set_alarm+0x264>)
 800138c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
				if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001392:	2201      	movs	r2, #1
 8001394:	4917      	ldr	r1, [pc, #92]	; (80013f4 <rtc_set_alarm+0x264>)
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <rtc_set_alarm+0x268>)
 8001398:	f004 ff06 	bl	80061a8 <HAL_RTC_SetAlarm_IT>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <rtc_set_alarm+0x216>
				{
					Error_Handler();
 80013a2:	f001 fb5d 	bl	8002a60 <Error_Handler>
				}

				lcd_clear();
 80013a6:	f000 ff2b 	bl	8002200 <lcd_clear>
				sprintf(alarm_details_msg, "%02d:%02d:%02d", hour, min, sec);
 80013aa:	79ba      	ldrb	r2, [r7, #6]
 80013ac:	7979      	ldrb	r1, [r7, #5]
 80013ae:	793b      	ldrb	r3, [r7, #4]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	460b      	mov	r3, r1
 80013b4:	4911      	ldr	r1, [pc, #68]	; (80013fc <rtc_set_alarm+0x26c>)
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <rtc_set_alarm+0x270>)
 80013b8:	f007 fafa 	bl	80089b0 <siprintf>
				lcd_send_string("Alarm na godz.:");
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <rtc_set_alarm+0x274>)
 80013be:	f001 f849 	bl	8002454 <lcd_send_string>
				lcd_second_line();
 80013c2:	f000 ff81 	bl	80022c8 <lcd_second_line>
				lcd_send_string(alarm_details_msg);
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <rtc_set_alarm+0x270>)
 80013c8:	f001 f844 	bl	8002454 <lcd_send_string>
				delay(1000);
 80013cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d0:	f002 f968 	bl	80036a4 <delay>
				lcd_clear();
 80013d4:	f000 ff14 	bl	8002200 <lcd_clear>
		if(hour > time.hour) {
 80013d8:	e0fc      	b.n	80015d4 <rtc_set_alarm+0x444>
 80013da:	bf00      	nop
 80013dc:	2000032c 	.word	0x2000032c
 80013e0:	84210843 	.word	0x84210843
 80013e4:	20000322 	.word	0x20000322
 80013e8:	200002d3 	.word	0x200002d3
 80013ec:	20000339 	.word	0x20000339
 80013f0:	200002d1 	.word	0x200002d1
 80013f4:	200002f0 	.word	0x200002f0
 80013f8:	20000418 	.word	0x20000418
 80013fc:	0800b808 	.word	0x0800b808
 8001400:	20000318 	.word	0x20000318
 8001404:	0800b818 	.word	0x0800b818
 8001408:	24924925 	.word	0x24924925
			}
			else if ( (min == time.minutes) ) {
 800140c:	4b74      	ldr	r3, [pc, #464]	; (80015e0 <rtc_set_alarm+0x450>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	797a      	ldrb	r2, [r7, #5]
 8001412:	429a      	cmp	r2, r3
 8001414:	f040 80de 	bne.w	80015d4 <rtc_set_alarm+0x444>

				if( (sec > time.seconds) ) {
 8001418:	4b71      	ldr	r3, [pc, #452]	; (80015e0 <rtc_set_alarm+0x450>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	793a      	ldrb	r2, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d97b      	bls.n	800151a <rtc_set_alarm+0x38a>

					alarm_day = time.dayofmonth + (day % 7);
 8001422:	4b6f      	ldr	r3, [pc, #444]	; (80015e0 <rtc_set_alarm+0x450>)
 8001424:	7918      	ldrb	r0, [r3, #4]
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <rtc_set_alarm+0x454>)
 800142a:	fba3 1302 	umull	r1, r3, r3, r2
 800142e:	1ad1      	subs	r1, r2, r3
 8001430:	0849      	lsrs	r1, r1, #1
 8001432:	440b      	add	r3, r1
 8001434:	0899      	lsrs	r1, r3, #2
 8001436:	460b      	mov	r3, r1
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	1a5b      	subs	r3, r3, r1
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4403      	add	r3, r0
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <rtc_set_alarm+0x458>)
 8001446:	701a      	strb	r2, [r3, #0]
					alarm_hour = hour;
 8001448:	4a68      	ldr	r2, [pc, #416]	; (80015ec <rtc_set_alarm+0x45c>)
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	7013      	strb	r3, [r2, #0]
					alarm_min = min;
 800144e:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <rtc_set_alarm+0x460>)
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	7013      	strb	r3, [r2, #0]
					alarm_sec = sec;
 8001454:	4a67      	ldr	r2, [pc, #412]	; (80015f4 <rtc_set_alarm+0x464>)
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	7013      	strb	r3, [r2, #0]

					/**Enable the Alarm A*/
					sAlarm.AlarmTime.Hours = decToBcd(alarm_hour);
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <rtc_set_alarm+0x45c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f82c 	bl	80034bc <decToBcd>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <rtc_set_alarm+0x468>)
 800146a:	701a      	strb	r2, [r3, #0]
					sAlarm.AlarmTime.Minutes = decToBcd(alarm_min);
 800146c:	4b60      	ldr	r3, [pc, #384]	; (80015f0 <rtc_set_alarm+0x460>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f002 f823 	bl	80034bc <decToBcd>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <rtc_set_alarm+0x468>)
 800147c:	705a      	strb	r2, [r3, #1]
					sAlarm.AlarmTime.Seconds = decToBcd(alarm_sec - 2);
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <rtc_set_alarm+0x464>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b02      	subs	r3, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f819 	bl	80034bc <decToBcd>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <rtc_set_alarm+0x468>)
 8001490:	709a      	strb	r2, [r3, #2]
					sAlarm.AlarmTime.SubSeconds = 0x0;
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <rtc_set_alarm+0x468>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
					sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <rtc_set_alarm+0x468>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
					sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <rtc_set_alarm+0x468>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
					sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014a4:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <rtc_set_alarm+0x468>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
					sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <rtc_set_alarm+0x468>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
					sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014b0:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <rtc_set_alarm+0x468>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
					sAlarm.AlarmDateWeekDay = decToBcd(alarm_day);
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <rtc_set_alarm+0x458>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fffe 	bl	80034bc <decToBcd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <rtc_set_alarm+0x468>)
 80014c6:	f883 2020 	strb.w	r2, [r3, #32]
					sAlarm.Alarm = RTC_ALARM_A;
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <rtc_set_alarm+0x468>)
 80014cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
					if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014d2:	2201      	movs	r2, #1
 80014d4:	4948      	ldr	r1, [pc, #288]	; (80015f8 <rtc_set_alarm+0x468>)
 80014d6:	4849      	ldr	r0, [pc, #292]	; (80015fc <rtc_set_alarm+0x46c>)
 80014d8:	f004 fe66 	bl	80061a8 <HAL_RTC_SetAlarm_IT>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <rtc_set_alarm+0x356>
					{
						Error_Handler();
 80014e2:	f001 fabd 	bl	8002a60 <Error_Handler>
					}

					lcd_clear();
 80014e6:	f000 fe8b 	bl	8002200 <lcd_clear>
					sprintf(alarm_details_msg, "%02d:%02d:%02d", hour, min, sec);
 80014ea:	79ba      	ldrb	r2, [r7, #6]
 80014ec:	7979      	ldrb	r1, [r7, #5]
 80014ee:	793b      	ldrb	r3, [r7, #4]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	460b      	mov	r3, r1
 80014f4:	4942      	ldr	r1, [pc, #264]	; (8001600 <rtc_set_alarm+0x470>)
 80014f6:	4843      	ldr	r0, [pc, #268]	; (8001604 <rtc_set_alarm+0x474>)
 80014f8:	f007 fa5a 	bl	80089b0 <siprintf>
					lcd_send_string("Alarm na godz.:");
 80014fc:	4842      	ldr	r0, [pc, #264]	; (8001608 <rtc_set_alarm+0x478>)
 80014fe:	f000 ffa9 	bl	8002454 <lcd_send_string>
					lcd_second_line();
 8001502:	f000 fee1 	bl	80022c8 <lcd_second_line>
					lcd_send_string(alarm_details_msg);
 8001506:	483f      	ldr	r0, [pc, #252]	; (8001604 <rtc_set_alarm+0x474>)
 8001508:	f000 ffa4 	bl	8002454 <lcd_send_string>
					delay(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f002 f8c8 	bl	80036a4 <delay>
					lcd_clear();
 8001514:	f000 fe74 	bl	8002200 <lcd_clear>
		if(hour > time.hour) {
 8001518:	e05c      	b.n	80015d4 <rtc_set_alarm+0x444>
				}
				else {
					lcd_clear();
 800151a:	f000 fe71 	bl	8002200 <lcd_clear>
					lcd_set_cursor(0, 1);
 800151e:	2101      	movs	r1, #1
 8001520:	2000      	movs	r0, #0
 8001522:	f000 fe8f 	bl	8002244 <lcd_set_cursor>
					lcd_send_string("Nieprawid");
 8001526:	4839      	ldr	r0, [pc, #228]	; (800160c <rtc_set_alarm+0x47c>)
 8001528:	f000 ff94 	bl	8002454 <lcd_send_string>
					lcd_send_own_char(3);
 800152c:	2003      	movs	r0, #3
 800152e:	f001 f817 	bl	8002560 <lcd_send_own_char>
					lcd_send_string("owy");
 8001532:	4837      	ldr	r0, [pc, #220]	; (8001610 <rtc_set_alarm+0x480>)
 8001534:	f000 ff8e 	bl	8002454 <lcd_send_string>
					lcd_second_line();
 8001538:	f000 fec6 	bl	80022c8 <lcd_second_line>
					lcd_set_cursor(1, 2);
 800153c:	2102      	movs	r1, #2
 800153e:	2001      	movs	r0, #1
 8001540:	f000 fe80 	bl	8002244 <lcd_set_cursor>
					lcd_send_string("czas alarmu!");
 8001544:	4833      	ldr	r0, [pc, #204]	; (8001614 <rtc_set_alarm+0x484>)
 8001546:	f000 ff85 	bl	8002454 <lcd_send_string>
					delay(1000);
 800154a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154e:	f002 f8a9 	bl	80036a4 <delay>
					lcd_clear();
 8001552:	f000 fe55 	bl	8002200 <lcd_clear>
		if(hour > time.hour) {
 8001556:	e03d      	b.n	80015d4 <rtc_set_alarm+0x444>
			else {

			}
		}
		else {
			lcd_clear();
 8001558:	f000 fe52 	bl	8002200 <lcd_clear>
			lcd_set_cursor(0, 1);
 800155c:	2101      	movs	r1, #1
 800155e:	2000      	movs	r0, #0
 8001560:	f000 fe70 	bl	8002244 <lcd_set_cursor>
			lcd_send_string("Nieprawid");
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <rtc_set_alarm+0x47c>)
 8001566:	f000 ff75 	bl	8002454 <lcd_send_string>
			lcd_send_own_char(3);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 fff8 	bl	8002560 <lcd_send_own_char>
			lcd_send_string("owy");
 8001570:	4827      	ldr	r0, [pc, #156]	; (8001610 <rtc_set_alarm+0x480>)
 8001572:	f000 ff6f 	bl	8002454 <lcd_send_string>
			lcd_second_line();
 8001576:	f000 fea7 	bl	80022c8 <lcd_second_line>
			lcd_set_cursor(1, 2);
 800157a:	2102      	movs	r1, #2
 800157c:	2001      	movs	r0, #1
 800157e:	f000 fe61 	bl	8002244 <lcd_set_cursor>
			lcd_send_string("czas alarmu!");
 8001582:	4824      	ldr	r0, [pc, #144]	; (8001614 <rtc_set_alarm+0x484>)
 8001584:	f000 ff66 	bl	8002454 <lcd_send_string>
			delay(1000);
 8001588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158c:	f002 f88a 	bl	80036a4 <delay>
			lcd_clear();
 8001590:	f000 fe36 	bl	8002200 <lcd_clear>
		if(hour > time.hour) {
 8001594:	e01e      	b.n	80015d4 <rtc_set_alarm+0x444>
		}

	} else {
		lcd_clear();
 8001596:	f000 fe33 	bl	8002200 <lcd_clear>
		lcd_set_cursor(0, 1);
 800159a:	2101      	movs	r1, #1
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fe51 	bl	8002244 <lcd_set_cursor>
		lcd_send_string("Nieprawid");
 80015a2:	481a      	ldr	r0, [pc, #104]	; (800160c <rtc_set_alarm+0x47c>)
 80015a4:	f000 ff56 	bl	8002454 <lcd_send_string>
		lcd_send_own_char(3);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 ffd9 	bl	8002560 <lcd_send_own_char>
		lcd_send_string("owy");
 80015ae:	4818      	ldr	r0, [pc, #96]	; (8001610 <rtc_set_alarm+0x480>)
 80015b0:	f000 ff50 	bl	8002454 <lcd_send_string>
		lcd_second_line();
 80015b4:	f000 fe88 	bl	80022c8 <lcd_second_line>
		lcd_set_cursor(1, 2);
 80015b8:	2102      	movs	r1, #2
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fe42 	bl	8002244 <lcd_set_cursor>
		lcd_send_string("czas alarmu!");
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <rtc_set_alarm+0x484>)
 80015c2:	f000 ff47 	bl	8002454 <lcd_send_string>
		delay(1000);
 80015c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ca:	f002 f86b 	bl	80036a4 <delay>
		lcd_clear();
 80015ce:	f000 fe17 	bl	8002200 <lcd_clear>


  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 80015d2:	e000      	b.n	80015d6 <rtc_set_alarm+0x446>
		if(hour > time.hour) {
 80015d4:	bf00      	nop
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000032c 	.word	0x2000032c
 80015e4:	24924925 	.word	0x24924925
 80015e8:	20000322 	.word	0x20000322
 80015ec:	200002d3 	.word	0x200002d3
 80015f0:	20000339 	.word	0x20000339
 80015f4:	200002d1 	.word	0x200002d1
 80015f8:	200002f0 	.word	0x200002f0
 80015fc:	20000418 	.word	0x20000418
 8001600:	0800b808 	.word	0x0800b808
 8001604:	20000318 	.word	0x20000318
 8001608:	0800b818 	.word	0x0800b818
 800160c:	0800b828 	.word	0x0800b828
 8001610:	0800b834 	.word	0x0800b834
 8001614:	0800b838 	.word	0x0800b838

08001618 <activate_time>:

/**
 * Funkcja sygnalizująca, że użytkownik ustawia nową godzinę na zegarku
 */
void activate_time () {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

	if(uart_rx_data == 't' || uart_rx_data == 'T') {
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <activate_time+0x74>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b74      	cmp	r3, #116	; 0x74
 8001622:	d003      	beq.n	800162c <activate_time+0x14>
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <activate_time+0x74>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b54      	cmp	r3, #84	; 0x54
 800162a:	d10b      	bne.n	8001644 <activate_time+0x2c>

		date_activated_flag = 0;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <activate_time+0x78>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <activate_time+0x7c>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <activate_time+0x80>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
		time_activated_flag = 1;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <activate_time+0x84>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
	}

	if(time_activated_flag) {
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <activate_time+0x84>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <activate_time+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <activate_time+0x80>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <activate_time+0x74>)
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <activate_time+0x88>)
 8001658:	5499      	strb	r1, [r3, r2]

		++global_counter;
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <activate_time+0x80>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <activate_time+0x80>)
 8001664:	701a      	strb	r2, [r3, #0]

		if(global_counter == 3) {
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <activate_time+0x80>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d102      	bne.n	8001674 <activate_time+0x5c>
			time_set_flag = 1;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <activate_time+0x8c>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
	}

	/**
	 * Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	 */
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001674:	2201      	movs	r2, #1
 8001676:	4905      	ldr	r1, [pc, #20]	; (800168c <activate_time+0x74>)
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <activate_time+0x90>)
 800167a:	f005 fd18 	bl	80070ae <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &BT_rx_data, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	490a      	ldr	r1, [pc, #40]	; (80016ac <activate_time+0x94>)
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <activate_time+0x98>)
 8001684:	f005 fd13 	bl	80070ae <HAL_UART_Receive_IT>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000033a 	.word	0x2000033a
 8001690:	200002d2 	.word	0x200002d2
 8001694:	200002d0 	.word	0x200002d0
 8001698:	2000027c 	.word	0x2000027c
 800169c:	200002ed 	.word	0x200002ed
 80016a0:	200002e8 	.word	0x200002e8
 80016a4:	200002ef 	.word	0x200002ef
 80016a8:	2000051c 	.word	0x2000051c
 80016ac:	20000336 	.word	0x20000336
 80016b0:	200004dc 	.word	0x200004dc

080016b4 <activate_date>:

/**
 * Funkcja sygnalizująca, że użytkownik ustawia nową datę na zegarku
 */
void activate_date () {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'd' || uart_rx_data == 'D') {
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <activate_date+0x74>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b64      	cmp	r3, #100	; 0x64
 80016be:	d003      	beq.n	80016c8 <activate_date+0x14>
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <activate_date+0x74>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b44      	cmp	r3, #68	; 0x44
 80016c6:	d10b      	bne.n	80016e0 <activate_date+0x2c>

		time_activated_flag = 0;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <activate_date+0x78>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 0;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <activate_date+0x7c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <activate_date+0x80>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 1;
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <activate_date+0x84>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
	}

	if(date_activated_flag) {
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <activate_date+0x84>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <activate_date+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <activate_date+0x80>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <activate_date+0x74>)
 80016f0:	7819      	ldrb	r1, [r3, #0]
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <activate_date+0x88>)
 80016f4:	5499      	strb	r1, [r3, r2]

		++global_counter;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <activate_date+0x80>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <activate_date+0x80>)
 8001700:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <activate_date+0x80>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d102      	bne.n	8001710 <activate_date+0x5c>
			date_set_flag = 1;
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <activate_date+0x8c>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
	}

	/**
	 * Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	 */
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	4905      	ldr	r1, [pc, #20]	; (8001728 <activate_date+0x74>)
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <activate_date+0x90>)
 8001716:	f005 fcca 	bl	80070ae <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &BT_rx_data, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	490a      	ldr	r1, [pc, #40]	; (8001748 <activate_date+0x94>)
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <activate_date+0x98>)
 8001720:	f005 fcc5 	bl	80070ae <HAL_UART_Receive_IT>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000033a 	.word	0x2000033a
 800172c:	200002ed 	.word	0x200002ed
 8001730:	200002d0 	.word	0x200002d0
 8001734:	2000027c 	.word	0x2000027c
 8001738:	200002d2 	.word	0x200002d2
 800173c:	200002e8 	.word	0x200002e8
 8001740:	200002ee 	.word	0x200002ee
 8001744:	2000051c 	.word	0x2000051c
 8001748:	20000336 	.word	0x20000336
 800174c:	200004dc 	.word	0x200004dc

08001750 <activate_alarm>:

/**
 * Funkcja sygnalizująca, że użytkownik ustawia nowy alarm
 */
void activate_alarm () {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

	if(uart_rx_data == 'a' || uart_rx_data == 'A') {
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <activate_alarm+0x74>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b61      	cmp	r3, #97	; 0x61
 800175a:	d003      	beq.n	8001764 <activate_alarm+0x14>
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <activate_alarm+0x74>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b41      	cmp	r3, #65	; 0x41
 8001762:	d10b      	bne.n	800177c <activate_alarm+0x2c>

		time_activated_flag = 0;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <activate_alarm+0x78>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
		date_activated_flag = 0;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <activate_alarm+0x7c>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

		global_counter = 0;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <activate_alarm+0x80>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		alarm_activated_flag = 1;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <activate_alarm+0x84>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	}

	if(alarm_activated_flag) {
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <activate_alarm+0x84>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <activate_alarm+0x5c>

		global_buffer[global_counter] = uart_rx_data;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <activate_alarm+0x80>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <activate_alarm+0x74>)
 800178c:	7819      	ldrb	r1, [r3, #0]
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <activate_alarm+0x88>)
 8001790:	5499      	strb	r1, [r3, r2]

		++global_counter;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <activate_alarm+0x80>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <activate_alarm+0x80>)
 800179c:	701a      	strb	r2, [r3, #0]

		if(global_counter == 5) {
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <activate_alarm+0x80>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d102      	bne.n	80017ac <activate_alarm+0x5c>
			alarm_set_flag = 1;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <activate_alarm+0x8c>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
	}

	/**
	 * Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
	 */
	HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	4905      	ldr	r1, [pc, #20]	; (80017c4 <activate_alarm+0x74>)
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <activate_alarm+0x90>)
 80017b2:	f005 fc7c 	bl	80070ae <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &BT_rx_data, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	490a      	ldr	r1, [pc, #40]	; (80017e4 <activate_alarm+0x94>)
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <activate_alarm+0x98>)
 80017bc:	f005 fc77 	bl	80070ae <HAL_UART_Receive_IT>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000033a 	.word	0x2000033a
 80017c8:	200002ed 	.word	0x200002ed
 80017cc:	200002d2 	.word	0x200002d2
 80017d0:	2000027c 	.word	0x2000027c
 80017d4:	200002d0 	.word	0x200002d0
 80017d8:	200002e8 	.word	0x200002e8
 80017dc:	20000338 	.word	0x20000338
 80017e0:	2000051c 	.word	0x2000051c
 80017e4:	20000336 	.word	0x20000336
 80017e8:	200004dc 	.word	0x200004dc

080017ec <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000321 	.word	0x20000321

0800180c <to_do_on_alarm>:

void to_do_on_alarm() {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <to_do_on_alarm+0x18>)
 8001816:	f002 fbe9 	bl	8003fec <HAL_GPIO_WritePin>
	lcd_send_alarm_on_msg();
 800181a:	f000 fe33 	bl	8002484 <lcd_send_alarm_on_msg>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020000 	.word	0x40020000

08001828 <to_do_on_alarm_off>:

void to_do_on_alarm_off() {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

	lcd_send_alarm_off_msg();
 800182c:	f000 fe44 	bl	80024b8 <lcd_send_alarm_off_msg>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_GPIO_EXTI_Callback>:

/**
 * Funkcja odpowiedzialna za wyłączenie alarmu, za pomocą niebieskiego przycisku
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]

	/**
	 * Sprawdzamy czy przerwanie wywołał niebieski przycisk
	 */
	if(GPIO_Pin == Blue_Button_Pin) {
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001844:	d107      	bne.n	8001856 <HAL_GPIO_EXTI_Callback+0x22>

		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_GPIO_EXTI_Callback+0x2c>)
 800184c:	f002 fbce 	bl	8003fec <HAL_GPIO_WritePin>
		alarm_flag = 0;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_GPIO_EXTI_Callback+0x30>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
	}
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020000 	.word	0x40020000
 8001864:	20000321 	.word	0x20000321

08001868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <MX_GPIO_Init+0x150>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <MX_GPIO_Init+0x150>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <MX_GPIO_Init+0x150>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <MX_GPIO_Init+0x150>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <MX_GPIO_Init+0x150>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <MX_GPIO_Init+0x150>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <MX_GPIO_Init+0x150>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <MX_GPIO_Init+0x150>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <MX_GPIO_Init+0x150>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Buzzer_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2160      	movs	r1, #96	; 0x60
 80018d6:	4839      	ldr	r0, [pc, #228]	; (80019bc <MX_GPIO_Init+0x154>)
 80018d8:	f002 fb88 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	4837      	ldr	r0, [pc, #220]	; (80019c0 <MX_GPIO_Init+0x158>)
 80018e2:	f002 fb83 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C2_Pin|C3_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018ec:	4833      	ldr	r0, [pc, #204]	; (80019bc <MX_GPIO_Init+0x154>)
 80018ee:	f002 fb7d 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2110      	movs	r1, #16
 80018f6:	4833      	ldr	r0, [pc, #204]	; (80019c4 <MX_GPIO_Init+0x15c>)
 80018f8:	f002 fb78 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <MX_GPIO_Init+0x160>)
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4619      	mov	r1, r3
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <MX_GPIO_Init+0x158>)
 8001912:	f002 f9d1 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Buzzer_Pin|C2_Pin|C3_Pin;
 8001916:	f44f 7358 	mov.w	r3, #864	; 0x360
 800191a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4619      	mov	r1, r3
 800192e:	4823      	ldr	r0, [pc, #140]	; (80019bc <MX_GPIO_Init+0x154>)
 8001930:	f002 f9c2 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R4_Pin;
 8001934:	f246 0320 	movw	r3, #24608	; 0x6020
 8001938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800193e:	2302      	movs	r3, #2
 8001940:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4619      	mov	r1, r3
 8001948:	481e      	ldr	r0, [pc, #120]	; (80019c4 <MX_GPIO_Init+0x15c>)
 800194a:	f002 f9b5 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C4_Pin;
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	4619      	mov	r1, r3
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <MX_GPIO_Init+0x158>)
 8001966:	f002 f9a7 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R3_Pin;
 800196a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001974:	2302      	movs	r3, #2
 8001976:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4619      	mov	r1, r3
 800197e:	480f      	ldr	r0, [pc, #60]	; (80019bc <MX_GPIO_Init+0x154>)
 8001980:	f002 f99a 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C1_Pin;
 8001984:	2310      	movs	r3, #16
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	480a      	ldr	r0, [pc, #40]	; (80019c4 <MX_GPIO_Init+0x15c>)
 800199c:	f002 f98c 	bl	8003cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2028      	movs	r0, #40	; 0x28
 80019a6:	f002 f92e 	bl	8003c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019aa:	2028      	movs	r0, #40	; 0x28
 80019ac:	f002 f947 	bl	8003c3e <HAL_NVIC_EnableIRQ>

}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020400 	.word	0x40020400
 80019c8:	10210000 	.word	0x10210000

080019cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <MX_I2C1_Init+0x54>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_I2C1_Init+0x58>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_I2C1_Init+0x50>)
 8001a0a:	f002 fb3b 	bl	8004084 <HAL_I2C_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a14:	f001 f824 	bl	8002a60 <Error_Handler>
  }

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000033c 	.word	0x2000033c
 8001a20:	40005400 	.word	0x40005400
 8001a24:	000186a0 	.word	0x000186a0

08001a28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <MX_I2C2_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_I2C2_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a66:	f002 fb0d 	bl	8004084 <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f000 fff6 	bl	8002a60 <Error_Handler>
  }

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000390 	.word	0x20000390
 8001a7c:	40005800 	.word	0x40005800
 8001a80:	000186a0 	.word	0x000186a0

08001a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	; (8001b90 <HAL_I2C_MspInit+0x10c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12d      	bne.n	8001b02 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2312      	movs	r3, #18
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	482e      	ldr	r0, [pc, #184]	; (8001b98 <HAL_I2C_MspInit+0x114>)
 8001ae0:	f002 f8ea 	bl	8003cb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b00:	e041      	b.n	8001b86 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <HAL_I2C_MspInit+0x118>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d13c      	bne.n	8001b86 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4814      	ldr	r0, [pc, #80]	; (8001b98 <HAL_I2C_MspInit+0x114>)
 8001b46:	f002 f8b7 	bl	8003cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b5a:	2309      	movs	r3, #9
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <HAL_I2C_MspInit+0x114>)
 8001b66:	f002 f8a7 	bl	8003cb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_I2C_MspInit+0x110>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	bf00      	nop
 8001b88:	3730      	adds	r7, #48	; 0x30
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40005800 	.word	0x40005800

08001ba0 <keypad4x4_Init>:
	"#",
	"D"
};

void keypad4x4_Init(Keypad_Wires_TypeDef  *KeypadWiringStruct)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	KeypadStruct = *KeypadWiringStruct;
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// znalezienie pinów 4 kolumn
	keypad4x4_FindPins_positions();
 8001bc0:	f000 f826 	bl	8001c10 <keypad4x4_FindPins_positions>

	// ustawienie pinów wszystkich kolumn na stan wysoki
	HAL_GPIO_WritePin(KeypadStruct.C1_Port, KeypadStruct.C1_pin, GPIO_PIN_SET);
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bc6:	6918      	ldr	r0, [r3, #16]
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f002 fa0c 	bl	8003fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C2_Port, KeypadStruct.C2_pin, GPIO_PIN_SET);
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bd6:	6958      	ldr	r0, [r3, #20]
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4619      	mov	r1, r3
 8001be0:	f002 fa04 	bl	8003fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C3_Port, KeypadStruct.C3_pin, GPIO_PIN_SET);
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001be6:	6998      	ldr	r0, [r3, #24]
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f002 f9fc 	bl	8003fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.C4_Port, KeypadStruct.C4_pin, GPIO_PIN_SET);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bf6:	69d8      	ldr	r0, [r3, #28]
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <keypad4x4_Init+0x6c>)
 8001bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f002 f9f4 	bl	8003fec <HAL_GPIO_WritePin>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0c:	20000280 	.word	0x20000280

08001c10 <keypad4x4_FindPins_positions>:

void keypad4x4_FindPins_positions(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	idx=0;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

	for(idx=0; idx<16; idx++)
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e041      	b.n	8001ca6 <keypad4x4_FindPins_positions+0x96>
	{
		if(((KeypadStruct.C1_pin >> idx) & 0x0001) == 0x0001)
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <keypad4x4_FindPins_positions+0xac>)
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	fa42 f303 	asr.w	r3, r2, r3
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <keypad4x4_FindPins_positions+0x30>
		{
			ColumnsPositions[0] = idx;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <keypad4x4_FindPins_positions+0xb0>)
 8001c3e:	701a      	strb	r2, [r3, #0]
		}
		if(((KeypadStruct.C2_pin >> idx) & 0x0001) == 0x0001)
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <keypad4x4_FindPins_positions+0xac>)
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	fa42 f303 	asr.w	r3, r2, r3
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <keypad4x4_FindPins_positions+0x4e>
		{
			ColumnsPositions[1] = idx;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <keypad4x4_FindPins_positions+0xb0>)
 8001c5c:	705a      	strb	r2, [r3, #1]
		}
		if(((KeypadStruct.C3_pin >> idx) & 0x0001) == 0x0001)
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <keypad4x4_FindPins_positions+0xac>)
 8001c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	fa42 f303 	asr.w	r3, r2, r3
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <keypad4x4_FindPins_positions+0x6c>
		{
			ColumnsPositions[2] = idx;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <keypad4x4_FindPins_positions+0xb0>)
 8001c7a:	709a      	strb	r2, [r3, #2]
		}
		if(((KeypadStruct.C4_pin >> idx) & 0x0001) == 0x0001)
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <keypad4x4_FindPins_positions+0xac>)
 8001c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	fa42 f303 	asr.w	r3, r2, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <keypad4x4_FindPins_positions+0x8a>
		{
			ColumnsPositions[3] = idx;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <keypad4x4_FindPins_positions+0xb0>)
 8001c98:	70da      	strb	r2, [r3, #3]
	for(idx=0; idx<16; idx++)
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <keypad4x4_FindPins_positions+0xa8>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	d9b9      	bls.n	8001c22 <keypad4x4_FindPins_positions+0x12>
		}
	}
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	200003e4 	.word	0x200003e4
 8001cbc:	20000280 	.word	0x20000280
 8001cc0:	200002b0 	.word	0x200002b0

08001cc4 <keypad4x4_ChangeColumn>:

void keypad4x4_ChangeColumn(uint8_t col_num)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
	if(col_num == 1)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d134      	bne.n	8001d3e <keypad4x4_ChangeColumn+0x7a>
	{
		//Set selected column
		KeypadStruct.C1_Port->OTYPER &= ~(1UL << ColumnsPositions[0]);
 8001cd4:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	6859      	ldr	r1, [r3, #4]
 8001cda:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	400a      	ands	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]

		//Make other columns floating
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001cf6:	785b      	ldrb	r3, [r3, #1]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	fa03 f202 	lsl.w	r2, r3, r2
 8001d00:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001d08:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001d10:	789b      	ldrb	r3, [r3, #2]
 8001d12:	461a      	mov	r2, r3
 8001d14:	2301      	movs	r3, #1
 8001d16:	fa03 f202 	lsl.w	r2, r3, r2
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001d22:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001d2a:	78db      	ldrb	r3, [r3, #3]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2301      	movs	r3, #1
 8001d30:	fa03 f202 	lsl.w	r2, r3, r2
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
		//Make other columns floating
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
	}
}
 8001d3c:	e0a6      	b.n	8001e8c <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 2)
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d134      	bne.n	8001dae <keypad4x4_ChangeColumn+0xea>
		KeypadStruct.C2_Port->OTYPER &= ~(1UL << ColumnsPositions[1]);
 8001d44:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	6859      	ldr	r1, [r3, #4]
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2301      	movs	r3, #1
 8001d52:	4093      	lsls	r3, r2
 8001d54:	43da      	mvns	r2, r3
 8001d56:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001d5e:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	fa03 f202 	lsl.w	r2, r3, r2
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001d78:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001d80:	789b      	ldrb	r3, [r3, #2]
 8001d82:	461a      	mov	r2, r3
 8001d84:	2301      	movs	r3, #1
 8001d86:	fa03 f202 	lsl.w	r2, r3, r2
 8001d8a:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001d9a:	78db      	ldrb	r3, [r3, #3]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2301      	movs	r3, #1
 8001da0:	fa03 f202 	lsl.w	r2, r3, r2
 8001da4:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	e06e      	b.n	8001e8c <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 3)
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d134      	bne.n	8001e1e <keypad4x4_ChangeColumn+0x15a>
		KeypadStruct.C3_Port->OTYPER &= ~(1UL << ColumnsPositions[2]);
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	4093      	lsls	r3, r2
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	400a      	ands	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	fa03 f202 	lsl.w	r2, r3, r2
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	461a      	mov	r2, r3
 8001df4:	2301      	movs	r3, #1
 8001df6:	fa03 f202 	lsl.w	r2, r3, r2
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
		KeypadStruct.C4_Port->OTYPER |= (1UL << ColumnsPositions[3]);
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001e0a:	78db      	ldrb	r3, [r3, #3]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2301      	movs	r3, #1
 8001e10:	fa03 f202 	lsl.w	r2, r3, r2
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]
}
 8001e1c:	e036      	b.n	8001e8c <keypad4x4_ChangeColumn+0x1c8>
	else if(col_num == 4)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d133      	bne.n	8001e8c <keypad4x4_ChangeColumn+0x1c8>
		KeypadStruct.C4_Port->OTYPER &= ~(1UL << ColumnsPositions[3]);
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	4093      	lsls	r3, r2
 8001e34:	43da      	mvns	r2, r3
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
		KeypadStruct.C1_Port->OTYPER |= (1UL << ColumnsPositions[0]);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	fa03 f202 	lsl.w	r2, r3, r2
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
		KeypadStruct.C2_Port->OTYPER |= (1UL << ColumnsPositions[1]);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001e60:	785b      	ldrb	r3, [r3, #1]
 8001e62:	461a      	mov	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	fa03 f202 	lsl.w	r2, r3, r2
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
		KeypadStruct.C3_Port->OTYPER |= (1UL << ColumnsPositions[2]);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <keypad4x4_ChangeColumn+0x1d8>)
 8001e7a:	789b      	ldrb	r3, [r3, #2]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2301      	movs	r3, #1
 8001e80:	fa03 f202 	lsl.w	r2, r3, r2
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <keypad4x4_ChangeColumn+0x1d4>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20000280 	.word	0x20000280
 8001e9c:	200002b0 	.word	0x200002b0

08001ea0 <keypad4x4_ReadKeypad>:

void keypad4x4_ReadKeypad(bool keys[16])
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	// Ustawienie pierwszej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(1);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff ff0b 	bl	8001cc4 <keypad4x4_ChangeColumn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001eae:	4b95      	ldr	r3, [pc, #596]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b94      	ldr	r3, [pc, #592]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001eb4:	8c1b      	ldrh	r3, [r3, #32]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f002 f87f 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001ed4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f002 f86f 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2201      	movne	r2, #1
 8001eec:	2200      	moveq	r2, #0
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001ef2:	4b84      	ldr	r3, [pc, #528]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	4b83      	ldr	r3, [pc, #524]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001ef8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f002 f85d 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3308      	adds	r3, #8
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2201      	movne	r2, #1
 8001f10:	2200      	moveq	r2, #0
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001f16:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f002 f84b 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2201      	movne	r2, #1
 8001f34:	2200      	moveq	r2, #0
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

	// Ustawienie drugiej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(2);
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7ff fec2 	bl	8001cc4 <keypad4x4_ChangeColumn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b6f      	ldr	r3, [pc, #444]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f46:	8c1b      	ldrh	r3, [r3, #32]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f002 f836 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	2a00      	cmp	r2, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2201      	movne	r2, #1
 8001f5e:	2200      	moveq	r2, #0
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001f64:	4b67      	ldr	r3, [pc, #412]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4b66      	ldr	r3, [pc, #408]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f6a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f002 f824 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2201      	movne	r2, #1
 8001f82:	2200      	moveq	r2, #0
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 8001f88:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001f8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f002 f812 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3309      	adds	r3, #9
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2201      	movne	r2, #1
 8001fa6:	2200      	moveq	r2, #0
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8001fac:	4b55      	ldr	r3, [pc, #340]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b54      	ldr	r3, [pc, #336]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f002 f800 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	330d      	adds	r3, #13
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2201      	movne	r2, #1
 8001fca:	2200      	moveq	r2, #0
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

	// Ustawienie trzeciej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(3);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f7ff fe77 	bl	8001cc4 <keypad4x4_ChangeColumn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 8001fd6:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001fdc:	8c1b      	ldrh	r3, [r3, #32]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f001 ffeb 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3302      	adds	r3, #2
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2201      	movne	r2, #1
 8001ff4:	2200      	moveq	r2, #0
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8001ffa:	4b42      	ldr	r3, [pc, #264]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002000:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f001 ffd9 	bl	8003fbc <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3306      	adds	r3, #6
 8002012:	2a00      	cmp	r2, #0
 8002014:	bf14      	ite	ne
 8002016:	2201      	movne	r2, #1
 8002018:	2200      	moveq	r2, #0
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b38      	ldr	r3, [pc, #224]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002024:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f001 ffc7 	bl	8003fbc <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	330a      	adds	r3, #10
 8002036:	2a00      	cmp	r2, #0
 8002038:	bf14      	ite	ne
 800203a:	2201      	movne	r2, #1
 800203c:	2200      	moveq	r2, #0
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f001 ffb5 	bl	8003fbc <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	330e      	adds	r3, #14
 800205a:	2a00      	cmp	r2, #0
 800205c:	bf14      	ite	ne
 800205e:	2201      	movne	r2, #1
 8002060:	2200      	moveq	r2, #0
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

	// Ustawienie czwartej kolumny na stan wysoki, a następnie sprawdzanie wszystkich wierszy
	keypad4x4_ChangeColumn(4);
 8002066:	2004      	movs	r0, #4
 8002068:	f7ff fe2c 	bl	8001cc4 <keypad4x4_ChangeColumn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.R1_Port, KeypadStruct.R1_pin);
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002072:	8c1b      	ldrh	r3, [r3, #32]
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f001 ffa0 	bl	8003fbc <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3303      	adds	r3, #3
 8002084:	2a00      	cmp	r2, #0
 8002086:	bf14      	ite	ne
 8002088:	2201      	movne	r2, #1
 800208a:	2200      	moveq	r2, #0
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.R2_Port, KeypadStruct.R2_pin);
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 8002096:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f001 ff8e 	bl	8003fbc <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3307      	adds	r3, #7
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2201      	movne	r2, #1
 80020ae:	2200      	moveq	r2, #0
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.R3_Port, KeypadStruct.R3_pin);
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 80020ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f001 ff7c 	bl	8003fbc <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	330b      	adds	r3, #11
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2201      	movne	r2, #1
 80020d2:	2200      	moveq	r2, #0
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.R4_Port, KeypadStruct.R4_pin);
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <keypad4x4_ReadKeypad+0x264>)
 80020de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f001 ff6a 	bl	8003fbc <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	330f      	adds	r3, #15
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2201      	movne	r2, #1
 80020f6:	2200      	moveq	r2, #0
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000280 	.word	0x20000280

08002108 <keypad4x4_GetChar>:

char* keypad4x4_GetChar(uint8_t keypad_char_index)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	return keypad_keys[keypad_char_index];
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <keypad4x4_GetChar+0x20>)
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <lcd_init>:
} TIME;

TIME time;

void lcd_init()
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	/** sekwencja z dokumentacji inicjalizująca wyświetlacz */
	HAL_Delay(40);
 8002130:	2028      	movs	r0, #40	; 0x28
 8002132:	f001 fc6b 	bl	8003a0c <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8002136:	2030      	movs	r0, #48	; 0x30
 8002138:	f000 f8d0 	bl	80022dc <lcd_write_command>
	HAL_Delay(5);
 800213c:	2005      	movs	r0, #5
 800213e:	f001 fc65 	bl	8003a0c <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 8002142:	2030      	movs	r0, #48	; 0x30
 8002144:	f000 f8ca 	bl	80022dc <lcd_write_command>
	HAL_Delay(1);
 8002148:	2001      	movs	r0, #1
 800214a:	f001 fc5f 	bl	8003a0c <HAL_Delay>
	lcd_write_command(INIT_8_BIT_MODE);
 800214e:	2030      	movs	r0, #48	; 0x30
 8002150:	f000 f8c4 	bl	80022dc <lcd_write_command>

	/** ustawienie trybu 4-bitowego */
	lcd_write_command(INIT_4_BIT_MODE);
 8002154:	2002      	movs	r0, #2
 8002156:	f000 f8c1 	bl	80022dc <lcd_write_command>

	/** włączenie kursora, bez migania i podkreślenia */
	lcd_write_command(UNDERLINE_OFF_BLINK_OFF);
 800215a:	200c      	movs	r0, #12
 800215c:	f000 f8be 	bl	80022dc <lcd_write_command>

	HAL_Delay(5);
 8002160:	2005      	movs	r0, #5
 8002162:	f001 fc53 	bl	8003a0c <HAL_Delay>

	lcd_generate_own_chars();
 8002166:	f000 f9c3 	bl	80024f0 <lcd_generate_own_chars>

	/** wyczyszczenie wyświetlacza */
	lcd_clear();
 800216a:	f000 f849 	bl	8002200 <lcd_clear>
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <lcd_display_refresh>:

/** Funkcja odpowiedzialna za aktualizowanie i wyświetlanie na bieżąco wszystkich danych na wyświetlaczu LCD */
void lcd_display_refresh() {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af02      	add	r7, sp, #8

	get_Time();
 800217a:	f001 fa3b 	bl	80035f4 <get_Time>

	/** wyświetlanie godziny na LCD */
	lcd_first_line();
 800217e:	f000 f899 	bl	80022b4 <lcd_first_line>
	sprintf(time_date_buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <lcd_display_refresh+0x78>)
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	461a      	mov	r2, r3
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <lcd_display_refresh+0x78>)
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	4619      	mov	r1, r3
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <lcd_display_refresh+0x78>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	460b      	mov	r3, r1
 8002196:	4916      	ldr	r1, [pc, #88]	; (80021f0 <lcd_display_refresh+0x7c>)
 8002198:	4816      	ldr	r0, [pc, #88]	; (80021f4 <lcd_display_refresh+0x80>)
 800219a:	f006 fc09 	bl	80089b0 <siprintf>
	lcd_send_string(time_date_buffer);
 800219e:	4815      	ldr	r0, [pc, #84]	; (80021f4 <lcd_display_refresh+0x80>)
 80021a0:	f000 f958 	bl	8002454 <lcd_send_string>

	/** wyświetlenie poziomu baterii */
	battery_level = 100;
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <lcd_display_refresh+0x84>)
 80021a6:	2264      	movs	r2, #100	; 0x64
 80021a8:	701a      	strb	r2, [r3, #0]
	lcd_show_battery_level(battery_level);
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <lcd_display_refresh+0x84>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fa72 	bl	8002698 <lcd_show_battery_level>

	/** wyświetlanie daty na LCD */
	lcd_second_line();
 80021b4:	f000 f888 	bl	80022c8 <lcd_second_line>
	sprintf(time_date_buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <lcd_display_refresh+0x78>)
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <lcd_display_refresh+0x78>)
 80021c0:	795b      	ldrb	r3, [r3, #5]
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <lcd_display_refresh+0x78>)
 80021c6:	799b      	ldrb	r3, [r3, #6]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <lcd_display_refresh+0x88>)
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <lcd_display_refresh+0x80>)
 80021d0:	f006 fbee 	bl	80089b0 <siprintf>
	lcd_send_string(time_date_buffer);
 80021d4:	4807      	ldr	r0, [pc, #28]	; (80021f4 <lcd_display_refresh+0x80>)
 80021d6:	f000 f93d 	bl	8002454 <lcd_send_string>

	/** wyświetlanie nazwy dnia tygodnia na LCD */
	lcd_show_week_day_name(time.dayofweek);
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <lcd_display_refresh+0x78>)
 80021dc:	78db      	ldrb	r3, [r3, #3]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fa0e 	bl	8002600 <lcd_show_week_day_name>
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000032c 	.word	0x2000032c
 80021f0:	0800b888 	.word	0x0800b888
 80021f4:	200003ec 	.word	0x200003ec
 80021f8:	200003f9 	.word	0x200003f9
 80021fc:	0800b898 	.word	0x0800b898

08002200 <lcd_clear>:

void lcd_clear(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_LCD);
 8002204:	2001      	movs	r0, #1
 8002206:	f000 f869 	bl	80022dc <lcd_write_command>
	HAL_Delay(5);
 800220a:	2005      	movs	r0, #5
 800220c:	f001 fbfe 	bl	8003a0c <HAL_Delay>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <lcd_back_light_on>:

/** Funkcja odpowiadająca za włączenie podświetlenia wyświetlacza LCD */
void lcd_back_light_on(void) {
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
	BL = 0x08;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <lcd_back_light_on+0x14>)
 800221a:	2208      	movs	r2, #8
 800221c:	701a      	strb	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	200003fa 	.word	0x200003fa

0800222c <lcd_back_light_off>:

/** Funkcja odpowiadająca za wyłączenie podświetlenia wyświetlacza LCD */
void lcd_back_light_off(void) {
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	BL = 0x00;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <lcd_back_light_off+0x14>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	200003fa 	.word	0x200003fa

08002244 <lcd_set_cursor>:

/** ustawienie kursora w danym wierszu i kolumnie */
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	460a      	mov	r2, r1
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	4613      	mov	r3, r2
 8002252:	71bb      	strb	r3, [r7, #6]

	col_number = (col) & 0x0F;
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <lcd_set_cursor+0x6c>)
 800225e:	701a      	strb	r2, [r3, #0]

	switch(row) {
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <lcd_set_cursor+0x28>
 8002266:	2b01      	cmp	r3, #1
 8002268:	d00d      	beq.n	8002286 <lcd_set_cursor+0x42>
 800226a:	e019      	b.n	80022a0 <lcd_set_cursor+0x5c>

		case 0:
			col_number |= (0x80);
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <lcd_set_cursor+0x6c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <lcd_set_cursor+0x6c>)
 8002278:	701a      	strb	r2, [r3, #0]
			lcd_write_command(col_number);	/** ustawienie kursora w kolumnie x w pierwszym wierszu */
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <lcd_set_cursor+0x6c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f82c 	bl	80022dc <lcd_write_command>
			break;
 8002284:	e00c      	b.n	80022a0 <lcd_set_cursor+0x5c>

		case 1:
			col_number |= (0xc0);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <lcd_set_cursor+0x6c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <lcd_set_cursor+0x6c>)
 8002292:	701a      	strb	r2, [r3, #0]
			lcd_write_command(col_number);	/** ustawienie kursora w kolumnie x w drugim wierszu */
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <lcd_set_cursor+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f81f 	bl	80022dc <lcd_write_command>
			break;
 800229e:	bf00      	nop
	}

	HAL_Delay(5);
 80022a0:	2005      	movs	r0, #5
 80022a2:	f001 fbb3 	bl	8003a0c <HAL_Delay>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200003fb 	.word	0x200003fb

080022b4 <lcd_first_line>:

/** ustawienie kursora na początku pierwszej linni */
void lcd_first_line(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	lcd_write_command(FIRST_LINE);
 80022b8:	2080      	movs	r0, #128	; 0x80
 80022ba:	f000 f80f 	bl	80022dc <lcd_write_command>
	HAL_Delay(5);
 80022be:	2005      	movs	r0, #5
 80022c0:	f001 fba4 	bl	8003a0c <HAL_Delay>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <lcd_second_line>:

/** ustawienie kursora na początku drugiej linni */
void lcd_second_line(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	lcd_write_command(SECOND_LINE);
 80022cc:	20c0      	movs	r0, #192	; 0xc0
 80022ce:	f000 f805 	bl	80022dc <lcd_write_command>
	HAL_Delay(5);
 80022d2:	2005      	movs	r0, #5
 80022d4:	f001 fb9a 	bl	8003a0c <HAL_Delay>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <lcd_write_command>:

/** wysłanie instrukcji do wyświetlacza */
void lcd_write_command(uint8_t data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
	addr = LCD_ADDRESS;
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <lcd_write_command+0x94>)
 80022e8:	224e      	movs	r2, #78	; 0x4e
 80022ea:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (data & 0xF0) | EN_PIN | BL;		/** EN = 1, RS = 0 											*/
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f023 030f 	bic.w	r3, r3, #15
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <lcd_write_command+0x98>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <lcd_write_command+0x9c>)
 8002304:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | BL;				/** EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu 	*/
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	f023 030f 	bic.w	r3, r3, #15
 800230e:	b25a      	sxtb	r2, r3
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <lcd_write_command+0x98>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	b25b      	sxtb	r3, r3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <lcd_write_command+0x9c>)
 800231e:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4)   | EN_PIN | BL;		/** EN = 1, RS = 0											*/
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <lcd_write_command+0x98>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <lcd_write_command+0x9c>)
 8002336:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4)   | BL;				/** EN = 0, RS = 0  zatrzaśnięcie danych w wyświetlaczu		*/
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	b25a      	sxtb	r2, r3
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <lcd_write_command+0x98>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b25b      	sxtb	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b25b      	sxtb	r3, r3
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <lcd_write_command+0x9c>)
 800234c:	70da      	strb	r2, [r3, #3]

	/** send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <lcd_write_command+0x94>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b299      	uxth	r1, r3
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2304      	movs	r3, #4
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <lcd_write_command+0x9c>)
 800235c:	4807      	ldr	r0, [pc, #28]	; (800237c <lcd_write_command+0xa0>)
 800235e:	f001 ffc9 	bl	80042f4 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002362:	2005      	movs	r0, #5
 8002364:	f001 fb52 	bl	8003a0c <HAL_Delay>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000080 	.word	0x20000080
 8002374:	200003fa 	.word	0x200003fa
 8002378:	20000400 	.word	0x20000400
 800237c:	2000033c 	.word	0x2000033c

08002380 <lcd_write_data>:

/** wysłanie danych do wyświetlacza */
void lcd_write_data(uint8_t data)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af02      	add	r7, sp, #8
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
	addr = LCD_ADDRESS;
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <lcd_write_data+0xc0>)
 800238c:	224e      	movs	r2, #78	; 0x4e
 800238e:	701a      	strb	r2, [r3, #0]
	RS = 0x01;
 8002390:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <lcd_write_data+0xc4>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (data & 0xF0) | EN_PIN | RS | BL;		/** EN = 1, RS = 1											*/
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f023 030f 	bic.w	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <lcd_write_data+0xc4>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <lcd_write_data+0xc8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <lcd_write_data+0xcc>)
 80023b6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | RS | BL;				/** EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu		*/
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	f023 030f 	bic.w	r3, r3, #15
 80023c0:	b25a      	sxtb	r2, r3
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <lcd_write_data+0xc4>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b25a      	sxtb	r2, r3
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <lcd_write_data+0xc8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	4313      	orrs	r3, r2
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <lcd_write_data+0xcc>)
 80023da:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4)   | EN_PIN | RS | BL;		/** EN = 1, RS = 1											*/
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <lcd_write_data+0xc4>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <lcd_write_data+0xc8>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <lcd_write_data+0xcc>)
 80023fa:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4)   | RS | BL;				/** EN = 0, RS = 1  zatrzaśnięcie danych w wyświetlaczu		*/
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	b25a      	sxtb	r2, r3
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <lcd_write_data+0xc4>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b25a      	sxtb	r2, r3
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <lcd_write_data+0xc8>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b25b      	sxtb	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b25b      	sxtb	r3, r3
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <lcd_write_data+0xcc>)
 800241a:	70da      	strb	r2, [r3, #3]

	/** send data via i2c */
	HAL_I2C_Master_Transmit(&I2C_HANDLER, addr, tx_data, 4, 100);
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <lcd_write_data+0xc0>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b299      	uxth	r1, r3
 8002422:	2364      	movs	r3, #100	; 0x64
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2304      	movs	r3, #4
 8002428:	4a08      	ldr	r2, [pc, #32]	; (800244c <lcd_write_data+0xcc>)
 800242a:	4809      	ldr	r0, [pc, #36]	; (8002450 <lcd_write_data+0xd0>)
 800242c:	f001 ff62 	bl	80042f4 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002430:	2005      	movs	r0, #5
 8002432:	f001 faeb 	bl	8003a0c <HAL_Delay>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000080 	.word	0x20000080
 8002444:	20000081 	.word	0x20000081
 8002448:	200003fa 	.word	0x200003fa
 800244c:	20000400 	.word	0x20000400
 8002450:	2000033c 	.word	0x2000033c

08002454 <lcd_send_string>:

void lcd_send_string(const char * string)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	while(*string)
 800245c:	e006      	b.n	800246c <lcd_send_string+0x18>
	{
		lcd_write_data(*(string++));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff8a 	bl	8002380 <lcd_write_data>
	while(*string)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f4      	bne.n	800245e <lcd_send_string+0xa>
	}

	HAL_Delay(5);
 8002474:	2005      	movs	r0, #5
 8002476:	f001 fac9 	bl	8003a0c <HAL_Delay>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <lcd_send_alarm_on_msg>:

void lcd_send_alarm_on_msg(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

	lcd_clear();
 8002488:	f7ff feba 	bl	8002200 <lcd_clear>
	lcd_send_string("Wy");
 800248c:	4808      	ldr	r0, [pc, #32]	; (80024b0 <lcd_send_alarm_on_msg+0x2c>)
 800248e:	f7ff ffe1 	bl	8002454 <lcd_send_string>
	lcd_send_own_char(3);
 8002492:	2003      	movs	r0, #3
 8002494:	f000 f864 	bl	8002560 <lcd_send_own_char>
	lcd_send_own_char(8);
 8002498:	2008      	movs	r0, #8
 800249a:	f000 f861 	bl	8002560 <lcd_send_own_char>
	lcd_send_string("cz alarm !!!");
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <lcd_send_alarm_on_msg+0x30>)
 80024a0:	f7ff ffd8 	bl	8002454 <lcd_send_string>
	delay(1000);
 80024a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a8:	f001 f8fc 	bl	80036a4 <delay>
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0800b8ac 	.word	0x0800b8ac
 80024b4:	0800b8b0 	.word	0x0800b8b0

080024b8 <lcd_send_alarm_off_msg>:

void lcd_send_alarm_off_msg(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0

	lcd_clear();
 80024bc:	f7ff fea0 	bl	8002200 <lcd_clear>
	lcd_send_string("Alarm wy");
 80024c0:	4809      	ldr	r0, [pc, #36]	; (80024e8 <lcd_send_alarm_off_msg+0x30>)
 80024c2:	f7ff ffc7 	bl	8002454 <lcd_send_string>
	lcd_send_own_char(3);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f000 f84a 	bl	8002560 <lcd_send_own_char>
	lcd_send_own_char(8);
 80024cc:	2008      	movs	r0, #8
 80024ce:	f000 f847 	bl	8002560 <lcd_send_own_char>
	lcd_send_string("czony");
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <lcd_send_alarm_off_msg+0x34>)
 80024d4:	f7ff ffbe 	bl	8002454 <lcd_send_string>
	delay(1000);
 80024d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024dc:	f001 f8e2 	bl	80036a4 <delay>
	lcd_clear();
 80024e0:	f7ff fe8e 	bl	8002200 <lcd_clear>
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	0800b8c0 	.word	0x0800b8c0
 80024ec:	0800b8cc 	.word	0x0800b8cc

080024f0 <lcd_generate_own_chars>:

/** funkcja do zapisania w pamięci CG RAM, ośmiu zdefiniowanych przez nas znaków */
void lcd_generate_own_chars(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

	lcd_write_command(CG_RAM_ADDRESS);	/** Przechodzimy na początek pamięci CG RAM	*/
 80024f4:	2040      	movs	r0, #64	; 0x40
 80024f6:	f7ff fef1 	bl	80022dc <lcd_write_command>

	for(i = 0; i <= 7; i ++) {
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <lcd_generate_own_chars+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e021      	b.n	8002546 <lcd_generate_own_chars+0x56>
		for(j = 0; j <= 7; j ++) {
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <lcd_generate_own_chars+0x68>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e013      	b.n	8002532 <lcd_generate_own_chars+0x42>
			lcd_write_data(own_chars[i][j]);	/** Zapisujemy własne znaki do pamięci CG RAM	*/
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <lcd_generate_own_chars+0x64>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <lcd_generate_own_chars+0x68>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	4a11      	ldr	r2, [pc, #68]	; (800255c <lcd_generate_own_chars+0x6c>)
 8002518:	00c3      	lsls	r3, r0, #3
 800251a:	4413      	add	r3, r2
 800251c:	440b      	add	r3, r1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff2d 	bl	8002380 <lcd_write_data>
		for(j = 0; j <= 7; j ++) {
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <lcd_generate_own_chars+0x68>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <lcd_generate_own_chars+0x68>)
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <lcd_generate_own_chars+0x68>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b07      	cmp	r3, #7
 8002538:	d9e7      	bls.n	800250a <lcd_generate_own_chars+0x1a>
	for(i = 0; i <= 7; i ++) {
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <lcd_generate_own_chars+0x64>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <lcd_generate_own_chars+0x64>)
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <lcd_generate_own_chars+0x64>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b07      	cmp	r3, #7
 800254c:	d9d9      	bls.n	8002502 <lcd_generate_own_chars+0x12>
		}
	}
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200003fc 	.word	0x200003fc
 8002558:	200003e8 	.word	0x200003e8
 800255c:	20000040 	.word	0x20000040

08002560 <lcd_send_own_char>:

/** funkcja wyświetlająca wybrany znak własny */
void lcd_send_own_char(uint8_t char_number) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]

	switch(char_number) {
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	3b01      	subs	r3, #1
 800256e:	2b07      	cmp	r3, #7
 8002570:	d832      	bhi.n	80025d8 <lcd_send_own_char+0x78>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <lcd_send_own_char+0x18>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002599 	.word	0x08002599
 800257c:	080025a1 	.word	0x080025a1
 8002580:	080025a9 	.word	0x080025a9
 8002584:	080025b1 	.word	0x080025b1
 8002588:	080025b9 	.word	0x080025b9
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080025c9 	.word	0x080025c9
 8002594:	080025d1 	.word	0x080025d1

		case 1:
			lcd_send_string("\x1");
 8002598:	4811      	ldr	r0, [pc, #68]	; (80025e0 <lcd_send_own_char+0x80>)
 800259a:	f7ff ff5b 	bl	8002454 <lcd_send_string>
			break;
 800259e:	e01b      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 2:
			lcd_send_string("\x2");
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <lcd_send_own_char+0x84>)
 80025a2:	f7ff ff57 	bl	8002454 <lcd_send_string>
			break;
 80025a6:	e017      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 3:
			lcd_send_string("\x3");
 80025a8:	480f      	ldr	r0, [pc, #60]	; (80025e8 <lcd_send_own_char+0x88>)
 80025aa:	f7ff ff53 	bl	8002454 <lcd_send_string>
			break;
 80025ae:	e013      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 4:
			lcd_send_string("\x4");
 80025b0:	480e      	ldr	r0, [pc, #56]	; (80025ec <lcd_send_own_char+0x8c>)
 80025b2:	f7ff ff4f 	bl	8002454 <lcd_send_string>
			break;
 80025b6:	e00f      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 5:
			lcd_send_string("\x5");
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <lcd_send_own_char+0x90>)
 80025ba:	f7ff ff4b 	bl	8002454 <lcd_send_string>
			break;
 80025be:	e00b      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 6:
			lcd_send_string("\x6");
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <lcd_send_own_char+0x94>)
 80025c2:	f7ff ff47 	bl	8002454 <lcd_send_string>
			break;
 80025c6:	e007      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 7:
			lcd_send_string("\x7");
 80025c8:	480b      	ldr	r0, [pc, #44]	; (80025f8 <lcd_send_own_char+0x98>)
 80025ca:	f7ff ff43 	bl	8002454 <lcd_send_string>
			break;
 80025ce:	e003      	b.n	80025d8 <lcd_send_own_char+0x78>

		case 8:
			lcd_send_string("\x8");
 80025d0:	480a      	ldr	r0, [pc, #40]	; (80025fc <lcd_send_own_char+0x9c>)
 80025d2:	f7ff ff3f 	bl	8002454 <lcd_send_string>
			break;
 80025d6:	bf00      	nop
	}
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	0800b8d4 	.word	0x0800b8d4
 80025e4:	0800b8d8 	.word	0x0800b8d8
 80025e8:	0800b8dc 	.word	0x0800b8dc
 80025ec:	0800b8e0 	.word	0x0800b8e0
 80025f0:	0800b8e4 	.word	0x0800b8e4
 80025f4:	0800b8e8 	.word	0x0800b8e8
 80025f8:	0800b8ec 	.word	0x0800b8ec
 80025fc:	0800b8f0 	.word	0x0800b8f0

08002600 <lcd_show_week_day_name>:

/** Funkcja odpowiedzialna za wyświetlenie nazwy dnia tygodnia */
void lcd_show_week_day_name(uint8_t day_number) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(1, 12);
 800260a:	210c      	movs	r1, #12
 800260c:	2001      	movs	r0, #1
 800260e:	f7ff fe19 	bl	8002244 <lcd_set_cursor>

	switch(day_number) {
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	3b01      	subs	r3, #1
 8002616:	2b06      	cmp	r3, #6
 8002618:	d82c      	bhi.n	8002674 <lcd_show_week_day_name+0x74>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <lcd_show_week_day_name+0x20>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	0800263d 	.word	0x0800263d
 8002624:	08002645 	.word	0x08002645
 8002628:	0800264d 	.word	0x0800264d
 800262c:	08002655 	.word	0x08002655
 8002630:	0800265d 	.word	0x0800265d
 8002634:	08002665 	.word	0x08002665
 8002638:	0800266d 	.word	0x0800266d

		case 1:
			lcd_send_string("pon.");
 800263c:	480f      	ldr	r0, [pc, #60]	; (800267c <lcd_show_week_day_name+0x7c>)
 800263e:	f7ff ff09 	bl	8002454 <lcd_send_string>
			break;
 8002642:	e017      	b.n	8002674 <lcd_show_week_day_name+0x74>

		case 2:
			lcd_send_string("wt.");
 8002644:	480e      	ldr	r0, [pc, #56]	; (8002680 <lcd_show_week_day_name+0x80>)
 8002646:	f7ff ff05 	bl	8002454 <lcd_send_string>
			break;
 800264a:	e013      	b.n	8002674 <lcd_show_week_day_name+0x74>

		case 3:
			lcd_send_string("sr.");
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <lcd_show_week_day_name+0x84>)
 800264e:	f7ff ff01 	bl	8002454 <lcd_send_string>
			break;
 8002652:	e00f      	b.n	8002674 <lcd_show_week_day_name+0x74>

		case 4:
			lcd_send_string("czw.");
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <lcd_show_week_day_name+0x88>)
 8002656:	f7ff fefd 	bl	8002454 <lcd_send_string>
			break;
 800265a:	e00b      	b.n	8002674 <lcd_show_week_day_name+0x74>

		case 5:
			lcd_send_string("pt.");
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <lcd_show_week_day_name+0x8c>)
 800265e:	f7ff fef9 	bl	8002454 <lcd_send_string>
			break;
 8002662:	e007      	b.n	8002674 <lcd_show_week_day_name+0x74>

		case 6:
			lcd_send_string("sob.");
 8002664:	480a      	ldr	r0, [pc, #40]	; (8002690 <lcd_show_week_day_name+0x90>)
 8002666:	f7ff fef5 	bl	8002454 <lcd_send_string>
			break;
 800266a:	e003      	b.n	8002674 <lcd_show_week_day_name+0x74>

		case 7:
			lcd_send_string("ndz.");
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <lcd_show_week_day_name+0x94>)
 800266e:	f7ff fef1 	bl	8002454 <lcd_send_string>
			break;
 8002672:	bf00      	nop
	}
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	0800b8f4 	.word	0x0800b8f4
 8002680:	0800b8fc 	.word	0x0800b8fc
 8002684:	0800b900 	.word	0x0800b900
 8002688:	0800b904 	.word	0x0800b904
 800268c:	0800b90c 	.word	0x0800b90c
 8002690:	0800b910 	.word	0x0800b910
 8002694:	0800b918 	.word	0x0800b918

08002698 <lcd_show_battery_level>:

void lcd_show_battery_level(uint8_t bat_lev) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]

	lcd_set_cursor(0, 11);
 80026a2:	210b      	movs	r1, #11
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff fdcd 	bl	8002244 <lcd_set_cursor>
	lcd_send_own_char(6);
 80026aa:	2006      	movs	r0, #6
 80026ac:	f7ff ff58 	bl	8002560 <lcd_send_own_char>

	char battery_level[4];
	sprintf(battery_level, "%d", bat_lev);
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <lcd_show_battery_level+0x40>)
 80026b8:	4618      	mov	r0, r3
 80026ba:	f006 f979 	bl	80089b0 <siprintf>

	lcd_send_string(battery_level);
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fec6 	bl	8002454 <lcd_send_string>
	lcd_send_string("%");
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <lcd_show_battery_level+0x44>)
 80026ca:	f7ff fec3 	bl	8002454 <lcd_send_string>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800b920 	.word	0x0800b920
 80026dc:	0800b924 	.word	0x0800b924

080026e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e4:	f001 f920 	bl	8003928 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e8:	f000 f83c 	bl	8002764 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ec:	f7ff f8bc 	bl	8001868 <MX_GPIO_Init>
  MX_I2C1_Init();
 80026f0:	f7ff f96c 	bl	80019cc <MX_I2C1_Init>
  MX_RTC_Init();
 80026f4:	f000 f9bc 	bl	8002a70 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80026f8:	f000 ffec 	bl	80036d4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80026fc:	f7ff f994 	bl	8001a28 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002700:	f000 fe52 	bl	80033a8 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002704:	f001 f810 	bl	8003728 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	2140      	movs	r1, #64	; 0x40
 800270c:	480f      	ldr	r0, [pc, #60]	; (800274c <main+0x6c>)
 800270e:	f001 fc6d 	bl	8003fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8002712:	2200      	movs	r2, #0
 8002714:	2120      	movs	r1, #32
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <main+0x6c>)
 8002718:	f001 fc68 	bl	8003fec <HAL_GPIO_WritePin>

  /****************** LCD BEGIN ******************/
  lcd_init();
 800271c:	f7ff fd06 	bl	800212c <lcd_init>
  /****************** LCD END ******************/

  /**
   * Wpisanie do rejestru RTC, czasu i daty pobranych z modułu RTC, aby czas w RTC był aktualny
   */
  rtc_set_time();
 8002720:	f7fe fc3a 	bl	8000f98 <rtc_set_time>
  /****************** UART BEGIN ******************/
  /**
   * Funkcja odpowiedzialna za odbiór jednego znaku z uart2 w trybie przerwaniowym, i zapisanie go w zmiennej uart_rx_data.
   * Po odebraniu znaku, nastąpi przerwanie które zostanie obsłużone przez funkcję callback HAL_UART_RxCpltCallback.
   */
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8002724:	2201      	movs	r2, #1
 8002726:	490a      	ldr	r1, [pc, #40]	; (8002750 <main+0x70>)
 8002728:	480a      	ldr	r0, [pc, #40]	; (8002754 <main+0x74>)
 800272a:	f004 fcc0 	bl	80070ae <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &BT_rx_data, 1);
 800272e:	2201      	movs	r2, #1
 8002730:	4909      	ldr	r1, [pc, #36]	; (8002758 <main+0x78>)
 8002732:	480a      	ldr	r0, [pc, #40]	; (800275c <main+0x7c>)
 8002734:	f004 fcbb 	bl	80070ae <HAL_UART_Receive_IT>
  /****************** UART END ******************/

  /****************** TIMER BEGIN ******************/
  HAL_TIM_Base_Start_IT(&htim1);
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <main+0x80>)
 800273a:	f004 f8ba 	bl	80068b2 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		to_do_after_wake_up_from_standby();
 800273e:	f000 fa51 	bl	8002be4 <to_do_after_wake_up_from_standby>

		to_do_before_going_to_standby();
 8002742:	f000 faf1 	bl	8002d28 <to_do_before_going_to_standby>

		go_to_standby();
 8002746:	f000 fcd1 	bl	80030ec <go_to_standby>
		to_do_after_wake_up_from_standby();
 800274a:	e7f8      	b.n	800273e <main+0x5e>
 800274c:	40020000 	.word	0x40020000
 8002750:	2000033a 	.word	0x2000033a
 8002754:	2000051c 	.word	0x2000051c
 8002758:	20000336 	.word	0x20000336
 800275c:	200004dc 	.word	0x200004dc
 8002760:	2000048c 	.word	0x2000048c

08002764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b098      	sub	sp, #96	; 0x60
 8002768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800276a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276e:	2230      	movs	r2, #48	; 0x30
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fad0 	bl	8007d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <SystemClock_Config+0x100>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <SystemClock_Config+0x100>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	; 0x40
 80027a8:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <SystemClock_Config+0x100>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027b4:	2300      	movs	r3, #0
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <SystemClock_Config+0x104>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027c0:	4a29      	ldr	r2, [pc, #164]	; (8002868 <SystemClock_Config+0x104>)
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <SystemClock_Config+0x104>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027d4:	230a      	movs	r3, #10
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d8:	2301      	movs	r3, #1
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027dc:	2310      	movs	r3, #16
 80027de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027e0:	2301      	movs	r3, #1
 80027e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027e4:	2302      	movs	r3, #2
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027e8:	2300      	movs	r3, #0
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027ec:	2308      	movs	r3, #8
 80027ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80027f0:	233c      	movs	r3, #60	; 0x3c
 80027f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027f4:	2302      	movs	r3, #2
 80027f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027f8:	2304      	movs	r3, #4
 80027fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fdb1 	bl	8005368 <HAL_RCC_OscConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800280c:	f000 f928 	bl	8002a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002810:	230f      	movs	r3, #15
 8002812:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f003 f80b 	bl	8005848 <HAL_RCC_ClockConfig>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002838:	f000 f912 	bl	8002a60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800283c:	2302      	movs	r3, #2
 800283e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002844:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002846:	f107 0308 	add.w	r3, r7, #8
 800284a:	4618      	mov	r0, r3
 800284c:	f003 f9c8 	bl	8005be0 <HAL_RCCEx_PeriphCLKConfig>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002856:	f000 f903 	bl	8002a60 <Error_Handler>
  }
}
 800285a:	bf00      	nop
 800285c:	3760      	adds	r7, #96	; 0x60
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000

0800286c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

/**
 * Funkcja odpowiedzialna za obsługę przerwania spowodowanego odebraniem danych na UART2
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

	/**
	 * Musimy sprawdzić czy przerwanie wywołał uart2, a nie coś innego
	 */
	if (huart->Instance == USART2) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6a      	ldr	r2, [pc, #424]	; (8002a24 <HAL_UART_RxCpltCallback+0x1b8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10b      	bne.n	8002896 <HAL_UART_RxCpltCallback+0x2a>

		activate_time();
 800287e:	f7fe fecb 	bl	8001618 <activate_time>
		activate_date();
 8002882:	f7fe ff17 	bl	80016b4 <activate_date>
		activate_alarm();
 8002886:	f7fe ff63 	bl	8001750 <activate_alarm>

		/**
		 * Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		 */
		HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800288a:	2201      	movs	r2, #1
 800288c:	4966      	ldr	r1, [pc, #408]	; (8002a28 <HAL_UART_RxCpltCallback+0x1bc>)
 800288e:	4867      	ldr	r0, [pc, #412]	; (8002a2c <HAL_UART_RxCpltCallback+0x1c0>)
 8002890:	f004 fc0d 	bl	80070ae <HAL_UART_Receive_IT>
		/**
		 * Po odebraniu danych, nasłuchuj ponownie na kolejne znaki
		 */
		HAL_UART_Receive_IT(&huart6, &BT_rx_data, 1);
	}
}
 8002894:	e0c1      	b.n	8002a1a <HAL_UART_RxCpltCallback+0x1ae>
	else if (huart->Instance == USART6) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_UART_RxCpltCallback+0x1c4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	f040 80bc 	bne.w	8002a1a <HAL_UART_RxCpltCallback+0x1ae>
		is_BT_rx_complete = 0;
 80028a2:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <HAL_UART_RxCpltCallback+0x1c8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
		if( (BT_rx_data == 'e') && (BT_array_max_size > 0 && BT_array_max_size <= 2) && (is_BT_data_valid == 1)) {
 80028a8:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b65      	cmp	r3, #101	; 0x65
 80028ae:	d12a      	bne.n	8002906 <HAL_UART_RxCpltCallback+0x9a>
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	dd26      	ble.n	8002906 <HAL_UART_RxCpltCallback+0x9a>
 80028b8:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	dc22      	bgt.n	8002906 <HAL_UART_RxCpltCallback+0x9a>
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_UART_RxCpltCallback+0x1d4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d11e      	bne.n	8002906 <HAL_UART_RxCpltCallback+0x9a>
			if(BT_array_max_size == 1) {
 80028c8:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d104      	bne.n	80028da <HAL_UART_RxCpltCallback+0x6e>
				uart_rx_data = BT_rx_string[0];
 80028d0:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_UART_RxCpltCallback+0x1d8>)
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <HAL_UART_RxCpltCallback+0x1bc>)
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e008      	b.n	80028ec <HAL_UART_RxCpltCallback+0x80>
			else if(BT_array_max_size == 2) {
 80028da:	4b58      	ldr	r3, [pc, #352]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d104      	bne.n	80028ec <HAL_UART_RxCpltCallback+0x80>
				uart_rx_data = BT_rx_int;
 80028e2:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_UART_RxCpltCallback+0x1dc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_UART_RxCpltCallback+0x1bc>)
 80028ea:	701a      	strb	r2, [r3, #0]
			i = 0;
 80028ec:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
			BT_array_max_size = 0;
 80028f2:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
			is_BT_data_valid = 0;
 80028f8:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_UART_RxCpltCallback+0x1d4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
			is_BT_rx_complete = 1;
 80028fe:	4b4d      	ldr	r3, [pc, #308]	; (8002a34 <HAL_UART_RxCpltCallback+0x1c8>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e07a      	b.n	80029fc <HAL_UART_RxCpltCallback+0x190>
		else if (BT_rx_data == 'q') {
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b71      	cmp	r3, #113	; 0x71
 800290c:	d108      	bne.n	8002920 <HAL_UART_RxCpltCallback+0xb4>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	484f      	ldr	r0, [pc, #316]	; (8002a50 <HAL_UART_RxCpltCallback+0x1e4>)
 8002914:	f001 fb6a 	bl	8003fec <HAL_GPIO_WritePin>
			alarm_flag = 0;
 8002918:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_UART_RxCpltCallback+0x1e8>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e06d      	b.n	80029fc <HAL_UART_RxCpltCallback+0x190>
			if(BT_rx_data == 't' || BT_rx_data == 'd' || BT_rx_data == 'a' || BT_rx_data == 'T' || BT_rx_data == 'D' || BT_rx_data == 'A') {
 8002920:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b74      	cmp	r3, #116	; 0x74
 8002926:	d013      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xe4>
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d00f      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xe4>
 8002930:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b61      	cmp	r3, #97	; 0x61
 8002936:	d00b      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xe4>
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b54      	cmp	r3, #84	; 0x54
 800293e:	d007      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xe4>
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b44      	cmp	r3, #68	; 0x44
 8002946:	d003      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xe4>
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b41      	cmp	r3, #65	; 0x41
 800294e:	d10a      	bne.n	8002966 <HAL_UART_RxCpltCallback+0xfa>
				BT_rx_string[0] = BT_rx_data;
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_UART_RxCpltCallback+0x1d8>)
 8002956:	701a      	strb	r2, [r3, #0]
				BT_array_max_size = 1;
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
				is_BT_data_valid = 1;
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_UART_RxCpltCallback+0x1d4>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e04a      	b.n	80029fc <HAL_UART_RxCpltCallback+0x190>
			else if(BT_rx_data != 'e' && BT_rx_data >= 0) {
 8002966:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b65      	cmp	r3, #101	; 0x65
 800296c:	d046      	beq.n	80029fc <HAL_UART_RxCpltCallback+0x190>
				BT_rx_string[i] = BT_rx_data - 48;
 800296e:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	3b30      	subs	r3, #48	; 0x30
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_UART_RxCpltCallback+0x1d8>)
 800297c:	5499      	strb	r1, [r3, r2]
				i = i + 1;
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 8002988:	701a      	strb	r2, [r3, #0]
				BT_array_max_size = i;
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_UART_RxCpltCallback+0x1d0>)
 8002992:	601a      	str	r2, [r3, #0]
				if(i == 2) {
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d12c      	bne.n	80029f6 <HAL_UART_RxCpltCallback+0x18a>
					sprintf(left_part, "%d", BT_rx_string[0]);	/** np. 1 */
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_UART_RxCpltCallback+0x1d8>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	492c      	ldr	r1, [pc, #176]	; (8002a58 <HAL_UART_RxCpltCallback+0x1ec>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f006 f801 	bl	80089b0 <siprintf>
					sprintf(right_part, "%d", BT_rx_string[1]);	/** np. 2 */
 80029ae:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_UART_RxCpltCallback+0x1d8>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	4927      	ldr	r1, [pc, #156]	; (8002a58 <HAL_UART_RxCpltCallback+0x1ec>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f005 fff8 	bl	80089b0 <siprintf>
					strcat(left_part, right_part);	/** dołączenie right_part na koniec left_part (left_part = 12) */
 80029c0:	f107 020c 	add.w	r2, r7, #12
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f006 f810 	bl	80089f0 <strcat>
					strcpy(temp_string, left_part);	/** przekopiowanie left_part do temp_string. (temp_string = 12) */
 80029d0:	f107 0210 	add.w	r2, r7, #16
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f006 f817 	bl	8008a0e <strcpy>
					BT_rx_int = atoi(temp_string);	/** BT_rx_int = 12 */
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 f969 	bl	8007cbc <atoi>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_UART_RxCpltCallback+0x1dc>)
 80029ee:	601a      	str	r2, [r3, #0]
					i = 0;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_UART_RxCpltCallback+0x1e0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
				is_BT_data_valid = 1;
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_UART_RxCpltCallback+0x1d4>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
		if(is_BT_rx_complete == 1) {
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_UART_RxCpltCallback+0x1c8>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_UART_RxCpltCallback+0x1a4>
			activate_time();
 8002a04:	f7fe fe08 	bl	8001618 <activate_time>
			activate_date();
 8002a08:	f7fe fe54 	bl	80016b4 <activate_date>
			activate_alarm();
 8002a0c:	f7fe fea0 	bl	8001750 <activate_alarm>
		HAL_UART_Receive_IT(&huart6, &BT_rx_data, 1);
 8002a10:	2201      	movs	r2, #1
 8002a12:	4909      	ldr	r1, [pc, #36]	; (8002a38 <HAL_UART_RxCpltCallback+0x1cc>)
 8002a14:	4811      	ldr	r0, [pc, #68]	; (8002a5c <HAL_UART_RxCpltCallback+0x1f0>)
 8002a16:	f004 fb4a 	bl	80070ae <HAL_UART_Receive_IT>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40004400 	.word	0x40004400
 8002a28:	2000033a 	.word	0x2000033a
 8002a2c:	2000051c 	.word	0x2000051c
 8002a30:	40011400 	.word	0x40011400
 8002a34:	20000404 	.word	0x20000404
 8002a38:	20000336 	.word	0x20000336
 8002a3c:	20000410 	.word	0x20000410
 8002a40:	20000408 	.word	0x20000408
 8002a44:	20000414 	.word	0x20000414
 8002a48:	2000040c 	.word	0x2000040c
 8002a4c:	200003fc 	.word	0x200003fc
 8002a50:	40020000 	.word	0x40020000
 8002a54:	20000321 	.word	0x20000321
 8002a58:	0800b928 	.word	0x0800b928
 8002a5c:	200004dc 	.word	0x200004dc

08002a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b090      	sub	sp, #64	; 0x40
 8002a74:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2228      	movs	r2, #40	; 0x28
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f005 f941 	bl	8007d18 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a96:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <MX_RTC_Init+0x124>)
 8002a98:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <MX_RTC_Init+0x128>)
 8002a9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <MX_RTC_Init+0x124>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <MX_RTC_Init+0x124>)
 8002aa4:	227f      	movs	r2, #127	; 0x7f
 8002aa6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <MX_RTC_Init+0x124>)
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <MX_RTC_Init+0x124>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <MX_RTC_Init+0x124>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <MX_RTC_Init+0x124>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ac0:	4834      	ldr	r0, [pc, #208]	; (8002b94 <MX_RTC_Init+0x124>)
 8002ac2:	f003 f97b 	bl	8005dbc <HAL_RTC_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002acc:	f7ff ffc8 	bl	8002a60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x46;
 8002ad6:	2346      	movs	r3, #70	; 0x46
 8002ad8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8002adc:	2345      	movs	r3, #69	; 0x45
 8002ade:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aee:	2201      	movs	r2, #1
 8002af0:	4619      	mov	r1, r3
 8002af2:	4828      	ldr	r0, [pc, #160]	; (8002b94 <MX_RTC_Init+0x124>)
 8002af4:	f003 f9f3 	bl	8005ede <HAL_RTC_SetTime>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002afe:	f7ff ffaf 	bl	8002a60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002b02:	2302      	movs	r3, #2
 8002b04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x24;
 8002b0e:	2324      	movs	r3, #36	; 0x24
 8002b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 8002b14:	2320      	movs	r3, #32
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4619      	mov	r1, r3
 8002b22:	481c      	ldr	r0, [pc, #112]	; (8002b94 <MX_RTC_Init+0x124>)
 8002b24:	f003 fa98 	bl	8006058 <HAL_RTC_SetDate>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002b2e:	f7ff ff97 	bl	8002a60 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8002b32:	2319      	movs	r3, #25
 8002b34:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 8002b36:	2323      	movs	r3, #35	; 0x23
 8002b38:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 8002b56:	2312      	movs	r3, #18
 8002b58:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b62:	463b      	mov	r3, r7
 8002b64:	2201      	movs	r2, #1
 8002b66:	4619      	mov	r1, r3
 8002b68:	480a      	ldr	r0, [pc, #40]	; (8002b94 <MX_RTC_Init+0x124>)
 8002b6a:	f003 fb1d 	bl	80061a8 <HAL_RTC_SetAlarm_IT>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002b74:	f7ff ff74 	bl	8002a60 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2105      	movs	r1, #5
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_RTC_Init+0x124>)
 8002b7e:	f003 fd03 	bl	8006588 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8002b88:	f7ff ff6a 	bl	8002a60 <Error_Handler>
  }

}
 8002b8c:	bf00      	nop
 8002b8e:	3740      	adds	r7, #64	; 0x40
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000418 	.word	0x20000418
 8002b98:	40002800 	.word	0x40002800

08002b9c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_RTC_MspInit+0x40>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d112      	bne.n	8002bd4 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RTC_MspInit+0x44>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f001 f824 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002bbe:	2003      	movs	r0, #3
 8002bc0:	f001 f83d 	bl	8003c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2029      	movs	r0, #41	; 0x29
 8002bca:	f001 f81c 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002bce:	2029      	movs	r0, #41	; 0x29
 8002bd0:	f001 f835 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40002800 	.word	0x40002800
 8002be0:	42470e3c 	.word	0x42470e3c

08002be4 <to_do_after_wake_up_from_standby>:
/*	keypad	*/
bool keypadSwitches[16] = {0};
Keypad_Wires_TypeDef keypadStruct;
/*	keypad	*/

void to_do_after_wake_up_from_standby(void) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0

	lcd_back_light_on();
 8002bea:	f7ff fb13 	bl	8002214 <lcd_back_light_on>

	/** wykonaj jeśli zaczął się alarm */
	if(alarm_flag) {
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <to_do_after_wake_up_from_standby+0x120>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <to_do_after_wake_up_from_standby+0x24>

		while (alarm_flag) {
 8002bf6:	e001      	b.n	8002bfc <to_do_after_wake_up_from_standby+0x18>
			to_do_on_alarm();
 8002bf8:	f7fe fe08 	bl	800180c <to_do_on_alarm>
		while (alarm_flag) {
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <to_do_after_wake_up_from_standby+0x120>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f9      	bne.n	8002bf8 <to_do_after_wake_up_from_standby+0x14>
		}

		to_do_on_alarm_off();
 8002c04:	f7fe fe10 	bl	8001828 <to_do_on_alarm_off>
	/** Flaga SBF (Standby flag) mówi o tym, czy MCU wybudził się ze stanu standby
	* SBF = 1 -> MCU wybudził się ze standby
	*/

	/** na początku sprawdzamy czy nie jest ustawiona flaga SBF	*/
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <to_do_after_wake_up_from_standby+0x124>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d13a      	bne.n	8002c8a <to_do_after_wake_up_from_standby+0xa6>

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);	/** wyszyszczenie flagi SBF, aby upewnić się że nie jesteśmy w trybie stanby	*/
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <to_do_after_wake_up_from_standby+0x124>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <to_do_after_wake_up_from_standby+0x124>)
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	6013      	str	r3, [r2, #0]

	  for(int i=0; i<12; i++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	e009      	b.n	8002c3a <to_do_after_wake_up_from_standby+0x56>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8002c26:	2120      	movs	r1, #32
 8002c28:	4838      	ldr	r0, [pc, #224]	; (8002d0c <to_do_after_wake_up_from_standby+0x128>)
 8002c2a:	f001 f9f8 	bl	800401e <HAL_GPIO_TogglePin>
		  delay(80);
 8002c2e:	2050      	movs	r0, #80	; 0x50
 8002c30:	f000 fd38 	bl	80036a4 <delay>
	  for(int i=0; i<12; i++) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3301      	adds	r3, #1
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0b      	cmp	r3, #11
 8002c3e:	ddf2      	ble.n	8002c26 <to_do_after_wake_up_from_standby+0x42>
	  }

	  if(!alarm_flag) {
 8002c40:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <to_do_after_wake_up_from_standby+0x120>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d118      	bne.n	8002c7a <to_do_after_wake_up_from_standby+0x96>
		  lcd_clear();
 8002c48:	f7ff fada 	bl	8002200 <lcd_clear>
		  lcd_set_cursor(0, 2);
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7ff faf8 	bl	8002244 <lcd_set_cursor>
		  lcd_send_string("Wake up from");
 8002c54:	482e      	ldr	r0, [pc, #184]	; (8002d10 <to_do_after_wake_up_from_standby+0x12c>)
 8002c56:	f7ff fbfd 	bl	8002454 <lcd_send_string>
		  lcd_second_line();
 8002c5a:	f7ff fb35 	bl	80022c8 <lcd_second_line>
		  lcd_set_cursor(1, 2);
 8002c5e:	2102      	movs	r1, #2
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7ff faef 	bl	8002244 <lcd_set_cursor>
		  lcd_send_string("STANDBY MODE");
 8002c66:	482b      	ldr	r0, [pc, #172]	; (8002d14 <to_do_after_wake_up_from_standby+0x130>)
 8002c68:	f7ff fbf4 	bl	8002454 <lcd_send_string>
		  delay(1000);
 8002c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c70:	f000 fd18 	bl	80036a4 <delay>
		  lcd_clear();
 8002c74:	f7ff fac4 	bl	8002200 <lcd_clear>
 8002c78:	e001      	b.n	8002c7e <to_do_after_wake_up_from_standby+0x9a>
	  }
	  else {
		  to_do_on_alarm();
 8002c7a:	f7fe fdc7 	bl	800180c <to_do_on_alarm>
	  }

	  /** Wyłączenie pinu WAKE UP */
	  HAL_PWR_DisableWakeUpPin(WakeUp_PIN_Pin);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f002 fb46 	bl	8005310 <HAL_PWR_DisableWakeUpPin>

	  /** Wyłączenie Wake up timer */
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002c84:	4824      	ldr	r0, [pc, #144]	; (8002d18 <to_do_after_wake_up_from_standby+0x134>)
 8002c86:	f003 fd3f 	bl	8006708 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	/** Porty klawiatury */
	keypadStruct.R1_Port = R1_GPIO_Port;
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <to_do_after_wake_up_from_standby+0x13c>)
 8002c8e:	601a      	str	r2, [r3, #0]
	keypadStruct.R2_Port = R2_GPIO_Port;
 8002c90:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002c92:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <to_do_after_wake_up_from_standby+0x13c>)
 8002c94:	605a      	str	r2, [r3, #4]
	keypadStruct.R3_Port = R3_GPIO_Port;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <to_do_after_wake_up_from_standby+0x128>)
 8002c9a:	609a      	str	r2, [r3, #8]
	keypadStruct.R4_Port = R4_GPIO_Port;
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <to_do_after_wake_up_from_standby+0x13c>)
 8002ca0:	60da      	str	r2, [r3, #12]

	keypadStruct.C1_Port = C1_GPIO_Port;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <to_do_after_wake_up_from_standby+0x13c>)
 8002ca6:	611a      	str	r2, [r3, #16]
	keypadStruct.C2_Port = C2_GPIO_Port;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <to_do_after_wake_up_from_standby+0x128>)
 8002cac:	615a      	str	r2, [r3, #20]
	keypadStruct.C3_Port = C3_GPIO_Port;
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cb0:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <to_do_after_wake_up_from_standby+0x128>)
 8002cb2:	619a      	str	r2, [r3, #24]
	keypadStruct.C4_Port = C4_GPIO_Port;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cb6:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <to_do_after_wake_up_from_standby+0x140>)
 8002cb8:	61da      	str	r2, [r3, #28]

	/** Piny klawiatury */
	keypadStruct.R1_pin = R1_Pin;
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc0:	841a      	strh	r2, [r3, #32]
	keypadStruct.R2_pin = R2_Pin;
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cc8:	845a      	strh	r2, [r3, #34]	; 0x22
	keypadStruct.R3_pin = R3_Pin;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd0:	849a      	strh	r2, [r3, #36]	; 0x24
	keypadStruct.R4_pin = R4_Pin;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	84da      	strh	r2, [r3, #38]	; 0x26

	keypadStruct.C1_pin = C1_Pin;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cda:	2210      	movs	r2, #16
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
	keypadStruct.C2_pin = C2_Pin;
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
	keypadStruct.C3_pin = C3_Pin;
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	859a      	strh	r2, [r3, #44]	; 0x2c
	keypadStruct.C4_pin = C4_Pin;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

	keypad4x4_Init(&keypadStruct);
 8002cf4:	4809      	ldr	r0, [pc, #36]	; (8002d1c <to_do_after_wake_up_from_standby+0x138>)
 8002cf6:	f7fe ff53 	bl	8001ba0 <keypad4x4_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000321 	.word	0x20000321
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	0800b92c 	.word	0x0800b92c
 8002d14:	0800b93c 	.word	0x0800b93c
 8002d18:	20000418 	.word	0x20000418
 8002d1c:	20000438 	.word	0x20000438
 8002d20:	40020400 	.word	0x40020400
 8002d24:	40020800 	.word	0x40020800

08002d28 <to_do_before_going_to_standby>:

void to_do_before_going_to_standby(void) {
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af04      	add	r7, sp, #16

	for(int i=0; i<300; i++) {
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	e1af      	b.n	8003094 <to_do_before_going_to_standby+0x36c>

		lcd_display_refresh();
 8002d34:	f7ff fa1e 	bl	8002174 <lcd_display_refresh>

		/** wykonaj jeśli zaczął się alarm */
		if(alarm_flag) {
 8002d38:	4b91      	ldr	r3, [pc, #580]	; (8002f80 <to_do_before_going_to_standby+0x258>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <to_do_before_going_to_standby+0x2a>

			while (alarm_flag) {
 8002d40:	e001      	b.n	8002d46 <to_do_before_going_to_standby+0x1e>
				to_do_on_alarm();
 8002d42:	f7fe fd63 	bl	800180c <to_do_on_alarm>
			while (alarm_flag) {
 8002d46:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <to_do_before_going_to_standby+0x258>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f9      	bne.n	8002d42 <to_do_before_going_to_standby+0x1a>
			}

			to_do_on_alarm_off();
 8002d4e:	f7fe fd6b 	bl	8001828 <to_do_on_alarm_off>
		}

		keypad4x4_ReadKeypad(keypadSwitches);
 8002d52:	488c      	ldr	r0, [pc, #560]	; (8002f84 <to_do_before_going_to_standby+0x25c>)
 8002d54:	f7ff f8a4 	bl	8001ea0 <keypad4x4_ReadKeypad>

		for(int j=0; j<16; j++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	e01f      	b.n	8002d9e <to_do_before_going_to_standby+0x76>

			if(keypadSwitches[j]) {
 8002d5e:	4a89      	ldr	r2, [pc, #548]	; (8002f84 <to_do_before_going_to_standby+0x25c>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <to_do_before_going_to_standby+0x70>
				lcd_clear();
 8002d6a:	f7ff fa49 	bl	8002200 <lcd_clear>
				HAL_Delay(5);
 8002d6e:	2005      	movs	r0, #5
 8002d70:	f000 fe4c 	bl	8003a0c <HAL_Delay>
				lcd_send_string("Przycisk: ");
 8002d74:	4884      	ldr	r0, [pc, #528]	; (8002f88 <to_do_before_going_to_standby+0x260>)
 8002d76:	f7ff fb6d 	bl	8002454 <lcd_send_string>
				lcd_send_string(keypad4x4_GetChar(j));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f9c2 	bl	8002108 <keypad4x4_GetChar>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fb64 	bl	8002454 <lcd_send_string>
				delay(1000);
 8002d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d90:	f000 fc88 	bl	80036a4 <delay>
				lcd_clear();
 8002d94:	f7ff fa34 	bl	8002200 <lcd_clear>
		for(int j=0; j<16; j++) {
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	dddc      	ble.n	8002d5e <to_do_before_going_to_standby+0x36>
			}

		}

		/** wykonaj jeśli użytkownik ustawił nową godzinę */
		if(time_set_flag) {
 8002da4:	4b79      	ldr	r3, [pc, #484]	; (8002f8c <to_do_before_going_to_standby+0x264>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8085 	beq.w	8002eb8 <to_do_before_going_to_standby+0x190>

			new_sec = time.seconds;
 8002dae:	4b78      	ldr	r3, [pc, #480]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <to_do_before_going_to_standby+0x26c>)
 8002db4:	701a      	strb	r2, [r3, #0]
			new_hour = global_buffer[1];
 8002db6:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <to_do_before_going_to_standby+0x270>)
 8002db8:	785a      	ldrb	r2, [r3, #1]
 8002dba:	4b78      	ldr	r3, [pc, #480]	; (8002f9c <to_do_before_going_to_standby+0x274>)
 8002dbc:	701a      	strb	r2, [r3, #0]
			new_min = global_buffer[2];
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <to_do_before_going_to_standby+0x270>)
 8002dc0:	789a      	ldrb	r2, [r3, #2]
 8002dc2:	4b77      	ldr	r3, [pc, #476]	; (8002fa0 <to_do_before_going_to_standby+0x278>)
 8002dc4:	701a      	strb	r2, [r3, #0]
			new_dow = time.dayofweek;
 8002dc6:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002dc8:	78da      	ldrb	r2, [r3, #3]
 8002dca:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <to_do_before_going_to_standby+0x27c>)
 8002dcc:	701a      	strb	r2, [r3, #0]
			new_dom = time.dayofmonth;
 8002dce:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002dd0:	791a      	ldrb	r2, [r3, #4]
 8002dd2:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <to_do_before_going_to_standby+0x280>)
 8002dd4:	701a      	strb	r2, [r3, #0]
			new_month = time.month;
 8002dd6:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002dd8:	795a      	ldrb	r2, [r3, #5]
 8002dda:	4b74      	ldr	r3, [pc, #464]	; (8002fac <to_do_before_going_to_standby+0x284>)
 8002ddc:	701a      	strb	r2, [r3, #0]
			new_year = time.year;
 8002dde:	4b6c      	ldr	r3, [pc, #432]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002de0:	799a      	ldrb	r2, [r3, #6]
 8002de2:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <to_do_before_going_to_standby+0x288>)
 8002de4:	701a      	strb	r2, [r3, #0]

			if( (new_hour > 23 || new_hour < 0 || new_min > 59 || new_min < 1) && time_set_flag) {
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <to_do_before_going_to_standby+0x274>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b17      	cmp	r3, #23
 8002dec:	d807      	bhi.n	8002dfe <to_do_before_going_to_standby+0xd6>
 8002dee:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <to_do_before_going_to_standby+0x278>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b3b      	cmp	r3, #59	; 0x3b
 8002df4:	d803      	bhi.n	8002dfe <to_do_before_going_to_standby+0xd6>
 8002df6:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <to_do_before_going_to_standby+0x278>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d125      	bne.n	8002e4a <to_do_before_going_to_standby+0x122>
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <to_do_before_going_to_standby+0x264>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d021      	beq.n	8002e4a <to_do_before_going_to_standby+0x122>

				lcd_clear();
 8002e06:	f7ff f9fb 	bl	8002200 <lcd_clear>
				lcd_set_cursor(0, 1);
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7ff fa19 	bl	8002244 <lcd_set_cursor>
				lcd_send_string("Nieprawid");
 8002e12:	4868      	ldr	r0, [pc, #416]	; (8002fb4 <to_do_before_going_to_standby+0x28c>)
 8002e14:	f7ff fb1e 	bl	8002454 <lcd_send_string>
				lcd_send_own_char(3);
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f7ff fba1 	bl	8002560 <lcd_send_own_char>
				lcd_send_string("owy");
 8002e1e:	4866      	ldr	r0, [pc, #408]	; (8002fb8 <to_do_before_going_to_standby+0x290>)
 8002e20:	f7ff fb18 	bl	8002454 <lcd_send_string>
				lcd_second_line();
 8002e24:	f7ff fa50 	bl	80022c8 <lcd_second_line>
				lcd_set_cursor(1, 6);
 8002e28:	2106      	movs	r1, #6
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7ff fa0a 	bl	8002244 <lcd_set_cursor>
				lcd_send_string("czas!");
 8002e30:	4862      	ldr	r0, [pc, #392]	; (8002fbc <to_do_before_going_to_standby+0x294>)
 8002e32:	f7ff fb0f 	bl	8002454 <lcd_send_string>
				delay(1000);
 8002e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3a:	f000 fc33 	bl	80036a4 <delay>
				lcd_clear();
 8002e3e:	f7ff f9df 	bl	8002200 <lcd_clear>

				time_set_flag = 0;
 8002e42:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <to_do_before_going_to_standby+0x264>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e036      	b.n	8002eb8 <to_do_before_going_to_standby+0x190>
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 8002e4a:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <to_do_before_going_to_standby+0x26c>)
 8002e4c:	7818      	ldrb	r0, [r3, #0]
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <to_do_before_going_to_standby+0x278>)
 8002e50:	781c      	ldrb	r4, [r3, #0]
 8002e52:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <to_do_before_going_to_standby+0x274>)
 8002e54:	781d      	ldrb	r5, [r3, #0]
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <to_do_before_going_to_standby+0x27c>)
 8002e58:	781e      	ldrb	r6, [r3, #0]
 8002e5a:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <to_do_before_going_to_standby+0x280>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4a53      	ldr	r2, [pc, #332]	; (8002fac <to_do_before_going_to_standby+0x284>)
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	4953      	ldr	r1, [pc, #332]	; (8002fb0 <to_do_before_going_to_standby+0x288>)
 8002e64:	7809      	ldrb	r1, [r1, #0]
 8002e66:	9102      	str	r1, [sp, #8]
 8002e68:	9201      	str	r2, [sp, #4]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	4633      	mov	r3, r6
 8002e6e:	462a      	mov	r2, r5
 8002e70:	4621      	mov	r1, r4
 8002e72:	f000 fb61 	bl	8003538 <set_Time>

				lcd_clear();
 8002e76:	f7ff f9c3 	bl	8002200 <lcd_clear>
				sprintf(new_time_details_msg, "%02d:%02d:%02d", new_hour, new_min, new_sec);
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <to_do_before_going_to_standby+0x274>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <to_do_before_going_to_standby+0x278>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <to_do_before_going_to_standby+0x26c>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	494c      	ldr	r1, [pc, #304]	; (8002fc0 <to_do_before_going_to_standby+0x298>)
 8002e90:	484c      	ldr	r0, [pc, #304]	; (8002fc4 <to_do_before_going_to_standby+0x29c>)
 8002e92:	f005 fd8d 	bl	80089b0 <siprintf>
				lcd_send_string("Ustawiony czas:");
 8002e96:	484c      	ldr	r0, [pc, #304]	; (8002fc8 <to_do_before_going_to_standby+0x2a0>)
 8002e98:	f7ff fadc 	bl	8002454 <lcd_send_string>
				lcd_second_line();
 8002e9c:	f7ff fa14 	bl	80022c8 <lcd_second_line>
				lcd_send_string(new_time_details_msg);
 8002ea0:	4848      	ldr	r0, [pc, #288]	; (8002fc4 <to_do_before_going_to_standby+0x29c>)
 8002ea2:	f7ff fad7 	bl	8002454 <lcd_send_string>
				delay(1000);
 8002ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eaa:	f000 fbfb 	bl	80036a4 <delay>
				lcd_clear();
 8002eae:	f7ff f9a7 	bl	8002200 <lcd_clear>

				time_set_flag = 0;
 8002eb2:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <to_do_before_going_to_standby+0x264>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
			}

		}

		/** wykonaj jeśli użytkownik ustawił nową datę */
		if(date_set_flag) {
 8002eb8:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <to_do_before_going_to_standby+0x2a4>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80c2 	beq.w	8003046 <to_do_before_going_to_standby+0x31e>

			new_sec = time.seconds;
 8002ec2:	4b33      	ldr	r3, [pc, #204]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <to_do_before_going_to_standby+0x26c>)
 8002ec8:	701a      	strb	r2, [r3, #0]
			new_min = time.minutes;
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002ecc:	785a      	ldrb	r2, [r3, #1]
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <to_do_before_going_to_standby+0x278>)
 8002ed0:	701a      	strb	r2, [r3, #0]
			new_hour = time.hour;
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <to_do_before_going_to_standby+0x268>)
 8002ed4:	789a      	ldrb	r2, [r3, #2]
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <to_do_before_going_to_standby+0x274>)
 8002ed8:	701a      	strb	r2, [r3, #0]

			new_dow = global_buffer[1];
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <to_do_before_going_to_standby+0x270>)
 8002edc:	785a      	ldrb	r2, [r3, #1]
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <to_do_before_going_to_standby+0x27c>)
 8002ee0:	701a      	strb	r2, [r3, #0]
			new_dom = global_buffer[2];
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <to_do_before_going_to_standby+0x270>)
 8002ee4:	789a      	ldrb	r2, [r3, #2]
 8002ee6:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <to_do_before_going_to_standby+0x280>)
 8002ee8:	701a      	strb	r2, [r3, #0]
			new_month = global_buffer[3];
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <to_do_before_going_to_standby+0x270>)
 8002eec:	78da      	ldrb	r2, [r3, #3]
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <to_do_before_going_to_standby+0x284>)
 8002ef0:	701a      	strb	r2, [r3, #0]
			new_year = global_buffer[4];
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <to_do_before_going_to_standby+0x270>)
 8002ef4:	791a      	ldrb	r2, [r3, #4]
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <to_do_before_going_to_standby+0x288>)
 8002ef8:	701a      	strb	r2, [r3, #0]


			if( (new_dow > 7 || new_dow < 1 || new_dom > 31 || new_dom < 1 || new_month > 12 || new_month < 1 || new_year < 20) && date_set_flag) {
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <to_do_before_going_to_standby+0x27c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b07      	cmp	r3, #7
 8002f00:	d817      	bhi.n	8002f32 <to_do_before_going_to_standby+0x20a>
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <to_do_before_going_to_standby+0x27c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d013      	beq.n	8002f32 <to_do_before_going_to_standby+0x20a>
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <to_do_before_going_to_standby+0x280>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b1f      	cmp	r3, #31
 8002f10:	d80f      	bhi.n	8002f32 <to_do_before_going_to_standby+0x20a>
 8002f12:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <to_do_before_going_to_standby+0x280>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <to_do_before_going_to_standby+0x20a>
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <to_do_before_going_to_standby+0x284>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d807      	bhi.n	8002f32 <to_do_before_going_to_standby+0x20a>
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <to_do_before_going_to_standby+0x284>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <to_do_before_going_to_standby+0x20a>
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <to_do_before_going_to_standby+0x288>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b13      	cmp	r3, #19
 8002f30:	d852      	bhi.n	8002fd8 <to_do_before_going_to_standby+0x2b0>
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <to_do_before_going_to_standby+0x2a4>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d04e      	beq.n	8002fd8 <to_do_before_going_to_standby+0x2b0>

				lcd_clear();
 8002f3a:	f7ff f961 	bl	8002200 <lcd_clear>
				lcd_set_cursor(0, 1);
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7ff f97f 	bl	8002244 <lcd_set_cursor>
				lcd_send_string("Nieprawid");
 8002f46:	481b      	ldr	r0, [pc, #108]	; (8002fb4 <to_do_before_going_to_standby+0x28c>)
 8002f48:	f7ff fa84 	bl	8002454 <lcd_send_string>
				lcd_send_own_char(3);
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f7ff fb07 	bl	8002560 <lcd_send_own_char>
				lcd_send_string("owa");
 8002f52:	481f      	ldr	r0, [pc, #124]	; (8002fd0 <to_do_before_going_to_standby+0x2a8>)
 8002f54:	f7ff fa7e 	bl	8002454 <lcd_send_string>
				lcd_second_line();
 8002f58:	f7ff f9b6 	bl	80022c8 <lcd_second_line>
				lcd_set_cursor(1, 6);
 8002f5c:	2106      	movs	r1, #6
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7ff f970 	bl	8002244 <lcd_set_cursor>
				lcd_send_string("data!");
 8002f64:	481b      	ldr	r0, [pc, #108]	; (8002fd4 <to_do_before_going_to_standby+0x2ac>)
 8002f66:	f7ff fa75 	bl	8002454 <lcd_send_string>
				delay(1000);
 8002f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f6e:	f000 fb99 	bl	80036a4 <delay>
				lcd_clear();
 8002f72:	f7ff f945 	bl	8002200 <lcd_clear>

				date_set_flag = 0;
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <to_do_before_going_to_standby+0x2a4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e063      	b.n	8003046 <to_do_before_going_to_standby+0x31e>
 8002f7e:	bf00      	nop
 8002f80:	20000321 	.word	0x20000321
 8002f84:	200002b4 	.word	0x200002b4
 8002f88:	0800b94c 	.word	0x0800b94c
 8002f8c:	200002ef 	.word	0x200002ef
 8002f90:	2000032c 	.word	0x2000032c
 8002f94:	2000047c 	.word	0x2000047c
 8002f98:	200002e8 	.word	0x200002e8
 8002f9c:	20000479 	.word	0x20000479
 8002fa0:	2000047b 	.word	0x2000047b
 8002fa4:	20000469 	.word	0x20000469
 8002fa8:	2000047a 	.word	0x2000047a
 8002fac:	20000478 	.word	0x20000478
 8002fb0:	2000047d 	.word	0x2000047d
 8002fb4:	0800b958 	.word	0x0800b958
 8002fb8:	0800b964 	.word	0x0800b964
 8002fbc:	0800b968 	.word	0x0800b968
 8002fc0:	0800b970 	.word	0x0800b970
 8002fc4:	20000480 	.word	0x20000480
 8002fc8:	0800b980 	.word	0x0800b980
 8002fcc:	200002ee 	.word	0x200002ee
 8002fd0:	0800b990 	.word	0x0800b990
 8002fd4:	0800b994 	.word	0x0800b994
			}
			else {
				set_Time(new_sec, new_min, new_hour, new_dow, new_dom, new_month, new_year);
 8002fd8:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <to_do_before_going_to_standby+0x380>)
 8002fda:	7818      	ldrb	r0, [r3, #0]
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <to_do_before_going_to_standby+0x384>)
 8002fde:	781c      	ldrb	r4, [r3, #0]
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <to_do_before_going_to_standby+0x388>)
 8002fe2:	781d      	ldrb	r5, [r3, #0]
 8002fe4:	4b33      	ldr	r3, [pc, #204]	; (80030b4 <to_do_before_going_to_standby+0x38c>)
 8002fe6:	781e      	ldrb	r6, [r3, #0]
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <to_do_before_going_to_standby+0x390>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4a33      	ldr	r2, [pc, #204]	; (80030bc <to_do_before_going_to_standby+0x394>)
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	4933      	ldr	r1, [pc, #204]	; (80030c0 <to_do_before_going_to_standby+0x398>)
 8002ff2:	7809      	ldrb	r1, [r1, #0]
 8002ff4:	9102      	str	r1, [sp, #8]
 8002ff6:	9201      	str	r2, [sp, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4633      	mov	r3, r6
 8002ffc:	462a      	mov	r2, r5
 8002ffe:	4621      	mov	r1, r4
 8003000:	f000 fa9a 	bl	8003538 <set_Time>

				lcd_clear();
 8003004:	f7ff f8fc 	bl	8002200 <lcd_clear>
				sprintf(new_date_details_msg, "%02d-%02d-20%02d", new_dom, new_month, new_year);
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <to_do_before_going_to_standby+0x390>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <to_do_before_going_to_standby+0x394>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4619      	mov	r1, r3
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <to_do_before_going_to_standby+0x398>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	460b      	mov	r3, r1
 800301c:	4929      	ldr	r1, [pc, #164]	; (80030c4 <to_do_before_going_to_standby+0x39c>)
 800301e:	482a      	ldr	r0, [pc, #168]	; (80030c8 <to_do_before_going_to_standby+0x3a0>)
 8003020:	f005 fcc6 	bl	80089b0 <siprintf>
				lcd_send_string("Ustawiona data:");
 8003024:	4829      	ldr	r0, [pc, #164]	; (80030cc <to_do_before_going_to_standby+0x3a4>)
 8003026:	f7ff fa15 	bl	8002454 <lcd_send_string>
				lcd_second_line();
 800302a:	f7ff f94d 	bl	80022c8 <lcd_second_line>
				lcd_send_string(new_date_details_msg);
 800302e:	4826      	ldr	r0, [pc, #152]	; (80030c8 <to_do_before_going_to_standby+0x3a0>)
 8003030:	f7ff fa10 	bl	8002454 <lcd_send_string>
				delay(1000);
 8003034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003038:	f000 fb34 	bl	80036a4 <delay>
				lcd_clear();
 800303c:	f7ff f8e0 	bl	8002200 <lcd_clear>

				date_set_flag = 0;
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <to_do_before_going_to_standby+0x3a8>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
			}

		}

		/** wykonaj jeśli użytkownik ustawił nowy czas alarmu */
		if(alarm_set_flag) {
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <to_do_before_going_to_standby+0x3ac>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01c      	beq.n	8003088 <to_do_before_going_to_standby+0x360>

			days_to_alarm = global_buffer[1];	/** dni to drugi element, ponieważ pierwszy to literka a, mówiąca o tym, że ustawiamy alarm. */
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <to_do_before_going_to_standby+0x3b0>)
 8003050:	785a      	ldrb	r2, [r3, #1]
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <to_do_before_going_to_standby+0x3b4>)
 8003054:	701a      	strb	r2, [r3, #0]
			alarm_hour = global_buffer[2];
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <to_do_before_going_to_standby+0x3b0>)
 8003058:	789a      	ldrb	r2, [r3, #2]
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <to_do_before_going_to_standby+0x3b8>)
 800305c:	701a      	strb	r2, [r3, #0]
			alarm_min = global_buffer[3];
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <to_do_before_going_to_standby+0x3b0>)
 8003060:	78da      	ldrb	r2, [r3, #3]
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <to_do_before_going_to_standby+0x3bc>)
 8003064:	701a      	strb	r2, [r3, #0]
			alarm_sec = global_buffer[4];
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <to_do_before_going_to_standby+0x3b0>)
 8003068:	791a      	ldrb	r2, [r3, #4]
 800306a:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <to_do_before_going_to_standby+0x3c0>)
 800306c:	701a      	strb	r2, [r3, #0]

			rtc_set_alarm(days_to_alarm, alarm_hour, alarm_min, alarm_sec);
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <to_do_before_going_to_standby+0x3b4>)
 8003070:	7818      	ldrb	r0, [r3, #0]
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <to_do_before_going_to_standby+0x3b8>)
 8003074:	7819      	ldrb	r1, [r3, #0]
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <to_do_before_going_to_standby+0x3bc>)
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <to_do_before_going_to_standby+0x3c0>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	f7fe f887 	bl	8001190 <rtc_set_alarm>
			alarm_set_flag = 0;
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <to_do_before_going_to_standby+0x3ac>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
		}

		delay(10);		/** ms	*/
 8003088:	200a      	movs	r0, #10
 800308a:	f000 fb0b 	bl	80036a4 <delay>
	for(int i=0; i<300; i++) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3301      	adds	r3, #1
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800309a:	f6ff ae4b 	blt.w	8002d34 <to_do_before_going_to_standby+0xc>
	}

}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000047c 	.word	0x2000047c
 80030ac:	2000047b 	.word	0x2000047b
 80030b0:	20000479 	.word	0x20000479
 80030b4:	20000469 	.word	0x20000469
 80030b8:	2000047a 	.word	0x2000047a
 80030bc:	20000478 	.word	0x20000478
 80030c0:	2000047d 	.word	0x2000047d
 80030c4:	0800b99c 	.word	0x0800b99c
 80030c8:	2000046c 	.word	0x2000046c
 80030cc:	0800b9b0 	.word	0x0800b9b0
 80030d0:	200002ee 	.word	0x200002ee
 80030d4:	20000338 	.word	0x20000338
 80030d8:	200002e8 	.word	0x200002e8
 80030dc:	20000468 	.word	0x20000468
 80030e0:	200002d3 	.word	0x200002d3
 80030e4:	20000339 	.word	0x20000339
 80030e8:	200002d1 	.word	0x200002d1

080030ec <go_to_standby>:

void go_to_standby(void) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0

	/** wykonaj jeśli zaczął się alarm */
	if(alarm_flag) {
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <go_to_standby+0xbc>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <go_to_standby+0x1e>

		while (alarm_flag) {
 80030f8:	e001      	b.n	80030fe <go_to_standby+0x12>
			to_do_on_alarm();
 80030fa:	f7fe fb87 	bl	800180c <to_do_on_alarm>
		while (alarm_flag) {
 80030fe:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <go_to_standby+0xbc>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <go_to_standby+0xe>
		}

		to_do_on_alarm_off();
 8003106:	f7fe fb8f 	bl	8001828 <to_do_on_alarm_off>
	}

	/** Przed wejściem w tryb STANDBY, musimy wyczyścić flagę WU (Wake up) */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <go_to_standby+0xc0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a27      	ldr	r2, [pc, #156]	; (80031ac <go_to_standby+0xc0>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6013      	str	r3, [r2, #0]

	/**	Jeśli używamy RTC do wybudzenia MCU, w tym projekcie wybudza ALARM A, musimy wyczyścić też flagę RTC Wake up	*/
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <go_to_standby+0xc4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <go_to_standby+0xc4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003126:	60da      	str	r2, [r3, #12]

	lcd_clear();
 8003128:	f7ff f86a 	bl	8002200 <lcd_clear>
	lcd_set_cursor(0, 2);
 800312c:	2102      	movs	r1, #2
 800312e:	2000      	movs	r0, #0
 8003130:	f7ff f888 	bl	8002244 <lcd_set_cursor>
	lcd_send_string("Entering to");
 8003134:	481f      	ldr	r0, [pc, #124]	; (80031b4 <go_to_standby+0xc8>)
 8003136:	f7ff f98d 	bl	8002454 <lcd_send_string>
	lcd_second_line();
 800313a:	f7ff f8c5 	bl	80022c8 <lcd_second_line>
	lcd_send_string("STANDBY MODE...");
 800313e:	481e      	ldr	r0, [pc, #120]	; (80031b8 <go_to_standby+0xcc>)
 8003140:	f7ff f988 	bl	8002454 <lcd_send_string>
	delay(1000);
 8003144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003148:	f000 faac 	bl	80036a4 <delay>
	lcd_clear();
 800314c:	f7ff f858 	bl	8002200 <lcd_clear>

	/**	Przed wejściem w tryb STANDBY, musimy włączyć pin Wake up, aby mógł nas potem wybudzić z tego stanu	*/
	HAL_PWR_EnableWakeUpPin(WakeUp_PIN_Pin);
 8003150:	2001      	movs	r0, #1
 8003152:	f002 f8cb 	bl	80052ec <HAL_PWR_EnableWakeUpPin>

	/**
	 * Wybudzanie układu z trybu STANDBY, defaultowo co 30 sekund.
	 * Włączenie RTC Wake up			  0x1D4C0 = 120_000 = 30 sekund,	4000 = 1s
	 */
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x1D4C0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
 8003156:	2200      	movs	r2, #0
 8003158:	4918      	ldr	r1, [pc, #96]	; (80031bc <go_to_standby+0xd0>)
 800315a:	4815      	ldr	r0, [pc, #84]	; (80031b0 <go_to_standby+0xc4>)
 800315c:	f003 fa14 	bl	8006588 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <go_to_standby+0x7e>
		Error_Handler();
 8003166:	f7ff fc7b 	bl	8002a60 <Error_Handler>
	}

	lcd_clear();
 800316a:	f7ff f849 	bl	8002200 <lcd_clear>
	lcd_set_cursor(0, 2);
 800316e:	2102      	movs	r1, #2
 8003170:	2000      	movs	r0, #0
 8003172:	f7ff f867 	bl	8002244 <lcd_set_cursor>
	lcd_send_string("STANDBY MODE");
 8003176:	4812      	ldr	r0, [pc, #72]	; (80031c0 <go_to_standby+0xd4>)
 8003178:	f7ff f96c 	bl	8002454 <lcd_send_string>
	lcd_second_line();
 800317c:	f7ff f8a4 	bl	80022c8 <lcd_second_line>
	lcd_set_cursor(1, 7);
 8003180:	2107      	movs	r1, #7
 8003182:	2001      	movs	r0, #1
 8003184:	f7ff f85e 	bl	8002244 <lcd_set_cursor>
	lcd_send_string("ON");
 8003188:	480e      	ldr	r0, [pc, #56]	; (80031c4 <go_to_standby+0xd8>)
 800318a:	f7ff f963 	bl	8002454 <lcd_send_string>
	delay(1000);
 800318e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003192:	f000 fa87 	bl	80036a4 <delay>
	lcd_back_light_off();
 8003196:	f7ff f849 	bl	800222c <lcd_back_light_off>
	lcd_clear();
 800319a:	f7ff f831 	bl	8002200 <lcd_clear>

	/**	Finalnie wchodzimy w tryb STANDBY	*/
	HAL_PWR_EnterSTANDBYMode();
 800319e:	f002 f8cb 	bl	8005338 <HAL_PWR_EnterSTANDBYMode>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000321 	.word	0x20000321
 80031ac:	40007000 	.word	0x40007000
 80031b0:	20000418 	.word	0x20000418
 80031b4:	0800b9c0 	.word	0x0800b9c0
 80031b8:	0800b9cc 	.word	0x0800b9cc
 80031bc:	0001d4c0 	.word	0x0001d4c0
 80031c0:	0800b93c 	.word	0x0800b93c
 80031c4:	0800b9dc 	.word	0x0800b9dc

080031c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_MspInit+0x4c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <HAL_MspInit+0x4c>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_MspInit+0x4c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_MspInit+0x4c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a08      	ldr	r2, [pc, #32]	; (8003214 <HAL_MspInit+0x4c>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_MspInit+0x4c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800

08003218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322a:	e7fe      	b.n	800322a <HardFault_Handler+0x4>

0800322c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003230:	e7fe      	b.n	8003230 <MemManage_Handler+0x4>

08003232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003236:	e7fe      	b.n	8003236 <BusFault_Handler+0x4>

08003238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800323c:	e7fe      	b.n	800323c <UsageFault_Handler+0x4>

0800323e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800326c:	f000 fbae 	bl	80039cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}

08003274 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <RTC_WKUP_IRQHandler+0x10>)
 800327a:	f003 fa9d 	bl	80067b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000418 	.word	0x20000418

08003288 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800328e:	f003 fb34 	bl	80068fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	2000048c 	.word	0x2000048c

0800329c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032a2:	f003 fb2a 	bl	80068fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	2000048c 	.word	0x2000048c

080032b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80032b6:	f003 fb20 	bl	80068fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000048c 	.word	0x2000048c

080032c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <USART2_IRQHandler+0x10>)
 80032ca:	f003 ff45 	bl	8007158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000051c 	.word	0x2000051c

080032d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80032dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032e0:	f000 feb8 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <RTC_Alarm_IRQHandler+0x10>)
 80032ee:	f003 f893 	bl	8006418 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000418 	.word	0x20000418

080032fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <USART6_IRQHandler+0x10>)
 8003302:	f003 ff29 	bl	8007158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200004dc 	.word	0x200004dc

08003310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003318:	4a14      	ldr	r2, [pc, #80]	; (800336c <_sbrk+0x5c>)
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <_sbrk+0x60>)
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <_sbrk+0x64>)
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <_sbrk+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <_sbrk+0x64>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	429a      	cmp	r2, r3
 800333e:	d207      	bcs.n	8003350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003340:	f004 fcc0 	bl	8007cc4 <__errno>
 8003344:	4602      	mov	r2, r0
 8003346:	230c      	movs	r3, #12
 8003348:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
 800334e:	e009      	b.n	8003364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <_sbrk+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <_sbrk+0x64>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <_sbrk+0x64>)
 8003360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20018000 	.word	0x20018000
 8003370:	00000400 	.word	0x00000400
 8003374:	200002c4 	.word	0x200002c4
 8003378:	20000568 	.word	0x20000568

0800337c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <SystemInit+0x28>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <SystemInit+0x28>)
 8003388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800338c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <SystemInit+0x28>)
 8003392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003396:	609a      	str	r2, [r3, #8]
#endif
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033bc:	463b      	mov	r3, r7
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <MX_TIM1_Init+0xa0>)
 80033c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80033d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e0:	4b18      	ldr	r3, [pc, #96]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033f2:	4814      	ldr	r0, [pc, #80]	; (8003444 <MX_TIM1_Init+0x9c>)
 80033f4:	f003 fa32 	bl	800685c <HAL_TIM_Base_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80033fe:	f7ff fb2f 	bl	8002a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003408:	f107 0308 	add.w	r3, r7, #8
 800340c:	4619      	mov	r1, r3
 800340e:	480d      	ldr	r0, [pc, #52]	; (8003444 <MX_TIM1_Init+0x9c>)
 8003410:	f003 fb7b 	bl	8006b0a <HAL_TIM_ConfigClockSource>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800341a:	f7ff fb21 	bl	8002a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003426:	463b      	mov	r3, r7
 8003428:	4619      	mov	r1, r3
 800342a:	4806      	ldr	r0, [pc, #24]	; (8003444 <MX_TIM1_Init+0x9c>)
 800342c:	f003 fd70 	bl	8006f10 <HAL_TIMEx_MasterConfigSynchronization>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003436:	f7ff fb13 	bl	8002a60 <Error_Handler>
  }

}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000048c 	.word	0x2000048c
 8003448:	40010000 	.word	0x40010000

0800344c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <HAL_TIM_Base_MspInit+0x68>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d125      	bne.n	80034aa <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_TIM_Base_MspInit+0x6c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_TIM_Base_MspInit+0x6c>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_TIM_Base_MspInit+0x6c>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2100      	movs	r1, #0
 800347e:	2018      	movs	r0, #24
 8003480:	f000 fbc1 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003484:	2018      	movs	r0, #24
 8003486:	f000 fbda 	bl	8003c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	2019      	movs	r0, #25
 8003490:	f000 fbb9 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003494:	2019      	movs	r0, #25
 8003496:	f000 fbd2 	bl	8003c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	201a      	movs	r0, #26
 80034a0:	f000 fbb1 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80034a4:	201a      	movs	r0, #26
 80034a6:	f000 fbca 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40023800 	.word	0x40023800

080034bc <decToBcd>:
/**
 * Funkcja konwertująca wartość dziesiętną na binarną,
 * ponieważ dane zapisywane do rejestrów DS3231 muszą być postaci binarnej
 */
uint8_t decToBcd(int val)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <decToBcd+0x48>)
 80034c8:	fb82 1203 	smull	r1, r2, r2, r3
 80034cc:	1092      	asrs	r2, r2, #2
 80034ce:	17db      	asrs	r3, r3, #31
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	b2d8      	uxtb	r0, r3
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <decToBcd+0x48>)
 80034dc:	fb83 1302 	smull	r1, r3, r3, r2
 80034e0:	1099      	asrs	r1, r3, #2
 80034e2:	17d3      	asrs	r3, r2, #31
 80034e4:	1ac9      	subs	r1, r1, r3
 80034e6:	460b      	mov	r3, r1
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	1ad1      	subs	r1, r2, r3
 80034f0:	b2cb      	uxtb	r3, r1
 80034f2:	4403      	add	r3, r0
 80034f4:	b2db      	uxtb	r3, r3
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	66666667 	.word	0x66666667

08003508 <bcdToDec>:
/**
 * Funkcja konwertująca wartość binarną na decymalną,
 * ponieważ dane odczytywane z DS3231 są postaci binarnej, a dane wyświetlane na LCD będą postaci dziesiętnej
 */
int bcdToDec(uint8_t val)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	461a      	mov	r2, r3
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	4413      	add	r3, r2
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <set_Time>:

/**
 * Metoda odpowiedzialna za ustawienie czasu i daty
 */
void set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b087      	sub	sp, #28
 800353c:	af04      	add	r7, sp, #16
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4623      	mov	r3, r4
 8003548:	71fb      	strb	r3, [r7, #7]
 800354a:	4603      	mov	r3, r0
 800354c:	71bb      	strb	r3, [r7, #6]
 800354e:	460b      	mov	r3, r1
 8003550:	717b      	strb	r3, [r7, #5]
 8003552:	4613      	mov	r3, r2
 8003554:	713b      	strb	r3, [r7, #4]
	time_to_write[0] = decToBcd(sec);
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ffaf 	bl	80034bc <decToBcd>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <set_Time+0xb4>)
 8003564:	701a      	strb	r2, [r3, #0]
	time_to_write[1] = decToBcd(min);
 8003566:	79bb      	ldrb	r3, [r7, #6]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ffa7 	bl	80034bc <decToBcd>
 800356e:	4603      	mov	r3, r0
 8003570:	461a      	mov	r2, r3
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <set_Time+0xb4>)
 8003574:	705a      	strb	r2, [r3, #1]
	time_to_write[2] = decToBcd(hour);
 8003576:	797b      	ldrb	r3, [r7, #5]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff9f 	bl	80034bc <decToBcd>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <set_Time+0xb4>)
 8003584:	709a      	strb	r2, [r3, #2]
	time_to_write[3] = decToBcd(dow);
 8003586:	793b      	ldrb	r3, [r7, #4]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff97 	bl	80034bc <decToBcd>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <set_Time+0xb4>)
 8003594:	70da      	strb	r2, [r3, #3]
	time_to_write[4] = decToBcd(dom);
 8003596:	7e3b      	ldrb	r3, [r7, #24]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff8f 	bl	80034bc <decToBcd>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <set_Time+0xb4>)
 80035a4:	711a      	strb	r2, [r3, #4]
	time_to_write[5] = decToBcd(month);
 80035a6:	7f3b      	ldrb	r3, [r7, #28]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff87 	bl	80034bc <decToBcd>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <set_Time+0xb4>)
 80035b4:	715a      	strb	r2, [r3, #5]
	time_to_write[6] = decToBcd(year);
 80035b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff7e 	bl	80034bc <decToBcd>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <set_Time+0xb4>)
 80035c6:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Write(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_write, 7, 1000);
 80035c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035cc:	9302      	str	r3, [sp, #8]
 80035ce:	2307      	movs	r3, #7
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <set_Time+0xb4>)
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2301      	movs	r3, #1
 80035d8:	2200      	movs	r2, #0
 80035da:	21d0      	movs	r1, #208	; 0xd0
 80035dc:	4804      	ldr	r0, [pc, #16]	; (80035f0 <set_Time+0xb8>)
 80035de:	f000 ff87 	bl	80044f0 <HAL_I2C_Mem_Write>
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200004d4 	.word	0x200004d4
 80035f0:	20000390 	.word	0x20000390

080035f4 <get_Time>:

void get_Time (void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, time_to_read, 7, 1000);
 80035fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035fe:	9302      	str	r3, [sp, #8]
 8003600:	2307      	movs	r3, #7
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <get_Time+0xa4>)
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2301      	movs	r3, #1
 800360a:	2200      	movs	r2, #0
 800360c:	21d0      	movs	r1, #208	; 0xd0
 800360e:	4823      	ldr	r0, [pc, #140]	; (800369c <get_Time+0xa8>)
 8003610:	f001 f868 	bl	80046e4 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(time_to_read[0]);
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <get_Time+0xa4>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff75 	bl	8003508 <bcdToDec>
 800361e:	4603      	mov	r3, r0
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <get_Time+0xac>)
 8003624:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(time_to_read[1]);
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <get_Time+0xa4>)
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ff6c 	bl	8003508 <bcdToDec>
 8003630:	4603      	mov	r3, r0
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <get_Time+0xac>)
 8003636:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(time_to_read[2]);
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <get_Time+0xa4>)
 800363a:	789b      	ldrb	r3, [r3, #2]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff63 	bl	8003508 <bcdToDec>
 8003642:	4603      	mov	r3, r0
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <get_Time+0xac>)
 8003648:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(time_to_read[3]);
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <get_Time+0xa4>)
 800364c:	78db      	ldrb	r3, [r3, #3]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff5a 	bl	8003508 <bcdToDec>
 8003654:	4603      	mov	r3, r0
 8003656:	b2da      	uxtb	r2, r3
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <get_Time+0xac>)
 800365a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(time_to_read[4]);
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <get_Time+0xa4>)
 800365e:	791b      	ldrb	r3, [r3, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff51 	bl	8003508 <bcdToDec>
 8003666:	4603      	mov	r3, r0
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <get_Time+0xac>)
 800366c:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(time_to_read[5]);
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <get_Time+0xa4>)
 8003670:	795b      	ldrb	r3, [r3, #5]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff48 	bl	8003508 <bcdToDec>
 8003678:	4603      	mov	r3, r0
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <get_Time+0xac>)
 800367e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(time_to_read[6]);
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <get_Time+0xa4>)
 8003682:	799b      	ldrb	r3, [r3, #6]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff3f 	bl	8003508 <bcdToDec>
 800368a:	4603      	mov	r3, r0
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <get_Time+0xac>)
 8003690:	719a      	strb	r2, [r3, #6]
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200004cc 	.word	0x200004cc
 800369c:	20000390 	.word	0x20000390
 80036a0:	2000032c 	.word	0x2000032c

080036a4 <delay>:

void delay(uint16_t delay) {
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <delay+0x2c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80036b6:	bf00      	nop
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <delay+0x2c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d3f9      	bcc.n	80036b8 <delay+0x14>
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	2000048c 	.word	0x2000048c

080036d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <MX_USART2_UART_Init+0x50>)
 80036dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 80036e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 80036fa:	220c      	movs	r2, #12
 80036fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800370a:	4805      	ldr	r0, [pc, #20]	; (8003720 <MX_USART2_UART_Init+0x4c>)
 800370c:	f003 fc82 	bl	8007014 <HAL_UART_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003716:	f7ff f9a3 	bl	8002a60 <Error_Handler>
  }

}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2000051c 	.word	0x2000051c
 8003724:	40004400 	.word	0x40004400

08003728 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <MX_USART6_UART_Init+0x50>)
 8003730:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 8003734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003738:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 800374e:	220c      	movs	r2, #12
 8003750:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800375e:	4805      	ldr	r0, [pc, #20]	; (8003774 <MX_USART6_UART_Init+0x4c>)
 8003760:	f003 fc58 	bl	8007014 <HAL_UART_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800376a:	f7ff f979 	bl	8002a60 <Error_Handler>
  }

}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200004dc 	.word	0x200004dc
 8003778:	40011400 	.word	0x40011400

0800377c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08c      	sub	sp, #48	; 0x30
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <HAL_UART_MspInit+0x144>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d134      	bne.n	8003808 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <HAL_UART_MspInit+0x148>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a47      	ldr	r2, [pc, #284]	; (80038c4 <HAL_UART_MspInit+0x148>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <HAL_UART_MspInit+0x148>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_UART_MspInit+0x148>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <HAL_UART_MspInit+0x148>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <HAL_UART_MspInit+0x148>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037d6:	230c      	movs	r3, #12
 80037d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80037e2:	2301      	movs	r3, #1
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037e6:	2307      	movs	r3, #7
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ea:	f107 031c 	add.w	r3, r7, #28
 80037ee:	4619      	mov	r1, r3
 80037f0:	4835      	ldr	r0, [pc, #212]	; (80038c8 <HAL_UART_MspInit+0x14c>)
 80037f2:	f000 fa61 	bl	8003cb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2100      	movs	r1, #0
 80037fa:	2026      	movs	r0, #38	; 0x26
 80037fc:	f000 fa03 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003800:	2026      	movs	r0, #38	; 0x26
 8003802:	f000 fa1c 	bl	8003c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003806:	e057      	b.n	80038b8 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART6)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2f      	ldr	r2, [pc, #188]	; (80038cc <HAL_UART_MspInit+0x150>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d152      	bne.n	80038b8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <HAL_UART_MspInit+0x148>)
 800381c:	f043 0320 	orr.w	r3, r3, #32
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <HAL_UART_MspInit+0x148>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_UART_MspInit+0x148>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003876:	2308      	movs	r3, #8
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 800387a:	f107 031c 	add.w	r3, r7, #28
 800387e:	4619      	mov	r1, r3
 8003880:	4813      	ldr	r0, [pc, #76]	; (80038d0 <HAL_UART_MspInit+0x154>)
 8003882:	f000 fa19 	bl	8003cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_RX_Pin;
 8003886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003898:	2308      	movs	r3, #8
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 800389c:	f107 031c 	add.w	r3, r7, #28
 80038a0:	4619      	mov	r1, r3
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <HAL_UART_MspInit+0x14c>)
 80038a4:	f000 fa08 	bl	8003cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2047      	movs	r0, #71	; 0x47
 80038ae:	f000 f9aa 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80038b2:	2047      	movs	r0, #71	; 0x47
 80038b4:	f000 f9c3 	bl	8003c3e <HAL_NVIC_EnableIRQ>
}
 80038b8:	bf00      	nop
 80038ba:	3730      	adds	r7, #48	; 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40004400 	.word	0x40004400
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40011400 	.word	0x40011400
 80038d0:	40020800 	.word	0x40020800

080038d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800390c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038da:	e003      	b.n	80038e4 <LoopCopyDataInit>

080038dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038e2:	3104      	adds	r1, #4

080038e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038e4:	480b      	ldr	r0, [pc, #44]	; (8003914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038ec:	d3f6      	bcc.n	80038dc <CopyDataInit>
  ldr  r2, =_sbss
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038f0:	e002      	b.n	80038f8 <LoopFillZerobss>

080038f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038f4:	f842 3b04 	str.w	r3, [r2], #4

080038f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038fc:	d3f9      	bcc.n	80038f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038fe:	f7ff fd3d 	bl	800337c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003902:	f004 f9e5 	bl	8007cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003906:	f7fe feeb 	bl	80026e0 <main>
  bx  lr    
 800390a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800390c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003910:	0800bcc0 	.word	0x0800bcc0
  ldr  r0, =_sdata
 8003914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003918:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 800391c:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8003920:	20000564 	.word	0x20000564

08003924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <ADC_IRQHandler>
	...

08003928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_Init+0x40>)
 8003932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_Init+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_Init+0x40>)
 800393e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_Init+0x40>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_Init+0x40>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003950:	2003      	movs	r0, #3
 8003952:	f000 f94d 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003956:	2000      	movs	r0, #0
 8003958:	f000 f808 	bl	800396c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800395c:	f7ff fc34 	bl	80031c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00

0800396c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_InitTick+0x54>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_InitTick+0x58>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4619      	mov	r1, r3
 800397e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003982:	fbb3 f3f1 	udiv	r3, r3, r1
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f965 	bl	8003c5a <HAL_SYSTICK_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e00e      	b.n	80039b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d80a      	bhi.n	80039b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039a0:	2200      	movs	r2, #0
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f000 f92d 	bl	8003c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039ac:	4a06      	ldr	r2, [pc, #24]	; (80039c8 <HAL_InitTick+0x5c>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000084 	.word	0x20000084
 80039c4:	2000008c 	.word	0x2000008c
 80039c8:	20000088 	.word	0x20000088

080039cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x20>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x24>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_IncTick+0x24>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2000008c 	.word	0x2000008c
 80039f0:	2000055c 	.word	0x2000055c

080039f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_GetTick+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000055c 	.word	0x2000055c

08003a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff ffee 	bl	80039f4 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d005      	beq.n	8003a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_Delay+0x40>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a32:	bf00      	nop
 8003a34:	f7ff ffde 	bl	80039f4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d8f7      	bhi.n	8003a34 <HAL_Delay+0x28>
  {
  }
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000008c 	.word	0x2000008c

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <__NVIC_EnableIRQ+0x38>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	db0a      	blt.n	8003b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	490c      	ldr	r1, [pc, #48]	; (8003b3c <__NVIC_SetPriority+0x4c>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	440b      	add	r3, r1
 8003b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b18:	e00a      	b.n	8003b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4908      	ldr	r1, [pc, #32]	; (8003b40 <__NVIC_SetPriority+0x50>)
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	3b04      	subs	r3, #4
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	761a      	strb	r2, [r3, #24]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e100 	.word	0xe000e100
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f1c3 0307 	rsb	r3, r3, #7
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	bf28      	it	cs
 8003b62:	2304      	movcs	r3, #4
 8003b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d902      	bls.n	8003b74 <NVIC_EncodePriority+0x30>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3b03      	subs	r3, #3
 8003b72:	e000      	b.n	8003b76 <NVIC_EncodePriority+0x32>
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	401a      	ands	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	43d9      	mvns	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	4313      	orrs	r3, r2
         );
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bbc:	d301      	bcc.n	8003bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <SysTick_Config+0x40>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bca:	210f      	movs	r1, #15
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	f7ff ff8e 	bl	8003af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <SysTick_Config+0x40>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <SysTick_Config+0x40>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff29 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff3e 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff8e 	bl	8003b44 <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff5d 	bl	8003af0 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff31 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa2 	bl	8003bac <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d004      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e00c      	b.n	8003caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2205      	movs	r2, #5
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e159      	b.n	8003f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f040 8148 	bne.w	8003f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d00b      	beq.n	8003d12 <HAL_GPIO_Init+0x5a>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d007      	beq.n	8003d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d06:	2b11      	cmp	r3, #17
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b12      	cmp	r3, #18
 8003d10:	d130      	bne.n	8003d74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 0201 	and.w	r2, r3, #1
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	2203      	movs	r2, #3
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0xfc>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b12      	cmp	r3, #18
 8003db2:	d123      	bne.n	8003dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	08da      	lsrs	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3208      	adds	r2, #8
 8003dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	220f      	movs	r2, #15
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	69b9      	ldr	r1, [r7, #24]
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0203 	and.w	r2, r3, #3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80a2 	beq.w	8003f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e5a:	4a51      	ldr	r2, [pc, #324]	; (8003fa0 <HAL_GPIO_Init+0x2e8>)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	3302      	adds	r3, #2
 8003e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	220f      	movs	r2, #15
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a48      	ldr	r2, [pc, #288]	; (8003fa4 <HAL_GPIO_Init+0x2ec>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d019      	beq.n	8003eba <HAL_GPIO_Init+0x202>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a47      	ldr	r2, [pc, #284]	; (8003fa8 <HAL_GPIO_Init+0x2f0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_GPIO_Init+0x1fe>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a46      	ldr	r2, [pc, #280]	; (8003fac <HAL_GPIO_Init+0x2f4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00d      	beq.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a45      	ldr	r2, [pc, #276]	; (8003fb0 <HAL_GPIO_Init+0x2f8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <HAL_GPIO_Init+0x1f6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a44      	ldr	r2, [pc, #272]	; (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_GPIO_Init+0x1f2>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	e008      	b.n	8003ebc <HAL_GPIO_Init+0x204>
 8003eaa:	2307      	movs	r3, #7
 8003eac:	e006      	b.n	8003ebc <HAL_GPIO_Init+0x204>
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e004      	b.n	8003ebc <HAL_GPIO_Init+0x204>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e002      	b.n	8003ebc <HAL_GPIO_Init+0x204>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_GPIO_Init+0x204>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	f002 0203 	and.w	r2, r2, #3
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	4093      	lsls	r3, r2
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ecc:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_GPIO_Init+0x2e8>)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003efe:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f52:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3301      	adds	r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	f67f aea2 	bls.w	8003cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3724      	adds	r7, #36	; 0x24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	40020000 	.word	0x40020000
 8003fa8:	40020400 	.word	0x40020400
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	40020c00 	.word	0x40020c00
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40013c00 	.word	0x40013c00

08003fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e001      	b.n	8003fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004008:	e003      	b.n	8004012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	041a      	lsls	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	619a      	str	r2, [r3, #24]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	401a      	ands	r2, r3
 8004032:	887b      	ldrh	r3, [r7, #2]
 8004034:	429a      	cmp	r2, r3
 8004036:	d104      	bne.n	8004042 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	041a      	lsls	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004040:	e002      	b.n	8004048 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd fbde 	bl	8001834 <HAL_GPIO_EXTI_Callback>
  }
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40013c00 	.word	0x40013c00

08004084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e11f      	b.n	80042d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fcea 	bl	8001a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040e8:	f001 fd52 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4a7b      	ldr	r2, [pc, #492]	; (80042e0 <HAL_I2C_Init+0x25c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d807      	bhi.n	8004108 <HAL_I2C_Init+0x84>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a7a      	ldr	r2, [pc, #488]	; (80042e4 <HAL_I2C_Init+0x260>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bf94      	ite	ls
 8004100:	2301      	movls	r3, #1
 8004102:	2300      	movhi	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e006      	b.n	8004116 <HAL_I2C_Init+0x92>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <HAL_I2C_Init+0x264>)
 800410c:	4293      	cmp	r3, r2
 800410e:	bf94      	ite	ls
 8004110:	2301      	movls	r3, #1
 8004112:	2300      	movhi	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0db      	b.n	80042d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a72      	ldr	r2, [pc, #456]	; (80042ec <HAL_I2C_Init+0x268>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0c9b      	lsrs	r3, r3, #18
 8004128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a64      	ldr	r2, [pc, #400]	; (80042e0 <HAL_I2C_Init+0x25c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d802      	bhi.n	8004158 <HAL_I2C_Init+0xd4>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3301      	adds	r3, #1
 8004156:	e009      	b.n	800416c <HAL_I2C_Init+0xe8>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	4a63      	ldr	r2, [pc, #396]	; (80042f0 <HAL_I2C_Init+0x26c>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	3301      	adds	r3, #1
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	430b      	orrs	r3, r1
 8004172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800417e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4956      	ldr	r1, [pc, #344]	; (80042e0 <HAL_I2C_Init+0x25c>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d80d      	bhi.n	80041a8 <HAL_I2C_Init+0x124>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e59      	subs	r1, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	fbb1 f3f3 	udiv	r3, r1, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	bf38      	it	cc
 80041a4:	2304      	movcc	r3, #4
 80041a6:	e04f      	b.n	8004248 <HAL_I2C_Init+0x1c4>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d111      	bne.n	80041d4 <HAL_I2C_Init+0x150>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	440b      	add	r3, r1
 80041be:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e012      	b.n	80041fa <HAL_I2C_Init+0x176>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1e58      	subs	r0, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	0099      	lsls	r1, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Init+0x17e>
 80041fe:	2301      	movs	r3, #1
 8004200:	e022      	b.n	8004248 <HAL_I2C_Init+0x1c4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10e      	bne.n	8004228 <HAL_I2C_Init+0x1a4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e58      	subs	r0, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	440b      	add	r3, r1
 8004218:	fbb0 f3f3 	udiv	r3, r0, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	e00f      	b.n	8004248 <HAL_I2C_Init+0x1c4>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1e58      	subs	r0, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	0099      	lsls	r1, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	6809      	ldr	r1, [r1, #0]
 800424c:	4313      	orrs	r3, r2
 800424e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6911      	ldr	r1, [r2, #16]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68d2      	ldr	r2, [r2, #12]
 8004282:	4311      	orrs	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	430b      	orrs	r3, r1
 800428a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	000186a0 	.word	0x000186a0
 80042e4:	001e847f 	.word	0x001e847f
 80042e8:	003d08ff 	.word	0x003d08ff
 80042ec:	431bde83 	.word	0x431bde83
 80042f0:	10624dd3 	.word	0x10624dd3

080042f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	461a      	mov	r2, r3
 8004300:	460b      	mov	r3, r1
 8004302:	817b      	strh	r3, [r7, #10]
 8004304:	4613      	mov	r3, r2
 8004306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7ff fb74 	bl	80039f4 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b20      	cmp	r3, #32
 8004318:	f040 80e0 	bne.w	80044dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2319      	movs	r3, #25
 8004322:	2201      	movs	r2, #1
 8004324:	4970      	ldr	r1, [pc, #448]	; (80044e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fe02 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
 8004334:	e0d3      	b.n	80044de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_I2C_Master_Transmit+0x50>
 8004340:	2302      	movs	r3, #2
 8004342:	e0cc      	b.n	80044de <HAL_I2C_Master_Transmit+0x1ea>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d007      	beq.n	800436a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2210      	movs	r2, #16
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	893a      	ldrh	r2, [r7, #8]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a50      	ldr	r2, [pc, #320]	; (80044ec <HAL_I2C_Master_Transmit+0x1f8>)
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043ac:	8979      	ldrh	r1, [r7, #10]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fbbc 	bl	8004b30 <I2C_MasterRequestWrite>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e08d      	b.n	80044de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043d8:	e066      	b.n	80044a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6a39      	ldr	r1, [r7, #32]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fe7c 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d107      	bne.n	8004402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e06b      	b.n	80044de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b04      	cmp	r3, #4
 8004442:	d11b      	bne.n	800447c <HAL_I2C_Master_Transmit+0x188>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6a39      	ldr	r1, [r7, #32]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fe6c 	bl	800515e <I2C_WaitOnBTFFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b04      	cmp	r3, #4
 8004492:	d107      	bne.n	80044a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e01a      	b.n	80044de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d194      	bne.n	80043da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e000      	b.n	80044de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	00100002 	.word	0x00100002
 80044ec:	ffff0000 	.word	0xffff0000

080044f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	460b      	mov	r3, r1
 8004504:	813b      	strh	r3, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800450a:	f7ff fa73 	bl	80039f4 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	f040 80d9 	bne.w	80046d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2319      	movs	r3, #25
 8004524:	2201      	movs	r2, #1
 8004526:	496d      	ldr	r1, [pc, #436]	; (80046dc <HAL_I2C_Mem_Write+0x1ec>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fd01 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
 8004536:	e0cc      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Mem_Write+0x56>
 8004542:	2302      	movs	r3, #2
 8004544:	e0c5      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d007      	beq.n	800456c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2221      	movs	r2, #33	; 0x21
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a4d      	ldr	r2, [pc, #308]	; (80046e0 <HAL_I2C_Mem_Write+0x1f0>)
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ae:	88f8      	ldrh	r0, [r7, #6]
 80045b0:	893a      	ldrh	r2, [r7, #8]
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4603      	mov	r3, r0
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fb38 	bl	8004c34 <I2C_RequestMemoryWrite>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d052      	beq.n	8004670 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e081      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fd82 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d11b      	bne.n	8004670 <HAL_I2C_Mem_Write+0x180>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1aa      	bne.n	80045ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fd6e 	bl	800515e <I2C_WaitOnBTFFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e016      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	; 0x30
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	460b      	mov	r3, r1
 80046f8:	813b      	strh	r3, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7ff f979 	bl	80039f4 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 8208 	bne.w	8004b22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2319      	movs	r3, #25
 8004718:	2201      	movs	r2, #1
 800471a:	497b      	ldr	r1, [pc, #492]	; (8004908 <HAL_I2C_Mem_Read+0x224>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fc07 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e1fb      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2C_Mem_Read+0x56>
 8004736:	2302      	movs	r3, #2
 8004738:	e1f4      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d007      	beq.n	8004760 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	; 0x22
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a5b      	ldr	r2, [pc, #364]	; (800490c <HAL_I2C_Mem_Read+0x228>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a2:	88f8      	ldrh	r0, [r7, #6]
 80047a4:	893a      	ldrh	r2, [r7, #8]
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fad4 	bl	8004d60 <I2C_RequestMemoryRead>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1b0      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e184      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11b      	bne.n	8004832 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e164      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	e144      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004888:	e138      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	f200 80f1 	bhi.w	8004a76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	2b01      	cmp	r3, #1
 800489a:	d123      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fc9d 	bl	80051e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e139      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048e2:	e10b      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d14e      	bne.n	800498a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	4906      	ldr	r1, [pc, #24]	; (8004910 <HAL_I2C_Mem_Read+0x22c>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fb1a 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e10e      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000
 8004910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004988:	e0b8      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	4966      	ldr	r1, [pc, #408]	; (8004b2c <HAL_I2C_Mem_Read+0x448>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 facb 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0bf      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	494f      	ldr	r1, [pc, #316]	; (8004b2c <HAL_I2C_Mem_Read+0x448>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fa9d 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e091      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a74:	e042      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fbb0 	bl	80051e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e04c      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d118      	bne.n	8004afc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f47f aec2 	bne.w	800488a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	00010004 	.word	0x00010004

08004b30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d006      	beq.n	8004b5a <I2C_MasterRequestWrite+0x2a>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d003      	beq.n	8004b5a <I2C_MasterRequestWrite+0x2a>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b58:	d108      	bne.n	8004b6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e00b      	b.n	8004b84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	2b12      	cmp	r3, #18
 8004b72:	d107      	bne.n	8004b84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f9cd 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00d      	beq.n	8004bb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d103      	bne.n	8004bb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e035      	b.n	8004c24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc0:	d108      	bne.n	8004bd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bc2:	897b      	ldrh	r3, [r7, #10]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bd0:	611a      	str	r2, [r3, #16]
 8004bd2:	e01b      	b.n	8004c0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bd4:	897b      	ldrh	r3, [r7, #10]
 8004bd6:	11db      	asrs	r3, r3, #7
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 0306 	and.w	r3, r3, #6
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f063 030f 	orn	r3, r3, #15
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	490e      	ldr	r1, [pc, #56]	; (8004c2c <I2C_MasterRequestWrite+0xfc>)
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f9f3 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e010      	b.n	8004c24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c02:	897b      	ldrh	r3, [r7, #10]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4907      	ldr	r1, [pc, #28]	; (8004c30 <I2C_MasterRequestWrite+0x100>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f9e3 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	00010008 	.word	0x00010008
 8004c30:	00010002 	.word	0x00010002

08004c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	461a      	mov	r2, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	817b      	strh	r3, [r7, #10]
 8004c46:	460b      	mov	r3, r1
 8004c48:	813b      	strh	r3, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f960 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c84:	d103      	bne.n	8004c8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e05f      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <I2C_RequestMemoryWrite+0x128>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f998 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e04c      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	6a39      	ldr	r1, [r7, #32]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fa02 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d107      	bne.n	8004cf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e02b      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	e021      	b.n	8004d50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f9dc 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e005      	b.n	8004d52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	00010002 	.word	0x00010002

08004d60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	817b      	strh	r3, [r7, #10]
 8004d72:	460b      	mov	r3, r1
 8004d74:	813b      	strh	r3, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8c2 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc0:	d103      	bne.n	8004dca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e0aa      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	4952      	ldr	r1, [pc, #328]	; (8004f2c <I2C_RequestMemoryRead+0x1cc>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f8fa 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e097      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	6a39      	ldr	r1, [r7, #32]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f964 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00d      	beq.n	8004e36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d107      	bne.n	8004e32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e076      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]
 8004e46:	e021      	b.n	8004e8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	6a39      	ldr	r1, [r7, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f93e 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e050      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	6a39      	ldr	r1, [r7, #32]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f923 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00d      	beq.n	8004eb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d107      	bne.n	8004eb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e035      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f82b 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	d103      	bne.n	8004ef8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e013      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004efc:	897b      	ldrh	r3, [r7, #10]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	4906      	ldr	r1, [pc, #24]	; (8004f2c <I2C_RequestMemoryRead+0x1cc>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f863 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	00010002 	.word	0x00010002

08004f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	e025      	b.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d021      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fe fd53 	bl	80039f4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d116      	bne.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e023      	b.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10d      	bne.n	8004fb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	e00c      	b.n	8004fce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d0b6      	beq.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fec:	e051      	b.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d123      	bne.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e046      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d021      	beq.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fe fcd1 	bl	80039f4 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d116      	bne.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f043 0220 	orr.w	r2, r3, #32
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e020      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10c      	bne.n	80050b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	43da      	mvns	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf14      	ite	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	2300      	moveq	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e00b      	b.n	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	43da      	mvns	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d18d      	bne.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e8:	e02d      	b.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f8ce 	bl	800528c <I2C_IsAcknowledgeFailed>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e02d      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d021      	beq.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fe fc77 	bl	80039f4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d116      	bne.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d1ca      	bne.n	80050ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800516a:	e02d      	b.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f88d 	bl	800528c <I2C_IsAcknowledgeFailed>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e02d      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d021      	beq.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005184:	f7fe fc36 	bl	80039f4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d116      	bne.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f043 0220 	orr.w	r2, r3, #32
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e007      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d1ca      	bne.n	800516c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ec:	e042      	b.n	8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d119      	bne.n	8005230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e029      	b.n	8005284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005230:	f7fe fbe0 	bl	80039f4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d116      	bne.n	8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e007      	b.n	8005284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d1b5      	bne.n	80051ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d11b      	bne.n	80052dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_PWR_EnableWakeUpPin+0x20>)
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	4904      	ldr	r1, [pc, #16]	; (800530c <HAL_PWR_EnableWakeUpPin+0x20>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40007000 	.word	0x40007000

08005310 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_PWR_DisableWakeUpPin+0x24>)
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	43db      	mvns	r3, r3
 8005320:	4904      	ldr	r1, [pc, #16]	; (8005334 <HAL_PWR_DisableWakeUpPin+0x24>)
 8005322:	4013      	ands	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40007000 	.word	0x40007000

08005338 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a07      	ldr	r2, [pc, #28]	; (8005360 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005342:	f043 0302 	orr.w	r3, r3, #2
 8005346:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005354:	bf30      	wfi
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40007000 	.word	0x40007000
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e25b      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d075      	beq.n	8005472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	4ba3      	ldr	r3, [pc, #652]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00c      	beq.n	80053ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005392:	4ba0      	ldr	r3, [pc, #640]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d112      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539e:	4b9d      	ldr	r3, [pc, #628]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	4b99      	ldr	r3, [pc, #612]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05b      	beq.n	8005470 <HAL_RCC_OscConfig+0x108>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d157      	bne.n	8005470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e236      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d106      	bne.n	80053dc <HAL_RCC_OscConfig+0x74>
 80053ce:	4b91      	ldr	r3, [pc, #580]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a90      	ldr	r2, [pc, #576]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e01d      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x98>
 80053e6:	4b8b      	ldr	r3, [pc, #556]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a8a      	ldr	r2, [pc, #552]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4b88      	ldr	r3, [pc, #544]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a87      	ldr	r2, [pc, #540]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 8005400:	4b84      	ldr	r3, [pc, #528]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a83      	ldr	r2, [pc, #524]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b81      	ldr	r3, [pc, #516]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a80      	ldr	r2, [pc, #512]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fe fae8 	bl	80039f4 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005428:	f7fe fae4 	bl	80039f4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e1fb      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543a:	4b76      	ldr	r3, [pc, #472]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0xc0>
 8005446:	e014      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fe fad4 	bl	80039f4 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005450:	f7fe fad0 	bl	80039f4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e1e7      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005462:	4b6c      	ldr	r3, [pc, #432]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0xe8>
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d063      	beq.n	8005546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547e:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00b      	beq.n	80054a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548a:	4b62      	ldr	r3, [pc, #392]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005492:	2b08      	cmp	r3, #8
 8005494:	d11c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005496:	4b5f      	ldr	r3, [pc, #380]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d116      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a2:	4b5c      	ldr	r3, [pc, #368]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <HAL_RCC_OscConfig+0x152>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e1bb      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4952      	ldr	r1, [pc, #328]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	e03a      	b.n	8005546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d8:	4b4f      	ldr	r3, [pc, #316]	; (8005618 <HAL_RCC_OscConfig+0x2b0>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fe fa89 	bl	80039f4 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e6:	f7fe fa85 	bl	80039f4 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e19c      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f8:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005504:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4940      	ldr	r1, [pc, #256]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
 8005518:	e015      	b.n	8005546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551a:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <HAL_RCC_OscConfig+0x2b0>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fe fa68 	bl	80039f4 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005528:	f7fe fa64 	bl	80039f4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e17b      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d030      	beq.n	80055b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_RCC_OscConfig+0x2b4>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005560:	f7fe fa48 	bl	80039f4 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005568:	f7fe fa44 	bl	80039f4 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e15b      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x200>
 8005586:	e015      	b.n	80055b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x2b4>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558e:	f7fe fa31 	bl	80039f4 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005596:	f7fe fa2d 	bl	80039f4 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e144      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f0      	bne.n	8005596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a0 	beq.w	8005702 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6413      	str	r3, [r2, #64]	; 0x40
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_OscConfig+0x2b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d121      	bne.n	8005642 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <HAL_RCC_OscConfig+0x2b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a07      	ldr	r2, [pc, #28]	; (8005620 <HAL_RCC_OscConfig+0x2b8>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7fe f9f3 	bl	80039f4 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	e011      	b.n	8005636 <HAL_RCC_OscConfig+0x2ce>
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	42470000 	.word	0x42470000
 800561c:	42470e80 	.word	0x42470e80
 8005620:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005624:	f7fe f9e6 	bl	80039f4 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0fd      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005636:	4b81      	ldr	r3, [pc, #516]	; (800583c <HAL_RCC_OscConfig+0x4d4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x2f0>
 800564a:	4b7d      	ldr	r3, [pc, #500]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	e01c      	b.n	8005692 <HAL_RCC_OscConfig+0x32a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b05      	cmp	r3, #5
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x312>
 8005660:	4b77      	ldr	r3, [pc, #476]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a76      	ldr	r2, [pc, #472]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b74      	ldr	r3, [pc, #464]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a73      	ldr	r2, [pc, #460]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	e00b      	b.n	8005692 <HAL_RCC_OscConfig+0x32a>
 800567a:	4b71      	ldr	r3, [pc, #452]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a70      	ldr	r2, [pc, #448]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	4b6e      	ldr	r3, [pc, #440]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a6d      	ldr	r2, [pc, #436]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d015      	beq.n	80056c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fe f9ab 	bl	80039f4 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fe f9a7 	bl	80039f4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0bc      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	4b61      	ldr	r3, [pc, #388]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ee      	beq.n	80056a2 <HAL_RCC_OscConfig+0x33a>
 80056c4:	e014      	b.n	80056f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c6:	f7fe f995 	bl	80039f4 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fe f991 	bl	80039f4 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e0a6      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e4:	4b56      	ldr	r3, [pc, #344]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ee      	bne.n	80056ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d105      	bne.n	8005702 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f6:	4b52      	ldr	r3, [pc, #328]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a51      	ldr	r2, [pc, #324]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 80056fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8092 	beq.w	8005830 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570c:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d05c      	beq.n	80057d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d141      	bne.n	80057a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b48      	ldr	r3, [pc, #288]	; (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fe f965 	bl	80039f4 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572e:	f7fe f961 	bl	80039f4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e078      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005740:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	019b      	lsls	r3, r3, #6
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	3b01      	subs	r3, #1
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	4933      	ldr	r1, [pc, #204]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005776:	4b33      	ldr	r3, [pc, #204]	; (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fe f93a 	bl	80039f4 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005784:	f7fe f936 	bl	80039f4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e04d      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x41c>
 80057a2:	e045      	b.n	8005830 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b27      	ldr	r3, [pc, #156]	; (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fe f923 	bl	80039f4 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fe f91f 	bl	80039f4 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e036      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c4:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x44a>
 80057d0:	e02e      	b.n	8005830 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e029      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057de:	4b18      	ldr	r3, [pc, #96]	; (8005840 <HAL_RCC_OscConfig+0x4d8>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d11c      	bne.n	800582c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d115      	bne.n	800582c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800580c:	4293      	cmp	r3, r2
 800580e:	d10d      	bne.n	800582c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d106      	bne.n	800582c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40007000 	.word	0x40007000
 8005840:	40023800 	.word	0x40023800
 8005844:	42470060 	.word	0x42470060

08005848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0cc      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800585c:	4b68      	ldr	r3, [pc, #416]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d90c      	bls.n	8005884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b65      	ldr	r3, [pc, #404]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0b8      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d020      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800589c:	4b59      	ldr	r3, [pc, #356]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b4:	4b53      	ldr	r3, [pc, #332]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a52      	ldr	r2, [pc, #328]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c0:	4b50      	ldr	r3, [pc, #320]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	494d      	ldr	r1, [pc, #308]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d044      	beq.n	8005968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	4b47      	ldr	r3, [pc, #284]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d119      	bne.n	8005926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e07f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d003      	beq.n	8005906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005902:	2b03      	cmp	r3, #3
 8005904:	d107      	bne.n	8005916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005906:	4b3f      	ldr	r3, [pc, #252]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e06f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005916:	4b3b      	ldr	r3, [pc, #236]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e067      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005926:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 0203 	bic.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4934      	ldr	r1, [pc, #208]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005938:	f7fe f85c 	bl	80039f4 <HAL_GetTick>
 800593c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593e:	e00a      	b.n	8005956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005940:	f7fe f858 	bl	80039f4 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f241 3288 	movw	r2, #5000	; 0x1388
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e04f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	4b2b      	ldr	r3, [pc, #172]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 020c 	and.w	r2, r3, #12
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	429a      	cmp	r2, r3
 8005966:	d1eb      	bne.n	8005940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d20c      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e032      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4916      	ldr	r1, [pc, #88]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	490e      	ldr	r1, [pc, #56]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ce:	f000 f821 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 80059d2:	4601      	mov	r1, r0
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	091b      	lsrs	r3, r3, #4
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <HAL_RCC_ClockConfig+0x1c0>)
 80059e0:	5cd3      	ldrb	r3, [r2, r3]
 80059e2:	fa21 f303 	lsr.w	r3, r1, r3
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_ClockConfig+0x1c8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fd ffbc 	bl	800396c <HAL_InitTick>

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023c00 	.word	0x40023c00
 8005a04:	40023800 	.word	0x40023800
 8005a08:	0800b9e0 	.word	0x0800b9e0
 8005a0c:	20000084 	.word	0x20000084
 8005a10:	20000088 	.word	0x20000088

08005a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	2300      	movs	r3, #0
 8005a24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a2a:	4b50      	ldr	r3, [pc, #320]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d007      	beq.n	8005a46 <HAL_RCC_GetSysClockFreq+0x32>
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d008      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x38>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 808d 	bne.w	8005b5a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a40:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a42:	60bb      	str	r3, [r7, #8]
       break;
 8005a44:	e08c      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a46:	4b4b      	ldr	r3, [pc, #300]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a48:	60bb      	str	r3, [r7, #8]
      break;
 8005a4a:	e089      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a4c:	4b47      	ldr	r3, [pc, #284]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a56:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d023      	beq.n	8005aaa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a62:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	f04f 0400 	mov.w	r4, #0
 8005a6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	ea03 0501 	and.w	r5, r3, r1
 8005a78:	ea04 0602 	and.w	r6, r4, r2
 8005a7c:	4a3d      	ldr	r2, [pc, #244]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a7e:	fb02 f106 	mul.w	r1, r2, r6
 8005a82:	2200      	movs	r2, #0
 8005a84:	fb02 f205 	mul.w	r2, r2, r5
 8005a88:	440a      	add	r2, r1
 8005a8a:	493a      	ldr	r1, [pc, #232]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a8c:	fba5 0101 	umull	r0, r1, r5, r1
 8005a90:	1853      	adds	r3, r2, r1
 8005a92:	4619      	mov	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	f7fb f8fb 	bl	8000c98 <__aeabi_uldivmod>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e049      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aaa:	4b30      	ldr	r3, [pc, #192]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	ea03 0501 	and.w	r5, r3, r1
 8005ac0:	ea04 0602 	and.w	r6, r4, r2
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	f04f 0400 	mov.w	r4, #0
 8005ad0:	0154      	lsls	r4, r2, #5
 8005ad2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ad6:	014b      	lsls	r3, r1, #5
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4622      	mov	r2, r4
 8005adc:	1b49      	subs	r1, r1, r5
 8005ade:	eb62 0206 	sbc.w	r2, r2, r6
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	0194      	lsls	r4, r2, #6
 8005aec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005af0:	018b      	lsls	r3, r1, #6
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	eb64 0402 	sbc.w	r4, r4, r2
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	00e2      	lsls	r2, r4, #3
 8005b02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b06:	00d9      	lsls	r1, r3, #3
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	195b      	adds	r3, r3, r5
 8005b0e:	eb44 0406 	adc.w	r4, r4, r6
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	02a2      	lsls	r2, r4, #10
 8005b1c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b20:	0299      	lsls	r1, r3, #10
 8005b22:	460b      	mov	r3, r1
 8005b24:	4614      	mov	r4, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	4621      	mov	r1, r4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f04f 0400 	mov.w	r4, #0
 8005b30:	461a      	mov	r2, r3
 8005b32:	4623      	mov	r3, r4
 8005b34:	f7fb f8b0 	bl	8000c98 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	0c1b      	lsrs	r3, r3, #16
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	60bb      	str	r3, [r7, #8]
      break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b5c:	60bb      	str	r3, [r7, #8]
      break;
 8005b5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b60:	68bb      	ldr	r3, [r7, #8]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	00f42400 	.word	0x00f42400
 8005b74:	017d7840 	.word	0x017d7840

08005b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b7c:	4b03      	ldr	r3, [pc, #12]	; (8005b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000084 	.word	0x20000084

08005b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b94:	f7ff fff0 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	4a03      	ldr	r2, [pc, #12]	; (8005bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800b9f0 	.word	0x0800b9f0

08005bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bbc:	f7ff ffdc 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	0b5b      	lsrs	r3, r3, #13
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	4a03      	ldr	r2, [pc, #12]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	0800b9f0 	.word	0x0800b9f0

08005be0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d035      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c08:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c0e:	f7fd fef1 	bl	80039f4 <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c16:	f7fd feed 	bl	80039f4 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0ba      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c28:	4b60      	ldr	r3, [pc, #384]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f0      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	019a      	lsls	r2, r3, #6
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	071b      	lsls	r3, r3, #28
 8005c40:	495a      	ldr	r1, [pc, #360]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c48:	4b57      	ldr	r3, [pc, #348]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4e:	f7fd fed1 	bl	80039f4 <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c54:	e008      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c56:	f7fd fecd 	bl	80039f4 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e09a      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c68:	4b50      	ldr	r3, [pc, #320]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8083 	beq.w	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	4b49      	ldr	r3, [pc, #292]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	4a48      	ldr	r2, [pc, #288]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c90:	6413      	str	r3, [r2, #64]	; 0x40
 8005c92:	4b46      	ldr	r3, [pc, #280]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c9e:	4b44      	ldr	r3, [pc, #272]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a43      	ldr	r2, [pc, #268]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005caa:	f7fd fea3 	bl	80039f4 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cb2:	f7fd fe9f 	bl	80039f4 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e06c      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cc4:	4b3a      	ldr	r3, [pc, #232]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0f0      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cd0:	4b36      	ldr	r3, [pc, #216]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02f      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d028      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cee:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cf8:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cfe:	4b2d      	ldr	r3, [pc, #180]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d04:	4a29      	ldr	r2, [pc, #164]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d0a:	4b28      	ldr	r3, [pc, #160]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d114      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fd fe6d 	bl	80039f4 <HAL_GetTick>
 8005d1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1c:	e00a      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fd fe69 	bl	80039f4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e034      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ee      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d4c:	d10d      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	4912      	ldr	r1, [pc, #72]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]
 8005d68:	e005      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d6a:	4b10      	ldr	r3, [pc, #64]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d74:	6093      	str	r3, [r2, #8]
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d82:	490a      	ldr	r1, [pc, #40]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7c1a      	ldrb	r2, [r3, #16]
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d9a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	42470068 	.word	0x42470068
 8005dac:	40023800 	.word	0x40023800
 8005db0:	40007000 	.word	0x40007000
 8005db4:	42470e40 	.word	0x42470e40
 8005db8:	424711e0 	.word	0x424711e0

08005dbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e083      	b.n	8005ed6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7f5b      	ldrb	r3, [r3, #29]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fc fedc 	bl	8002b9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	22ca      	movs	r2, #202	; 0xca
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2253      	movs	r2, #83	; 0x53
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fb7a 	bl	80064f4 <RTC_EnterInitMode>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	22ff      	movs	r2, #255	; 0xff
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2204      	movs	r2, #4
 8005e12:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e05e      	b.n	8005ed6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6899      	ldr	r1, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68d2      	ldr	r2, [r2, #12]
 8005e52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6919      	ldr	r1, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	041a      	lsls	r2, r3, #16
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10e      	bne.n	8005ea4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb0c 	bl	80064a4 <HAL_RTC_WaitForSynchro>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e018      	b.n	8005ed6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	22ff      	movs	r2, #255	; 0xff
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ede:	b590      	push	{r4, r7, lr}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	7f1b      	ldrb	r3, [r3, #28]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_RTC_SetTime+0x1c>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e0aa      	b.n	8006050 <HAL_RTC_SetTime+0x172>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2202      	movs	r2, #2
 8005f04:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d126      	bne.n	8005f5a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fb11 	bl	800654c <RTC_ByteToBcd2>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fb0a 	bl	800654c <RTC_ByteToBcd2>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f3c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	789b      	ldrb	r3, [r3, #2]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fb02 	bl	800654c <RTC_ByteToBcd2>
 8005f48:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f4a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	78db      	ldrb	r3, [r3, #3]
 8005f52:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e018      	b.n	8005f8c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f7a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f80:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	78db      	ldrb	r3, [r3, #3]
 8005f86:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	22ca      	movs	r2, #202	; 0xca
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2253      	movs	r2, #83	; 0x53
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 faa9 	bl	80064f4 <RTC_EnterInitMode>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e047      	b.n	8006050 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fde:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006006:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d111      	bne.n	800603a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fa44 	bl	80064a4 <HAL_RTC_WaitForSynchro>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	22ff      	movs	r2, #255	; 0xff
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2204      	movs	r2, #4
 800602e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e00a      	b.n	8006050 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	22ff      	movs	r2, #255	; 0xff
 8006040:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800604e:	2300      	movs	r3, #0
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd90      	pop	{r4, r7, pc}

08006058 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	7f1b      	ldrb	r3, [r3, #28]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_RTC_SetDate+0x1c>
 8006070:	2302      	movs	r3, #2
 8006072:	e094      	b.n	800619e <HAL_RTC_SetDate+0x146>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2202      	movs	r2, #2
 800607e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10e      	bne.n	80060a4 <HAL_RTC_SetDate+0x4c>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	f023 0310 	bic.w	r3, r3, #16
 800609a:	b2db      	uxtb	r3, r3
 800609c:	330a      	adds	r3, #10
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11c      	bne.n	80060e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	78db      	ldrb	r3, [r3, #3]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fa4c 	bl	800654c <RTC_ByteToBcd2>
 80060b4:	4603      	mov	r3, r0
 80060b6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fa45 	bl	800654c <RTC_ByteToBcd2>
 80060c2:	4603      	mov	r3, r0
 80060c4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80060c6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	789b      	ldrb	r3, [r3, #2]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fa3d 	bl	800654c <RTC_ByteToBcd2>
 80060d2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80060d4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e00e      	b.n	8006102 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	78db      	ldrb	r3, [r3, #3]
 80060e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060f0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	22ca      	movs	r2, #202	; 0xca
 8006108:	625a      	str	r2, [r3, #36]	; 0x24
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2253      	movs	r2, #83	; 0x53
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f9ee 	bl	80064f4 <RTC_EnterInitMode>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	22ff      	movs	r2, #255	; 0xff
 8006124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2204      	movs	r2, #4
 800612a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e033      	b.n	800619e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006140:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006144:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006154:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d111      	bne.n	8006188 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f99d 	bl	80064a4 <HAL_RTC_WaitForSynchro>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	22ff      	movs	r2, #255	; 0xff
 8006176:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2204      	movs	r2, #4
 800617c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e00a      	b.n	800619e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800619c:	2300      	movs	r3, #0
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
	...

080061a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80061a8:	b590      	push	{r4, r7, lr}
 80061aa:	b089      	sub	sp, #36	; 0x24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80061bc:	4b93      	ldr	r3, [pc, #588]	; (800640c <HAL_RTC_SetAlarm_IT+0x264>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a93      	ldr	r2, [pc, #588]	; (8006410 <HAL_RTC_SetAlarm_IT+0x268>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	0adb      	lsrs	r3, r3, #11
 80061c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	7f1b      	ldrb	r3, [r3, #28]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_RTC_SetAlarm_IT+0x36>
 80061da:	2302      	movs	r3, #2
 80061dc:	e111      	b.n	8006402 <HAL_RTC_SetAlarm_IT+0x25a>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2202      	movs	r2, #2
 80061e8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d137      	bne.n	8006260 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 f99f 	bl	800654c <RTC_ByteToBcd2>
 800620e:	4603      	mov	r3, r0
 8006210:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f998 	bl	800654c <RTC_ByteToBcd2>
 800621c:	4603      	mov	r3, r0
 800621e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006220:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	789b      	ldrb	r3, [r3, #2]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f990 	bl	800654c <RTC_ByteToBcd2>
 800622c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800622e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	78db      	ldrb	r3, [r3, #3]
 8006236:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006238:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f982 	bl	800654c <RTC_ByteToBcd2>
 8006248:	4603      	mov	r3, r0
 800624a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800624c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006254:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800625a:	4313      	orrs	r3, r2
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e023      	b.n	80062a8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2200      	movs	r2, #0
 8006272:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006280:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006286:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	78db      	ldrb	r3, [r3, #3]
 800628c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800628e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006296:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006298:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800629e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	22ca      	movs	r2, #202	; 0xca
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2253      	movs	r2, #83	; 0x53
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062cc:	d141      	bne.n	8006352 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062dc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80062ee:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	1e5a      	subs	r2, r3, #1
 80062f4:	617a      	str	r2, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	22ff      	movs	r2, #255	; 0xff
 8006300:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2203      	movs	r2, #3
 8006306:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e077      	b.n	8006402 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0e7      	beq.n	80062f0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800633e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	e040      	b.n	80063d4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006360:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006372:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	617a      	str	r2, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	22ff      	movs	r2, #255	; 0xff
 8006384:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2203      	movs	r2, #3
 800638a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e035      	b.n	8006402 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0e7      	beq.n	8006374 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <HAL_RTC_SetAlarm_IT+0x26c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <HAL_RTC_SetAlarm_IT+0x26c>)
 80063da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063de:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <HAL_RTC_SetAlarm_IT+0x26c>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a0b      	ldr	r2, [pc, #44]	; (8006414 <HAL_RTC_SetAlarm_IT+0x26c>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ea:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3724      	adds	r7, #36	; 0x24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd90      	pop	{r4, r7, pc}
 800640a:	bf00      	nop
 800640c:	20000084 	.word	0x20000084
 8006410:	10624dd3 	.word	0x10624dd3
 8006414:	40013c00 	.word	0x40013c00

08006418 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d012      	beq.n	8006454 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fb f9d5 	bl	80017ec <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006452:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d012      	beq.n	8006488 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f9e9 	bl	8006848 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006486:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800648a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800648e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	775a      	strb	r2, [r3, #29]
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40013c00 	.word	0x40013c00

080064a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064c0:	f7fd fa98 	bl	80039f4 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80064c6:	e009      	b.n	80064dc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064c8:	f7fd fa94 	bl	80039f4 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d6:	d901      	bls.n	80064dc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e007      	b.n	80064ec <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0ee      	beq.n	80064c8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d119      	bne.n	8006542 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f04f 32ff 	mov.w	r2, #4294967295
 8006516:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006518:	f7fd fa6c 	bl	80039f4 <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800651e:	e009      	b.n	8006534 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006520:	f7fd fa68 	bl	80039f4 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652e:	d901      	bls.n	8006534 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e007      	b.n	8006544 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0ee      	beq.n	8006520 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800655a:	e005      	b.n	8006568 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	3b0a      	subs	r3, #10
 8006566:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	2b09      	cmp	r3, #9
 800656c:	d8f6      	bhi.n	800655c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	b2da      	uxtb	r2, r3
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	4313      	orrs	r3, r2
 800657a:	b2db      	uxtb	r3, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	7f1b      	ldrb	r3, [r3, #28]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800659c:	2302      	movs	r3, #2
 800659e:	e0a6      	b.n	80066ee <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2202      	movs	r2, #2
 80065aa:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	22ca      	movs	r2, #202	; 0xca
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2253      	movs	r2, #83	; 0x53
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d022      	beq.n	8006610 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80065ca:	4b4c      	ldr	r3, [pc, #304]	; (80066fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a4c      	ldr	r2, [pc, #304]	; (8006700 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	0adb      	lsrs	r3, r3, #11
 80065d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1e5a      	subs	r2, r3, #1
 80065e4:	617a      	str	r2, [r7, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	22ff      	movs	r2, #255	; 0xff
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2203      	movs	r2, #3
 80065f6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e075      	b.n	80066ee <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e7      	bne.n	80065e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8006620:	4b36      	ldr	r3, [pc, #216]	; (80066fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a36      	ldr	r2, [pc, #216]	; (8006700 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	0adb      	lsrs	r3, r3, #11
 800662c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	617a      	str	r2, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	22ff      	movs	r2, #255	; 0xff
 8006646:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2203      	movs	r2, #3
 800664c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e04a      	b.n	80066ee <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0e7      	beq.n	8006636 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0207 	bic.w	r2, r2, #7
 800667c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6899      	ldr	r1, [r3, #8]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	430a      	orrs	r2, r1
 800668c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800668e:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006698:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80066a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066a4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80066b6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066c6:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	22ff      	movs	r2, #255	; 0xff
 80066de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000084 	.word	0x20000084
 8006700:	10624dd3 	.word	0x10624dd3
 8006704:	40013c00 	.word	0x40013c00

08006708 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7f1b      	ldrb	r3, [r3, #28]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800671c:	2302      	movs	r3, #2
 800671e:	e047      	b.n	80067b0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	22ca      	movs	r2, #202	; 0xca
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2253      	movs	r2, #83	; 0x53
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800675a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800675c:	f7fd f94a 	bl	80039f4 <HAL_GetTick>
 8006760:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006762:	e013      	b.n	800678c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006764:	f7fd f946 	bl	80039f4 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006772:	d90b      	bls.n	800678c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e011      	b.n	80067b0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0e4      	beq.n	8006764 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f816 	bl	8006800 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80067e4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80067e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80067ec:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	775a      	strb	r2, [r3, #29]
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40013c00 	.word	0x40013c00

08006800 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3350      	adds	r3, #80	; 0x50
 800682a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4413      	add	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	601a      	str	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e01d      	b.n	80068aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fc fde2 	bl	800344c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f000 fa1e 	bl	8006cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d007      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b02      	cmp	r3, #2
 800690e:	d122      	bne.n	8006956 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d11b      	bne.n	8006956 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f06f 0202 	mvn.w	r2, #2
 8006926:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f9af 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006942:	e005      	b.n	8006950 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f9a1 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9b2 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b04      	cmp	r3, #4
 8006962:	d122      	bne.n	80069aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b04      	cmp	r3, #4
 8006970:	d11b      	bne.n	80069aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f06f 0204 	mvn.w	r2, #4
 800697a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f985 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006996:	e005      	b.n	80069a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f977 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f988 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d122      	bne.n	80069fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d11b      	bne.n	80069fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f06f 0208 	mvn.w	r2, #8
 80069ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2204      	movs	r2, #4
 80069d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f95b 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 80069ea:	e005      	b.n	80069f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f94d 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f95e 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d122      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b10      	cmp	r3, #16
 8006a18:	d11b      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0210 	mvn.w	r2, #16
 8006a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2208      	movs	r2, #8
 8006a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f931 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006a3e:	e005      	b.n	8006a4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f923 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f934 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10e      	bne.n	8006a7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d107      	bne.n	8006a7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f06f 0201 	mvn.w	r2, #1
 8006a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8fd 	bl	8006c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d10e      	bne.n	8006aaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d107      	bne.n	8006aaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 faab 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d10e      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d107      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f8f9 	bl	8006cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d10e      	bne.n	8006b02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d107      	bne.n	8006b02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f06f 0220 	mvn.w	r2, #32
 8006afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa75 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_ConfigClockSource+0x18>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0a6      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x166>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d067      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x120>
 8006b5a:	2b40      	cmp	r3, #64	; 0x40
 8006b5c:	d80b      	bhi.n	8006b76 <HAL_TIM_ConfigClockSource+0x6c>
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d073      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x140>
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d802      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x62>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06f      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b6a:	e078      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d06c      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x140>
 8006b70:	2b30      	cmp	r3, #48	; 0x30
 8006b72:	d06a      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006b74:	e073      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b76:	2b70      	cmp	r3, #112	; 0x70
 8006b78:	d00d      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x8c>
 8006b7a:	2b70      	cmp	r3, #112	; 0x70
 8006b7c:	d804      	bhi.n	8006b88 <HAL_TIM_ConfigClockSource+0x7e>
 8006b7e:	2b50      	cmp	r3, #80	; 0x50
 8006b80:	d033      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0xe0>
 8006b82:	2b60      	cmp	r3, #96	; 0x60
 8006b84:	d041      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006b86:	e06a      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8c:	d066      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x152>
 8006b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b92:	d017      	beq.n	8006bc4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006b94:	e063      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6899      	ldr	r1, [r3, #8]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f000 f993 	bl	8006ed0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	609a      	str	r2, [r3, #8]
      break;
 8006bc2:	e04c      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6899      	ldr	r1, [r3, #8]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f000 f97c 	bl	8006ed0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006be6:	609a      	str	r2, [r3, #8]
      break;
 8006be8:	e039      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 f8f0 	bl	8006ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2150      	movs	r1, #80	; 0x50
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f949 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 8006c08:	e029      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 f90f 	bl	8006e3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2160      	movs	r1, #96	; 0x60
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f939 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 8006c28:	e019      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f000 f8d0 	bl	8006ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2140      	movs	r1, #64	; 0x40
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f929 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 8006c48:	e009      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f000 f920 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 8006c5a:	e000      	b.n	8006c5e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a34      	ldr	r2, [pc, #208]	; (8006dc0 <TIM_Base_SetConfig+0xe4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00f      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d00b      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a31      	ldr	r2, [pc, #196]	; (8006dc4 <TIM_Base_SetConfig+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d007      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a30      	ldr	r2, [pc, #192]	; (8006dc8 <TIM_Base_SetConfig+0xec>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <TIM_Base_SetConfig+0xf0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a25      	ldr	r2, [pc, #148]	; (8006dc0 <TIM_Base_SetConfig+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d01b      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d34:	d017      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <TIM_Base_SetConfig+0xe8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_Base_SetConfig+0xec>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00f      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_Base_SetConfig+0xf0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <TIM_Base_SetConfig+0xf4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <TIM_Base_SetConfig+0xf8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_Base_SetConfig+0x8a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <TIM_Base_SetConfig+0xfc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d108      	bne.n	8006d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <TIM_Base_SetConfig+0xe4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d103      	bne.n	8006dac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	615a      	str	r2, [r3, #20]
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400
 8006dd8:	40014800 	.word	0x40014800

08006ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0201 	bic.w	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f023 030a 	bic.w	r3, r3, #10
 8006e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b087      	sub	sp, #28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0210 	bic.w	r2, r3, #16
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	031b      	lsls	r3, r3, #12
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f043 0307 	orr.w	r3, r3, #7
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e050      	b.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d018      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f74:	d013      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00e      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40014000 	.word	0x40014000

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e03f      	b.n	80070a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fc fb9e 	bl	800377c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fab3 	bl	80075c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800708c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	4613      	mov	r3, r2
 80070ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d140      	bne.n	800714a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_Receive_IT+0x26>
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e039      	b.n	800714c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_UART_Receive_IT+0x38>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e032      	b.n	800714c <HAL_UART_Receive_IT+0x9e>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	88fa      	ldrh	r2, [r7, #6]
 80070fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2222      	movs	r2, #34	; 0x22
 800710a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007124:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695a      	ldr	r2, [r3, #20]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0220 	orr.w	r2, r2, #32
 8007144:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10d      	bne.n	80071aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_UART_IRQHandler+0x52>
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f98c 	bl	80074c0 <UART_Receive_IT>
      return;
 80071a8:	e0d1      	b.n	800734e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80b0 	beq.w	8007312 <HAL_UART_IRQHandler+0x1ba>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d105      	bne.n	80071c8 <HAL_UART_IRQHandler+0x70>
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80a5 	beq.w	8007312 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_UART_IRQHandler+0x90>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e0:	f043 0201 	orr.w	r2, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_UART_IRQHandler+0xb0>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007200:	f043 0202 	orr.w	r2, r3, #2
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_UART_IRQHandler+0xd0>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007220:	f043 0204 	orr.w	r2, r3, #4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00f      	beq.n	8007252 <HAL_UART_IRQHandler+0xfa>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <HAL_UART_IRQHandler+0xee>
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	f043 0208 	orr.w	r2, r3, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d078      	beq.n	800734c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_UART_IRQHandler+0x11c>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f926 	bl	80074c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	bf0c      	ite	eq
 8007282:	2301      	moveq	r3, #1
 8007284:	2300      	movne	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <HAL_UART_IRQHandler+0x144>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d031      	beq.n	8007300 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f86f 	bl	8007380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d123      	bne.n	80072f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d013      	beq.n	80072f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <HAL_UART_IRQHandler+0x1fc>)
 80072ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fc fccc 	bl	8003c72 <HAL_DMA_Abort_IT>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d016      	beq.n	800730e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072ea:	4610      	mov	r0, r2
 80072ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ee:	e00e      	b.n	800730e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f83b 	bl	800736c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f6:	e00a      	b.n	800730e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f837 	bl	800736c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fe:	e006      	b.n	800730e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f833 	bl	800736c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800730c:	e01e      	b.n	800734c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730e:	bf00      	nop
    return;
 8007310:	e01c      	b.n	800734c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_UART_IRQHandler+0x1d6>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f85c 	bl	80073e4 <UART_Transmit_IT>
    return;
 800732c:	e00f      	b.n	800734e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <HAL_UART_IRQHandler+0x1f6>
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f8a4 	bl	8007490 <UART_EndTransmit_IT>
    return;
 8007348:	bf00      	nop
 800734a:	e000      	b.n	800734e <HAL_UART_IRQHandler+0x1f6>
    return;
 800734c:	bf00      	nop
  }
}
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	080073bd 	.word	0x080073bd

08007358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007396:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695a      	ldr	r2, [r3, #20]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0201 	bic.w	r2, r2, #1
 80073a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff ffc8 	bl	800736c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b21      	cmp	r3, #33	; 0x21
 80073f6:	d144      	bne.n	8007482 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007400:	d11a      	bne.n	8007438 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007416:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	1c9a      	adds	r2, r3, #2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]
 800742a:	e00e      	b.n	800744a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]
 8007436:	e008      	b.n	800744a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	1c59      	adds	r1, r3, #1
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6211      	str	r1, [r2, #32]
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29b      	uxth	r3, r3
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	4619      	mov	r1, r3
 8007458:	84d1      	strh	r1, [r2, #38]	; 0x26
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10f      	bne.n	800747e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800746c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	e000      	b.n	8007484 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007482:	2302      	movs	r3, #2
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ff51 	bl	8007358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b22      	cmp	r3, #34	; 0x22
 80074d2:	d171      	bne.n	80075b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074dc:	d123      	bne.n	8007526 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10e      	bne.n	800750a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	1c9a      	adds	r2, r3, #2
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	629a      	str	r2, [r3, #40]	; 0x28
 8007508:	e029      	b.n	800755e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	b29b      	uxth	r3, r3
 8007512:	b2db      	uxtb	r3, r3
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28
 8007524:	e01b      	b.n	800755e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6858      	ldr	r0, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	1c59      	adds	r1, r3, #1
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6291      	str	r1, [r2, #40]	; 0x28
 800753e:	b2c2      	uxtb	r2, r0
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e00c      	b.n	800755e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	1c58      	adds	r0, r3, #1
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	6288      	str	r0, [r1, #40]	; 0x28
 8007556:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29b      	uxth	r3, r3
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800756e:	2b00      	cmp	r3, #0
 8007570:	d120      	bne.n	80075b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0220 	bic.w	r2, r2, #32
 8007580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fb f95e 	bl	800286c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e002      	b.n	80075ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	e000      	b.n	80075ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80075b8:	2302      	movs	r3, #2
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007606:	f023 030c 	bic.w	r3, r3, #12
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	430b      	orrs	r3, r1
 8007612:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007632:	f040 818b 	bne.w	800794c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4ac1      	ldr	r2, [pc, #772]	; (8007940 <UART_SetConfig+0x37c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d005      	beq.n	800764c <UART_SetConfig+0x88>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4abf      	ldr	r2, [pc, #764]	; (8007944 <UART_SetConfig+0x380>)
 8007646:	4293      	cmp	r3, r2
 8007648:	f040 80bd 	bne.w	80077c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800764c:	f7fe fab4 	bl	8005bb8 <HAL_RCC_GetPCLK2Freq>
 8007650:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	461d      	mov	r5, r3
 8007656:	f04f 0600 	mov.w	r6, #0
 800765a:	46a8      	mov	r8, r5
 800765c:	46b1      	mov	r9, r6
 800765e:	eb18 0308 	adds.w	r3, r8, r8
 8007662:	eb49 0409 	adc.w	r4, r9, r9
 8007666:	4698      	mov	r8, r3
 8007668:	46a1      	mov	r9, r4
 800766a:	eb18 0805 	adds.w	r8, r8, r5
 800766e:	eb49 0906 	adc.w	r9, r9, r6
 8007672:	f04f 0100 	mov.w	r1, #0
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800767e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007682:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007686:	4688      	mov	r8, r1
 8007688:	4691      	mov	r9, r2
 800768a:	eb18 0005 	adds.w	r0, r8, r5
 800768e:	eb49 0106 	adc.w	r1, r9, r6
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	461d      	mov	r5, r3
 8007698:	f04f 0600 	mov.w	r6, #0
 800769c:	196b      	adds	r3, r5, r5
 800769e:	eb46 0406 	adc.w	r4, r6, r6
 80076a2:	461a      	mov	r2, r3
 80076a4:	4623      	mov	r3, r4
 80076a6:	f7f9 faf7 	bl	8000c98 <__aeabi_uldivmod>
 80076aa:	4603      	mov	r3, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	461a      	mov	r2, r3
 80076b0:	4ba5      	ldr	r3, [pc, #660]	; (8007948 <UART_SetConfig+0x384>)
 80076b2:	fba3 2302 	umull	r2, r3, r3, r2
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	461d      	mov	r5, r3
 80076c0:	f04f 0600 	mov.w	r6, #0
 80076c4:	46a9      	mov	r9, r5
 80076c6:	46b2      	mov	sl, r6
 80076c8:	eb19 0309 	adds.w	r3, r9, r9
 80076cc:	eb4a 040a 	adc.w	r4, sl, sl
 80076d0:	4699      	mov	r9, r3
 80076d2:	46a2      	mov	sl, r4
 80076d4:	eb19 0905 	adds.w	r9, r9, r5
 80076d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80076dc:	f04f 0100 	mov.w	r1, #0
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076f0:	4689      	mov	r9, r1
 80076f2:	4692      	mov	sl, r2
 80076f4:	eb19 0005 	adds.w	r0, r9, r5
 80076f8:	eb4a 0106 	adc.w	r1, sl, r6
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	461d      	mov	r5, r3
 8007702:	f04f 0600 	mov.w	r6, #0
 8007706:	196b      	adds	r3, r5, r5
 8007708:	eb46 0406 	adc.w	r4, r6, r6
 800770c:	461a      	mov	r2, r3
 800770e:	4623      	mov	r3, r4
 8007710:	f7f9 fac2 	bl	8000c98 <__aeabi_uldivmod>
 8007714:	4603      	mov	r3, r0
 8007716:	460c      	mov	r4, r1
 8007718:	461a      	mov	r2, r3
 800771a:	4b8b      	ldr	r3, [pc, #556]	; (8007948 <UART_SetConfig+0x384>)
 800771c:	fba3 1302 	umull	r1, r3, r3, r2
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	2164      	movs	r1, #100	; 0x64
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	3332      	adds	r3, #50	; 0x32
 800772e:	4a86      	ldr	r2, [pc, #536]	; (8007948 <UART_SetConfig+0x384>)
 8007730:	fba2 2303 	umull	r2, r3, r2, r3
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800773c:	4498      	add	r8, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	461d      	mov	r5, r3
 8007742:	f04f 0600 	mov.w	r6, #0
 8007746:	46a9      	mov	r9, r5
 8007748:	46b2      	mov	sl, r6
 800774a:	eb19 0309 	adds.w	r3, r9, r9
 800774e:	eb4a 040a 	adc.w	r4, sl, sl
 8007752:	4699      	mov	r9, r3
 8007754:	46a2      	mov	sl, r4
 8007756:	eb19 0905 	adds.w	r9, r9, r5
 800775a:	eb4a 0a06 	adc.w	sl, sl, r6
 800775e:	f04f 0100 	mov.w	r1, #0
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800776a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800776e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007772:	4689      	mov	r9, r1
 8007774:	4692      	mov	sl, r2
 8007776:	eb19 0005 	adds.w	r0, r9, r5
 800777a:	eb4a 0106 	adc.w	r1, sl, r6
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	461d      	mov	r5, r3
 8007784:	f04f 0600 	mov.w	r6, #0
 8007788:	196b      	adds	r3, r5, r5
 800778a:	eb46 0406 	adc.w	r4, r6, r6
 800778e:	461a      	mov	r2, r3
 8007790:	4623      	mov	r3, r4
 8007792:	f7f9 fa81 	bl	8000c98 <__aeabi_uldivmod>
 8007796:	4603      	mov	r3, r0
 8007798:	460c      	mov	r4, r1
 800779a:	461a      	mov	r2, r3
 800779c:	4b6a      	ldr	r3, [pc, #424]	; (8007948 <UART_SetConfig+0x384>)
 800779e:	fba3 1302 	umull	r1, r3, r3, r2
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	2164      	movs	r1, #100	; 0x64
 80077a6:	fb01 f303 	mul.w	r3, r1, r3
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	3332      	adds	r3, #50	; 0x32
 80077b0:	4a65      	ldr	r2, [pc, #404]	; (8007948 <UART_SetConfig+0x384>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	f003 0207 	and.w	r2, r3, #7
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4442      	add	r2, r8
 80077c2:	609a      	str	r2, [r3, #8]
 80077c4:	e26f      	b.n	8007ca6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077c6:	f7fe f9e3 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 80077ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	461d      	mov	r5, r3
 80077d0:	f04f 0600 	mov.w	r6, #0
 80077d4:	46a8      	mov	r8, r5
 80077d6:	46b1      	mov	r9, r6
 80077d8:	eb18 0308 	adds.w	r3, r8, r8
 80077dc:	eb49 0409 	adc.w	r4, r9, r9
 80077e0:	4698      	mov	r8, r3
 80077e2:	46a1      	mov	r9, r4
 80077e4:	eb18 0805 	adds.w	r8, r8, r5
 80077e8:	eb49 0906 	adc.w	r9, r9, r6
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007800:	4688      	mov	r8, r1
 8007802:	4691      	mov	r9, r2
 8007804:	eb18 0005 	adds.w	r0, r8, r5
 8007808:	eb49 0106 	adc.w	r1, r9, r6
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	461d      	mov	r5, r3
 8007812:	f04f 0600 	mov.w	r6, #0
 8007816:	196b      	adds	r3, r5, r5
 8007818:	eb46 0406 	adc.w	r4, r6, r6
 800781c:	461a      	mov	r2, r3
 800781e:	4623      	mov	r3, r4
 8007820:	f7f9 fa3a 	bl	8000c98 <__aeabi_uldivmod>
 8007824:	4603      	mov	r3, r0
 8007826:	460c      	mov	r4, r1
 8007828:	461a      	mov	r2, r3
 800782a:	4b47      	ldr	r3, [pc, #284]	; (8007948 <UART_SetConfig+0x384>)
 800782c:	fba3 2302 	umull	r2, r3, r3, r2
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	461d      	mov	r5, r3
 800783a:	f04f 0600 	mov.w	r6, #0
 800783e:	46a9      	mov	r9, r5
 8007840:	46b2      	mov	sl, r6
 8007842:	eb19 0309 	adds.w	r3, r9, r9
 8007846:	eb4a 040a 	adc.w	r4, sl, sl
 800784a:	4699      	mov	r9, r3
 800784c:	46a2      	mov	sl, r4
 800784e:	eb19 0905 	adds.w	r9, r9, r5
 8007852:	eb4a 0a06 	adc.w	sl, sl, r6
 8007856:	f04f 0100 	mov.w	r1, #0
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007862:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007866:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800786a:	4689      	mov	r9, r1
 800786c:	4692      	mov	sl, r2
 800786e:	eb19 0005 	adds.w	r0, r9, r5
 8007872:	eb4a 0106 	adc.w	r1, sl, r6
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	461d      	mov	r5, r3
 800787c:	f04f 0600 	mov.w	r6, #0
 8007880:	196b      	adds	r3, r5, r5
 8007882:	eb46 0406 	adc.w	r4, r6, r6
 8007886:	461a      	mov	r2, r3
 8007888:	4623      	mov	r3, r4
 800788a:	f7f9 fa05 	bl	8000c98 <__aeabi_uldivmod>
 800788e:	4603      	mov	r3, r0
 8007890:	460c      	mov	r4, r1
 8007892:	461a      	mov	r2, r3
 8007894:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <UART_SetConfig+0x384>)
 8007896:	fba3 1302 	umull	r1, r3, r3, r2
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	2164      	movs	r1, #100	; 0x64
 800789e:	fb01 f303 	mul.w	r3, r1, r3
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	3332      	adds	r3, #50	; 0x32
 80078a8:	4a27      	ldr	r2, [pc, #156]	; (8007948 <UART_SetConfig+0x384>)
 80078aa:	fba2 2303 	umull	r2, r3, r2, r3
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078b6:	4498      	add	r8, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	461d      	mov	r5, r3
 80078bc:	f04f 0600 	mov.w	r6, #0
 80078c0:	46a9      	mov	r9, r5
 80078c2:	46b2      	mov	sl, r6
 80078c4:	eb19 0309 	adds.w	r3, r9, r9
 80078c8:	eb4a 040a 	adc.w	r4, sl, sl
 80078cc:	4699      	mov	r9, r3
 80078ce:	46a2      	mov	sl, r4
 80078d0:	eb19 0905 	adds.w	r9, r9, r5
 80078d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078ec:	4689      	mov	r9, r1
 80078ee:	4692      	mov	sl, r2
 80078f0:	eb19 0005 	adds.w	r0, r9, r5
 80078f4:	eb4a 0106 	adc.w	r1, sl, r6
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	461d      	mov	r5, r3
 80078fe:	f04f 0600 	mov.w	r6, #0
 8007902:	196b      	adds	r3, r5, r5
 8007904:	eb46 0406 	adc.w	r4, r6, r6
 8007908:	461a      	mov	r2, r3
 800790a:	4623      	mov	r3, r4
 800790c:	f7f9 f9c4 	bl	8000c98 <__aeabi_uldivmod>
 8007910:	4603      	mov	r3, r0
 8007912:	460c      	mov	r4, r1
 8007914:	461a      	mov	r2, r3
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <UART_SetConfig+0x384>)
 8007918:	fba3 1302 	umull	r1, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	2164      	movs	r1, #100	; 0x64
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	3332      	adds	r3, #50	; 0x32
 800792a:	4a07      	ldr	r2, [pc, #28]	; (8007948 <UART_SetConfig+0x384>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	f003 0207 	and.w	r2, r3, #7
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4442      	add	r2, r8
 800793c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800793e:	e1b2      	b.n	8007ca6 <UART_SetConfig+0x6e2>
 8007940:	40011000 	.word	0x40011000
 8007944:	40011400 	.word	0x40011400
 8007948:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4ad7      	ldr	r2, [pc, #860]	; (8007cb0 <UART_SetConfig+0x6ec>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d005      	beq.n	8007962 <UART_SetConfig+0x39e>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4ad6      	ldr	r2, [pc, #856]	; (8007cb4 <UART_SetConfig+0x6f0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	f040 80d1 	bne.w	8007b04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007962:	f7fe f929 	bl	8005bb8 <HAL_RCC_GetPCLK2Freq>
 8007966:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	469a      	mov	sl, r3
 800796c:	f04f 0b00 	mov.w	fp, #0
 8007970:	46d0      	mov	r8, sl
 8007972:	46d9      	mov	r9, fp
 8007974:	eb18 0308 	adds.w	r3, r8, r8
 8007978:	eb49 0409 	adc.w	r4, r9, r9
 800797c:	4698      	mov	r8, r3
 800797e:	46a1      	mov	r9, r4
 8007980:	eb18 080a 	adds.w	r8, r8, sl
 8007984:	eb49 090b 	adc.w	r9, r9, fp
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007994:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007998:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800799c:	4688      	mov	r8, r1
 800799e:	4691      	mov	r9, r2
 80079a0:	eb1a 0508 	adds.w	r5, sl, r8
 80079a4:	eb4b 0609 	adc.w	r6, fp, r9
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	f04f 0400 	mov.w	r4, #0
 80079ba:	0094      	lsls	r4, r2, #2
 80079bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079c0:	008b      	lsls	r3, r1, #2
 80079c2:	461a      	mov	r2, r3
 80079c4:	4623      	mov	r3, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	4631      	mov	r1, r6
 80079ca:	f7f9 f965 	bl	8000c98 <__aeabi_uldivmod>
 80079ce:	4603      	mov	r3, r0
 80079d0:	460c      	mov	r4, r1
 80079d2:	461a      	mov	r2, r3
 80079d4:	4bb8      	ldr	r3, [pc, #736]	; (8007cb8 <UART_SetConfig+0x6f4>)
 80079d6:	fba3 2302 	umull	r2, r3, r3, r2
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	469b      	mov	fp, r3
 80079e4:	f04f 0c00 	mov.w	ip, #0
 80079e8:	46d9      	mov	r9, fp
 80079ea:	46e2      	mov	sl, ip
 80079ec:	eb19 0309 	adds.w	r3, r9, r9
 80079f0:	eb4a 040a 	adc.w	r4, sl, sl
 80079f4:	4699      	mov	r9, r3
 80079f6:	46a2      	mov	sl, r4
 80079f8:	eb19 090b 	adds.w	r9, r9, fp
 80079fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a00:	f04f 0100 	mov.w	r1, #0
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a14:	4689      	mov	r9, r1
 8007a16:	4692      	mov	sl, r2
 8007a18:	eb1b 0509 	adds.w	r5, fp, r9
 8007a1c:	eb4c 060a 	adc.w	r6, ip, sl
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	f04f 0400 	mov.w	r4, #0
 8007a32:	0094      	lsls	r4, r2, #2
 8007a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a38:	008b      	lsls	r3, r1, #2
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	4631      	mov	r1, r6
 8007a42:	f7f9 f929 	bl	8000c98 <__aeabi_uldivmod>
 8007a46:	4603      	mov	r3, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4b9a      	ldr	r3, [pc, #616]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	2164      	movs	r1, #100	; 0x64
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	3332      	adds	r3, #50	; 0x32
 8007a60:	4a95      	ldr	r2, [pc, #596]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a6c:	4498      	add	r8, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	469b      	mov	fp, r3
 8007a72:	f04f 0c00 	mov.w	ip, #0
 8007a76:	46d9      	mov	r9, fp
 8007a78:	46e2      	mov	sl, ip
 8007a7a:	eb19 0309 	adds.w	r3, r9, r9
 8007a7e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a82:	4699      	mov	r9, r3
 8007a84:	46a2      	mov	sl, r4
 8007a86:	eb19 090b 	adds.w	r9, r9, fp
 8007a8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a8e:	f04f 0100 	mov.w	r1, #0
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aa2:	4689      	mov	r9, r1
 8007aa4:	4692      	mov	sl, r2
 8007aa6:	eb1b 0509 	adds.w	r5, fp, r9
 8007aaa:	eb4c 060a 	adc.w	r6, ip, sl
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	f04f 0400 	mov.w	r4, #0
 8007ac0:	0094      	lsls	r4, r2, #2
 8007ac2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ac6:	008b      	lsls	r3, r1, #2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	4623      	mov	r3, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	4631      	mov	r1, r6
 8007ad0:	f7f9 f8e2 	bl	8000c98 <__aeabi_uldivmod>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4b77      	ldr	r3, [pc, #476]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007adc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	2164      	movs	r1, #100	; 0x64
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	3332      	adds	r3, #50	; 0x32
 8007aee:	4a72      	ldr	r2, [pc, #456]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	f003 020f 	and.w	r2, r3, #15
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4442      	add	r2, r8
 8007b00:	609a      	str	r2, [r3, #8]
 8007b02:	e0d0      	b.n	8007ca6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fe f844 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 8007b08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	469a      	mov	sl, r3
 8007b0e:	f04f 0b00 	mov.w	fp, #0
 8007b12:	46d0      	mov	r8, sl
 8007b14:	46d9      	mov	r9, fp
 8007b16:	eb18 0308 	adds.w	r3, r8, r8
 8007b1a:	eb49 0409 	adc.w	r4, r9, r9
 8007b1e:	4698      	mov	r8, r3
 8007b20:	46a1      	mov	r9, r4
 8007b22:	eb18 080a 	adds.w	r8, r8, sl
 8007b26:	eb49 090b 	adc.w	r9, r9, fp
 8007b2a:	f04f 0100 	mov.w	r1, #0
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b3e:	4688      	mov	r8, r1
 8007b40:	4691      	mov	r9, r2
 8007b42:	eb1a 0508 	adds.w	r5, sl, r8
 8007b46:	eb4b 0609 	adc.w	r6, fp, r9
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	0094      	lsls	r4, r2, #2
 8007b5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b62:	008b      	lsls	r3, r1, #2
 8007b64:	461a      	mov	r2, r3
 8007b66:	4623      	mov	r3, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	f7f9 f894 	bl	8000c98 <__aeabi_uldivmod>
 8007b70:	4603      	mov	r3, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	461a      	mov	r2, r3
 8007b76:	4b50      	ldr	r3, [pc, #320]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007b78:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	469b      	mov	fp, r3
 8007b86:	f04f 0c00 	mov.w	ip, #0
 8007b8a:	46d9      	mov	r9, fp
 8007b8c:	46e2      	mov	sl, ip
 8007b8e:	eb19 0309 	adds.w	r3, r9, r9
 8007b92:	eb4a 040a 	adc.w	r4, sl, sl
 8007b96:	4699      	mov	r9, r3
 8007b98:	46a2      	mov	sl, r4
 8007b9a:	eb19 090b 	adds.w	r9, r9, fp
 8007b9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ba2:	f04f 0100 	mov.w	r1, #0
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bb6:	4689      	mov	r9, r1
 8007bb8:	4692      	mov	sl, r2
 8007bba:	eb1b 0509 	adds.w	r5, fp, r9
 8007bbe:	eb4c 060a 	adc.w	r6, ip, sl
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	f04f 0400 	mov.w	r4, #0
 8007bd4:	0094      	lsls	r4, r2, #2
 8007bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bda:	008b      	lsls	r3, r1, #2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4623      	mov	r3, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	4631      	mov	r1, r6
 8007be4:	f7f9 f858 	bl	8000c98 <__aeabi_uldivmod>
 8007be8:	4603      	mov	r3, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	461a      	mov	r2, r3
 8007bee:	4b32      	ldr	r3, [pc, #200]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	2164      	movs	r1, #100	; 0x64
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	3332      	adds	r3, #50	; 0x32
 8007c02:	4a2d      	ldr	r2, [pc, #180]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007c04:	fba2 2303 	umull	r2, r3, r2, r3
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c0e:	4498      	add	r8, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	469b      	mov	fp, r3
 8007c14:	f04f 0c00 	mov.w	ip, #0
 8007c18:	46d9      	mov	r9, fp
 8007c1a:	46e2      	mov	sl, ip
 8007c1c:	eb19 0309 	adds.w	r3, r9, r9
 8007c20:	eb4a 040a 	adc.w	r4, sl, sl
 8007c24:	4699      	mov	r9, r3
 8007c26:	46a2      	mov	sl, r4
 8007c28:	eb19 090b 	adds.w	r9, r9, fp
 8007c2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c30:	f04f 0100 	mov.w	r1, #0
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c44:	4689      	mov	r9, r1
 8007c46:	4692      	mov	sl, r2
 8007c48:	eb1b 0509 	adds.w	r5, fp, r9
 8007c4c:	eb4c 060a 	adc.w	r6, ip, sl
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4619      	mov	r1, r3
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	f04f 0400 	mov.w	r4, #0
 8007c62:	0094      	lsls	r4, r2, #2
 8007c64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c68:	008b      	lsls	r3, r1, #2
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	4631      	mov	r1, r6
 8007c72:	f7f9 f811 	bl	8000c98 <__aeabi_uldivmod>
 8007c76:	4603      	mov	r3, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	2164      	movs	r1, #100	; 0x64
 8007c86:	fb01 f303 	mul.w	r3, r1, r3
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	3332      	adds	r3, #50	; 0x32
 8007c90:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <UART_SetConfig+0x6f4>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	f003 020f 	and.w	r2, r3, #15
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4442      	add	r2, r8
 8007ca2:	609a      	str	r2, [r3, #8]
}
 8007ca4:	e7ff      	b.n	8007ca6 <UART_SetConfig+0x6e2>
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	40011000 	.word	0x40011000
 8007cb4:	40011400 	.word	0x40011400
 8007cb8:	51eb851f 	.word	0x51eb851f

08007cbc <atoi>:
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f001 bd5c 	b.w	800977c <strtol>

08007cc4 <__errno>:
 8007cc4:	4b01      	ldr	r3, [pc, #4]	; (8007ccc <__errno+0x8>)
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000090 	.word	0x20000090

08007cd0 <__libc_init_array>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	4e0d      	ldr	r6, [pc, #52]	; (8007d08 <__libc_init_array+0x38>)
 8007cd4:	4c0d      	ldr	r4, [pc, #52]	; (8007d0c <__libc_init_array+0x3c>)
 8007cd6:	1ba4      	subs	r4, r4, r6
 8007cd8:	10a4      	asrs	r4, r4, #2
 8007cda:	2500      	movs	r5, #0
 8007cdc:	42a5      	cmp	r5, r4
 8007cde:	d109      	bne.n	8007cf4 <__libc_init_array+0x24>
 8007ce0:	4e0b      	ldr	r6, [pc, #44]	; (8007d10 <__libc_init_array+0x40>)
 8007ce2:	4c0c      	ldr	r4, [pc, #48]	; (8007d14 <__libc_init_array+0x44>)
 8007ce4:	f003 fd82 	bl	800b7ec <_init>
 8007ce8:	1ba4      	subs	r4, r4, r6
 8007cea:	10a4      	asrs	r4, r4, #2
 8007cec:	2500      	movs	r5, #0
 8007cee:	42a5      	cmp	r5, r4
 8007cf0:	d105      	bne.n	8007cfe <__libc_init_array+0x2e>
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cf8:	4798      	blx	r3
 8007cfa:	3501      	adds	r5, #1
 8007cfc:	e7ee      	b.n	8007cdc <__libc_init_array+0xc>
 8007cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d02:	4798      	blx	r3
 8007d04:	3501      	adds	r5, #1
 8007d06:	e7f2      	b.n	8007cee <__libc_init_array+0x1e>
 8007d08:	0800bcb8 	.word	0x0800bcb8
 8007d0c:	0800bcb8 	.word	0x0800bcb8
 8007d10:	0800bcb8 	.word	0x0800bcb8
 8007d14:	0800bcbc 	.word	0x0800bcbc

08007d18 <memset>:
 8007d18:	4402      	add	r2, r0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d100      	bne.n	8007d22 <memset+0xa>
 8007d20:	4770      	bx	lr
 8007d22:	f803 1b01 	strb.w	r1, [r3], #1
 8007d26:	e7f9      	b.n	8007d1c <memset+0x4>

08007d28 <__cvt>:
 8007d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	ec55 4b10 	vmov	r4, r5, d0
 8007d30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007d32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	460e      	mov	r6, r1
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	bfb8      	it	lt
 8007d40:	4622      	movlt	r2, r4
 8007d42:	462b      	mov	r3, r5
 8007d44:	f027 0720 	bic.w	r7, r7, #32
 8007d48:	bfbb      	ittet	lt
 8007d4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d4e:	461d      	movlt	r5, r3
 8007d50:	2300      	movge	r3, #0
 8007d52:	232d      	movlt	r3, #45	; 0x2d
 8007d54:	bfb8      	it	lt
 8007d56:	4614      	movlt	r4, r2
 8007d58:	2f46      	cmp	r7, #70	; 0x46
 8007d5a:	700b      	strb	r3, [r1, #0]
 8007d5c:	d004      	beq.n	8007d68 <__cvt+0x40>
 8007d5e:	2f45      	cmp	r7, #69	; 0x45
 8007d60:	d100      	bne.n	8007d64 <__cvt+0x3c>
 8007d62:	3601      	adds	r6, #1
 8007d64:	2102      	movs	r1, #2
 8007d66:	e000      	b.n	8007d6a <__cvt+0x42>
 8007d68:	2103      	movs	r1, #3
 8007d6a:	ab03      	add	r3, sp, #12
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	ab02      	add	r3, sp, #8
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	4632      	mov	r2, r6
 8007d74:	4653      	mov	r3, sl
 8007d76:	ec45 4b10 	vmov	d0, r4, r5
 8007d7a:	f001 fda1 	bl	80098c0 <_dtoa_r>
 8007d7e:	2f47      	cmp	r7, #71	; 0x47
 8007d80:	4680      	mov	r8, r0
 8007d82:	d102      	bne.n	8007d8a <__cvt+0x62>
 8007d84:	f019 0f01 	tst.w	r9, #1
 8007d88:	d026      	beq.n	8007dd8 <__cvt+0xb0>
 8007d8a:	2f46      	cmp	r7, #70	; 0x46
 8007d8c:	eb08 0906 	add.w	r9, r8, r6
 8007d90:	d111      	bne.n	8007db6 <__cvt+0x8e>
 8007d92:	f898 3000 	ldrb.w	r3, [r8]
 8007d96:	2b30      	cmp	r3, #48	; 0x30
 8007d98:	d10a      	bne.n	8007db0 <__cvt+0x88>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	f7f8 fe99 	bl	8000ad8 <__aeabi_dcmpeq>
 8007da6:	b918      	cbnz	r0, 8007db0 <__cvt+0x88>
 8007da8:	f1c6 0601 	rsb	r6, r6, #1
 8007dac:	f8ca 6000 	str.w	r6, [sl]
 8007db0:	f8da 3000 	ldr.w	r3, [sl]
 8007db4:	4499      	add	r9, r3
 8007db6:	2200      	movs	r2, #0
 8007db8:	2300      	movs	r3, #0
 8007dba:	4620      	mov	r0, r4
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	f7f8 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dc2:	b938      	cbnz	r0, 8007dd4 <__cvt+0xac>
 8007dc4:	2230      	movs	r2, #48	; 0x30
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	454b      	cmp	r3, r9
 8007dca:	d205      	bcs.n	8007dd8 <__cvt+0xb0>
 8007dcc:	1c59      	adds	r1, r3, #1
 8007dce:	9103      	str	r1, [sp, #12]
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e7f8      	b.n	8007dc6 <__cvt+0x9e>
 8007dd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ddc:	eba3 0308 	sub.w	r3, r3, r8
 8007de0:	4640      	mov	r0, r8
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	b004      	add	sp, #16
 8007de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007dea <__exponent>:
 8007dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dec:	2900      	cmp	r1, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	bfba      	itte	lt
 8007df2:	4249      	neglt	r1, r1
 8007df4:	232d      	movlt	r3, #45	; 0x2d
 8007df6:	232b      	movge	r3, #43	; 0x2b
 8007df8:	2909      	cmp	r1, #9
 8007dfa:	f804 2b02 	strb.w	r2, [r4], #2
 8007dfe:	7043      	strb	r3, [r0, #1]
 8007e00:	dd20      	ble.n	8007e44 <__exponent+0x5a>
 8007e02:	f10d 0307 	add.w	r3, sp, #7
 8007e06:	461f      	mov	r7, r3
 8007e08:	260a      	movs	r6, #10
 8007e0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e0e:	fb06 1115 	mls	r1, r6, r5, r1
 8007e12:	3130      	adds	r1, #48	; 0x30
 8007e14:	2d09      	cmp	r5, #9
 8007e16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e1a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007e1e:	4629      	mov	r1, r5
 8007e20:	dc09      	bgt.n	8007e36 <__exponent+0x4c>
 8007e22:	3130      	adds	r1, #48	; 0x30
 8007e24:	3b02      	subs	r3, #2
 8007e26:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e2a:	42bb      	cmp	r3, r7
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	d304      	bcc.n	8007e3a <__exponent+0x50>
 8007e30:	1a10      	subs	r0, r2, r0
 8007e32:	b003      	add	sp, #12
 8007e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e36:	4613      	mov	r3, r2
 8007e38:	e7e7      	b.n	8007e0a <__exponent+0x20>
 8007e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3e:	f804 2b01 	strb.w	r2, [r4], #1
 8007e42:	e7f2      	b.n	8007e2a <__exponent+0x40>
 8007e44:	2330      	movs	r3, #48	; 0x30
 8007e46:	4419      	add	r1, r3
 8007e48:	7083      	strb	r3, [r0, #2]
 8007e4a:	1d02      	adds	r2, r0, #4
 8007e4c:	70c1      	strb	r1, [r0, #3]
 8007e4e:	e7ef      	b.n	8007e30 <__exponent+0x46>

08007e50 <_printf_float>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	b08d      	sub	sp, #52	; 0x34
 8007e56:	460c      	mov	r4, r1
 8007e58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	461f      	mov	r7, r3
 8007e60:	4605      	mov	r5, r0
 8007e62:	f002 fe11 	bl	800aa88 <_localeconv_r>
 8007e66:	6803      	ldr	r3, [r0, #0]
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7f8 f9b8 	bl	80001e0 <strlen>
 8007e70:	2300      	movs	r3, #0
 8007e72:	930a      	str	r3, [sp, #40]	; 0x28
 8007e74:	f8d8 3000 	ldr.w	r3, [r8]
 8007e78:	9005      	str	r0, [sp, #20]
 8007e7a:	3307      	adds	r3, #7
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e88:	f8d4 b000 	ldr.w	fp, [r4]
 8007e8c:	f8c8 2000 	str.w	r2, [r8]
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e98:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	4ba7      	ldr	r3, [pc, #668]	; (8008148 <_printf_float+0x2f8>)
 8007eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eb0:	f7f8 fe44 	bl	8000b3c <__aeabi_dcmpun>
 8007eb4:	bb70      	cbnz	r0, 8007f14 <_printf_float+0xc4>
 8007eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eba:	4ba3      	ldr	r3, [pc, #652]	; (8008148 <_printf_float+0x2f8>)
 8007ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ec0:	f7f8 fe1e 	bl	8000b00 <__aeabi_dcmple>
 8007ec4:	bb30      	cbnz	r0, 8007f14 <_printf_float+0xc4>
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4649      	mov	r1, r9
 8007ece:	f7f8 fe0d 	bl	8000aec <__aeabi_dcmplt>
 8007ed2:	b110      	cbz	r0, 8007eda <_printf_float+0x8a>
 8007ed4:	232d      	movs	r3, #45	; 0x2d
 8007ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eda:	4a9c      	ldr	r2, [pc, #624]	; (800814c <_printf_float+0x2fc>)
 8007edc:	4b9c      	ldr	r3, [pc, #624]	; (8008150 <_printf_float+0x300>)
 8007ede:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007ee2:	bf8c      	ite	hi
 8007ee4:	4690      	movhi	r8, r2
 8007ee6:	4698      	movls	r8, r3
 8007ee8:	2303      	movs	r3, #3
 8007eea:	f02b 0204 	bic.w	r2, fp, #4
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	6022      	str	r2, [r4, #0]
 8007ef2:	f04f 0900 	mov.w	r9, #0
 8007ef6:	9700      	str	r7, [sp, #0]
 8007ef8:	4633      	mov	r3, r6
 8007efa:	aa0b      	add	r2, sp, #44	; 0x2c
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 f9e6 	bl	80082d0 <_printf_common>
 8007f04:	3001      	adds	r0, #1
 8007f06:	f040 808d 	bne.w	8008024 <_printf_float+0x1d4>
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	b00d      	add	sp, #52	; 0x34
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	4642      	mov	r2, r8
 8007f16:	464b      	mov	r3, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fe0e 	bl	8000b3c <__aeabi_dcmpun>
 8007f20:	b110      	cbz	r0, 8007f28 <_printf_float+0xd8>
 8007f22:	4a8c      	ldr	r2, [pc, #560]	; (8008154 <_printf_float+0x304>)
 8007f24:	4b8c      	ldr	r3, [pc, #560]	; (8008158 <_printf_float+0x308>)
 8007f26:	e7da      	b.n	8007ede <_printf_float+0x8e>
 8007f28:	6861      	ldr	r1, [r4, #4]
 8007f2a:	1c4b      	adds	r3, r1, #1
 8007f2c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007f30:	a80a      	add	r0, sp, #40	; 0x28
 8007f32:	d13e      	bne.n	8007fb2 <_printf_float+0x162>
 8007f34:	2306      	movs	r3, #6
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f3e:	ab09      	add	r3, sp, #36	; 0x24
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	ec49 8b10 	vmov	d0, r8, r9
 8007f46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	f8cd a004 	str.w	sl, [sp, #4]
 8007f50:	6861      	ldr	r1, [r4, #4]
 8007f52:	4628      	mov	r0, r5
 8007f54:	f7ff fee8 	bl	8007d28 <__cvt>
 8007f58:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f5c:	2b47      	cmp	r3, #71	; 0x47
 8007f5e:	4680      	mov	r8, r0
 8007f60:	d109      	bne.n	8007f76 <_printf_float+0x126>
 8007f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f64:	1cd8      	adds	r0, r3, #3
 8007f66:	db02      	blt.n	8007f6e <_printf_float+0x11e>
 8007f68:	6862      	ldr	r2, [r4, #4]
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	dd47      	ble.n	8007ffe <_printf_float+0x1ae>
 8007f6e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f72:	fa5f fa8a 	uxtb.w	sl, sl
 8007f76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f7c:	d824      	bhi.n	8007fc8 <_printf_float+0x178>
 8007f7e:	3901      	subs	r1, #1
 8007f80:	4652      	mov	r2, sl
 8007f82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f86:	9109      	str	r1, [sp, #36]	; 0x24
 8007f88:	f7ff ff2f 	bl	8007dea <__exponent>
 8007f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f8e:	1813      	adds	r3, r2, r0
 8007f90:	2a01      	cmp	r2, #1
 8007f92:	4681      	mov	r9, r0
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	dc02      	bgt.n	8007f9e <_printf_float+0x14e>
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	07d1      	lsls	r1, r2, #31
 8007f9c:	d501      	bpl.n	8007fa2 <_printf_float+0x152>
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0a5      	beq.n	8007ef6 <_printf_float+0xa6>
 8007faa:	232d      	movs	r3, #45	; 0x2d
 8007fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb0:	e7a1      	b.n	8007ef6 <_printf_float+0xa6>
 8007fb2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007fb6:	f000 8177 	beq.w	80082a8 <_printf_float+0x458>
 8007fba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007fbe:	d1bb      	bne.n	8007f38 <_printf_float+0xe8>
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	d1b9      	bne.n	8007f38 <_printf_float+0xe8>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7b6      	b.n	8007f36 <_printf_float+0xe6>
 8007fc8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007fcc:	d119      	bne.n	8008002 <_printf_float+0x1b2>
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	dd0c      	ble.n	8007fee <_printf_float+0x19e>
 8007fd4:	6121      	str	r1, [r4, #16]
 8007fd6:	b913      	cbnz	r3, 8007fde <_printf_float+0x18e>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	07d2      	lsls	r2, r2, #31
 8007fdc:	d502      	bpl.n	8007fe4 <_printf_float+0x194>
 8007fde:	3301      	adds	r3, #1
 8007fe0:	440b      	add	r3, r1
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fe8:	f04f 0900 	mov.w	r9, #0
 8007fec:	e7d9      	b.n	8007fa2 <_printf_float+0x152>
 8007fee:	b913      	cbnz	r3, 8007ff6 <_printf_float+0x1a6>
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	07d0      	lsls	r0, r2, #31
 8007ff4:	d501      	bpl.n	8007ffa <_printf_float+0x1aa>
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	e7f3      	b.n	8007fe2 <_printf_float+0x192>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e7f1      	b.n	8007fe2 <_printf_float+0x192>
 8007ffe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008002:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008006:	4293      	cmp	r3, r2
 8008008:	db05      	blt.n	8008016 <_printf_float+0x1c6>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	6123      	str	r3, [r4, #16]
 800800e:	07d1      	lsls	r1, r2, #31
 8008010:	d5e8      	bpl.n	8007fe4 <_printf_float+0x194>
 8008012:	3301      	adds	r3, #1
 8008014:	e7e5      	b.n	8007fe2 <_printf_float+0x192>
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfd4      	ite	le
 800801a:	f1c3 0302 	rsble	r3, r3, #2
 800801e:	2301      	movgt	r3, #1
 8008020:	4413      	add	r3, r2
 8008022:	e7de      	b.n	8007fe2 <_printf_float+0x192>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	055a      	lsls	r2, r3, #21
 8008028:	d407      	bmi.n	800803a <_printf_float+0x1ea>
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	4642      	mov	r2, r8
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d12b      	bne.n	8008090 <_printf_float+0x240>
 8008038:	e767      	b.n	8007f0a <_printf_float+0xba>
 800803a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800803e:	f240 80dc 	bls.w	80081fa <_printf_float+0x3aa>
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800804a:	f7f8 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800804e:	2800      	cmp	r0, #0
 8008050:	d033      	beq.n	80080ba <_printf_float+0x26a>
 8008052:	2301      	movs	r3, #1
 8008054:	4a41      	ldr	r2, [pc, #260]	; (800815c <_printf_float+0x30c>)
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f af54 	beq.w	8007f0a <_printf_float+0xba>
 8008062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008066:	429a      	cmp	r2, r3
 8008068:	db02      	blt.n	8008070 <_printf_float+0x220>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	07d8      	lsls	r0, r3, #31
 800806e:	d50f      	bpl.n	8008090 <_printf_float+0x240>
 8008070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f af45 	beq.w	8007f0a <_printf_float+0xba>
 8008080:	f04f 0800 	mov.w	r8, #0
 8008084:	f104 091a 	add.w	r9, r4, #26
 8008088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808a:	3b01      	subs	r3, #1
 800808c:	4543      	cmp	r3, r8
 800808e:	dc09      	bgt.n	80080a4 <_printf_float+0x254>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	f100 8103 	bmi.w	800829e <_printf_float+0x44e>
 8008098:	68e0      	ldr	r0, [r4, #12]
 800809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809c:	4298      	cmp	r0, r3
 800809e:	bfb8      	it	lt
 80080a0:	4618      	movlt	r0, r3
 80080a2:	e734      	b.n	8007f0e <_printf_float+0xbe>
 80080a4:	2301      	movs	r3, #1
 80080a6:	464a      	mov	r2, r9
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f af2b 	beq.w	8007f0a <_printf_float+0xba>
 80080b4:	f108 0801 	add.w	r8, r8, #1
 80080b8:	e7e6      	b.n	8008088 <_printf_float+0x238>
 80080ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dc2b      	bgt.n	8008118 <_printf_float+0x2c8>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4a26      	ldr	r2, [pc, #152]	; (800815c <_printf_float+0x30c>)
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f af1d 	beq.w	8007f0a <_printf_float+0xba>
 80080d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d2:	b923      	cbnz	r3, 80080de <_printf_float+0x28e>
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	b913      	cbnz	r3, 80080de <_printf_float+0x28e>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	07d9      	lsls	r1, r3, #31
 80080dc:	d5d8      	bpl.n	8008090 <_printf_float+0x240>
 80080de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f af0e 	beq.w	8007f0a <_printf_float+0xba>
 80080ee:	f04f 0900 	mov.w	r9, #0
 80080f2:	f104 0a1a 	add.w	sl, r4, #26
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	425b      	negs	r3, r3
 80080fa:	454b      	cmp	r3, r9
 80080fc:	dc01      	bgt.n	8008102 <_printf_float+0x2b2>
 80080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008100:	e794      	b.n	800802c <_printf_float+0x1dc>
 8008102:	2301      	movs	r3, #1
 8008104:	4652      	mov	r2, sl
 8008106:	4631      	mov	r1, r6
 8008108:	4628      	mov	r0, r5
 800810a:	47b8      	blx	r7
 800810c:	3001      	adds	r0, #1
 800810e:	f43f aefc 	beq.w	8007f0a <_printf_float+0xba>
 8008112:	f109 0901 	add.w	r9, r9, #1
 8008116:	e7ee      	b.n	80080f6 <_printf_float+0x2a6>
 8008118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800811c:	429a      	cmp	r2, r3
 800811e:	bfa8      	it	ge
 8008120:	461a      	movge	r2, r3
 8008122:	2a00      	cmp	r2, #0
 8008124:	4691      	mov	r9, r2
 8008126:	dd07      	ble.n	8008138 <_printf_float+0x2e8>
 8008128:	4613      	mov	r3, r2
 800812a:	4631      	mov	r1, r6
 800812c:	4642      	mov	r2, r8
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f aee9 	beq.w	8007f0a <_printf_float+0xba>
 8008138:	f104 031a 	add.w	r3, r4, #26
 800813c:	f04f 0b00 	mov.w	fp, #0
 8008140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008144:	9306      	str	r3, [sp, #24]
 8008146:	e015      	b.n	8008174 <_printf_float+0x324>
 8008148:	7fefffff 	.word	0x7fefffff
 800814c:	0800b9fc 	.word	0x0800b9fc
 8008150:	0800b9f8 	.word	0x0800b9f8
 8008154:	0800ba04 	.word	0x0800ba04
 8008158:	0800ba00 	.word	0x0800ba00
 800815c:	0800ba08 	.word	0x0800ba08
 8008160:	2301      	movs	r3, #1
 8008162:	9a06      	ldr	r2, [sp, #24]
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f aecd 	beq.w	8007f0a <_printf_float+0xba>
 8008170:	f10b 0b01 	add.w	fp, fp, #1
 8008174:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008178:	ebaa 0309 	sub.w	r3, sl, r9
 800817c:	455b      	cmp	r3, fp
 800817e:	dcef      	bgt.n	8008160 <_printf_float+0x310>
 8008180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008184:	429a      	cmp	r2, r3
 8008186:	44d0      	add	r8, sl
 8008188:	db15      	blt.n	80081b6 <_printf_float+0x366>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	07da      	lsls	r2, r3, #31
 800818e:	d412      	bmi.n	80081b6 <_printf_float+0x366>
 8008190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008194:	eba3 020a 	sub.w	r2, r3, sl
 8008198:	eba3 0a01 	sub.w	sl, r3, r1
 800819c:	4592      	cmp	sl, r2
 800819e:	bfa8      	it	ge
 80081a0:	4692      	movge	sl, r2
 80081a2:	f1ba 0f00 	cmp.w	sl, #0
 80081a6:	dc0e      	bgt.n	80081c6 <_printf_float+0x376>
 80081a8:	f04f 0800 	mov.w	r8, #0
 80081ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081b0:	f104 091a 	add.w	r9, r4, #26
 80081b4:	e019      	b.n	80081ea <_printf_float+0x39a>
 80081b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	d1e5      	bne.n	8008190 <_printf_float+0x340>
 80081c4:	e6a1      	b.n	8007f0a <_printf_float+0xba>
 80081c6:	4653      	mov	r3, sl
 80081c8:	4642      	mov	r2, r8
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	d1e9      	bne.n	80081a8 <_printf_float+0x358>
 80081d4:	e699      	b.n	8007f0a <_printf_float+0xba>
 80081d6:	2301      	movs	r3, #1
 80081d8:	464a      	mov	r2, r9
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f ae92 	beq.w	8007f0a <_printf_float+0xba>
 80081e6:	f108 0801 	add.w	r8, r8, #1
 80081ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	eba3 030a 	sub.w	r3, r3, sl
 80081f4:	4543      	cmp	r3, r8
 80081f6:	dcee      	bgt.n	80081d6 <_printf_float+0x386>
 80081f8:	e74a      	b.n	8008090 <_printf_float+0x240>
 80081fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fc:	2a01      	cmp	r2, #1
 80081fe:	dc01      	bgt.n	8008204 <_printf_float+0x3b4>
 8008200:	07db      	lsls	r3, r3, #31
 8008202:	d53a      	bpl.n	800827a <_printf_float+0x42a>
 8008204:	2301      	movs	r3, #1
 8008206:	4642      	mov	r2, r8
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f ae7b 	beq.w	8007f0a <_printf_float+0xba>
 8008214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f108 0801 	add.w	r8, r8, #1
 8008224:	f43f ae71 	beq.w	8007f0a <_printf_float+0xba>
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	2200      	movs	r2, #0
 800822c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008234:	2300      	movs	r3, #0
 8008236:	f7f8 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800823a:	b9c8      	cbnz	r0, 8008270 <_printf_float+0x420>
 800823c:	4653      	mov	r3, sl
 800823e:	4642      	mov	r2, r8
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	47b8      	blx	r7
 8008246:	3001      	adds	r0, #1
 8008248:	d10e      	bne.n	8008268 <_printf_float+0x418>
 800824a:	e65e      	b.n	8007f0a <_printf_float+0xba>
 800824c:	2301      	movs	r3, #1
 800824e:	4652      	mov	r2, sl
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	f43f ae57 	beq.w	8007f0a <_printf_float+0xba>
 800825c:	f108 0801 	add.w	r8, r8, #1
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	3b01      	subs	r3, #1
 8008264:	4543      	cmp	r3, r8
 8008266:	dcf1      	bgt.n	800824c <_printf_float+0x3fc>
 8008268:	464b      	mov	r3, r9
 800826a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800826e:	e6de      	b.n	800802e <_printf_float+0x1de>
 8008270:	f04f 0800 	mov.w	r8, #0
 8008274:	f104 0a1a 	add.w	sl, r4, #26
 8008278:	e7f2      	b.n	8008260 <_printf_float+0x410>
 800827a:	2301      	movs	r3, #1
 800827c:	e7df      	b.n	800823e <_printf_float+0x3ee>
 800827e:	2301      	movs	r3, #1
 8008280:	464a      	mov	r2, r9
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae3e 	beq.w	8007f0a <_printf_float+0xba>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	4543      	cmp	r3, r8
 800829a:	dcf0      	bgt.n	800827e <_printf_float+0x42e>
 800829c:	e6fc      	b.n	8008098 <_printf_float+0x248>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f104 0919 	add.w	r9, r4, #25
 80082a6:	e7f4      	b.n	8008292 <_printf_float+0x442>
 80082a8:	2900      	cmp	r1, #0
 80082aa:	f43f ae8b 	beq.w	8007fc4 <_printf_float+0x174>
 80082ae:	2300      	movs	r3, #0
 80082b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80082b4:	ab09      	add	r3, sp, #36	; 0x24
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	ec49 8b10 	vmov	d0, r8, r9
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	f8cd a004 	str.w	sl, [sp, #4]
 80082c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082c6:	4628      	mov	r0, r5
 80082c8:	f7ff fd2e 	bl	8007d28 <__cvt>
 80082cc:	4680      	mov	r8, r0
 80082ce:	e648      	b.n	8007f62 <_printf_float+0x112>

080082d0 <_printf_common>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	4691      	mov	r9, r2
 80082d6:	461f      	mov	r7, r3
 80082d8:	688a      	ldr	r2, [r1, #8]
 80082da:	690b      	ldr	r3, [r1, #16]
 80082dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bfb8      	it	lt
 80082e4:	4613      	movlt	r3, r2
 80082e6:	f8c9 3000 	str.w	r3, [r9]
 80082ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	b112      	cbz	r2, 80082fa <_printf_common+0x2a>
 80082f4:	3301      	adds	r3, #1
 80082f6:	f8c9 3000 	str.w	r3, [r9]
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	0699      	lsls	r1, r3, #26
 80082fe:	bf42      	ittt	mi
 8008300:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008304:	3302      	addmi	r3, #2
 8008306:	f8c9 3000 	strmi.w	r3, [r9]
 800830a:	6825      	ldr	r5, [r4, #0]
 800830c:	f015 0506 	ands.w	r5, r5, #6
 8008310:	d107      	bne.n	8008322 <_printf_common+0x52>
 8008312:	f104 0a19 	add.w	sl, r4, #25
 8008316:	68e3      	ldr	r3, [r4, #12]
 8008318:	f8d9 2000 	ldr.w	r2, [r9]
 800831c:	1a9b      	subs	r3, r3, r2
 800831e:	42ab      	cmp	r3, r5
 8008320:	dc28      	bgt.n	8008374 <_printf_common+0xa4>
 8008322:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	3300      	adds	r3, #0
 800832a:	bf18      	it	ne
 800832c:	2301      	movne	r3, #1
 800832e:	0692      	lsls	r2, r2, #26
 8008330:	d42d      	bmi.n	800838e <_printf_common+0xbe>
 8008332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008336:	4639      	mov	r1, r7
 8008338:	4630      	mov	r0, r6
 800833a:	47c0      	blx	r8
 800833c:	3001      	adds	r0, #1
 800833e:	d020      	beq.n	8008382 <_printf_common+0xb2>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	68e5      	ldr	r5, [r4, #12]
 8008344:	f8d9 2000 	ldr.w	r2, [r9]
 8008348:	f003 0306 	and.w	r3, r3, #6
 800834c:	2b04      	cmp	r3, #4
 800834e:	bf08      	it	eq
 8008350:	1aad      	subeq	r5, r5, r2
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	6922      	ldr	r2, [r4, #16]
 8008356:	bf0c      	ite	eq
 8008358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800835c:	2500      	movne	r5, #0
 800835e:	4293      	cmp	r3, r2
 8008360:	bfc4      	itt	gt
 8008362:	1a9b      	subgt	r3, r3, r2
 8008364:	18ed      	addgt	r5, r5, r3
 8008366:	f04f 0900 	mov.w	r9, #0
 800836a:	341a      	adds	r4, #26
 800836c:	454d      	cmp	r5, r9
 800836e:	d11a      	bne.n	80083a6 <_printf_common+0xd6>
 8008370:	2000      	movs	r0, #0
 8008372:	e008      	b.n	8008386 <_printf_common+0xb6>
 8008374:	2301      	movs	r3, #1
 8008376:	4652      	mov	r2, sl
 8008378:	4639      	mov	r1, r7
 800837a:	4630      	mov	r0, r6
 800837c:	47c0      	blx	r8
 800837e:	3001      	adds	r0, #1
 8008380:	d103      	bne.n	800838a <_printf_common+0xba>
 8008382:	f04f 30ff 	mov.w	r0, #4294967295
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	3501      	adds	r5, #1
 800838c:	e7c3      	b.n	8008316 <_printf_common+0x46>
 800838e:	18e1      	adds	r1, r4, r3
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	2030      	movs	r0, #48	; 0x30
 8008394:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008398:	4422      	add	r2, r4
 800839a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800839e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083a2:	3302      	adds	r3, #2
 80083a4:	e7c5      	b.n	8008332 <_printf_common+0x62>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4622      	mov	r2, r4
 80083aa:	4639      	mov	r1, r7
 80083ac:	4630      	mov	r0, r6
 80083ae:	47c0      	blx	r8
 80083b0:	3001      	adds	r0, #1
 80083b2:	d0e6      	beq.n	8008382 <_printf_common+0xb2>
 80083b4:	f109 0901 	add.w	r9, r9, #1
 80083b8:	e7d8      	b.n	800836c <_printf_common+0x9c>
	...

080083bc <_printf_i>:
 80083bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80083c4:	460c      	mov	r4, r1
 80083c6:	7e09      	ldrb	r1, [r1, #24]
 80083c8:	b085      	sub	sp, #20
 80083ca:	296e      	cmp	r1, #110	; 0x6e
 80083cc:	4617      	mov	r7, r2
 80083ce:	4606      	mov	r6, r0
 80083d0:	4698      	mov	r8, r3
 80083d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083d4:	f000 80b3 	beq.w	800853e <_printf_i+0x182>
 80083d8:	d822      	bhi.n	8008420 <_printf_i+0x64>
 80083da:	2963      	cmp	r1, #99	; 0x63
 80083dc:	d036      	beq.n	800844c <_printf_i+0x90>
 80083de:	d80a      	bhi.n	80083f6 <_printf_i+0x3a>
 80083e0:	2900      	cmp	r1, #0
 80083e2:	f000 80b9 	beq.w	8008558 <_printf_i+0x19c>
 80083e6:	2958      	cmp	r1, #88	; 0x58
 80083e8:	f000 8083 	beq.w	80084f2 <_printf_i+0x136>
 80083ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80083f4:	e032      	b.n	800845c <_printf_i+0xa0>
 80083f6:	2964      	cmp	r1, #100	; 0x64
 80083f8:	d001      	beq.n	80083fe <_printf_i+0x42>
 80083fa:	2969      	cmp	r1, #105	; 0x69
 80083fc:	d1f6      	bne.n	80083ec <_printf_i+0x30>
 80083fe:	6820      	ldr	r0, [r4, #0]
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	0605      	lsls	r5, r0, #24
 8008404:	f103 0104 	add.w	r1, r3, #4
 8008408:	d52a      	bpl.n	8008460 <_printf_i+0xa4>
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6011      	str	r1, [r2, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	da03      	bge.n	800841a <_printf_i+0x5e>
 8008412:	222d      	movs	r2, #45	; 0x2d
 8008414:	425b      	negs	r3, r3
 8008416:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800841a:	486f      	ldr	r0, [pc, #444]	; (80085d8 <_printf_i+0x21c>)
 800841c:	220a      	movs	r2, #10
 800841e:	e039      	b.n	8008494 <_printf_i+0xd8>
 8008420:	2973      	cmp	r1, #115	; 0x73
 8008422:	f000 809d 	beq.w	8008560 <_printf_i+0x1a4>
 8008426:	d808      	bhi.n	800843a <_printf_i+0x7e>
 8008428:	296f      	cmp	r1, #111	; 0x6f
 800842a:	d020      	beq.n	800846e <_printf_i+0xb2>
 800842c:	2970      	cmp	r1, #112	; 0x70
 800842e:	d1dd      	bne.n	80083ec <_printf_i+0x30>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	f043 0320 	orr.w	r3, r3, #32
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	e003      	b.n	8008442 <_printf_i+0x86>
 800843a:	2975      	cmp	r1, #117	; 0x75
 800843c:	d017      	beq.n	800846e <_printf_i+0xb2>
 800843e:	2978      	cmp	r1, #120	; 0x78
 8008440:	d1d4      	bne.n	80083ec <_printf_i+0x30>
 8008442:	2378      	movs	r3, #120	; 0x78
 8008444:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008448:	4864      	ldr	r0, [pc, #400]	; (80085dc <_printf_i+0x220>)
 800844a:	e055      	b.n	80084f8 <_printf_i+0x13c>
 800844c:	6813      	ldr	r3, [r2, #0]
 800844e:	1d19      	adds	r1, r3, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6011      	str	r1, [r2, #0]
 8008454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800845c:	2301      	movs	r3, #1
 800845e:	e08c      	b.n	800857a <_printf_i+0x1be>
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6011      	str	r1, [r2, #0]
 8008464:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008468:	bf18      	it	ne
 800846a:	b21b      	sxthne	r3, r3
 800846c:	e7cf      	b.n	800840e <_printf_i+0x52>
 800846e:	6813      	ldr	r3, [r2, #0]
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	1d18      	adds	r0, r3, #4
 8008474:	6010      	str	r0, [r2, #0]
 8008476:	0628      	lsls	r0, r5, #24
 8008478:	d501      	bpl.n	800847e <_printf_i+0xc2>
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	e002      	b.n	8008484 <_printf_i+0xc8>
 800847e:	0668      	lsls	r0, r5, #25
 8008480:	d5fb      	bpl.n	800847a <_printf_i+0xbe>
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	4854      	ldr	r0, [pc, #336]	; (80085d8 <_printf_i+0x21c>)
 8008486:	296f      	cmp	r1, #111	; 0x6f
 8008488:	bf14      	ite	ne
 800848a:	220a      	movne	r2, #10
 800848c:	2208      	moveq	r2, #8
 800848e:	2100      	movs	r1, #0
 8008490:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008494:	6865      	ldr	r5, [r4, #4]
 8008496:	60a5      	str	r5, [r4, #8]
 8008498:	2d00      	cmp	r5, #0
 800849a:	f2c0 8095 	blt.w	80085c8 <_printf_i+0x20c>
 800849e:	6821      	ldr	r1, [r4, #0]
 80084a0:	f021 0104 	bic.w	r1, r1, #4
 80084a4:	6021      	str	r1, [r4, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d13d      	bne.n	8008526 <_printf_i+0x16a>
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	f040 808e 	bne.w	80085cc <_printf_i+0x210>
 80084b0:	4665      	mov	r5, ip
 80084b2:	2a08      	cmp	r2, #8
 80084b4:	d10b      	bne.n	80084ce <_printf_i+0x112>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	07db      	lsls	r3, r3, #31
 80084ba:	d508      	bpl.n	80084ce <_printf_i+0x112>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	6862      	ldr	r2, [r4, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bfde      	ittt	le
 80084c4:	2330      	movle	r3, #48	; 0x30
 80084c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084ce:	ebac 0305 	sub.w	r3, ip, r5
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	f8cd 8000 	str.w	r8, [sp]
 80084d8:	463b      	mov	r3, r7
 80084da:	aa03      	add	r2, sp, #12
 80084dc:	4621      	mov	r1, r4
 80084de:	4630      	mov	r0, r6
 80084e0:	f7ff fef6 	bl	80082d0 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d14d      	bne.n	8008584 <_printf_i+0x1c8>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b005      	add	sp, #20
 80084ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084f2:	4839      	ldr	r0, [pc, #228]	; (80085d8 <_printf_i+0x21c>)
 80084f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80084f8:	6813      	ldr	r3, [r2, #0]
 80084fa:	6821      	ldr	r1, [r4, #0]
 80084fc:	1d1d      	adds	r5, r3, #4
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6015      	str	r5, [r2, #0]
 8008502:	060a      	lsls	r2, r1, #24
 8008504:	d50b      	bpl.n	800851e <_printf_i+0x162>
 8008506:	07ca      	lsls	r2, r1, #31
 8008508:	bf44      	itt	mi
 800850a:	f041 0120 	orrmi.w	r1, r1, #32
 800850e:	6021      	strmi	r1, [r4, #0]
 8008510:	b91b      	cbnz	r3, 800851a <_printf_i+0x15e>
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	f022 0220 	bic.w	r2, r2, #32
 8008518:	6022      	str	r2, [r4, #0]
 800851a:	2210      	movs	r2, #16
 800851c:	e7b7      	b.n	800848e <_printf_i+0xd2>
 800851e:	064d      	lsls	r5, r1, #25
 8008520:	bf48      	it	mi
 8008522:	b29b      	uxthmi	r3, r3
 8008524:	e7ef      	b.n	8008506 <_printf_i+0x14a>
 8008526:	4665      	mov	r5, ip
 8008528:	fbb3 f1f2 	udiv	r1, r3, r2
 800852c:	fb02 3311 	mls	r3, r2, r1, r3
 8008530:	5cc3      	ldrb	r3, [r0, r3]
 8008532:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008536:	460b      	mov	r3, r1
 8008538:	2900      	cmp	r1, #0
 800853a:	d1f5      	bne.n	8008528 <_printf_i+0x16c>
 800853c:	e7b9      	b.n	80084b2 <_printf_i+0xf6>
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	6825      	ldr	r5, [r4, #0]
 8008542:	6961      	ldr	r1, [r4, #20]
 8008544:	1d18      	adds	r0, r3, #4
 8008546:	6010      	str	r0, [r2, #0]
 8008548:	0628      	lsls	r0, r5, #24
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	d501      	bpl.n	8008552 <_printf_i+0x196>
 800854e:	6019      	str	r1, [r3, #0]
 8008550:	e002      	b.n	8008558 <_printf_i+0x19c>
 8008552:	066a      	lsls	r2, r5, #25
 8008554:	d5fb      	bpl.n	800854e <_printf_i+0x192>
 8008556:	8019      	strh	r1, [r3, #0]
 8008558:	2300      	movs	r3, #0
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	4665      	mov	r5, ip
 800855e:	e7b9      	b.n	80084d4 <_printf_i+0x118>
 8008560:	6813      	ldr	r3, [r2, #0]
 8008562:	1d19      	adds	r1, r3, #4
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	681d      	ldr	r5, [r3, #0]
 8008568:	6862      	ldr	r2, [r4, #4]
 800856a:	2100      	movs	r1, #0
 800856c:	4628      	mov	r0, r5
 800856e:	f7f7 fe3f 	bl	80001f0 <memchr>
 8008572:	b108      	cbz	r0, 8008578 <_printf_i+0x1bc>
 8008574:	1b40      	subs	r0, r0, r5
 8008576:	6060      	str	r0, [r4, #4]
 8008578:	6863      	ldr	r3, [r4, #4]
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	2300      	movs	r3, #0
 800857e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008582:	e7a7      	b.n	80084d4 <_printf_i+0x118>
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	462a      	mov	r2, r5
 8008588:	4639      	mov	r1, r7
 800858a:	4630      	mov	r0, r6
 800858c:	47c0      	blx	r8
 800858e:	3001      	adds	r0, #1
 8008590:	d0aa      	beq.n	80084e8 <_printf_i+0x12c>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	079b      	lsls	r3, r3, #30
 8008596:	d413      	bmi.n	80085c0 <_printf_i+0x204>
 8008598:	68e0      	ldr	r0, [r4, #12]
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	4298      	cmp	r0, r3
 800859e:	bfb8      	it	lt
 80085a0:	4618      	movlt	r0, r3
 80085a2:	e7a3      	b.n	80084ec <_printf_i+0x130>
 80085a4:	2301      	movs	r3, #1
 80085a6:	464a      	mov	r2, r9
 80085a8:	4639      	mov	r1, r7
 80085aa:	4630      	mov	r0, r6
 80085ac:	47c0      	blx	r8
 80085ae:	3001      	adds	r0, #1
 80085b0:	d09a      	beq.n	80084e8 <_printf_i+0x12c>
 80085b2:	3501      	adds	r5, #1
 80085b4:	68e3      	ldr	r3, [r4, #12]
 80085b6:	9a03      	ldr	r2, [sp, #12]
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	42ab      	cmp	r3, r5
 80085bc:	dcf2      	bgt.n	80085a4 <_printf_i+0x1e8>
 80085be:	e7eb      	b.n	8008598 <_printf_i+0x1dc>
 80085c0:	2500      	movs	r5, #0
 80085c2:	f104 0919 	add.w	r9, r4, #25
 80085c6:	e7f5      	b.n	80085b4 <_printf_i+0x1f8>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1ac      	bne.n	8008526 <_printf_i+0x16a>
 80085cc:	7803      	ldrb	r3, [r0, #0]
 80085ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085d6:	e76c      	b.n	80084b2 <_printf_i+0xf6>
 80085d8:	0800ba0a 	.word	0x0800ba0a
 80085dc:	0800ba1b 	.word	0x0800ba1b

080085e0 <_scanf_float>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	469a      	mov	sl, r3
 80085e6:	688b      	ldr	r3, [r1, #8]
 80085e8:	4616      	mov	r6, r2
 80085ea:	1e5a      	subs	r2, r3, #1
 80085ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085f0:	b087      	sub	sp, #28
 80085f2:	bf83      	ittte	hi
 80085f4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80085f8:	189b      	addhi	r3, r3, r2
 80085fa:	9301      	strhi	r3, [sp, #4]
 80085fc:	2300      	movls	r3, #0
 80085fe:	bf86      	itte	hi
 8008600:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008604:	608b      	strhi	r3, [r1, #8]
 8008606:	9301      	strls	r3, [sp, #4]
 8008608:	680b      	ldr	r3, [r1, #0]
 800860a:	4688      	mov	r8, r1
 800860c:	f04f 0b00 	mov.w	fp, #0
 8008610:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008614:	f848 3b1c 	str.w	r3, [r8], #28
 8008618:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800861c:	4607      	mov	r7, r0
 800861e:	460c      	mov	r4, r1
 8008620:	4645      	mov	r5, r8
 8008622:	465a      	mov	r2, fp
 8008624:	46d9      	mov	r9, fp
 8008626:	f8cd b008 	str.w	fp, [sp, #8]
 800862a:	68a1      	ldr	r1, [r4, #8]
 800862c:	b181      	cbz	r1, 8008650 <_scanf_float+0x70>
 800862e:	6833      	ldr	r3, [r6, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b49      	cmp	r3, #73	; 0x49
 8008634:	d071      	beq.n	800871a <_scanf_float+0x13a>
 8008636:	d84d      	bhi.n	80086d4 <_scanf_float+0xf4>
 8008638:	2b39      	cmp	r3, #57	; 0x39
 800863a:	d840      	bhi.n	80086be <_scanf_float+0xde>
 800863c:	2b31      	cmp	r3, #49	; 0x31
 800863e:	f080 8088 	bcs.w	8008752 <_scanf_float+0x172>
 8008642:	2b2d      	cmp	r3, #45	; 0x2d
 8008644:	f000 8090 	beq.w	8008768 <_scanf_float+0x188>
 8008648:	d815      	bhi.n	8008676 <_scanf_float+0x96>
 800864a:	2b2b      	cmp	r3, #43	; 0x2b
 800864c:	f000 808c 	beq.w	8008768 <_scanf_float+0x188>
 8008650:	f1b9 0f00 	cmp.w	r9, #0
 8008654:	d003      	beq.n	800865e <_scanf_float+0x7e>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	3a01      	subs	r2, #1
 8008660:	2a01      	cmp	r2, #1
 8008662:	f200 80ea 	bhi.w	800883a <_scanf_float+0x25a>
 8008666:	4545      	cmp	r5, r8
 8008668:	f200 80dc 	bhi.w	8008824 <_scanf_float+0x244>
 800866c:	2601      	movs	r6, #1
 800866e:	4630      	mov	r0, r6
 8008670:	b007      	add	sp, #28
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	2b2e      	cmp	r3, #46	; 0x2e
 8008678:	f000 809f 	beq.w	80087ba <_scanf_float+0x1da>
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d1e7      	bne.n	8008650 <_scanf_float+0x70>
 8008680:	6820      	ldr	r0, [r4, #0]
 8008682:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008686:	d064      	beq.n	8008752 <_scanf_float+0x172>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800868e:	6020      	str	r0, [r4, #0]
 8008690:	f109 0901 	add.w	r9, r9, #1
 8008694:	b11b      	cbz	r3, 800869e <_scanf_float+0xbe>
 8008696:	3b01      	subs	r3, #1
 8008698:	3101      	adds	r1, #1
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	60a1      	str	r1, [r4, #8]
 800869e:	68a3      	ldr	r3, [r4, #8]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	3301      	adds	r3, #1
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	6873      	ldr	r3, [r6, #4]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	6073      	str	r3, [r6, #4]
 80086b2:	f340 80ac 	ble.w	800880e <_scanf_float+0x22e>
 80086b6:	6833      	ldr	r3, [r6, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	e7b5      	b.n	800862a <_scanf_float+0x4a>
 80086be:	2b45      	cmp	r3, #69	; 0x45
 80086c0:	f000 8085 	beq.w	80087ce <_scanf_float+0x1ee>
 80086c4:	2b46      	cmp	r3, #70	; 0x46
 80086c6:	d06a      	beq.n	800879e <_scanf_float+0x1be>
 80086c8:	2b41      	cmp	r3, #65	; 0x41
 80086ca:	d1c1      	bne.n	8008650 <_scanf_float+0x70>
 80086cc:	2a01      	cmp	r2, #1
 80086ce:	d1bf      	bne.n	8008650 <_scanf_float+0x70>
 80086d0:	2202      	movs	r2, #2
 80086d2:	e046      	b.n	8008762 <_scanf_float+0x182>
 80086d4:	2b65      	cmp	r3, #101	; 0x65
 80086d6:	d07a      	beq.n	80087ce <_scanf_float+0x1ee>
 80086d8:	d818      	bhi.n	800870c <_scanf_float+0x12c>
 80086da:	2b54      	cmp	r3, #84	; 0x54
 80086dc:	d066      	beq.n	80087ac <_scanf_float+0x1cc>
 80086de:	d811      	bhi.n	8008704 <_scanf_float+0x124>
 80086e0:	2b4e      	cmp	r3, #78	; 0x4e
 80086e2:	d1b5      	bne.n	8008650 <_scanf_float+0x70>
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	d146      	bne.n	8008776 <_scanf_float+0x196>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	d145      	bne.n	800877a <_scanf_float+0x19a>
 80086ee:	6821      	ldr	r1, [r4, #0]
 80086f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80086f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80086f8:	d13f      	bne.n	800877a <_scanf_float+0x19a>
 80086fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80086fe:	6021      	str	r1, [r4, #0]
 8008700:	2201      	movs	r2, #1
 8008702:	e02e      	b.n	8008762 <_scanf_float+0x182>
 8008704:	2b59      	cmp	r3, #89	; 0x59
 8008706:	d01e      	beq.n	8008746 <_scanf_float+0x166>
 8008708:	2b61      	cmp	r3, #97	; 0x61
 800870a:	e7de      	b.n	80086ca <_scanf_float+0xea>
 800870c:	2b6e      	cmp	r3, #110	; 0x6e
 800870e:	d0e9      	beq.n	80086e4 <_scanf_float+0x104>
 8008710:	d815      	bhi.n	800873e <_scanf_float+0x15e>
 8008712:	2b66      	cmp	r3, #102	; 0x66
 8008714:	d043      	beq.n	800879e <_scanf_float+0x1be>
 8008716:	2b69      	cmp	r3, #105	; 0x69
 8008718:	d19a      	bne.n	8008650 <_scanf_float+0x70>
 800871a:	f1bb 0f00 	cmp.w	fp, #0
 800871e:	d138      	bne.n	8008792 <_scanf_float+0x1b2>
 8008720:	f1b9 0f00 	cmp.w	r9, #0
 8008724:	d197      	bne.n	8008656 <_scanf_float+0x76>
 8008726:	6821      	ldr	r1, [r4, #0]
 8008728:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800872c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008730:	d195      	bne.n	800865e <_scanf_float+0x7e>
 8008732:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008736:	6021      	str	r1, [r4, #0]
 8008738:	f04f 0b01 	mov.w	fp, #1
 800873c:	e011      	b.n	8008762 <_scanf_float+0x182>
 800873e:	2b74      	cmp	r3, #116	; 0x74
 8008740:	d034      	beq.n	80087ac <_scanf_float+0x1cc>
 8008742:	2b79      	cmp	r3, #121	; 0x79
 8008744:	d184      	bne.n	8008650 <_scanf_float+0x70>
 8008746:	f1bb 0f07 	cmp.w	fp, #7
 800874a:	d181      	bne.n	8008650 <_scanf_float+0x70>
 800874c:	f04f 0b08 	mov.w	fp, #8
 8008750:	e007      	b.n	8008762 <_scanf_float+0x182>
 8008752:	eb12 0f0b 	cmn.w	r2, fp
 8008756:	f47f af7b 	bne.w	8008650 <_scanf_float+0x70>
 800875a:	6821      	ldr	r1, [r4, #0]
 800875c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008760:	6021      	str	r1, [r4, #0]
 8008762:	702b      	strb	r3, [r5, #0]
 8008764:	3501      	adds	r5, #1
 8008766:	e79a      	b.n	800869e <_scanf_float+0xbe>
 8008768:	6821      	ldr	r1, [r4, #0]
 800876a:	0608      	lsls	r0, r1, #24
 800876c:	f57f af70 	bpl.w	8008650 <_scanf_float+0x70>
 8008770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008774:	e7f4      	b.n	8008760 <_scanf_float+0x180>
 8008776:	2a02      	cmp	r2, #2
 8008778:	d047      	beq.n	800880a <_scanf_float+0x22a>
 800877a:	f1bb 0f01 	cmp.w	fp, #1
 800877e:	d003      	beq.n	8008788 <_scanf_float+0x1a8>
 8008780:	f1bb 0f04 	cmp.w	fp, #4
 8008784:	f47f af64 	bne.w	8008650 <_scanf_float+0x70>
 8008788:	f10b 0b01 	add.w	fp, fp, #1
 800878c:	fa5f fb8b 	uxtb.w	fp, fp
 8008790:	e7e7      	b.n	8008762 <_scanf_float+0x182>
 8008792:	f1bb 0f03 	cmp.w	fp, #3
 8008796:	d0f7      	beq.n	8008788 <_scanf_float+0x1a8>
 8008798:	f1bb 0f05 	cmp.w	fp, #5
 800879c:	e7f2      	b.n	8008784 <_scanf_float+0x1a4>
 800879e:	f1bb 0f02 	cmp.w	fp, #2
 80087a2:	f47f af55 	bne.w	8008650 <_scanf_float+0x70>
 80087a6:	f04f 0b03 	mov.w	fp, #3
 80087aa:	e7da      	b.n	8008762 <_scanf_float+0x182>
 80087ac:	f1bb 0f06 	cmp.w	fp, #6
 80087b0:	f47f af4e 	bne.w	8008650 <_scanf_float+0x70>
 80087b4:	f04f 0b07 	mov.w	fp, #7
 80087b8:	e7d3      	b.n	8008762 <_scanf_float+0x182>
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	0588      	lsls	r0, r1, #22
 80087be:	f57f af47 	bpl.w	8008650 <_scanf_float+0x70>
 80087c2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80087c6:	6021      	str	r1, [r4, #0]
 80087c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80087cc:	e7c9      	b.n	8008762 <_scanf_float+0x182>
 80087ce:	6821      	ldr	r1, [r4, #0]
 80087d0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80087d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80087d8:	d006      	beq.n	80087e8 <_scanf_float+0x208>
 80087da:	0548      	lsls	r0, r1, #21
 80087dc:	f57f af38 	bpl.w	8008650 <_scanf_float+0x70>
 80087e0:	f1b9 0f00 	cmp.w	r9, #0
 80087e4:	f43f af3b 	beq.w	800865e <_scanf_float+0x7e>
 80087e8:	0588      	lsls	r0, r1, #22
 80087ea:	bf58      	it	pl
 80087ec:	9802      	ldrpl	r0, [sp, #8]
 80087ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80087f2:	bf58      	it	pl
 80087f4:	eba9 0000 	subpl.w	r0, r9, r0
 80087f8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80087fc:	bf58      	it	pl
 80087fe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008802:	6021      	str	r1, [r4, #0]
 8008804:	f04f 0900 	mov.w	r9, #0
 8008808:	e7ab      	b.n	8008762 <_scanf_float+0x182>
 800880a:	2203      	movs	r2, #3
 800880c:	e7a9      	b.n	8008762 <_scanf_float+0x182>
 800880e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008812:	9205      	str	r2, [sp, #20]
 8008814:	4631      	mov	r1, r6
 8008816:	4638      	mov	r0, r7
 8008818:	4798      	blx	r3
 800881a:	9a05      	ldr	r2, [sp, #20]
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f af04 	beq.w	800862a <_scanf_float+0x4a>
 8008822:	e715      	b.n	8008650 <_scanf_float+0x70>
 8008824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008828:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800882c:	4632      	mov	r2, r6
 800882e:	4638      	mov	r0, r7
 8008830:	4798      	blx	r3
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	3b01      	subs	r3, #1
 8008836:	6123      	str	r3, [r4, #16]
 8008838:	e715      	b.n	8008666 <_scanf_float+0x86>
 800883a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800883e:	2b06      	cmp	r3, #6
 8008840:	d80a      	bhi.n	8008858 <_scanf_float+0x278>
 8008842:	f1bb 0f02 	cmp.w	fp, #2
 8008846:	d968      	bls.n	800891a <_scanf_float+0x33a>
 8008848:	f1ab 0b03 	sub.w	fp, fp, #3
 800884c:	fa5f fb8b 	uxtb.w	fp, fp
 8008850:	eba5 0b0b 	sub.w	fp, r5, fp
 8008854:	455d      	cmp	r5, fp
 8008856:	d14b      	bne.n	80088f0 <_scanf_float+0x310>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	05da      	lsls	r2, r3, #23
 800885c:	d51f      	bpl.n	800889e <_scanf_float+0x2be>
 800885e:	055b      	lsls	r3, r3, #21
 8008860:	d468      	bmi.n	8008934 <_scanf_float+0x354>
 8008862:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	2965      	cmp	r1, #101	; 0x65
 800886a:	f103 33ff 	add.w	r3, r3, #4294967295
 800886e:	f105 3bff 	add.w	fp, r5, #4294967295
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	d00d      	beq.n	8008892 <_scanf_float+0x2b2>
 8008876:	2945      	cmp	r1, #69	; 0x45
 8008878:	d00b      	beq.n	8008892 <_scanf_float+0x2b2>
 800887a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800887e:	4632      	mov	r2, r6
 8008880:	4638      	mov	r0, r7
 8008882:	4798      	blx	r3
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800888a:	3b01      	subs	r3, #1
 800888c:	f1a5 0b02 	sub.w	fp, r5, #2
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008896:	4632      	mov	r2, r6
 8008898:	4638      	mov	r0, r7
 800889a:	4798      	blx	r3
 800889c:	465d      	mov	r5, fp
 800889e:	6826      	ldr	r6, [r4, #0]
 80088a0:	f016 0610 	ands.w	r6, r6, #16
 80088a4:	d17a      	bne.n	800899c <_scanf_float+0x3bc>
 80088a6:	702e      	strb	r6, [r5, #0]
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b2:	d142      	bne.n	800893a <_scanf_float+0x35a>
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	eba9 0303 	sub.w	r3, r9, r3
 80088ba:	425a      	negs	r2, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d149      	bne.n	8008954 <_scanf_float+0x374>
 80088c0:	2200      	movs	r2, #0
 80088c2:	4641      	mov	r1, r8
 80088c4:	4638      	mov	r0, r7
 80088c6:	f000 febb 	bl	8009640 <_strtod_r>
 80088ca:	6825      	ldr	r5, [r4, #0]
 80088cc:	f8da 3000 	ldr.w	r3, [sl]
 80088d0:	f015 0f02 	tst.w	r5, #2
 80088d4:	f103 0204 	add.w	r2, r3, #4
 80088d8:	ec59 8b10 	vmov	r8, r9, d0
 80088dc:	f8ca 2000 	str.w	r2, [sl]
 80088e0:	d043      	beq.n	800896a <_scanf_float+0x38a>
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	e9c3 8900 	strd	r8, r9, [r3]
 80088e8:	68e3      	ldr	r3, [r4, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60e3      	str	r3, [r4, #12]
 80088ee:	e6be      	b.n	800866e <_scanf_float+0x8e>
 80088f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80088f8:	4632      	mov	r2, r6
 80088fa:	4638      	mov	r0, r7
 80088fc:	4798      	blx	r3
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	3b01      	subs	r3, #1
 8008902:	6123      	str	r3, [r4, #16]
 8008904:	e7a6      	b.n	8008854 <_scanf_float+0x274>
 8008906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800890a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800890e:	4632      	mov	r2, r6
 8008910:	4638      	mov	r0, r7
 8008912:	4798      	blx	r3
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	3b01      	subs	r3, #1
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	4545      	cmp	r5, r8
 800891c:	d8f3      	bhi.n	8008906 <_scanf_float+0x326>
 800891e:	e6a5      	b.n	800866c <_scanf_float+0x8c>
 8008920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008924:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008928:	4632      	mov	r2, r6
 800892a:	4638      	mov	r0, r7
 800892c:	4798      	blx	r3
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	3b01      	subs	r3, #1
 8008932:	6123      	str	r3, [r4, #16]
 8008934:	4545      	cmp	r5, r8
 8008936:	d8f3      	bhi.n	8008920 <_scanf_float+0x340>
 8008938:	e698      	b.n	800866c <_scanf_float+0x8c>
 800893a:	9b03      	ldr	r3, [sp, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0bf      	beq.n	80088c0 <_scanf_float+0x2e0>
 8008940:	9904      	ldr	r1, [sp, #16]
 8008942:	230a      	movs	r3, #10
 8008944:	4632      	mov	r2, r6
 8008946:	3101      	adds	r1, #1
 8008948:	4638      	mov	r0, r7
 800894a:	f000 ff05 	bl	8009758 <_strtol_r>
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	9d04      	ldr	r5, [sp, #16]
 8008952:	1ac2      	subs	r2, r0, r3
 8008954:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008958:	429d      	cmp	r5, r3
 800895a:	bf28      	it	cs
 800895c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008960:	490f      	ldr	r1, [pc, #60]	; (80089a0 <_scanf_float+0x3c0>)
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f824 	bl	80089b0 <siprintf>
 8008968:	e7aa      	b.n	80088c0 <_scanf_float+0x2e0>
 800896a:	f015 0504 	ands.w	r5, r5, #4
 800896e:	d1b8      	bne.n	80088e2 <_scanf_float+0x302>
 8008970:	681f      	ldr	r7, [r3, #0]
 8008972:	ee10 2a10 	vmov	r2, s0
 8008976:	464b      	mov	r3, r9
 8008978:	ee10 0a10 	vmov	r0, s0
 800897c:	4649      	mov	r1, r9
 800897e:	f7f8 f8dd 	bl	8000b3c <__aeabi_dcmpun>
 8008982:	b128      	cbz	r0, 8008990 <_scanf_float+0x3b0>
 8008984:	4628      	mov	r0, r5
 8008986:	f000 f80d 	bl	80089a4 <nanf>
 800898a:	ed87 0a00 	vstr	s0, [r7]
 800898e:	e7ab      	b.n	80088e8 <_scanf_float+0x308>
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f8 f930 	bl	8000bf8 <__aeabi_d2f>
 8008998:	6038      	str	r0, [r7, #0]
 800899a:	e7a5      	b.n	80088e8 <_scanf_float+0x308>
 800899c:	2600      	movs	r6, #0
 800899e:	e666      	b.n	800866e <_scanf_float+0x8e>
 80089a0:	0800ba2c 	.word	0x0800ba2c

080089a4 <nanf>:
 80089a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089ac <nanf+0x8>
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	7fc00000 	.word	0x7fc00000

080089b0 <siprintf>:
 80089b0:	b40e      	push	{r1, r2, r3}
 80089b2:	b500      	push	{lr}
 80089b4:	b09c      	sub	sp, #112	; 0x70
 80089b6:	ab1d      	add	r3, sp, #116	; 0x74
 80089b8:	9002      	str	r0, [sp, #8]
 80089ba:	9006      	str	r0, [sp, #24]
 80089bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c0:	4809      	ldr	r0, [pc, #36]	; (80089e8 <siprintf+0x38>)
 80089c2:	9107      	str	r1, [sp, #28]
 80089c4:	9104      	str	r1, [sp, #16]
 80089c6:	4909      	ldr	r1, [pc, #36]	; (80089ec <siprintf+0x3c>)
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	9105      	str	r1, [sp, #20]
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	a902      	add	r1, sp, #8
 80089d4:	f002 fd9a 	bl	800b50c <_svfiprintf_r>
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	b01c      	add	sp, #112	; 0x70
 80089e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e4:	b003      	add	sp, #12
 80089e6:	4770      	bx	lr
 80089e8:	20000090 	.word	0x20000090
 80089ec:	ffff0208 	.word	0xffff0208

080089f0 <strcat>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	4603      	mov	r3, r0
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	1c5c      	adds	r4, r3, #1
 80089f8:	b93a      	cbnz	r2, 8008a0a <strcat+0x1a>
 80089fa:	3b01      	subs	r3, #1
 80089fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	d1f9      	bne.n	80089fc <strcat+0xc>
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	e7f2      	b.n	80089f4 <strcat+0x4>

08008a0e <strcpy>:
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a14:	f803 2b01 	strb.w	r2, [r3], #1
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	d1f9      	bne.n	8008a10 <strcpy+0x2>
 8008a1c:	4770      	bx	lr

08008a1e <sulp>:
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	4604      	mov	r4, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	ec45 4b10 	vmov	d0, r4, r5
 8008a28:	4616      	mov	r6, r2
 8008a2a:	f002 fb2b 	bl	800b084 <__ulp>
 8008a2e:	ec51 0b10 	vmov	r0, r1, d0
 8008a32:	b17e      	cbz	r6, 8008a54 <sulp+0x36>
 8008a34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dd09      	ble.n	8008a54 <sulp+0x36>
 8008a40:	051b      	lsls	r3, r3, #20
 8008a42:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a46:	2400      	movs	r4, #0
 8008a48:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	462b      	mov	r3, r5
 8008a50:	f7f7 fdda 	bl	8000608 <__aeabi_dmul>
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a58 <_strtod_l>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	461f      	mov	r7, r3
 8008a5e:	b0a1      	sub	sp, #132	; 0x84
 8008a60:	2300      	movs	r3, #0
 8008a62:	4681      	mov	r9, r0
 8008a64:	4638      	mov	r0, r7
 8008a66:	460e      	mov	r6, r1
 8008a68:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a6a:	931c      	str	r3, [sp, #112]	; 0x70
 8008a6c:	f002 f809 	bl	800aa82 <__localeconv_l>
 8008a70:	4680      	mov	r8, r0
 8008a72:	6800      	ldr	r0, [r0, #0]
 8008a74:	f7f7 fbb4 	bl	80001e0 <strlen>
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	f04f 0b00 	mov.w	fp, #0
 8008a82:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	2a0d      	cmp	r2, #13
 8008a8a:	d832      	bhi.n	8008af2 <_strtod_l+0x9a>
 8008a8c:	2a09      	cmp	r2, #9
 8008a8e:	d236      	bcs.n	8008afe <_strtod_l+0xa6>
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	d03e      	beq.n	8008b12 <_strtod_l+0xba>
 8008a94:	2300      	movs	r3, #0
 8008a96:	930d      	str	r3, [sp, #52]	; 0x34
 8008a98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008a9a:	782b      	ldrb	r3, [r5, #0]
 8008a9c:	2b30      	cmp	r3, #48	; 0x30
 8008a9e:	f040 80ac 	bne.w	8008bfa <_strtod_l+0x1a2>
 8008aa2:	786b      	ldrb	r3, [r5, #1]
 8008aa4:	2b58      	cmp	r3, #88	; 0x58
 8008aa6:	d001      	beq.n	8008aac <_strtod_l+0x54>
 8008aa8:	2b78      	cmp	r3, #120	; 0x78
 8008aaa:	d167      	bne.n	8008b7c <_strtod_l+0x124>
 8008aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	ab1c      	add	r3, sp, #112	; 0x70
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	9702      	str	r7, [sp, #8]
 8008ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab8:	4a88      	ldr	r2, [pc, #544]	; (8008cdc <_strtod_l+0x284>)
 8008aba:	a91b      	add	r1, sp, #108	; 0x6c
 8008abc:	4648      	mov	r0, r9
 8008abe:	f001 fd06 	bl	800a4ce <__gethex>
 8008ac2:	f010 0407 	ands.w	r4, r0, #7
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	d005      	beq.n	8008ad6 <_strtod_l+0x7e>
 8008aca:	2c06      	cmp	r4, #6
 8008acc:	d12b      	bne.n	8008b26 <_strtod_l+0xce>
 8008ace:	3501      	adds	r5, #1
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	951b      	str	r5, [sp, #108]	; 0x6c
 8008ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f040 859a 	bne.w	8009612 <_strtod_l+0xbba>
 8008ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae0:	b1e3      	cbz	r3, 8008b1c <_strtod_l+0xc4>
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ae8:	ec43 2b10 	vmov	d0, r2, r3
 8008aec:	b021      	add	sp, #132	; 0x84
 8008aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af2:	2a2b      	cmp	r2, #43	; 0x2b
 8008af4:	d015      	beq.n	8008b22 <_strtod_l+0xca>
 8008af6:	2a2d      	cmp	r2, #45	; 0x2d
 8008af8:	d004      	beq.n	8008b04 <_strtod_l+0xac>
 8008afa:	2a20      	cmp	r2, #32
 8008afc:	d1ca      	bne.n	8008a94 <_strtod_l+0x3c>
 8008afe:	3301      	adds	r3, #1
 8008b00:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b02:	e7bf      	b.n	8008a84 <_strtod_l+0x2c>
 8008b04:	2201      	movs	r2, #1
 8008b06:	920d      	str	r2, [sp, #52]	; 0x34
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b0c:	785b      	ldrb	r3, [r3, #1]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1c2      	bne.n	8008a98 <_strtod_l+0x40>
 8008b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b14:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 8579 	bne.w	800960e <_strtod_l+0xbb6>
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	465b      	mov	r3, fp
 8008b20:	e7e2      	b.n	8008ae8 <_strtod_l+0x90>
 8008b22:	2200      	movs	r2, #0
 8008b24:	e7ef      	b.n	8008b06 <_strtod_l+0xae>
 8008b26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b28:	b13a      	cbz	r2, 8008b3a <_strtod_l+0xe2>
 8008b2a:	2135      	movs	r1, #53	; 0x35
 8008b2c:	a81e      	add	r0, sp, #120	; 0x78
 8008b2e:	f002 fba1 	bl	800b274 <__copybits>
 8008b32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b34:	4648      	mov	r0, r9
 8008b36:	f002 f80e 	bl	800ab56 <_Bfree>
 8008b3a:	3c01      	subs	r4, #1
 8008b3c:	2c04      	cmp	r4, #4
 8008b3e:	d806      	bhi.n	8008b4e <_strtod_l+0xf6>
 8008b40:	e8df f004 	tbb	[pc, r4]
 8008b44:	1714030a 	.word	0x1714030a
 8008b48:	0a          	.byte	0x0a
 8008b49:	00          	.byte	0x00
 8008b4a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008b4e:	0730      	lsls	r0, r6, #28
 8008b50:	d5c1      	bpl.n	8008ad6 <_strtod_l+0x7e>
 8008b52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b56:	e7be      	b.n	8008ad6 <_strtod_l+0x7e>
 8008b58:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008b5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b6a:	e7f0      	b.n	8008b4e <_strtod_l+0xf6>
 8008b6c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008ce0 <_strtod_l+0x288>
 8008b70:	e7ed      	b.n	8008b4e <_strtod_l+0xf6>
 8008b72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b76:	f04f 3aff 	mov.w	sl, #4294967295
 8008b7a:	e7e8      	b.n	8008b4e <_strtod_l+0xf6>
 8008b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b82:	785b      	ldrb	r3, [r3, #1]
 8008b84:	2b30      	cmp	r3, #48	; 0x30
 8008b86:	d0f9      	beq.n	8008b7c <_strtod_l+0x124>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0a4      	beq.n	8008ad6 <_strtod_l+0x7e>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	2500      	movs	r5, #0
 8008b90:	9306      	str	r3, [sp, #24]
 8008b92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	9507      	str	r5, [sp, #28]
 8008b98:	9505      	str	r5, [sp, #20]
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008b9e:	7807      	ldrb	r7, [r0, #0]
 8008ba0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008ba4:	b2d9      	uxtb	r1, r3
 8008ba6:	2909      	cmp	r1, #9
 8008ba8:	d929      	bls.n	8008bfe <_strtod_l+0x1a6>
 8008baa:	4622      	mov	r2, r4
 8008bac:	f8d8 1000 	ldr.w	r1, [r8]
 8008bb0:	f002 fdb4 	bl	800b71c <strncmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d031      	beq.n	8008c1c <_strtod_l+0x1c4>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	9c05      	ldr	r4, [sp, #20]
 8008bbc:	9004      	str	r0, [sp, #16]
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	2b65      	cmp	r3, #101	; 0x65
 8008bc4:	d001      	beq.n	8008bca <_strtod_l+0x172>
 8008bc6:	2b45      	cmp	r3, #69	; 0x45
 8008bc8:	d114      	bne.n	8008bf4 <_strtod_l+0x19c>
 8008bca:	b924      	cbnz	r4, 8008bd6 <_strtod_l+0x17e>
 8008bcc:	b910      	cbnz	r0, 8008bd4 <_strtod_l+0x17c>
 8008bce:	9b06      	ldr	r3, [sp, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d09e      	beq.n	8008b12 <_strtod_l+0xba>
 8008bd4:	2400      	movs	r4, #0
 8008bd6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008bd8:	1c73      	adds	r3, r6, #1
 8008bda:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bdc:	7873      	ldrb	r3, [r6, #1]
 8008bde:	2b2b      	cmp	r3, #43	; 0x2b
 8008be0:	d078      	beq.n	8008cd4 <_strtod_l+0x27c>
 8008be2:	2b2d      	cmp	r3, #45	; 0x2d
 8008be4:	d070      	beq.n	8008cc8 <_strtod_l+0x270>
 8008be6:	f04f 0c00 	mov.w	ip, #0
 8008bea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008bee:	2f09      	cmp	r7, #9
 8008bf0:	d97c      	bls.n	8008cec <_strtod_l+0x294>
 8008bf2:	961b      	str	r6, [sp, #108]	; 0x6c
 8008bf4:	f04f 0e00 	mov.w	lr, #0
 8008bf8:	e09a      	b.n	8008d30 <_strtod_l+0x2d8>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e7c7      	b.n	8008b8e <_strtod_l+0x136>
 8008bfe:	9905      	ldr	r1, [sp, #20]
 8008c00:	2908      	cmp	r1, #8
 8008c02:	bfdd      	ittte	le
 8008c04:	9907      	ldrle	r1, [sp, #28]
 8008c06:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c0a:	9307      	strle	r3, [sp, #28]
 8008c0c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008c10:	9b05      	ldr	r3, [sp, #20]
 8008c12:	3001      	adds	r0, #1
 8008c14:	3301      	adds	r3, #1
 8008c16:	9305      	str	r3, [sp, #20]
 8008c18:	901b      	str	r0, [sp, #108]	; 0x6c
 8008c1a:	e7bf      	b.n	8008b9c <_strtod_l+0x144>
 8008c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c1e:	191a      	adds	r2, r3, r4
 8008c20:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c22:	9a05      	ldr	r2, [sp, #20]
 8008c24:	5d1b      	ldrb	r3, [r3, r4]
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	d037      	beq.n	8008c9a <_strtod_l+0x242>
 8008c2a:	9c05      	ldr	r4, [sp, #20]
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c32:	2909      	cmp	r1, #9
 8008c34:	d913      	bls.n	8008c5e <_strtod_l+0x206>
 8008c36:	2101      	movs	r1, #1
 8008c38:	9104      	str	r1, [sp, #16]
 8008c3a:	e7c2      	b.n	8008bc2 <_strtod_l+0x16a>
 8008c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	3001      	adds	r0, #1
 8008c46:	2b30      	cmp	r3, #48	; 0x30
 8008c48:	d0f8      	beq.n	8008c3c <_strtod_l+0x1e4>
 8008c4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008c4e:	2a08      	cmp	r2, #8
 8008c50:	f200 84e4 	bhi.w	800961c <_strtod_l+0xbc4>
 8008c54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c56:	9208      	str	r2, [sp, #32]
 8008c58:	4602      	mov	r2, r0
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008c62:	f100 0101 	add.w	r1, r0, #1
 8008c66:	d012      	beq.n	8008c8e <_strtod_l+0x236>
 8008c68:	440a      	add	r2, r1
 8008c6a:	eb00 0c04 	add.w	ip, r0, r4
 8008c6e:	4621      	mov	r1, r4
 8008c70:	270a      	movs	r7, #10
 8008c72:	458c      	cmp	ip, r1
 8008c74:	d113      	bne.n	8008c9e <_strtod_l+0x246>
 8008c76:	1821      	adds	r1, r4, r0
 8008c78:	2908      	cmp	r1, #8
 8008c7a:	f104 0401 	add.w	r4, r4, #1
 8008c7e:	4404      	add	r4, r0
 8008c80:	dc19      	bgt.n	8008cb6 <_strtod_l+0x25e>
 8008c82:	9b07      	ldr	r3, [sp, #28]
 8008c84:	210a      	movs	r1, #10
 8008c86:	fb01 e303 	mla	r3, r1, r3, lr
 8008c8a:	9307      	str	r3, [sp, #28]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c90:	1c58      	adds	r0, r3, #1
 8008c92:	901b      	str	r0, [sp, #108]	; 0x6c
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	4608      	mov	r0, r1
 8008c98:	e7c9      	b.n	8008c2e <_strtod_l+0x1d6>
 8008c9a:	9805      	ldr	r0, [sp, #20]
 8008c9c:	e7d3      	b.n	8008c46 <_strtod_l+0x1ee>
 8008c9e:	2908      	cmp	r1, #8
 8008ca0:	f101 0101 	add.w	r1, r1, #1
 8008ca4:	dc03      	bgt.n	8008cae <_strtod_l+0x256>
 8008ca6:	9b07      	ldr	r3, [sp, #28]
 8008ca8:	437b      	muls	r3, r7
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	e7e1      	b.n	8008c72 <_strtod_l+0x21a>
 8008cae:	2910      	cmp	r1, #16
 8008cb0:	bfd8      	it	le
 8008cb2:	437d      	mulle	r5, r7
 8008cb4:	e7dd      	b.n	8008c72 <_strtod_l+0x21a>
 8008cb6:	2c10      	cmp	r4, #16
 8008cb8:	bfdc      	itt	le
 8008cba:	210a      	movle	r1, #10
 8008cbc:	fb01 e505 	mlale	r5, r1, r5, lr
 8008cc0:	e7e4      	b.n	8008c8c <_strtod_l+0x234>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	e781      	b.n	8008bcc <_strtod_l+0x174>
 8008cc8:	f04f 0c01 	mov.w	ip, #1
 8008ccc:	1cb3      	adds	r3, r6, #2
 8008cce:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cd0:	78b3      	ldrb	r3, [r6, #2]
 8008cd2:	e78a      	b.n	8008bea <_strtod_l+0x192>
 8008cd4:	f04f 0c00 	mov.w	ip, #0
 8008cd8:	e7f8      	b.n	8008ccc <_strtod_l+0x274>
 8008cda:	bf00      	nop
 8008cdc:	0800ba34 	.word	0x0800ba34
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ce6:	1c5f      	adds	r7, r3, #1
 8008ce8:	971b      	str	r7, [sp, #108]	; 0x6c
 8008cea:	785b      	ldrb	r3, [r3, #1]
 8008cec:	2b30      	cmp	r3, #48	; 0x30
 8008cee:	d0f9      	beq.n	8008ce4 <_strtod_l+0x28c>
 8008cf0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008cf4:	2f08      	cmp	r7, #8
 8008cf6:	f63f af7d 	bhi.w	8008bf4 <_strtod_l+0x19c>
 8008cfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d00:	930a      	str	r3, [sp, #40]	; 0x28
 8008d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d04:	1c5f      	adds	r7, r3, #1
 8008d06:	971b      	str	r7, [sp, #108]	; 0x6c
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008d0e:	f1b8 0f09 	cmp.w	r8, #9
 8008d12:	d937      	bls.n	8008d84 <_strtod_l+0x32c>
 8008d14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d16:	1a7f      	subs	r7, r7, r1
 8008d18:	2f08      	cmp	r7, #8
 8008d1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008d1e:	dc37      	bgt.n	8008d90 <_strtod_l+0x338>
 8008d20:	45be      	cmp	lr, r7
 8008d22:	bfa8      	it	ge
 8008d24:	46be      	movge	lr, r7
 8008d26:	f1bc 0f00 	cmp.w	ip, #0
 8008d2a:	d001      	beq.n	8008d30 <_strtod_l+0x2d8>
 8008d2c:	f1ce 0e00 	rsb	lr, lr, #0
 8008d30:	2c00      	cmp	r4, #0
 8008d32:	d151      	bne.n	8008dd8 <_strtod_l+0x380>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	f47f aece 	bne.w	8008ad6 <_strtod_l+0x7e>
 8008d3a:	9a06      	ldr	r2, [sp, #24]
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	f47f aeca 	bne.w	8008ad6 <_strtod_l+0x7e>
 8008d42:	9a04      	ldr	r2, [sp, #16]
 8008d44:	2a00      	cmp	r2, #0
 8008d46:	f47f aee4 	bne.w	8008b12 <_strtod_l+0xba>
 8008d4a:	2b4e      	cmp	r3, #78	; 0x4e
 8008d4c:	d027      	beq.n	8008d9e <_strtod_l+0x346>
 8008d4e:	dc21      	bgt.n	8008d94 <_strtod_l+0x33c>
 8008d50:	2b49      	cmp	r3, #73	; 0x49
 8008d52:	f47f aede 	bne.w	8008b12 <_strtod_l+0xba>
 8008d56:	49a0      	ldr	r1, [pc, #640]	; (8008fd8 <_strtod_l+0x580>)
 8008d58:	a81b      	add	r0, sp, #108	; 0x6c
 8008d5a:	f001 fdeb 	bl	800a934 <__match>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f aed7 	beq.w	8008b12 <_strtod_l+0xba>
 8008d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d66:	499d      	ldr	r1, [pc, #628]	; (8008fdc <_strtod_l+0x584>)
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	a81b      	add	r0, sp, #108	; 0x6c
 8008d6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d6e:	f001 fde1 	bl	800a934 <__match>
 8008d72:	b910      	cbnz	r0, 8008d7a <_strtod_l+0x322>
 8008d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d76:	3301      	adds	r3, #1
 8008d78:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d7a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ff0 <_strtod_l+0x598>
 8008d7e:	f04f 0a00 	mov.w	sl, #0
 8008d82:	e6a8      	b.n	8008ad6 <_strtod_l+0x7e>
 8008d84:	210a      	movs	r1, #10
 8008d86:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008d8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d8e:	e7b8      	b.n	8008d02 <_strtod_l+0x2aa>
 8008d90:	46be      	mov	lr, r7
 8008d92:	e7c8      	b.n	8008d26 <_strtod_l+0x2ce>
 8008d94:	2b69      	cmp	r3, #105	; 0x69
 8008d96:	d0de      	beq.n	8008d56 <_strtod_l+0x2fe>
 8008d98:	2b6e      	cmp	r3, #110	; 0x6e
 8008d9a:	f47f aeba 	bne.w	8008b12 <_strtod_l+0xba>
 8008d9e:	4990      	ldr	r1, [pc, #576]	; (8008fe0 <_strtod_l+0x588>)
 8008da0:	a81b      	add	r0, sp, #108	; 0x6c
 8008da2:	f001 fdc7 	bl	800a934 <__match>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f43f aeb3 	beq.w	8008b12 <_strtod_l+0xba>
 8008dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b28      	cmp	r3, #40	; 0x28
 8008db2:	d10e      	bne.n	8008dd2 <_strtod_l+0x37a>
 8008db4:	aa1e      	add	r2, sp, #120	; 0x78
 8008db6:	498b      	ldr	r1, [pc, #556]	; (8008fe4 <_strtod_l+0x58c>)
 8008db8:	a81b      	add	r0, sp, #108	; 0x6c
 8008dba:	f001 fdcf 	bl	800a95c <__hexnan>
 8008dbe:	2805      	cmp	r0, #5
 8008dc0:	d107      	bne.n	8008dd2 <_strtod_l+0x37a>
 8008dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008dc4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008dc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008dcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dd0:	e681      	b.n	8008ad6 <_strtod_l+0x7e>
 8008dd2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008ff8 <_strtod_l+0x5a0>
 8008dd6:	e7d2      	b.n	8008d7e <_strtod_l+0x326>
 8008dd8:	ebae 0302 	sub.w	r3, lr, r2
 8008ddc:	9306      	str	r3, [sp, #24]
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	9807      	ldr	r0, [sp, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf08      	it	eq
 8008de6:	4623      	moveq	r3, r4
 8008de8:	2c10      	cmp	r4, #16
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	46a0      	mov	r8, r4
 8008dee:	bfa8      	it	ge
 8008df0:	f04f 0810 	movge.w	r8, #16
 8008df4:	f7f7 fb8e 	bl	8000514 <__aeabi_ui2d>
 8008df8:	2c09      	cmp	r4, #9
 8008dfa:	4682      	mov	sl, r0
 8008dfc:	468b      	mov	fp, r1
 8008dfe:	dc13      	bgt.n	8008e28 <_strtod_l+0x3d0>
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f43f ae67 	beq.w	8008ad6 <_strtod_l+0x7e>
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	dd7a      	ble.n	8008f02 <_strtod_l+0x4aa>
 8008e0c:	2b16      	cmp	r3, #22
 8008e0e:	dc61      	bgt.n	8008ed4 <_strtod_l+0x47c>
 8008e10:	4a75      	ldr	r2, [pc, #468]	; (8008fe8 <_strtod_l+0x590>)
 8008e12:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008e16:	e9de 0100 	ldrd	r0, r1, [lr]
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	f7f7 fbf3 	bl	8000608 <__aeabi_dmul>
 8008e22:	4682      	mov	sl, r0
 8008e24:	468b      	mov	fp, r1
 8008e26:	e656      	b.n	8008ad6 <_strtod_l+0x7e>
 8008e28:	4b6f      	ldr	r3, [pc, #444]	; (8008fe8 <_strtod_l+0x590>)
 8008e2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e32:	f7f7 fbe9 	bl	8000608 <__aeabi_dmul>
 8008e36:	4606      	mov	r6, r0
 8008e38:	4628      	mov	r0, r5
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	f7f7 fb6a 	bl	8000514 <__aeabi_ui2d>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fa28 	bl	800029c <__adddf3>
 8008e4c:	2c0f      	cmp	r4, #15
 8008e4e:	4682      	mov	sl, r0
 8008e50:	468b      	mov	fp, r1
 8008e52:	ddd5      	ble.n	8008e00 <_strtod_l+0x3a8>
 8008e54:	9b06      	ldr	r3, [sp, #24]
 8008e56:	eba4 0808 	sub.w	r8, r4, r8
 8008e5a:	4498      	add	r8, r3
 8008e5c:	f1b8 0f00 	cmp.w	r8, #0
 8008e60:	f340 8096 	ble.w	8008f90 <_strtod_l+0x538>
 8008e64:	f018 030f 	ands.w	r3, r8, #15
 8008e68:	d00a      	beq.n	8008e80 <_strtod_l+0x428>
 8008e6a:	495f      	ldr	r1, [pc, #380]	; (8008fe8 <_strtod_l+0x590>)
 8008e6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e70:	4652      	mov	r2, sl
 8008e72:	465b      	mov	r3, fp
 8008e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_dmul>
 8008e7c:	4682      	mov	sl, r0
 8008e7e:	468b      	mov	fp, r1
 8008e80:	f038 080f 	bics.w	r8, r8, #15
 8008e84:	d073      	beq.n	8008f6e <_strtod_l+0x516>
 8008e86:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e8a:	dd47      	ble.n	8008f1c <_strtod_l+0x4c4>
 8008e8c:	2400      	movs	r4, #0
 8008e8e:	46a0      	mov	r8, r4
 8008e90:	9407      	str	r4, [sp, #28]
 8008e92:	9405      	str	r4, [sp, #20]
 8008e94:	2322      	movs	r3, #34	; 0x22
 8008e96:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ff0 <_strtod_l+0x598>
 8008e9a:	f8c9 3000 	str.w	r3, [r9]
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f43f ae16 	beq.w	8008ad6 <_strtod_l+0x7e>
 8008eaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008eac:	4648      	mov	r0, r9
 8008eae:	f001 fe52 	bl	800ab56 <_Bfree>
 8008eb2:	9905      	ldr	r1, [sp, #20]
 8008eb4:	4648      	mov	r0, r9
 8008eb6:	f001 fe4e 	bl	800ab56 <_Bfree>
 8008eba:	4641      	mov	r1, r8
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f001 fe4a 	bl	800ab56 <_Bfree>
 8008ec2:	9907      	ldr	r1, [sp, #28]
 8008ec4:	4648      	mov	r0, r9
 8008ec6:	f001 fe46 	bl	800ab56 <_Bfree>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4648      	mov	r0, r9
 8008ece:	f001 fe42 	bl	800ab56 <_Bfree>
 8008ed2:	e600      	b.n	8008ad6 <_strtod_l+0x7e>
 8008ed4:	9a06      	ldr	r2, [sp, #24]
 8008ed6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008eda:	4293      	cmp	r3, r2
 8008edc:	dbba      	blt.n	8008e54 <_strtod_l+0x3fc>
 8008ede:	4d42      	ldr	r5, [pc, #264]	; (8008fe8 <_strtod_l+0x590>)
 8008ee0:	f1c4 040f 	rsb	r4, r4, #15
 8008ee4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008ee8:	4652      	mov	r2, sl
 8008eea:	465b      	mov	r3, fp
 8008eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef0:	f7f7 fb8a 	bl	8000608 <__aeabi_dmul>
 8008ef4:	9b06      	ldr	r3, [sp, #24]
 8008ef6:	1b1c      	subs	r4, r3, r4
 8008ef8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008efc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f00:	e78d      	b.n	8008e1e <_strtod_l+0x3c6>
 8008f02:	f113 0f16 	cmn.w	r3, #22
 8008f06:	dba5      	blt.n	8008e54 <_strtod_l+0x3fc>
 8008f08:	4a37      	ldr	r2, [pc, #220]	; (8008fe8 <_strtod_l+0x590>)
 8008f0a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008f0e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008f12:	4650      	mov	r0, sl
 8008f14:	4659      	mov	r1, fp
 8008f16:	f7f7 fca1 	bl	800085c <__aeabi_ddiv>
 8008f1a:	e782      	b.n	8008e22 <_strtod_l+0x3ca>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4e33      	ldr	r6, [pc, #204]	; (8008fec <_strtod_l+0x594>)
 8008f20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f24:	4650      	mov	r0, sl
 8008f26:	4659      	mov	r1, fp
 8008f28:	461d      	mov	r5, r3
 8008f2a:	f1b8 0f01 	cmp.w	r8, #1
 8008f2e:	dc21      	bgt.n	8008f74 <_strtod_l+0x51c>
 8008f30:	b10b      	cbz	r3, 8008f36 <_strtod_l+0x4de>
 8008f32:	4682      	mov	sl, r0
 8008f34:	468b      	mov	fp, r1
 8008f36:	4b2d      	ldr	r3, [pc, #180]	; (8008fec <_strtod_l+0x594>)
 8008f38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f40:	4652      	mov	r2, sl
 8008f42:	465b      	mov	r3, fp
 8008f44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008f48:	f7f7 fb5e 	bl	8000608 <__aeabi_dmul>
 8008f4c:	4b28      	ldr	r3, [pc, #160]	; (8008ff0 <_strtod_l+0x598>)
 8008f4e:	460a      	mov	r2, r1
 8008f50:	400b      	ands	r3, r1
 8008f52:	4928      	ldr	r1, [pc, #160]	; (8008ff4 <_strtod_l+0x59c>)
 8008f54:	428b      	cmp	r3, r1
 8008f56:	4682      	mov	sl, r0
 8008f58:	d898      	bhi.n	8008e8c <_strtod_l+0x434>
 8008f5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f5e:	428b      	cmp	r3, r1
 8008f60:	bf86      	itte	hi
 8008f62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008ffc <_strtod_l+0x5a4>
 8008f66:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	e077      	b.n	8009064 <_strtod_l+0x60c>
 8008f74:	f018 0f01 	tst.w	r8, #1
 8008f78:	d006      	beq.n	8008f88 <_strtod_l+0x530>
 8008f7a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 fb41 	bl	8000608 <__aeabi_dmul>
 8008f86:	2301      	movs	r3, #1
 8008f88:	3501      	adds	r5, #1
 8008f8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f8e:	e7cc      	b.n	8008f2a <_strtod_l+0x4d2>
 8008f90:	d0ed      	beq.n	8008f6e <_strtod_l+0x516>
 8008f92:	f1c8 0800 	rsb	r8, r8, #0
 8008f96:	f018 020f 	ands.w	r2, r8, #15
 8008f9a:	d00a      	beq.n	8008fb2 <_strtod_l+0x55a>
 8008f9c:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <_strtod_l+0x590>)
 8008f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	4659      	mov	r1, fp
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7f7 fc57 	bl	800085c <__aeabi_ddiv>
 8008fae:	4682      	mov	sl, r0
 8008fb0:	468b      	mov	fp, r1
 8008fb2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fb6:	d0da      	beq.n	8008f6e <_strtod_l+0x516>
 8008fb8:	f1b8 0f1f 	cmp.w	r8, #31
 8008fbc:	dd20      	ble.n	8009000 <_strtod_l+0x5a8>
 8008fbe:	2400      	movs	r4, #0
 8008fc0:	46a0      	mov	r8, r4
 8008fc2:	9407      	str	r4, [sp, #28]
 8008fc4:	9405      	str	r4, [sp, #20]
 8008fc6:	2322      	movs	r3, #34	; 0x22
 8008fc8:	f04f 0a00 	mov.w	sl, #0
 8008fcc:	f04f 0b00 	mov.w	fp, #0
 8008fd0:	f8c9 3000 	str.w	r3, [r9]
 8008fd4:	e765      	b.n	8008ea2 <_strtod_l+0x44a>
 8008fd6:	bf00      	nop
 8008fd8:	0800b9fd 	.word	0x0800b9fd
 8008fdc:	0800ba8b 	.word	0x0800ba8b
 8008fe0:	0800ba05 	.word	0x0800ba05
 8008fe4:	0800ba48 	.word	0x0800ba48
 8008fe8:	0800bac8 	.word	0x0800bac8
 8008fec:	0800baa0 	.word	0x0800baa0
 8008ff0:	7ff00000 	.word	0x7ff00000
 8008ff4:	7ca00000 	.word	0x7ca00000
 8008ff8:	fff80000 	.word	0xfff80000
 8008ffc:	7fefffff 	.word	0x7fefffff
 8009000:	f018 0310 	ands.w	r3, r8, #16
 8009004:	bf18      	it	ne
 8009006:	236a      	movne	r3, #106	; 0x6a
 8009008:	4da0      	ldr	r5, [pc, #640]	; (800928c <_strtod_l+0x834>)
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	4650      	mov	r0, sl
 800900e:	4659      	mov	r1, fp
 8009010:	2300      	movs	r3, #0
 8009012:	f1b8 0f00 	cmp.w	r8, #0
 8009016:	f300 810a 	bgt.w	800922e <_strtod_l+0x7d6>
 800901a:	b10b      	cbz	r3, 8009020 <_strtod_l+0x5c8>
 800901c:	4682      	mov	sl, r0
 800901e:	468b      	mov	fp, r1
 8009020:	9b04      	ldr	r3, [sp, #16]
 8009022:	b1bb      	cbz	r3, 8009054 <_strtod_l+0x5fc>
 8009024:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009028:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800902c:	2b00      	cmp	r3, #0
 800902e:	4659      	mov	r1, fp
 8009030:	dd10      	ble.n	8009054 <_strtod_l+0x5fc>
 8009032:	2b1f      	cmp	r3, #31
 8009034:	f340 8107 	ble.w	8009246 <_strtod_l+0x7ee>
 8009038:	2b34      	cmp	r3, #52	; 0x34
 800903a:	bfde      	ittt	le
 800903c:	3b20      	suble	r3, #32
 800903e:	f04f 32ff 	movle.w	r2, #4294967295
 8009042:	fa02 f303 	lslle.w	r3, r2, r3
 8009046:	f04f 0a00 	mov.w	sl, #0
 800904a:	bfcc      	ite	gt
 800904c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009050:	ea03 0b01 	andle.w	fp, r3, r1
 8009054:	2200      	movs	r2, #0
 8009056:	2300      	movs	r3, #0
 8009058:	4650      	mov	r0, sl
 800905a:	4659      	mov	r1, fp
 800905c:	f7f7 fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009060:	2800      	cmp	r0, #0
 8009062:	d1ac      	bne.n	8008fbe <_strtod_l+0x566>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	9a05      	ldr	r2, [sp, #20]
 800906a:	9908      	ldr	r1, [sp, #32]
 800906c:	4623      	mov	r3, r4
 800906e:	4648      	mov	r0, r9
 8009070:	f001 fdc3 	bl	800abfa <__s2b>
 8009074:	9007      	str	r0, [sp, #28]
 8009076:	2800      	cmp	r0, #0
 8009078:	f43f af08 	beq.w	8008e8c <_strtod_l+0x434>
 800907c:	9a06      	ldr	r2, [sp, #24]
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	2a00      	cmp	r2, #0
 8009082:	f1c3 0300 	rsb	r3, r3, #0
 8009086:	bfa8      	it	ge
 8009088:	2300      	movge	r3, #0
 800908a:	930e      	str	r3, [sp, #56]	; 0x38
 800908c:	2400      	movs	r4, #0
 800908e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009092:	9316      	str	r3, [sp, #88]	; 0x58
 8009094:	46a0      	mov	r8, r4
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	4648      	mov	r0, r9
 800909a:	6859      	ldr	r1, [r3, #4]
 800909c:	f001 fd27 	bl	800aaee <_Balloc>
 80090a0:	9005      	str	r0, [sp, #20]
 80090a2:	2800      	cmp	r0, #0
 80090a4:	f43f aef6 	beq.w	8008e94 <_strtod_l+0x43c>
 80090a8:	9b07      	ldr	r3, [sp, #28]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	3202      	adds	r2, #2
 80090ae:	f103 010c 	add.w	r1, r3, #12
 80090b2:	0092      	lsls	r2, r2, #2
 80090b4:	300c      	adds	r0, #12
 80090b6:	f001 fd0f 	bl	800aad8 <memcpy>
 80090ba:	aa1e      	add	r2, sp, #120	; 0x78
 80090bc:	a91d      	add	r1, sp, #116	; 0x74
 80090be:	ec4b ab10 	vmov	d0, sl, fp
 80090c2:	4648      	mov	r0, r9
 80090c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80090c8:	f002 f852 	bl	800b170 <__d2b>
 80090cc:	901c      	str	r0, [sp, #112]	; 0x70
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f43f aee0 	beq.w	8008e94 <_strtod_l+0x43c>
 80090d4:	2101      	movs	r1, #1
 80090d6:	4648      	mov	r0, r9
 80090d8:	f001 fe1b 	bl	800ad12 <__i2b>
 80090dc:	4680      	mov	r8, r0
 80090de:	2800      	cmp	r0, #0
 80090e0:	f43f aed8 	beq.w	8008e94 <_strtod_l+0x43c>
 80090e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80090e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	bfab      	itete	ge
 80090ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80090ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80090f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80090f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80090f4:	bfac      	ite	ge
 80090f6:	18f7      	addge	r7, r6, r3
 80090f8:	1b9d      	sublt	r5, r3, r6
 80090fa:	9b04      	ldr	r3, [sp, #16]
 80090fc:	1af6      	subs	r6, r6, r3
 80090fe:	4416      	add	r6, r2
 8009100:	4b63      	ldr	r3, [pc, #396]	; (8009290 <_strtod_l+0x838>)
 8009102:	3e01      	subs	r6, #1
 8009104:	429e      	cmp	r6, r3
 8009106:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800910a:	f280 80af 	bge.w	800926c <_strtod_l+0x814>
 800910e:	1b9b      	subs	r3, r3, r6
 8009110:	2b1f      	cmp	r3, #31
 8009112:	eba2 0203 	sub.w	r2, r2, r3
 8009116:	f04f 0101 	mov.w	r1, #1
 800911a:	f300 809b 	bgt.w	8009254 <_strtod_l+0x7fc>
 800911e:	fa01 f303 	lsl.w	r3, r1, r3
 8009122:	930f      	str	r3, [sp, #60]	; 0x3c
 8009124:	2300      	movs	r3, #0
 8009126:	930a      	str	r3, [sp, #40]	; 0x28
 8009128:	18be      	adds	r6, r7, r2
 800912a:	9b04      	ldr	r3, [sp, #16]
 800912c:	42b7      	cmp	r7, r6
 800912e:	4415      	add	r5, r2
 8009130:	441d      	add	r5, r3
 8009132:	463b      	mov	r3, r7
 8009134:	bfa8      	it	ge
 8009136:	4633      	movge	r3, r6
 8009138:	42ab      	cmp	r3, r5
 800913a:	bfa8      	it	ge
 800913c:	462b      	movge	r3, r5
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfc2      	ittt	gt
 8009142:	1af6      	subgt	r6, r6, r3
 8009144:	1aed      	subgt	r5, r5, r3
 8009146:	1aff      	subgt	r7, r7, r3
 8009148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800914a:	b1bb      	cbz	r3, 800917c <_strtod_l+0x724>
 800914c:	4641      	mov	r1, r8
 800914e:	461a      	mov	r2, r3
 8009150:	4648      	mov	r0, r9
 8009152:	f001 fe7d 	bl	800ae50 <__pow5mult>
 8009156:	4680      	mov	r8, r0
 8009158:	2800      	cmp	r0, #0
 800915a:	f43f ae9b 	beq.w	8008e94 <_strtod_l+0x43c>
 800915e:	4601      	mov	r1, r0
 8009160:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009162:	4648      	mov	r0, r9
 8009164:	f001 fdde 	bl	800ad24 <__multiply>
 8009168:	900c      	str	r0, [sp, #48]	; 0x30
 800916a:	2800      	cmp	r0, #0
 800916c:	f43f ae92 	beq.w	8008e94 <_strtod_l+0x43c>
 8009170:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009172:	4648      	mov	r0, r9
 8009174:	f001 fcef 	bl	800ab56 <_Bfree>
 8009178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800917a:	931c      	str	r3, [sp, #112]	; 0x70
 800917c:	2e00      	cmp	r6, #0
 800917e:	dc7a      	bgt.n	8009276 <_strtod_l+0x81e>
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	2b00      	cmp	r3, #0
 8009184:	dd08      	ble.n	8009198 <_strtod_l+0x740>
 8009186:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009188:	9905      	ldr	r1, [sp, #20]
 800918a:	4648      	mov	r0, r9
 800918c:	f001 fe60 	bl	800ae50 <__pow5mult>
 8009190:	9005      	str	r0, [sp, #20]
 8009192:	2800      	cmp	r0, #0
 8009194:	f43f ae7e 	beq.w	8008e94 <_strtod_l+0x43c>
 8009198:	2d00      	cmp	r5, #0
 800919a:	dd08      	ble.n	80091ae <_strtod_l+0x756>
 800919c:	462a      	mov	r2, r5
 800919e:	9905      	ldr	r1, [sp, #20]
 80091a0:	4648      	mov	r0, r9
 80091a2:	f001 fea3 	bl	800aeec <__lshift>
 80091a6:	9005      	str	r0, [sp, #20]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f43f ae73 	beq.w	8008e94 <_strtod_l+0x43c>
 80091ae:	2f00      	cmp	r7, #0
 80091b0:	dd08      	ble.n	80091c4 <_strtod_l+0x76c>
 80091b2:	4641      	mov	r1, r8
 80091b4:	463a      	mov	r2, r7
 80091b6:	4648      	mov	r0, r9
 80091b8:	f001 fe98 	bl	800aeec <__lshift>
 80091bc:	4680      	mov	r8, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f ae68 	beq.w	8008e94 <_strtod_l+0x43c>
 80091c4:	9a05      	ldr	r2, [sp, #20]
 80091c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091c8:	4648      	mov	r0, r9
 80091ca:	f001 fefd 	bl	800afc8 <__mdiff>
 80091ce:	4604      	mov	r4, r0
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f43f ae5f 	beq.w	8008e94 <_strtod_l+0x43c>
 80091d6:	68c3      	ldr	r3, [r0, #12]
 80091d8:	930c      	str	r3, [sp, #48]	; 0x30
 80091da:	2300      	movs	r3, #0
 80091dc:	60c3      	str	r3, [r0, #12]
 80091de:	4641      	mov	r1, r8
 80091e0:	f001 fed8 	bl	800af94 <__mcmp>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	da55      	bge.n	8009294 <_strtod_l+0x83c>
 80091e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ea:	b9e3      	cbnz	r3, 8009226 <_strtod_l+0x7ce>
 80091ec:	f1ba 0f00 	cmp.w	sl, #0
 80091f0:	d119      	bne.n	8009226 <_strtod_l+0x7ce>
 80091f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f6:	b9b3      	cbnz	r3, 8009226 <_strtod_l+0x7ce>
 80091f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091fc:	0d1b      	lsrs	r3, r3, #20
 80091fe:	051b      	lsls	r3, r3, #20
 8009200:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009204:	d90f      	bls.n	8009226 <_strtod_l+0x7ce>
 8009206:	6963      	ldr	r3, [r4, #20]
 8009208:	b913      	cbnz	r3, 8009210 <_strtod_l+0x7b8>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	2b01      	cmp	r3, #1
 800920e:	dd0a      	ble.n	8009226 <_strtod_l+0x7ce>
 8009210:	4621      	mov	r1, r4
 8009212:	2201      	movs	r2, #1
 8009214:	4648      	mov	r0, r9
 8009216:	f001 fe69 	bl	800aeec <__lshift>
 800921a:	4641      	mov	r1, r8
 800921c:	4604      	mov	r4, r0
 800921e:	f001 feb9 	bl	800af94 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	dc67      	bgt.n	80092f6 <_strtod_l+0x89e>
 8009226:	9b04      	ldr	r3, [sp, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d171      	bne.n	8009310 <_strtod_l+0x8b8>
 800922c:	e63d      	b.n	8008eaa <_strtod_l+0x452>
 800922e:	f018 0f01 	tst.w	r8, #1
 8009232:	d004      	beq.n	800923e <_strtod_l+0x7e6>
 8009234:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009238:	f7f7 f9e6 	bl	8000608 <__aeabi_dmul>
 800923c:	2301      	movs	r3, #1
 800923e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009242:	3508      	adds	r5, #8
 8009244:	e6e5      	b.n	8009012 <_strtod_l+0x5ba>
 8009246:	f04f 32ff 	mov.w	r2, #4294967295
 800924a:	fa02 f303 	lsl.w	r3, r2, r3
 800924e:	ea03 0a0a 	and.w	sl, r3, sl
 8009252:	e6ff      	b.n	8009054 <_strtod_l+0x5fc>
 8009254:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009258:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800925c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009260:	36e2      	adds	r6, #226	; 0xe2
 8009262:	fa01 f306 	lsl.w	r3, r1, r6
 8009266:	930a      	str	r3, [sp, #40]	; 0x28
 8009268:	910f      	str	r1, [sp, #60]	; 0x3c
 800926a:	e75d      	b.n	8009128 <_strtod_l+0x6d0>
 800926c:	2300      	movs	r3, #0
 800926e:	930a      	str	r3, [sp, #40]	; 0x28
 8009270:	2301      	movs	r3, #1
 8009272:	930f      	str	r3, [sp, #60]	; 0x3c
 8009274:	e758      	b.n	8009128 <_strtod_l+0x6d0>
 8009276:	4632      	mov	r2, r6
 8009278:	991c      	ldr	r1, [sp, #112]	; 0x70
 800927a:	4648      	mov	r0, r9
 800927c:	f001 fe36 	bl	800aeec <__lshift>
 8009280:	901c      	str	r0, [sp, #112]	; 0x70
 8009282:	2800      	cmp	r0, #0
 8009284:	f47f af7c 	bne.w	8009180 <_strtod_l+0x728>
 8009288:	e604      	b.n	8008e94 <_strtod_l+0x43c>
 800928a:	bf00      	nop
 800928c:	0800ba60 	.word	0x0800ba60
 8009290:	fffffc02 	.word	0xfffffc02
 8009294:	465d      	mov	r5, fp
 8009296:	f040 8086 	bne.w	80093a6 <_strtod_l+0x94e>
 800929a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092a0:	b32a      	cbz	r2, 80092ee <_strtod_l+0x896>
 80092a2:	4aaf      	ldr	r2, [pc, #700]	; (8009560 <_strtod_l+0xb08>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d153      	bne.n	8009350 <_strtod_l+0x8f8>
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	4650      	mov	r0, sl
 80092ac:	b1d3      	cbz	r3, 80092e4 <_strtod_l+0x88c>
 80092ae:	4aad      	ldr	r2, [pc, #692]	; (8009564 <_strtod_l+0xb0c>)
 80092b0:	402a      	ands	r2, r5
 80092b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80092b6:	f04f 31ff 	mov.w	r1, #4294967295
 80092ba:	d816      	bhi.n	80092ea <_strtod_l+0x892>
 80092bc:	0d12      	lsrs	r2, r2, #20
 80092be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092c2:	fa01 f303 	lsl.w	r3, r1, r3
 80092c6:	4298      	cmp	r0, r3
 80092c8:	d142      	bne.n	8009350 <_strtod_l+0x8f8>
 80092ca:	4ba7      	ldr	r3, [pc, #668]	; (8009568 <_strtod_l+0xb10>)
 80092cc:	429d      	cmp	r5, r3
 80092ce:	d102      	bne.n	80092d6 <_strtod_l+0x87e>
 80092d0:	3001      	adds	r0, #1
 80092d2:	f43f addf 	beq.w	8008e94 <_strtod_l+0x43c>
 80092d6:	4ba3      	ldr	r3, [pc, #652]	; (8009564 <_strtod_l+0xb0c>)
 80092d8:	402b      	ands	r3, r5
 80092da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092de:	f04f 0a00 	mov.w	sl, #0
 80092e2:	e7a0      	b.n	8009226 <_strtod_l+0x7ce>
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	e7ed      	b.n	80092c6 <_strtod_l+0x86e>
 80092ea:	460b      	mov	r3, r1
 80092ec:	e7eb      	b.n	80092c6 <_strtod_l+0x86e>
 80092ee:	bb7b      	cbnz	r3, 8009350 <_strtod_l+0x8f8>
 80092f0:	f1ba 0f00 	cmp.w	sl, #0
 80092f4:	d12c      	bne.n	8009350 <_strtod_l+0x8f8>
 80092f6:	9904      	ldr	r1, [sp, #16]
 80092f8:	4a9a      	ldr	r2, [pc, #616]	; (8009564 <_strtod_l+0xb0c>)
 80092fa:	465b      	mov	r3, fp
 80092fc:	b1f1      	cbz	r1, 800933c <_strtod_l+0x8e4>
 80092fe:	ea02 010b 	and.w	r1, r2, fp
 8009302:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009306:	dc19      	bgt.n	800933c <_strtod_l+0x8e4>
 8009308:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800930c:	f77f ae5b 	ble.w	8008fc6 <_strtod_l+0x56e>
 8009310:	4a96      	ldr	r2, [pc, #600]	; (800956c <_strtod_l+0xb14>)
 8009312:	2300      	movs	r3, #0
 8009314:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009320:	f7f7 f972 	bl	8000608 <__aeabi_dmul>
 8009324:	4682      	mov	sl, r0
 8009326:	468b      	mov	fp, r1
 8009328:	2900      	cmp	r1, #0
 800932a:	f47f adbe 	bne.w	8008eaa <_strtod_l+0x452>
 800932e:	2800      	cmp	r0, #0
 8009330:	f47f adbb 	bne.w	8008eaa <_strtod_l+0x452>
 8009334:	2322      	movs	r3, #34	; 0x22
 8009336:	f8c9 3000 	str.w	r3, [r9]
 800933a:	e5b6      	b.n	8008eaa <_strtod_l+0x452>
 800933c:	4013      	ands	r3, r2
 800933e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009342:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009346:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800934a:	f04f 3aff 	mov.w	sl, #4294967295
 800934e:	e76a      	b.n	8009226 <_strtod_l+0x7ce>
 8009350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009352:	b193      	cbz	r3, 800937a <_strtod_l+0x922>
 8009354:	422b      	tst	r3, r5
 8009356:	f43f af66 	beq.w	8009226 <_strtod_l+0x7ce>
 800935a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800935c:	9a04      	ldr	r2, [sp, #16]
 800935e:	4650      	mov	r0, sl
 8009360:	4659      	mov	r1, fp
 8009362:	b173      	cbz	r3, 8009382 <_strtod_l+0x92a>
 8009364:	f7ff fb5b 	bl	8008a1e <sulp>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009370:	f7f6 ff94 	bl	800029c <__adddf3>
 8009374:	4682      	mov	sl, r0
 8009376:	468b      	mov	fp, r1
 8009378:	e755      	b.n	8009226 <_strtod_l+0x7ce>
 800937a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800937c:	ea13 0f0a 	tst.w	r3, sl
 8009380:	e7e9      	b.n	8009356 <_strtod_l+0x8fe>
 8009382:	f7ff fb4c 	bl	8008a1e <sulp>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800938e:	f7f6 ff83 	bl	8000298 <__aeabi_dsub>
 8009392:	2200      	movs	r2, #0
 8009394:	2300      	movs	r3, #0
 8009396:	4682      	mov	sl, r0
 8009398:	468b      	mov	fp, r1
 800939a:	f7f7 fb9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f47f ae11 	bne.w	8008fc6 <_strtod_l+0x56e>
 80093a4:	e73f      	b.n	8009226 <_strtod_l+0x7ce>
 80093a6:	4641      	mov	r1, r8
 80093a8:	4620      	mov	r0, r4
 80093aa:	f001 ff30 	bl	800b20e <__ratio>
 80093ae:	ec57 6b10 	vmov	r6, r7, d0
 80093b2:	2200      	movs	r2, #0
 80093b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093b8:	ee10 0a10 	vmov	r0, s0
 80093bc:	4639      	mov	r1, r7
 80093be:	f7f7 fb9f 	bl	8000b00 <__aeabi_dcmple>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d077      	beq.n	80094b6 <_strtod_l+0xa5e>
 80093c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d04a      	beq.n	8009462 <_strtod_l+0xa0a>
 80093cc:	4b68      	ldr	r3, [pc, #416]	; (8009570 <_strtod_l+0xb18>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093d4:	4f66      	ldr	r7, [pc, #408]	; (8009570 <_strtod_l+0xb18>)
 80093d6:	2600      	movs	r6, #0
 80093d8:	4b62      	ldr	r3, [pc, #392]	; (8009564 <_strtod_l+0xb0c>)
 80093da:	402b      	ands	r3, r5
 80093dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80093de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093e0:	4b64      	ldr	r3, [pc, #400]	; (8009574 <_strtod_l+0xb1c>)
 80093e2:	429a      	cmp	r2, r3
 80093e4:	f040 80ce 	bne.w	8009584 <_strtod_l+0xb2c>
 80093e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80093f4:	ec4b ab10 	vmov	d0, sl, fp
 80093f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80093fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009400:	f001 fe40 	bl	800b084 <__ulp>
 8009404:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009408:	ec53 2b10 	vmov	r2, r3, d0
 800940c:	f7f7 f8fc 	bl	8000608 <__aeabi_dmul>
 8009410:	4652      	mov	r2, sl
 8009412:	465b      	mov	r3, fp
 8009414:	f7f6 ff42 	bl	800029c <__adddf3>
 8009418:	460b      	mov	r3, r1
 800941a:	4952      	ldr	r1, [pc, #328]	; (8009564 <_strtod_l+0xb0c>)
 800941c:	4a56      	ldr	r2, [pc, #344]	; (8009578 <_strtod_l+0xb20>)
 800941e:	4019      	ands	r1, r3
 8009420:	4291      	cmp	r1, r2
 8009422:	4682      	mov	sl, r0
 8009424:	d95b      	bls.n	80094de <_strtod_l+0xa86>
 8009426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009428:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800942c:	4293      	cmp	r3, r2
 800942e:	d103      	bne.n	8009438 <_strtod_l+0x9e0>
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	3301      	adds	r3, #1
 8009434:	f43f ad2e 	beq.w	8008e94 <_strtod_l+0x43c>
 8009438:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009568 <_strtod_l+0xb10>
 800943c:	f04f 3aff 	mov.w	sl, #4294967295
 8009440:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009442:	4648      	mov	r0, r9
 8009444:	f001 fb87 	bl	800ab56 <_Bfree>
 8009448:	9905      	ldr	r1, [sp, #20]
 800944a:	4648      	mov	r0, r9
 800944c:	f001 fb83 	bl	800ab56 <_Bfree>
 8009450:	4641      	mov	r1, r8
 8009452:	4648      	mov	r0, r9
 8009454:	f001 fb7f 	bl	800ab56 <_Bfree>
 8009458:	4621      	mov	r1, r4
 800945a:	4648      	mov	r0, r9
 800945c:	f001 fb7b 	bl	800ab56 <_Bfree>
 8009460:	e619      	b.n	8009096 <_strtod_l+0x63e>
 8009462:	f1ba 0f00 	cmp.w	sl, #0
 8009466:	d11a      	bne.n	800949e <_strtod_l+0xa46>
 8009468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800946c:	b9eb      	cbnz	r3, 80094aa <_strtod_l+0xa52>
 800946e:	2200      	movs	r2, #0
 8009470:	4b3f      	ldr	r3, [pc, #252]	; (8009570 <_strtod_l+0xb18>)
 8009472:	4630      	mov	r0, r6
 8009474:	4639      	mov	r1, r7
 8009476:	f7f7 fb39 	bl	8000aec <__aeabi_dcmplt>
 800947a:	b9c8      	cbnz	r0, 80094b0 <_strtod_l+0xa58>
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	2200      	movs	r2, #0
 8009482:	4b3e      	ldr	r3, [pc, #248]	; (800957c <_strtod_l+0xb24>)
 8009484:	f7f7 f8c0 	bl	8000608 <__aeabi_dmul>
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009490:	9618      	str	r6, [sp, #96]	; 0x60
 8009492:	9319      	str	r3, [sp, #100]	; 0x64
 8009494:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009498:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800949c:	e79c      	b.n	80093d8 <_strtod_l+0x980>
 800949e:	f1ba 0f01 	cmp.w	sl, #1
 80094a2:	d102      	bne.n	80094aa <_strtod_l+0xa52>
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	f43f ad8e 	beq.w	8008fc6 <_strtod_l+0x56e>
 80094aa:	2200      	movs	r2, #0
 80094ac:	4b34      	ldr	r3, [pc, #208]	; (8009580 <_strtod_l+0xb28>)
 80094ae:	e78f      	b.n	80093d0 <_strtod_l+0x978>
 80094b0:	2600      	movs	r6, #0
 80094b2:	4f32      	ldr	r7, [pc, #200]	; (800957c <_strtod_l+0xb24>)
 80094b4:	e7ea      	b.n	800948c <_strtod_l+0xa34>
 80094b6:	4b31      	ldr	r3, [pc, #196]	; (800957c <_strtod_l+0xb24>)
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	2200      	movs	r2, #0
 80094be:	f7f7 f8a3 	bl	8000608 <__aeabi_dmul>
 80094c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	b933      	cbnz	r3, 80094d8 <_strtod_l+0xa80>
 80094ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ce:	9010      	str	r0, [sp, #64]	; 0x40
 80094d0:	9311      	str	r3, [sp, #68]	; 0x44
 80094d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094d6:	e7df      	b.n	8009498 <_strtod_l+0xa40>
 80094d8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80094dc:	e7f9      	b.n	80094d2 <_strtod_l+0xa7a>
 80094de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1ab      	bne.n	8009440 <_strtod_l+0x9e8>
 80094e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094ec:	0d1b      	lsrs	r3, r3, #20
 80094ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094f0:	051b      	lsls	r3, r3, #20
 80094f2:	429a      	cmp	r2, r3
 80094f4:	465d      	mov	r5, fp
 80094f6:	d1a3      	bne.n	8009440 <_strtod_l+0x9e8>
 80094f8:	4639      	mov	r1, r7
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7f7 fb34 	bl	8000b68 <__aeabi_d2iz>
 8009500:	f7f7 f818 	bl	8000534 <__aeabi_i2d>
 8009504:	460b      	mov	r3, r1
 8009506:	4602      	mov	r2, r0
 8009508:	4639      	mov	r1, r7
 800950a:	4630      	mov	r0, r6
 800950c:	f7f6 fec4 	bl	8000298 <__aeabi_dsub>
 8009510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	b933      	cbnz	r3, 8009526 <_strtod_l+0xace>
 8009518:	f1ba 0f00 	cmp.w	sl, #0
 800951c:	d103      	bne.n	8009526 <_strtod_l+0xace>
 800951e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009522:	2d00      	cmp	r5, #0
 8009524:	d06d      	beq.n	8009602 <_strtod_l+0xbaa>
 8009526:	a30a      	add	r3, pc, #40	; (adr r3, 8009550 <_strtod_l+0xaf8>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4630      	mov	r0, r6
 800952e:	4639      	mov	r1, r7
 8009530:	f7f7 fadc 	bl	8000aec <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	f47f acb8 	bne.w	8008eaa <_strtod_l+0x452>
 800953a:	a307      	add	r3, pc, #28	; (adr r3, 8009558 <_strtod_l+0xb00>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 faf0 	bl	8000b28 <__aeabi_dcmpgt>
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f af79 	beq.w	8009440 <_strtod_l+0x9e8>
 800954e:	e4ac      	b.n	8008eaa <_strtod_l+0x452>
 8009550:	94a03595 	.word	0x94a03595
 8009554:	3fdfffff 	.word	0x3fdfffff
 8009558:	35afe535 	.word	0x35afe535
 800955c:	3fe00000 	.word	0x3fe00000
 8009560:	000fffff 	.word	0x000fffff
 8009564:	7ff00000 	.word	0x7ff00000
 8009568:	7fefffff 	.word	0x7fefffff
 800956c:	39500000 	.word	0x39500000
 8009570:	3ff00000 	.word	0x3ff00000
 8009574:	7fe00000 	.word	0x7fe00000
 8009578:	7c9fffff 	.word	0x7c9fffff
 800957c:	3fe00000 	.word	0x3fe00000
 8009580:	bff00000 	.word	0xbff00000
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	b333      	cbz	r3, 80095d6 <_strtod_l+0xb7e>
 8009588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800958a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800958e:	d822      	bhi.n	80095d6 <_strtod_l+0xb7e>
 8009590:	a327      	add	r3, pc, #156	; (adr r3, 8009630 <_strtod_l+0xbd8>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 fab1 	bl	8000b00 <__aeabi_dcmple>
 800959e:	b1a0      	cbz	r0, 80095ca <_strtod_l+0xb72>
 80095a0:	4639      	mov	r1, r7
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7f7 fb08 	bl	8000bb8 <__aeabi_d2uiz>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	bf08      	it	eq
 80095ac:	2001      	moveq	r0, #1
 80095ae:	f7f6 ffb1 	bl	8000514 <__aeabi_ui2d>
 80095b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	bb03      	cbnz	r3, 80095fc <_strtod_l+0xba4>
 80095ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095be:	9012      	str	r0, [sp, #72]	; 0x48
 80095c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80095c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80095c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095ce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095d2:	1a9b      	subs	r3, r3, r2
 80095d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80095da:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80095de:	f001 fd51 	bl	800b084 <__ulp>
 80095e2:	4650      	mov	r0, sl
 80095e4:	ec53 2b10 	vmov	r2, r3, d0
 80095e8:	4659      	mov	r1, fp
 80095ea:	f7f7 f80d 	bl	8000608 <__aeabi_dmul>
 80095ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095f2:	f7f6 fe53 	bl	800029c <__adddf3>
 80095f6:	4682      	mov	sl, r0
 80095f8:	468b      	mov	fp, r1
 80095fa:	e772      	b.n	80094e2 <_strtod_l+0xa8a>
 80095fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009600:	e7df      	b.n	80095c2 <_strtod_l+0xb6a>
 8009602:	a30d      	add	r3, pc, #52	; (adr r3, 8009638 <_strtod_l+0xbe0>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f7 fa70 	bl	8000aec <__aeabi_dcmplt>
 800960c:	e79c      	b.n	8009548 <_strtod_l+0xaf0>
 800960e:	2300      	movs	r3, #0
 8009610:	930d      	str	r3, [sp, #52]	; 0x34
 8009612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	f7ff ba61 	b.w	8008ade <_strtod_l+0x86>
 800961c:	2b65      	cmp	r3, #101	; 0x65
 800961e:	f04f 0200 	mov.w	r2, #0
 8009622:	f43f ab4e 	beq.w	8008cc2 <_strtod_l+0x26a>
 8009626:	2101      	movs	r1, #1
 8009628:	4614      	mov	r4, r2
 800962a:	9104      	str	r1, [sp, #16]
 800962c:	f7ff bacb 	b.w	8008bc6 <_strtod_l+0x16e>
 8009630:	ffc00000 	.word	0xffc00000
 8009634:	41dfffff 	.word	0x41dfffff
 8009638:	94a03595 	.word	0x94a03595
 800963c:	3fcfffff 	.word	0x3fcfffff

08009640 <_strtod_r>:
 8009640:	4b05      	ldr	r3, [pc, #20]	; (8009658 <_strtod_r+0x18>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	b410      	push	{r4}
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	4c04      	ldr	r4, [pc, #16]	; (800965c <_strtod_r+0x1c>)
 800964a:	2b00      	cmp	r3, #0
 800964c:	bf08      	it	eq
 800964e:	4623      	moveq	r3, r4
 8009650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009654:	f7ff ba00 	b.w	8008a58 <_strtod_l>
 8009658:	20000090 	.word	0x20000090
 800965c:	200000f4 	.word	0x200000f4

08009660 <_strtol_l.isra.0>:
 8009660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009664:	4680      	mov	r8, r0
 8009666:	4689      	mov	r9, r1
 8009668:	4692      	mov	sl, r2
 800966a:	461e      	mov	r6, r3
 800966c:	460f      	mov	r7, r1
 800966e:	463d      	mov	r5, r7
 8009670:	9808      	ldr	r0, [sp, #32]
 8009672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009676:	f001 fa01 	bl	800aa7c <__locale_ctype_ptr_l>
 800967a:	4420      	add	r0, r4
 800967c:	7843      	ldrb	r3, [r0, #1]
 800967e:	f013 0308 	ands.w	r3, r3, #8
 8009682:	d132      	bne.n	80096ea <_strtol_l.isra.0+0x8a>
 8009684:	2c2d      	cmp	r4, #45	; 0x2d
 8009686:	d132      	bne.n	80096ee <_strtol_l.isra.0+0x8e>
 8009688:	787c      	ldrb	r4, [r7, #1]
 800968a:	1cbd      	adds	r5, r7, #2
 800968c:	2201      	movs	r2, #1
 800968e:	2e00      	cmp	r6, #0
 8009690:	d05d      	beq.n	800974e <_strtol_l.isra.0+0xee>
 8009692:	2e10      	cmp	r6, #16
 8009694:	d109      	bne.n	80096aa <_strtol_l.isra.0+0x4a>
 8009696:	2c30      	cmp	r4, #48	; 0x30
 8009698:	d107      	bne.n	80096aa <_strtol_l.isra.0+0x4a>
 800969a:	782b      	ldrb	r3, [r5, #0]
 800969c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096a0:	2b58      	cmp	r3, #88	; 0x58
 80096a2:	d14f      	bne.n	8009744 <_strtol_l.isra.0+0xe4>
 80096a4:	786c      	ldrb	r4, [r5, #1]
 80096a6:	2610      	movs	r6, #16
 80096a8:	3502      	adds	r5, #2
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	bf14      	ite	ne
 80096ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80096b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80096b6:	2700      	movs	r7, #0
 80096b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80096bc:	4638      	mov	r0, r7
 80096be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80096c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d817      	bhi.n	80096fa <_strtol_l.isra.0+0x9a>
 80096ca:	461c      	mov	r4, r3
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	dd23      	ble.n	8009718 <_strtol_l.isra.0+0xb8>
 80096d0:	1c7b      	adds	r3, r7, #1
 80096d2:	d007      	beq.n	80096e4 <_strtol_l.isra.0+0x84>
 80096d4:	4584      	cmp	ip, r0
 80096d6:	d31c      	bcc.n	8009712 <_strtol_l.isra.0+0xb2>
 80096d8:	d101      	bne.n	80096de <_strtol_l.isra.0+0x7e>
 80096da:	45a6      	cmp	lr, r4
 80096dc:	db19      	blt.n	8009712 <_strtol_l.isra.0+0xb2>
 80096de:	fb00 4006 	mla	r0, r0, r6, r4
 80096e2:	2701      	movs	r7, #1
 80096e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096e8:	e7eb      	b.n	80096c2 <_strtol_l.isra.0+0x62>
 80096ea:	462f      	mov	r7, r5
 80096ec:	e7bf      	b.n	800966e <_strtol_l.isra.0+0xe>
 80096ee:	2c2b      	cmp	r4, #43	; 0x2b
 80096f0:	bf04      	itt	eq
 80096f2:	1cbd      	addeq	r5, r7, #2
 80096f4:	787c      	ldrbeq	r4, [r7, #1]
 80096f6:	461a      	mov	r2, r3
 80096f8:	e7c9      	b.n	800968e <_strtol_l.isra.0+0x2e>
 80096fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80096fe:	2b19      	cmp	r3, #25
 8009700:	d801      	bhi.n	8009706 <_strtol_l.isra.0+0xa6>
 8009702:	3c37      	subs	r4, #55	; 0x37
 8009704:	e7e2      	b.n	80096cc <_strtol_l.isra.0+0x6c>
 8009706:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800970a:	2b19      	cmp	r3, #25
 800970c:	d804      	bhi.n	8009718 <_strtol_l.isra.0+0xb8>
 800970e:	3c57      	subs	r4, #87	; 0x57
 8009710:	e7dc      	b.n	80096cc <_strtol_l.isra.0+0x6c>
 8009712:	f04f 37ff 	mov.w	r7, #4294967295
 8009716:	e7e5      	b.n	80096e4 <_strtol_l.isra.0+0x84>
 8009718:	1c7b      	adds	r3, r7, #1
 800971a:	d108      	bne.n	800972e <_strtol_l.isra.0+0xce>
 800971c:	2322      	movs	r3, #34	; 0x22
 800971e:	f8c8 3000 	str.w	r3, [r8]
 8009722:	4608      	mov	r0, r1
 8009724:	f1ba 0f00 	cmp.w	sl, #0
 8009728:	d107      	bne.n	800973a <_strtol_l.isra.0+0xda>
 800972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972e:	b102      	cbz	r2, 8009732 <_strtol_l.isra.0+0xd2>
 8009730:	4240      	negs	r0, r0
 8009732:	f1ba 0f00 	cmp.w	sl, #0
 8009736:	d0f8      	beq.n	800972a <_strtol_l.isra.0+0xca>
 8009738:	b10f      	cbz	r7, 800973e <_strtol_l.isra.0+0xde>
 800973a:	f105 39ff 	add.w	r9, r5, #4294967295
 800973e:	f8ca 9000 	str.w	r9, [sl]
 8009742:	e7f2      	b.n	800972a <_strtol_l.isra.0+0xca>
 8009744:	2430      	movs	r4, #48	; 0x30
 8009746:	2e00      	cmp	r6, #0
 8009748:	d1af      	bne.n	80096aa <_strtol_l.isra.0+0x4a>
 800974a:	2608      	movs	r6, #8
 800974c:	e7ad      	b.n	80096aa <_strtol_l.isra.0+0x4a>
 800974e:	2c30      	cmp	r4, #48	; 0x30
 8009750:	d0a3      	beq.n	800969a <_strtol_l.isra.0+0x3a>
 8009752:	260a      	movs	r6, #10
 8009754:	e7a9      	b.n	80096aa <_strtol_l.isra.0+0x4a>
	...

08009758 <_strtol_r>:
 8009758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800975a:	4c06      	ldr	r4, [pc, #24]	; (8009774 <_strtol_r+0x1c>)
 800975c:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_strtol_r+0x20>)
 800975e:	6824      	ldr	r4, [r4, #0]
 8009760:	6a24      	ldr	r4, [r4, #32]
 8009762:	2c00      	cmp	r4, #0
 8009764:	bf08      	it	eq
 8009766:	462c      	moveq	r4, r5
 8009768:	9400      	str	r4, [sp, #0]
 800976a:	f7ff ff79 	bl	8009660 <_strtol_l.isra.0>
 800976e:	b003      	add	sp, #12
 8009770:	bd30      	pop	{r4, r5, pc}
 8009772:	bf00      	nop
 8009774:	20000090 	.word	0x20000090
 8009778:	200000f4 	.word	0x200000f4

0800977c <strtol>:
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <strtol+0x24>)
 800977e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009780:	681c      	ldr	r4, [r3, #0]
 8009782:	4d08      	ldr	r5, [pc, #32]	; (80097a4 <strtol+0x28>)
 8009784:	6a23      	ldr	r3, [r4, #32]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bf08      	it	eq
 800978a:	462b      	moveq	r3, r5
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	4613      	mov	r3, r2
 8009790:	460a      	mov	r2, r1
 8009792:	4601      	mov	r1, r0
 8009794:	4620      	mov	r0, r4
 8009796:	f7ff ff63 	bl	8009660 <_strtol_l.isra.0>
 800979a:	b003      	add	sp, #12
 800979c:	bd30      	pop	{r4, r5, pc}
 800979e:	bf00      	nop
 80097a0:	20000090 	.word	0x20000090
 80097a4:	200000f4 	.word	0x200000f4

080097a8 <quorem>:
 80097a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	6903      	ldr	r3, [r0, #16]
 80097ae:	690c      	ldr	r4, [r1, #16]
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	4680      	mov	r8, r0
 80097b4:	f2c0 8082 	blt.w	80098bc <quorem+0x114>
 80097b8:	3c01      	subs	r4, #1
 80097ba:	f101 0714 	add.w	r7, r1, #20
 80097be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80097c2:	f100 0614 	add.w	r6, r0, #20
 80097c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80097ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80097ce:	eb06 030c 	add.w	r3, r6, ip
 80097d2:	3501      	adds	r5, #1
 80097d4:	eb07 090c 	add.w	r9, r7, ip
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	fbb0 f5f5 	udiv	r5, r0, r5
 80097de:	b395      	cbz	r5, 8009846 <quorem+0x9e>
 80097e0:	f04f 0a00 	mov.w	sl, #0
 80097e4:	4638      	mov	r0, r7
 80097e6:	46b6      	mov	lr, r6
 80097e8:	46d3      	mov	fp, sl
 80097ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80097ee:	b293      	uxth	r3, r2
 80097f0:	fb05 a303 	mla	r3, r5, r3, sl
 80097f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	ebab 0303 	sub.w	r3, fp, r3
 80097fe:	0c12      	lsrs	r2, r2, #16
 8009800:	f8de b000 	ldr.w	fp, [lr]
 8009804:	fb05 a202 	mla	r2, r5, r2, sl
 8009808:	fa13 f38b 	uxtah	r3, r3, fp
 800980c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009810:	fa1f fb82 	uxth.w	fp, r2
 8009814:	f8de 2000 	ldr.w	r2, [lr]
 8009818:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800981c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009820:	b29b      	uxth	r3, r3
 8009822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009826:	4581      	cmp	r9, r0
 8009828:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800982c:	f84e 3b04 	str.w	r3, [lr], #4
 8009830:	d2db      	bcs.n	80097ea <quorem+0x42>
 8009832:	f856 300c 	ldr.w	r3, [r6, ip]
 8009836:	b933      	cbnz	r3, 8009846 <quorem+0x9e>
 8009838:	9b01      	ldr	r3, [sp, #4]
 800983a:	3b04      	subs	r3, #4
 800983c:	429e      	cmp	r6, r3
 800983e:	461a      	mov	r2, r3
 8009840:	d330      	bcc.n	80098a4 <quorem+0xfc>
 8009842:	f8c8 4010 	str.w	r4, [r8, #16]
 8009846:	4640      	mov	r0, r8
 8009848:	f001 fba4 	bl	800af94 <__mcmp>
 800984c:	2800      	cmp	r0, #0
 800984e:	db25      	blt.n	800989c <quorem+0xf4>
 8009850:	3501      	adds	r5, #1
 8009852:	4630      	mov	r0, r6
 8009854:	f04f 0c00 	mov.w	ip, #0
 8009858:	f857 2b04 	ldr.w	r2, [r7], #4
 800985c:	f8d0 e000 	ldr.w	lr, [r0]
 8009860:	b293      	uxth	r3, r2
 8009862:	ebac 0303 	sub.w	r3, ip, r3
 8009866:	0c12      	lsrs	r2, r2, #16
 8009868:	fa13 f38e 	uxtah	r3, r3, lr
 800986c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009874:	b29b      	uxth	r3, r3
 8009876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987a:	45b9      	cmp	r9, r7
 800987c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009880:	f840 3b04 	str.w	r3, [r0], #4
 8009884:	d2e8      	bcs.n	8009858 <quorem+0xb0>
 8009886:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800988a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800988e:	b92a      	cbnz	r2, 800989c <quorem+0xf4>
 8009890:	3b04      	subs	r3, #4
 8009892:	429e      	cmp	r6, r3
 8009894:	461a      	mov	r2, r3
 8009896:	d30b      	bcc.n	80098b0 <quorem+0x108>
 8009898:	f8c8 4010 	str.w	r4, [r8, #16]
 800989c:	4628      	mov	r0, r5
 800989e:	b003      	add	sp, #12
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	3b04      	subs	r3, #4
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	d1ca      	bne.n	8009842 <quorem+0x9a>
 80098ac:	3c01      	subs	r4, #1
 80098ae:	e7c5      	b.n	800983c <quorem+0x94>
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	3b04      	subs	r3, #4
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	d1ef      	bne.n	8009898 <quorem+0xf0>
 80098b8:	3c01      	subs	r4, #1
 80098ba:	e7ea      	b.n	8009892 <quorem+0xea>
 80098bc:	2000      	movs	r0, #0
 80098be:	e7ee      	b.n	800989e <quorem+0xf6>

080098c0 <_dtoa_r>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	ec57 6b10 	vmov	r6, r7, d0
 80098c8:	b097      	sub	sp, #92	; 0x5c
 80098ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098cc:	9106      	str	r1, [sp, #24]
 80098ce:	4604      	mov	r4, r0
 80098d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80098d2:	9312      	str	r3, [sp, #72]	; 0x48
 80098d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098d8:	e9cd 6700 	strd	r6, r7, [sp]
 80098dc:	b93d      	cbnz	r5, 80098ee <_dtoa_r+0x2e>
 80098de:	2010      	movs	r0, #16
 80098e0:	f001 f8e0 	bl	800aaa4 <malloc>
 80098e4:	6260      	str	r0, [r4, #36]	; 0x24
 80098e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098ea:	6005      	str	r5, [r0, #0]
 80098ec:	60c5      	str	r5, [r0, #12]
 80098ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f0:	6819      	ldr	r1, [r3, #0]
 80098f2:	b151      	cbz	r1, 800990a <_dtoa_r+0x4a>
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	604a      	str	r2, [r1, #4]
 80098f8:	2301      	movs	r3, #1
 80098fa:	4093      	lsls	r3, r2
 80098fc:	608b      	str	r3, [r1, #8]
 80098fe:	4620      	mov	r0, r4
 8009900:	f001 f929 	bl	800ab56 <_Bfree>
 8009904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	1e3b      	subs	r3, r7, #0
 800990c:	bfbb      	ittet	lt
 800990e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009912:	9301      	strlt	r3, [sp, #4]
 8009914:	2300      	movge	r3, #0
 8009916:	2201      	movlt	r2, #1
 8009918:	bfac      	ite	ge
 800991a:	f8c8 3000 	strge.w	r3, [r8]
 800991e:	f8c8 2000 	strlt.w	r2, [r8]
 8009922:	4baf      	ldr	r3, [pc, #700]	; (8009be0 <_dtoa_r+0x320>)
 8009924:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009928:	ea33 0308 	bics.w	r3, r3, r8
 800992c:	d114      	bne.n	8009958 <_dtoa_r+0x98>
 800992e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009930:	f242 730f 	movw	r3, #9999	; 0x270f
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	9b00      	ldr	r3, [sp, #0]
 8009938:	b923      	cbnz	r3, 8009944 <_dtoa_r+0x84>
 800993a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800993e:	2800      	cmp	r0, #0
 8009940:	f000 8542 	beq.w	800a3c8 <_dtoa_r+0xb08>
 8009944:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009946:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009bf4 <_dtoa_r+0x334>
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8544 	beq.w	800a3d8 <_dtoa_r+0xb18>
 8009950:	f10b 0303 	add.w	r3, fp, #3
 8009954:	f000 bd3e 	b.w	800a3d4 <_dtoa_r+0xb14>
 8009958:	e9dd 6700 	ldrd	r6, r7, [sp]
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f7 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009968:	4681      	mov	r9, r0
 800996a:	b168      	cbz	r0, 8009988 <_dtoa_r+0xc8>
 800996c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800996e:	2301      	movs	r3, #1
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8524 	beq.w	800a3c2 <_dtoa_r+0xb02>
 800997a:	4b9a      	ldr	r3, [pc, #616]	; (8009be4 <_dtoa_r+0x324>)
 800997c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800997e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	f000 bd28 	b.w	800a3d8 <_dtoa_r+0xb18>
 8009988:	aa14      	add	r2, sp, #80	; 0x50
 800998a:	a915      	add	r1, sp, #84	; 0x54
 800998c:	ec47 6b10 	vmov	d0, r6, r7
 8009990:	4620      	mov	r0, r4
 8009992:	f001 fbed 	bl	800b170 <__d2b>
 8009996:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800999a:	9004      	str	r0, [sp, #16]
 800999c:	2d00      	cmp	r5, #0
 800999e:	d07c      	beq.n	8009a9a <_dtoa_r+0x1da>
 80099a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80099a8:	46b2      	mov	sl, r6
 80099aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80099ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80099b6:	2200      	movs	r2, #0
 80099b8:	4b8b      	ldr	r3, [pc, #556]	; (8009be8 <_dtoa_r+0x328>)
 80099ba:	4650      	mov	r0, sl
 80099bc:	4659      	mov	r1, fp
 80099be:	f7f6 fc6b 	bl	8000298 <__aeabi_dsub>
 80099c2:	a381      	add	r3, pc, #516	; (adr r3, 8009bc8 <_dtoa_r+0x308>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fe1e 	bl	8000608 <__aeabi_dmul>
 80099cc:	a380      	add	r3, pc, #512	; (adr r3, 8009bd0 <_dtoa_r+0x310>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7f6 fc63 	bl	800029c <__adddf3>
 80099d6:	4606      	mov	r6, r0
 80099d8:	4628      	mov	r0, r5
 80099da:	460f      	mov	r7, r1
 80099dc:	f7f6 fdaa 	bl	8000534 <__aeabi_i2d>
 80099e0:	a37d      	add	r3, pc, #500	; (adr r3, 8009bd8 <_dtoa_r+0x318>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fe0f 	bl	8000608 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4630      	mov	r0, r6
 80099f0:	4639      	mov	r1, r7
 80099f2:	f7f6 fc53 	bl	800029c <__adddf3>
 80099f6:	4606      	mov	r6, r0
 80099f8:	460f      	mov	r7, r1
 80099fa:	f7f7 f8b5 	bl	8000b68 <__aeabi_d2iz>
 80099fe:	2200      	movs	r2, #0
 8009a00:	4682      	mov	sl, r0
 8009a02:	2300      	movs	r3, #0
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f7f7 f870 	bl	8000aec <__aeabi_dcmplt>
 8009a0c:	b148      	cbz	r0, 8009a22 <_dtoa_r+0x162>
 8009a0e:	4650      	mov	r0, sl
 8009a10:	f7f6 fd90 	bl	8000534 <__aeabi_i2d>
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	f7f7 f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a1c:	b908      	cbnz	r0, 8009a22 <_dtoa_r+0x162>
 8009a1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a22:	f1ba 0f16 	cmp.w	sl, #22
 8009a26:	d859      	bhi.n	8009adc <_dtoa_r+0x21c>
 8009a28:	4970      	ldr	r1, [pc, #448]	; (8009bec <_dtoa_r+0x32c>)
 8009a2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a36:	f7f7 f877 	bl	8000b28 <__aeabi_dcmpgt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d050      	beq.n	8009ae0 <_dtoa_r+0x220>
 8009a3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a42:	2300      	movs	r3, #0
 8009a44:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a48:	1b5d      	subs	r5, r3, r5
 8009a4a:	f1b5 0801 	subs.w	r8, r5, #1
 8009a4e:	bf49      	itett	mi
 8009a50:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a54:	2300      	movpl	r3, #0
 8009a56:	9305      	strmi	r3, [sp, #20]
 8009a58:	f04f 0800 	movmi.w	r8, #0
 8009a5c:	bf58      	it	pl
 8009a5e:	9305      	strpl	r3, [sp, #20]
 8009a60:	f1ba 0f00 	cmp.w	sl, #0
 8009a64:	db3e      	blt.n	8009ae4 <_dtoa_r+0x224>
 8009a66:	2300      	movs	r3, #0
 8009a68:	44d0      	add	r8, sl
 8009a6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	9b06      	ldr	r3, [sp, #24]
 8009a72:	2b09      	cmp	r3, #9
 8009a74:	f200 8090 	bhi.w	8009b98 <_dtoa_r+0x2d8>
 8009a78:	2b05      	cmp	r3, #5
 8009a7a:	bfc4      	itt	gt
 8009a7c:	3b04      	subgt	r3, #4
 8009a7e:	9306      	strgt	r3, [sp, #24]
 8009a80:	9b06      	ldr	r3, [sp, #24]
 8009a82:	f1a3 0302 	sub.w	r3, r3, #2
 8009a86:	bfcc      	ite	gt
 8009a88:	2500      	movgt	r5, #0
 8009a8a:	2501      	movle	r5, #1
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	f200 808f 	bhi.w	8009bb0 <_dtoa_r+0x2f0>
 8009a92:	e8df f003 	tbb	[pc, r3]
 8009a96:	7f7d      	.short	0x7f7d
 8009a98:	7131      	.short	0x7131
 8009a9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009a9e:	441d      	add	r5, r3
 8009aa0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009aa4:	2820      	cmp	r0, #32
 8009aa6:	dd13      	ble.n	8009ad0 <_dtoa_r+0x210>
 8009aa8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009aac:	9b00      	ldr	r3, [sp, #0]
 8009aae:	fa08 f800 	lsl.w	r8, r8, r0
 8009ab2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009ab6:	fa23 f000 	lsr.w	r0, r3, r0
 8009aba:	ea48 0000 	orr.w	r0, r8, r0
 8009abe:	f7f6 fd29 	bl	8000514 <__aeabi_ui2d>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009aca:	3d01      	subs	r5, #1
 8009acc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ace:	e772      	b.n	80099b6 <_dtoa_r+0xf6>
 8009ad0:	9b00      	ldr	r3, [sp, #0]
 8009ad2:	f1c0 0020 	rsb	r0, r0, #32
 8009ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8009ada:	e7f0      	b.n	8009abe <_dtoa_r+0x1fe>
 8009adc:	2301      	movs	r3, #1
 8009ade:	e7b1      	b.n	8009a44 <_dtoa_r+0x184>
 8009ae0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ae2:	e7b0      	b.n	8009a46 <_dtoa_r+0x186>
 8009ae4:	9b05      	ldr	r3, [sp, #20]
 8009ae6:	eba3 030a 	sub.w	r3, r3, sl
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	f1ca 0300 	rsb	r3, sl, #0
 8009af0:	9307      	str	r3, [sp, #28]
 8009af2:	2300      	movs	r3, #0
 8009af4:	930e      	str	r3, [sp, #56]	; 0x38
 8009af6:	e7bb      	b.n	8009a70 <_dtoa_r+0x1b0>
 8009af8:	2301      	movs	r3, #1
 8009afa:	930a      	str	r3, [sp, #40]	; 0x28
 8009afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dd59      	ble.n	8009bb6 <_dtoa_r+0x2f6>
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	4699      	mov	r9, r3
 8009b06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b08:	2200      	movs	r2, #0
 8009b0a:	6072      	str	r2, [r6, #4]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	f102 0014 	add.w	r0, r2, #20
 8009b12:	4298      	cmp	r0, r3
 8009b14:	6871      	ldr	r1, [r6, #4]
 8009b16:	d953      	bls.n	8009bc0 <_dtoa_r+0x300>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 ffe8 	bl	800aaee <_Balloc>
 8009b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b20:	6030      	str	r0, [r6, #0]
 8009b22:	f1b9 0f0e 	cmp.w	r9, #14
 8009b26:	f8d3 b000 	ldr.w	fp, [r3]
 8009b2a:	f200 80e6 	bhi.w	8009cfa <_dtoa_r+0x43a>
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	f000 80e3 	beq.w	8009cfa <_dtoa_r+0x43a>
 8009b34:	ed9d 7b00 	vldr	d7, [sp]
 8009b38:	f1ba 0f00 	cmp.w	sl, #0
 8009b3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009b40:	dd74      	ble.n	8009c2c <_dtoa_r+0x36c>
 8009b42:	4a2a      	ldr	r2, [pc, #168]	; (8009bec <_dtoa_r+0x32c>)
 8009b44:	f00a 030f 	and.w	r3, sl, #15
 8009b48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b4c:	ed93 7b00 	vldr	d7, [r3]
 8009b50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b54:	06f0      	lsls	r0, r6, #27
 8009b56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009b5a:	d565      	bpl.n	8009c28 <_dtoa_r+0x368>
 8009b5c:	4b24      	ldr	r3, [pc, #144]	; (8009bf0 <_dtoa_r+0x330>)
 8009b5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b66:	f7f6 fe79 	bl	800085c <__aeabi_ddiv>
 8009b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8009b6e:	f006 060f 	and.w	r6, r6, #15
 8009b72:	2503      	movs	r5, #3
 8009b74:	4f1e      	ldr	r7, [pc, #120]	; (8009bf0 <_dtoa_r+0x330>)
 8009b76:	e04c      	b.n	8009c12 <_dtoa_r+0x352>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7e:	4453      	add	r3, sl
 8009b80:	f103 0901 	add.w	r9, r3, #1
 8009b84:	9302      	str	r3, [sp, #8]
 8009b86:	464b      	mov	r3, r9
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	bfb8      	it	lt
 8009b8c:	2301      	movlt	r3, #1
 8009b8e:	e7ba      	b.n	8009b06 <_dtoa_r+0x246>
 8009b90:	2300      	movs	r3, #0
 8009b92:	e7b2      	b.n	8009afa <_dtoa_r+0x23a>
 8009b94:	2300      	movs	r3, #0
 8009b96:	e7f0      	b.n	8009b7a <_dtoa_r+0x2ba>
 8009b98:	2501      	movs	r5, #1
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9306      	str	r3, [sp, #24]
 8009b9e:	950a      	str	r5, [sp, #40]	; 0x28
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	4699      	mov	r9, r3
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2312      	movs	r3, #18
 8009bac:	920b      	str	r2, [sp, #44]	; 0x2c
 8009bae:	e7aa      	b.n	8009b06 <_dtoa_r+0x246>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb4:	e7f4      	b.n	8009ba0 <_dtoa_r+0x2e0>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	9302      	str	r3, [sp, #8]
 8009bba:	4699      	mov	r9, r3
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	e7f5      	b.n	8009bac <_dtoa_r+0x2ec>
 8009bc0:	3101      	adds	r1, #1
 8009bc2:	6071      	str	r1, [r6, #4]
 8009bc4:	0052      	lsls	r2, r2, #1
 8009bc6:	e7a2      	b.n	8009b0e <_dtoa_r+0x24e>
 8009bc8:	636f4361 	.word	0x636f4361
 8009bcc:	3fd287a7 	.word	0x3fd287a7
 8009bd0:	8b60c8b3 	.word	0x8b60c8b3
 8009bd4:	3fc68a28 	.word	0x3fc68a28
 8009bd8:	509f79fb 	.word	0x509f79fb
 8009bdc:	3fd34413 	.word	0x3fd34413
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	0800ba09 	.word	0x0800ba09
 8009be8:	3ff80000 	.word	0x3ff80000
 8009bec:	0800bac8 	.word	0x0800bac8
 8009bf0:	0800baa0 	.word	0x0800baa0
 8009bf4:	0800ba91 	.word	0x0800ba91
 8009bf8:	07f1      	lsls	r1, r6, #31
 8009bfa:	d508      	bpl.n	8009c0e <_dtoa_r+0x34e>
 8009bfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c04:	f7f6 fd00 	bl	8000608 <__aeabi_dmul>
 8009c08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c0c:	3501      	adds	r5, #1
 8009c0e:	1076      	asrs	r6, r6, #1
 8009c10:	3708      	adds	r7, #8
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	d1f0      	bne.n	8009bf8 <_dtoa_r+0x338>
 8009c16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c1e:	f7f6 fe1d 	bl	800085c <__aeabi_ddiv>
 8009c22:	e9cd 0100 	strd	r0, r1, [sp]
 8009c26:	e01a      	b.n	8009c5e <_dtoa_r+0x39e>
 8009c28:	2502      	movs	r5, #2
 8009c2a:	e7a3      	b.n	8009b74 <_dtoa_r+0x2b4>
 8009c2c:	f000 80a0 	beq.w	8009d70 <_dtoa_r+0x4b0>
 8009c30:	f1ca 0600 	rsb	r6, sl, #0
 8009c34:	4b9f      	ldr	r3, [pc, #636]	; (8009eb4 <_dtoa_r+0x5f4>)
 8009c36:	4fa0      	ldr	r7, [pc, #640]	; (8009eb8 <_dtoa_r+0x5f8>)
 8009c38:	f006 020f 	and.w	r2, r6, #15
 8009c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c48:	f7f6 fcde 	bl	8000608 <__aeabi_dmul>
 8009c4c:	e9cd 0100 	strd	r0, r1, [sp]
 8009c50:	1136      	asrs	r6, r6, #4
 8009c52:	2300      	movs	r3, #0
 8009c54:	2502      	movs	r5, #2
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	d17f      	bne.n	8009d5a <_dtoa_r+0x49a>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e1      	bne.n	8009c22 <_dtoa_r+0x362>
 8009c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 8087 	beq.w	8009d74 <_dtoa_r+0x4b4>
 8009c66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4b93      	ldr	r3, [pc, #588]	; (8009ebc <_dtoa_r+0x5fc>)
 8009c6e:	4630      	mov	r0, r6
 8009c70:	4639      	mov	r1, r7
 8009c72:	f7f6 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d07c      	beq.n	8009d74 <_dtoa_r+0x4b4>
 8009c7a:	f1b9 0f00 	cmp.w	r9, #0
 8009c7e:	d079      	beq.n	8009d74 <_dtoa_r+0x4b4>
 8009c80:	9b02      	ldr	r3, [sp, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd35      	ble.n	8009cf2 <_dtoa_r+0x432>
 8009c86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c8a:	9308      	str	r3, [sp, #32]
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	2200      	movs	r2, #0
 8009c90:	4b8b      	ldr	r3, [pc, #556]	; (8009ec0 <_dtoa_r+0x600>)
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7f6 fcb8 	bl	8000608 <__aeabi_dmul>
 8009c98:	e9cd 0100 	strd	r0, r1, [sp]
 8009c9c:	9f02      	ldr	r7, [sp, #8]
 8009c9e:	3501      	adds	r5, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f7f6 fc47 	bl	8000534 <__aeabi_i2d>
 8009ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009caa:	f7f6 fcad 	bl	8000608 <__aeabi_dmul>
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4b84      	ldr	r3, [pc, #528]	; (8009ec4 <_dtoa_r+0x604>)
 8009cb2:	f7f6 faf3 	bl	800029c <__adddf3>
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009cbc:	2f00      	cmp	r7, #0
 8009cbe:	d15d      	bne.n	8009d7c <_dtoa_r+0x4bc>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4b81      	ldr	r3, [pc, #516]	; (8009ec8 <_dtoa_r+0x608>)
 8009cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cc8:	f7f6 fae6 	bl	8000298 <__aeabi_dsub>
 8009ccc:	462a      	mov	r2, r5
 8009cce:	4633      	mov	r3, r6
 8009cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8009cd4:	f7f6 ff28 	bl	8000b28 <__aeabi_dcmpgt>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	f040 8288 	bne.w	800a1ee <_dtoa_r+0x92e>
 8009cde:	462a      	mov	r2, r5
 8009ce0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce8:	f7f6 ff00 	bl	8000aec <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f040 827c 	bne.w	800a1ea <_dtoa_r+0x92a>
 8009cf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cf6:	e9cd 2300 	strd	r2, r3, [sp]
 8009cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f2c0 8150 	blt.w	8009fa2 <_dtoa_r+0x6e2>
 8009d02:	f1ba 0f0e 	cmp.w	sl, #14
 8009d06:	f300 814c 	bgt.w	8009fa2 <_dtoa_r+0x6e2>
 8009d0a:	4b6a      	ldr	r3, [pc, #424]	; (8009eb4 <_dtoa_r+0x5f4>)
 8009d0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d10:	ed93 7b00 	vldr	d7, [r3]
 8009d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d1c:	f280 80d8 	bge.w	8009ed0 <_dtoa_r+0x610>
 8009d20:	f1b9 0f00 	cmp.w	r9, #0
 8009d24:	f300 80d4 	bgt.w	8009ed0 <_dtoa_r+0x610>
 8009d28:	f040 825e 	bne.w	800a1e8 <_dtoa_r+0x928>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4b66      	ldr	r3, [pc, #408]	; (8009ec8 <_dtoa_r+0x608>)
 8009d30:	ec51 0b17 	vmov	r0, r1, d7
 8009d34:	f7f6 fc68 	bl	8000608 <__aeabi_dmul>
 8009d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3c:	f7f6 feea 	bl	8000b14 <__aeabi_dcmpge>
 8009d40:	464f      	mov	r7, r9
 8009d42:	464e      	mov	r6, r9
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f040 8234 	bne.w	800a1b2 <_dtoa_r+0x8f2>
 8009d4a:	2331      	movs	r3, #49	; 0x31
 8009d4c:	f10b 0501 	add.w	r5, fp, #1
 8009d50:	f88b 3000 	strb.w	r3, [fp]
 8009d54:	f10a 0a01 	add.w	sl, sl, #1
 8009d58:	e22f      	b.n	800a1ba <_dtoa_r+0x8fa>
 8009d5a:	07f2      	lsls	r2, r6, #31
 8009d5c:	d505      	bpl.n	8009d6a <_dtoa_r+0x4aa>
 8009d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d62:	f7f6 fc51 	bl	8000608 <__aeabi_dmul>
 8009d66:	3501      	adds	r5, #1
 8009d68:	2301      	movs	r3, #1
 8009d6a:	1076      	asrs	r6, r6, #1
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	e772      	b.n	8009c56 <_dtoa_r+0x396>
 8009d70:	2502      	movs	r5, #2
 8009d72:	e774      	b.n	8009c5e <_dtoa_r+0x39e>
 8009d74:	f8cd a020 	str.w	sl, [sp, #32]
 8009d78:	464f      	mov	r7, r9
 8009d7a:	e791      	b.n	8009ca0 <_dtoa_r+0x3e0>
 8009d7c:	4b4d      	ldr	r3, [pc, #308]	; (8009eb4 <_dtoa_r+0x5f4>)
 8009d7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d047      	beq.n	8009e1c <_dtoa_r+0x55c>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	2000      	movs	r0, #0
 8009d92:	494e      	ldr	r1, [pc, #312]	; (8009ecc <_dtoa_r+0x60c>)
 8009d94:	f7f6 fd62 	bl	800085c <__aeabi_ddiv>
 8009d98:	462a      	mov	r2, r5
 8009d9a:	4633      	mov	r3, r6
 8009d9c:	f7f6 fa7c 	bl	8000298 <__aeabi_dsub>
 8009da0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009da4:	465d      	mov	r5, fp
 8009da6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009daa:	f7f6 fedd 	bl	8000b68 <__aeabi_d2iz>
 8009dae:	4606      	mov	r6, r0
 8009db0:	f7f6 fbc0 	bl	8000534 <__aeabi_i2d>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dbc:	f7f6 fa6c 	bl	8000298 <__aeabi_dsub>
 8009dc0:	3630      	adds	r6, #48	; 0x30
 8009dc2:	f805 6b01 	strb.w	r6, [r5], #1
 8009dc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009dca:	e9cd 0100 	strd	r0, r1, [sp]
 8009dce:	f7f6 fe8d 	bl	8000aec <__aeabi_dcmplt>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d163      	bne.n	8009e9e <_dtoa_r+0x5de>
 8009dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	4937      	ldr	r1, [pc, #220]	; (8009ebc <_dtoa_r+0x5fc>)
 8009dde:	f7f6 fa5b 	bl	8000298 <__aeabi_dsub>
 8009de2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009de6:	f7f6 fe81 	bl	8000aec <__aeabi_dcmplt>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f040 80b7 	bne.w	8009f5e <_dtoa_r+0x69e>
 8009df0:	eba5 030b 	sub.w	r3, r5, fp
 8009df4:	429f      	cmp	r7, r3
 8009df6:	f77f af7c 	ble.w	8009cf2 <_dtoa_r+0x432>
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4b30      	ldr	r3, [pc, #192]	; (8009ec0 <_dtoa_r+0x600>)
 8009dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e02:	f7f6 fc01 	bl	8000608 <__aeabi_dmul>
 8009e06:	2200      	movs	r2, #0
 8009e08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e0c:	4b2c      	ldr	r3, [pc, #176]	; (8009ec0 <_dtoa_r+0x600>)
 8009e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e12:	f7f6 fbf9 	bl	8000608 <__aeabi_dmul>
 8009e16:	e9cd 0100 	strd	r0, r1, [sp]
 8009e1a:	e7c4      	b.n	8009da6 <_dtoa_r+0x4e6>
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	4633      	mov	r3, r6
 8009e20:	f7f6 fbf2 	bl	8000608 <__aeabi_dmul>
 8009e24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e28:	eb0b 0507 	add.w	r5, fp, r7
 8009e2c:	465e      	mov	r6, fp
 8009e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e32:	f7f6 fe99 	bl	8000b68 <__aeabi_d2iz>
 8009e36:	4607      	mov	r7, r0
 8009e38:	f7f6 fb7c 	bl	8000534 <__aeabi_i2d>
 8009e3c:	3730      	adds	r7, #48	; 0x30
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e46:	f7f6 fa27 	bl	8000298 <__aeabi_dsub>
 8009e4a:	f806 7b01 	strb.w	r7, [r6], #1
 8009e4e:	42ae      	cmp	r6, r5
 8009e50:	e9cd 0100 	strd	r0, r1, [sp]
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	d126      	bne.n	8009ea8 <_dtoa_r+0x5e8>
 8009e5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <_dtoa_r+0x60c>)
 8009e5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e60:	f7f6 fa1c 	bl	800029c <__adddf3>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e6c:	f7f6 fe5c 	bl	8000b28 <__aeabi_dcmpgt>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d174      	bne.n	8009f5e <_dtoa_r+0x69e>
 8009e74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e78:	2000      	movs	r0, #0
 8009e7a:	4914      	ldr	r1, [pc, #80]	; (8009ecc <_dtoa_r+0x60c>)
 8009e7c:	f7f6 fa0c 	bl	8000298 <__aeabi_dsub>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e88:	f7f6 fe30 	bl	8000aec <__aeabi_dcmplt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f af30 	beq.w	8009cf2 <_dtoa_r+0x432>
 8009e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e96:	2b30      	cmp	r3, #48	; 0x30
 8009e98:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e9c:	d002      	beq.n	8009ea4 <_dtoa_r+0x5e4>
 8009e9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009ea2:	e04a      	b.n	8009f3a <_dtoa_r+0x67a>
 8009ea4:	4615      	mov	r5, r2
 8009ea6:	e7f4      	b.n	8009e92 <_dtoa_r+0x5d2>
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <_dtoa_r+0x600>)
 8009eaa:	f7f6 fbad 	bl	8000608 <__aeabi_dmul>
 8009eae:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb2:	e7bc      	b.n	8009e2e <_dtoa_r+0x56e>
 8009eb4:	0800bac8 	.word	0x0800bac8
 8009eb8:	0800baa0 	.word	0x0800baa0
 8009ebc:	3ff00000 	.word	0x3ff00000
 8009ec0:	40240000 	.word	0x40240000
 8009ec4:	401c0000 	.word	0x401c0000
 8009ec8:	40140000 	.word	0x40140000
 8009ecc:	3fe00000 	.word	0x3fe00000
 8009ed0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ed4:	465d      	mov	r5, fp
 8009ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eda:	4630      	mov	r0, r6
 8009edc:	4639      	mov	r1, r7
 8009ede:	f7f6 fcbd 	bl	800085c <__aeabi_ddiv>
 8009ee2:	f7f6 fe41 	bl	8000b68 <__aeabi_d2iz>
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	f7f6 fb24 	bl	8000534 <__aeabi_i2d>
 8009eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ef0:	f7f6 fb8a 	bl	8000608 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009f00:	f7f6 f9ca 	bl	8000298 <__aeabi_dsub>
 8009f04:	f805 6b01 	strb.w	r6, [r5], #1
 8009f08:	eba5 060b 	sub.w	r6, r5, fp
 8009f0c:	45b1      	cmp	r9, r6
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	d139      	bne.n	8009f88 <_dtoa_r+0x6c8>
 8009f14:	f7f6 f9c2 	bl	800029c <__adddf3>
 8009f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	460f      	mov	r7, r1
 8009f20:	f7f6 fe02 	bl	8000b28 <__aeabi_dcmpgt>
 8009f24:	b9c8      	cbnz	r0, 8009f5a <_dtoa_r+0x69a>
 8009f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f32:	b110      	cbz	r0, 8009f3a <_dtoa_r+0x67a>
 8009f34:	f018 0f01 	tst.w	r8, #1
 8009f38:	d10f      	bne.n	8009f5a <_dtoa_r+0x69a>
 8009f3a:	9904      	ldr	r1, [sp, #16]
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fe0a 	bl	800ab56 <_Bfree>
 8009f42:	2300      	movs	r3, #0
 8009f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f46:	702b      	strb	r3, [r5, #0]
 8009f48:	f10a 0301 	add.w	r3, sl, #1
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 8241 	beq.w	800a3d8 <_dtoa_r+0xb18>
 8009f56:	601d      	str	r5, [r3, #0]
 8009f58:	e23e      	b.n	800a3d8 <_dtoa_r+0xb18>
 8009f5a:	f8cd a020 	str.w	sl, [sp, #32]
 8009f5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f62:	2a39      	cmp	r2, #57	; 0x39
 8009f64:	f105 33ff 	add.w	r3, r5, #4294967295
 8009f68:	d108      	bne.n	8009f7c <_dtoa_r+0x6bc>
 8009f6a:	459b      	cmp	fp, r3
 8009f6c:	d10a      	bne.n	8009f84 <_dtoa_r+0x6c4>
 8009f6e:	9b08      	ldr	r3, [sp, #32]
 8009f70:	3301      	adds	r3, #1
 8009f72:	9308      	str	r3, [sp, #32]
 8009f74:	2330      	movs	r3, #48	; 0x30
 8009f76:	f88b 3000 	strb.w	r3, [fp]
 8009f7a:	465b      	mov	r3, fp
 8009f7c:	781a      	ldrb	r2, [r3, #0]
 8009f7e:	3201      	adds	r2, #1
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	e78c      	b.n	8009e9e <_dtoa_r+0x5de>
 8009f84:	461d      	mov	r5, r3
 8009f86:	e7ea      	b.n	8009f5e <_dtoa_r+0x69e>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4b9b      	ldr	r3, [pc, #620]	; (800a1f8 <_dtoa_r+0x938>)
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	2200      	movs	r2, #0
 8009f92:	2300      	movs	r3, #0
 8009f94:	4606      	mov	r6, r0
 8009f96:	460f      	mov	r7, r1
 8009f98:	f7f6 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d09a      	beq.n	8009ed6 <_dtoa_r+0x616>
 8009fa0:	e7cb      	b.n	8009f3a <_dtoa_r+0x67a>
 8009fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa4:	2a00      	cmp	r2, #0
 8009fa6:	f000 808b 	beq.w	800a0c0 <_dtoa_r+0x800>
 8009faa:	9a06      	ldr	r2, [sp, #24]
 8009fac:	2a01      	cmp	r2, #1
 8009fae:	dc6e      	bgt.n	800a08e <_dtoa_r+0x7ce>
 8009fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d067      	beq.n	800a086 <_dtoa_r+0x7c6>
 8009fb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fba:	9f07      	ldr	r7, [sp, #28]
 8009fbc:	9d05      	ldr	r5, [sp, #20]
 8009fbe:	9a05      	ldr	r2, [sp, #20]
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	441a      	add	r2, r3
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	9205      	str	r2, [sp, #20]
 8009fc8:	4498      	add	r8, r3
 8009fca:	f000 fea2 	bl	800ad12 <__i2b>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	dd0c      	ble.n	8009fee <_dtoa_r+0x72e>
 8009fd4:	f1b8 0f00 	cmp.w	r8, #0
 8009fd8:	dd09      	ble.n	8009fee <_dtoa_r+0x72e>
 8009fda:	4545      	cmp	r5, r8
 8009fdc:	9a05      	ldr	r2, [sp, #20]
 8009fde:	462b      	mov	r3, r5
 8009fe0:	bfa8      	it	ge
 8009fe2:	4643      	movge	r3, r8
 8009fe4:	1ad2      	subs	r2, r2, r3
 8009fe6:	9205      	str	r2, [sp, #20]
 8009fe8:	1aed      	subs	r5, r5, r3
 8009fea:	eba8 0803 	sub.w	r8, r8, r3
 8009fee:	9b07      	ldr	r3, [sp, #28]
 8009ff0:	b1eb      	cbz	r3, 800a02e <_dtoa_r+0x76e>
 8009ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d067      	beq.n	800a0c8 <_dtoa_r+0x808>
 8009ff8:	b18f      	cbz	r7, 800a01e <_dtoa_r+0x75e>
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 ff26 	bl	800ae50 <__pow5mult>
 800a004:	9a04      	ldr	r2, [sp, #16]
 800a006:	4601      	mov	r1, r0
 800a008:	4606      	mov	r6, r0
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 fe8a 	bl	800ad24 <__multiply>
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	9008      	str	r0, [sp, #32]
 800a014:	4620      	mov	r0, r4
 800a016:	f000 fd9e 	bl	800ab56 <_Bfree>
 800a01a:	9b08      	ldr	r3, [sp, #32]
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	9b07      	ldr	r3, [sp, #28]
 800a020:	1bda      	subs	r2, r3, r7
 800a022:	d004      	beq.n	800a02e <_dtoa_r+0x76e>
 800a024:	9904      	ldr	r1, [sp, #16]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 ff12 	bl	800ae50 <__pow5mult>
 800a02c:	9004      	str	r0, [sp, #16]
 800a02e:	2101      	movs	r1, #1
 800a030:	4620      	mov	r0, r4
 800a032:	f000 fe6e 	bl	800ad12 <__i2b>
 800a036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a038:	4607      	mov	r7, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 81d0 	beq.w	800a3e0 <_dtoa_r+0xb20>
 800a040:	461a      	mov	r2, r3
 800a042:	4601      	mov	r1, r0
 800a044:	4620      	mov	r0, r4
 800a046:	f000 ff03 	bl	800ae50 <__pow5mult>
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	4607      	mov	r7, r0
 800a050:	dc40      	bgt.n	800a0d4 <_dtoa_r+0x814>
 800a052:	9b00      	ldr	r3, [sp, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d139      	bne.n	800a0cc <_dtoa_r+0x80c>
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d136      	bne.n	800a0d0 <_dtoa_r+0x810>
 800a062:	9b01      	ldr	r3, [sp, #4]
 800a064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a068:	0d1b      	lsrs	r3, r3, #20
 800a06a:	051b      	lsls	r3, r3, #20
 800a06c:	b12b      	cbz	r3, 800a07a <_dtoa_r+0x7ba>
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	3301      	adds	r3, #1
 800a072:	9305      	str	r3, [sp, #20]
 800a074:	f108 0801 	add.w	r8, r8, #1
 800a078:	2301      	movs	r3, #1
 800a07a:	9307      	str	r3, [sp, #28]
 800a07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d12a      	bne.n	800a0d8 <_dtoa_r+0x818>
 800a082:	2001      	movs	r0, #1
 800a084:	e030      	b.n	800a0e8 <_dtoa_r+0x828>
 800a086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a088:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a08c:	e795      	b.n	8009fba <_dtoa_r+0x6fa>
 800a08e:	9b07      	ldr	r3, [sp, #28]
 800a090:	f109 37ff 	add.w	r7, r9, #4294967295
 800a094:	42bb      	cmp	r3, r7
 800a096:	bfbf      	itttt	lt
 800a098:	9b07      	ldrlt	r3, [sp, #28]
 800a09a:	9707      	strlt	r7, [sp, #28]
 800a09c:	1afa      	sublt	r2, r7, r3
 800a09e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a0a0:	bfbb      	ittet	lt
 800a0a2:	189b      	addlt	r3, r3, r2
 800a0a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0a6:	1bdf      	subge	r7, r3, r7
 800a0a8:	2700      	movlt	r7, #0
 800a0aa:	f1b9 0f00 	cmp.w	r9, #0
 800a0ae:	bfb5      	itete	lt
 800a0b0:	9b05      	ldrlt	r3, [sp, #20]
 800a0b2:	9d05      	ldrge	r5, [sp, #20]
 800a0b4:	eba3 0509 	sublt.w	r5, r3, r9
 800a0b8:	464b      	movge	r3, r9
 800a0ba:	bfb8      	it	lt
 800a0bc:	2300      	movlt	r3, #0
 800a0be:	e77e      	b.n	8009fbe <_dtoa_r+0x6fe>
 800a0c0:	9f07      	ldr	r7, [sp, #28]
 800a0c2:	9d05      	ldr	r5, [sp, #20]
 800a0c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a0c6:	e783      	b.n	8009fd0 <_dtoa_r+0x710>
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	e7ab      	b.n	800a024 <_dtoa_r+0x764>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e7d4      	b.n	800a07a <_dtoa_r+0x7ba>
 800a0d0:	9b00      	ldr	r3, [sp, #0]
 800a0d2:	e7d2      	b.n	800a07a <_dtoa_r+0x7ba>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	9307      	str	r3, [sp, #28]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a0de:	6918      	ldr	r0, [r3, #16]
 800a0e0:	f000 fdc9 	bl	800ac76 <__hi0bits>
 800a0e4:	f1c0 0020 	rsb	r0, r0, #32
 800a0e8:	4440      	add	r0, r8
 800a0ea:	f010 001f 	ands.w	r0, r0, #31
 800a0ee:	d047      	beq.n	800a180 <_dtoa_r+0x8c0>
 800a0f0:	f1c0 0320 	rsb	r3, r0, #32
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	dd3b      	ble.n	800a170 <_dtoa_r+0x8b0>
 800a0f8:	9b05      	ldr	r3, [sp, #20]
 800a0fa:	f1c0 001c 	rsb	r0, r0, #28
 800a0fe:	4403      	add	r3, r0
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	4405      	add	r5, r0
 800a104:	4480      	add	r8, r0
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dd05      	ble.n	800a118 <_dtoa_r+0x858>
 800a10c:	461a      	mov	r2, r3
 800a10e:	9904      	ldr	r1, [sp, #16]
 800a110:	4620      	mov	r0, r4
 800a112:	f000 feeb 	bl	800aeec <__lshift>
 800a116:	9004      	str	r0, [sp, #16]
 800a118:	f1b8 0f00 	cmp.w	r8, #0
 800a11c:	dd05      	ble.n	800a12a <_dtoa_r+0x86a>
 800a11e:	4639      	mov	r1, r7
 800a120:	4642      	mov	r2, r8
 800a122:	4620      	mov	r0, r4
 800a124:	f000 fee2 	bl	800aeec <__lshift>
 800a128:	4607      	mov	r7, r0
 800a12a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a12c:	b353      	cbz	r3, 800a184 <_dtoa_r+0x8c4>
 800a12e:	4639      	mov	r1, r7
 800a130:	9804      	ldr	r0, [sp, #16]
 800a132:	f000 ff2f 	bl	800af94 <__mcmp>
 800a136:	2800      	cmp	r0, #0
 800a138:	da24      	bge.n	800a184 <_dtoa_r+0x8c4>
 800a13a:	2300      	movs	r3, #0
 800a13c:	220a      	movs	r2, #10
 800a13e:	9904      	ldr	r1, [sp, #16]
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fd1f 	bl	800ab84 <__multadd>
 800a146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a148:	9004      	str	r0, [sp, #16]
 800a14a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 814d 	beq.w	800a3ee <_dtoa_r+0xb2e>
 800a154:	2300      	movs	r3, #0
 800a156:	4631      	mov	r1, r6
 800a158:	220a      	movs	r2, #10
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fd12 	bl	800ab84 <__multadd>
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	4606      	mov	r6, r0
 800a166:	dc4f      	bgt.n	800a208 <_dtoa_r+0x948>
 800a168:	9b06      	ldr	r3, [sp, #24]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	dd4c      	ble.n	800a208 <_dtoa_r+0x948>
 800a16e:	e011      	b.n	800a194 <_dtoa_r+0x8d4>
 800a170:	d0c9      	beq.n	800a106 <_dtoa_r+0x846>
 800a172:	9a05      	ldr	r2, [sp, #20]
 800a174:	331c      	adds	r3, #28
 800a176:	441a      	add	r2, r3
 800a178:	9205      	str	r2, [sp, #20]
 800a17a:	441d      	add	r5, r3
 800a17c:	4498      	add	r8, r3
 800a17e:	e7c2      	b.n	800a106 <_dtoa_r+0x846>
 800a180:	4603      	mov	r3, r0
 800a182:	e7f6      	b.n	800a172 <_dtoa_r+0x8b2>
 800a184:	f1b9 0f00 	cmp.w	r9, #0
 800a188:	dc38      	bgt.n	800a1fc <_dtoa_r+0x93c>
 800a18a:	9b06      	ldr	r3, [sp, #24]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	dd35      	ble.n	800a1fc <_dtoa_r+0x93c>
 800a190:	f8cd 9008 	str.w	r9, [sp, #8]
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	b963      	cbnz	r3, 800a1b2 <_dtoa_r+0x8f2>
 800a198:	4639      	mov	r1, r7
 800a19a:	2205      	movs	r2, #5
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fcf1 	bl	800ab84 <__multadd>
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	9804      	ldr	r0, [sp, #16]
 800a1a8:	f000 fef4 	bl	800af94 <__mcmp>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f73f adcc 	bgt.w	8009d4a <_dtoa_r+0x48a>
 800a1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1b4:	465d      	mov	r5, fp
 800a1b6:	ea6f 0a03 	mvn.w	sl, r3
 800a1ba:	f04f 0900 	mov.w	r9, #0
 800a1be:	4639      	mov	r1, r7
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fcc8 	bl	800ab56 <_Bfree>
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	f43f aeb7 	beq.w	8009f3a <_dtoa_r+0x67a>
 800a1cc:	f1b9 0f00 	cmp.w	r9, #0
 800a1d0:	d005      	beq.n	800a1de <_dtoa_r+0x91e>
 800a1d2:	45b1      	cmp	r9, r6
 800a1d4:	d003      	beq.n	800a1de <_dtoa_r+0x91e>
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fcbc 	bl	800ab56 <_Bfree>
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fcb8 	bl	800ab56 <_Bfree>
 800a1e6:	e6a8      	b.n	8009f3a <_dtoa_r+0x67a>
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	463e      	mov	r6, r7
 800a1ec:	e7e1      	b.n	800a1b2 <_dtoa_r+0x8f2>
 800a1ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a1f2:	463e      	mov	r6, r7
 800a1f4:	e5a9      	b.n	8009d4a <_dtoa_r+0x48a>
 800a1f6:	bf00      	nop
 800a1f8:	40240000 	.word	0x40240000
 800a1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 80fa 	beq.w	800a3fc <_dtoa_r+0xb3c>
 800a208:	2d00      	cmp	r5, #0
 800a20a:	dd05      	ble.n	800a218 <_dtoa_r+0x958>
 800a20c:	4631      	mov	r1, r6
 800a20e:	462a      	mov	r2, r5
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fe6b 	bl	800aeec <__lshift>
 800a216:	4606      	mov	r6, r0
 800a218:	9b07      	ldr	r3, [sp, #28]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d04c      	beq.n	800a2b8 <_dtoa_r+0x9f8>
 800a21e:	6871      	ldr	r1, [r6, #4]
 800a220:	4620      	mov	r0, r4
 800a222:	f000 fc64 	bl	800aaee <_Balloc>
 800a226:	6932      	ldr	r2, [r6, #16]
 800a228:	3202      	adds	r2, #2
 800a22a:	4605      	mov	r5, r0
 800a22c:	0092      	lsls	r2, r2, #2
 800a22e:	f106 010c 	add.w	r1, r6, #12
 800a232:	300c      	adds	r0, #12
 800a234:	f000 fc50 	bl	800aad8 <memcpy>
 800a238:	2201      	movs	r2, #1
 800a23a:	4629      	mov	r1, r5
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 fe55 	bl	800aeec <__lshift>
 800a242:	9b00      	ldr	r3, [sp, #0]
 800a244:	f8cd b014 	str.w	fp, [sp, #20]
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	46b1      	mov	r9, r6
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	4606      	mov	r6, r0
 800a252:	4639      	mov	r1, r7
 800a254:	9804      	ldr	r0, [sp, #16]
 800a256:	f7ff faa7 	bl	80097a8 <quorem>
 800a25a:	4649      	mov	r1, r9
 800a25c:	4605      	mov	r5, r0
 800a25e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a262:	9804      	ldr	r0, [sp, #16]
 800a264:	f000 fe96 	bl	800af94 <__mcmp>
 800a268:	4632      	mov	r2, r6
 800a26a:	9000      	str	r0, [sp, #0]
 800a26c:	4639      	mov	r1, r7
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 feaa 	bl	800afc8 <__mdiff>
 800a274:	68c3      	ldr	r3, [r0, #12]
 800a276:	4602      	mov	r2, r0
 800a278:	bb03      	cbnz	r3, 800a2bc <_dtoa_r+0x9fc>
 800a27a:	4601      	mov	r1, r0
 800a27c:	9008      	str	r0, [sp, #32]
 800a27e:	9804      	ldr	r0, [sp, #16]
 800a280:	f000 fe88 	bl	800af94 <__mcmp>
 800a284:	9a08      	ldr	r2, [sp, #32]
 800a286:	4603      	mov	r3, r0
 800a288:	4611      	mov	r1, r2
 800a28a:	4620      	mov	r0, r4
 800a28c:	9308      	str	r3, [sp, #32]
 800a28e:	f000 fc62 	bl	800ab56 <_Bfree>
 800a292:	9b08      	ldr	r3, [sp, #32]
 800a294:	b9a3      	cbnz	r3, 800a2c0 <_dtoa_r+0xa00>
 800a296:	9a06      	ldr	r2, [sp, #24]
 800a298:	b992      	cbnz	r2, 800a2c0 <_dtoa_r+0xa00>
 800a29a:	9a07      	ldr	r2, [sp, #28]
 800a29c:	b982      	cbnz	r2, 800a2c0 <_dtoa_r+0xa00>
 800a29e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2a2:	d029      	beq.n	800a2f8 <_dtoa_r+0xa38>
 800a2a4:	9b00      	ldr	r3, [sp, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dd01      	ble.n	800a2ae <_dtoa_r+0x9ee>
 800a2aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a2ae:	9b05      	ldr	r3, [sp, #20]
 800a2b0:	1c5d      	adds	r5, r3, #1
 800a2b2:	f883 8000 	strb.w	r8, [r3]
 800a2b6:	e782      	b.n	800a1be <_dtoa_r+0x8fe>
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	e7c2      	b.n	800a242 <_dtoa_r+0x982>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e7e3      	b.n	800a288 <_dtoa_r+0x9c8>
 800a2c0:	9a00      	ldr	r2, [sp, #0]
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	db04      	blt.n	800a2d0 <_dtoa_r+0xa10>
 800a2c6:	d125      	bne.n	800a314 <_dtoa_r+0xa54>
 800a2c8:	9a06      	ldr	r2, [sp, #24]
 800a2ca:	bb1a      	cbnz	r2, 800a314 <_dtoa_r+0xa54>
 800a2cc:	9a07      	ldr	r2, [sp, #28]
 800a2ce:	bb0a      	cbnz	r2, 800a314 <_dtoa_r+0xa54>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	ddec      	ble.n	800a2ae <_dtoa_r+0x9ee>
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	9904      	ldr	r1, [sp, #16]
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 fe07 	bl	800aeec <__lshift>
 800a2de:	4639      	mov	r1, r7
 800a2e0:	9004      	str	r0, [sp, #16]
 800a2e2:	f000 fe57 	bl	800af94 <__mcmp>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	dc03      	bgt.n	800a2f2 <_dtoa_r+0xa32>
 800a2ea:	d1e0      	bne.n	800a2ae <_dtoa_r+0x9ee>
 800a2ec:	f018 0f01 	tst.w	r8, #1
 800a2f0:	d0dd      	beq.n	800a2ae <_dtoa_r+0x9ee>
 800a2f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2f6:	d1d8      	bne.n	800a2aa <_dtoa_r+0x9ea>
 800a2f8:	9b05      	ldr	r3, [sp, #20]
 800a2fa:	9a05      	ldr	r2, [sp, #20]
 800a2fc:	1c5d      	adds	r5, r3, #1
 800a2fe:	2339      	movs	r3, #57	; 0x39
 800a300:	7013      	strb	r3, [r2, #0]
 800a302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a306:	2b39      	cmp	r3, #57	; 0x39
 800a308:	f105 32ff 	add.w	r2, r5, #4294967295
 800a30c:	d04f      	beq.n	800a3ae <_dtoa_r+0xaee>
 800a30e:	3301      	adds	r3, #1
 800a310:	7013      	strb	r3, [r2, #0]
 800a312:	e754      	b.n	800a1be <_dtoa_r+0x8fe>
 800a314:	9a05      	ldr	r2, [sp, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	f102 0501 	add.w	r5, r2, #1
 800a31c:	dd06      	ble.n	800a32c <_dtoa_r+0xa6c>
 800a31e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a322:	d0e9      	beq.n	800a2f8 <_dtoa_r+0xa38>
 800a324:	f108 0801 	add.w	r8, r8, #1
 800a328:	9b05      	ldr	r3, [sp, #20]
 800a32a:	e7c2      	b.n	800a2b2 <_dtoa_r+0x9f2>
 800a32c:	9a02      	ldr	r2, [sp, #8]
 800a32e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a332:	eba5 030b 	sub.w	r3, r5, fp
 800a336:	4293      	cmp	r3, r2
 800a338:	d021      	beq.n	800a37e <_dtoa_r+0xabe>
 800a33a:	2300      	movs	r3, #0
 800a33c:	220a      	movs	r2, #10
 800a33e:	9904      	ldr	r1, [sp, #16]
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fc1f 	bl	800ab84 <__multadd>
 800a346:	45b1      	cmp	r9, r6
 800a348:	9004      	str	r0, [sp, #16]
 800a34a:	f04f 0300 	mov.w	r3, #0
 800a34e:	f04f 020a 	mov.w	r2, #10
 800a352:	4649      	mov	r1, r9
 800a354:	4620      	mov	r0, r4
 800a356:	d105      	bne.n	800a364 <_dtoa_r+0xaa4>
 800a358:	f000 fc14 	bl	800ab84 <__multadd>
 800a35c:	4681      	mov	r9, r0
 800a35e:	4606      	mov	r6, r0
 800a360:	9505      	str	r5, [sp, #20]
 800a362:	e776      	b.n	800a252 <_dtoa_r+0x992>
 800a364:	f000 fc0e 	bl	800ab84 <__multadd>
 800a368:	4631      	mov	r1, r6
 800a36a:	4681      	mov	r9, r0
 800a36c:	2300      	movs	r3, #0
 800a36e:	220a      	movs	r2, #10
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fc07 	bl	800ab84 <__multadd>
 800a376:	4606      	mov	r6, r0
 800a378:	e7f2      	b.n	800a360 <_dtoa_r+0xaa0>
 800a37a:	f04f 0900 	mov.w	r9, #0
 800a37e:	2201      	movs	r2, #1
 800a380:	9904      	ldr	r1, [sp, #16]
 800a382:	4620      	mov	r0, r4
 800a384:	f000 fdb2 	bl	800aeec <__lshift>
 800a388:	4639      	mov	r1, r7
 800a38a:	9004      	str	r0, [sp, #16]
 800a38c:	f000 fe02 	bl	800af94 <__mcmp>
 800a390:	2800      	cmp	r0, #0
 800a392:	dcb6      	bgt.n	800a302 <_dtoa_r+0xa42>
 800a394:	d102      	bne.n	800a39c <_dtoa_r+0xadc>
 800a396:	f018 0f01 	tst.w	r8, #1
 800a39a:	d1b2      	bne.n	800a302 <_dtoa_r+0xa42>
 800a39c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3a0:	2b30      	cmp	r3, #48	; 0x30
 800a3a2:	f105 32ff 	add.w	r2, r5, #4294967295
 800a3a6:	f47f af0a 	bne.w	800a1be <_dtoa_r+0x8fe>
 800a3aa:	4615      	mov	r5, r2
 800a3ac:	e7f6      	b.n	800a39c <_dtoa_r+0xadc>
 800a3ae:	4593      	cmp	fp, r2
 800a3b0:	d105      	bne.n	800a3be <_dtoa_r+0xafe>
 800a3b2:	2331      	movs	r3, #49	; 0x31
 800a3b4:	f10a 0a01 	add.w	sl, sl, #1
 800a3b8:	f88b 3000 	strb.w	r3, [fp]
 800a3bc:	e6ff      	b.n	800a1be <_dtoa_r+0x8fe>
 800a3be:	4615      	mov	r5, r2
 800a3c0:	e79f      	b.n	800a302 <_dtoa_r+0xa42>
 800a3c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a428 <_dtoa_r+0xb68>
 800a3c6:	e007      	b.n	800a3d8 <_dtoa_r+0xb18>
 800a3c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a42c <_dtoa_r+0xb6c>
 800a3ce:	b11b      	cbz	r3, 800a3d8 <_dtoa_r+0xb18>
 800a3d0:	f10b 0308 	add.w	r3, fp, #8
 800a3d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	4658      	mov	r0, fp
 800a3da:	b017      	add	sp, #92	; 0x5c
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	9b06      	ldr	r3, [sp, #24]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	f77f ae35 	ble.w	800a052 <_dtoa_r+0x792>
 800a3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ea:	9307      	str	r3, [sp, #28]
 800a3ec:	e649      	b.n	800a082 <_dtoa_r+0x7c2>
 800a3ee:	9b02      	ldr	r3, [sp, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dc03      	bgt.n	800a3fc <_dtoa_r+0xb3c>
 800a3f4:	9b06      	ldr	r3, [sp, #24]
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	f73f aecc 	bgt.w	800a194 <_dtoa_r+0x8d4>
 800a3fc:	465d      	mov	r5, fp
 800a3fe:	4639      	mov	r1, r7
 800a400:	9804      	ldr	r0, [sp, #16]
 800a402:	f7ff f9d1 	bl	80097a8 <quorem>
 800a406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a40a:	f805 8b01 	strb.w	r8, [r5], #1
 800a40e:	9a02      	ldr	r2, [sp, #8]
 800a410:	eba5 030b 	sub.w	r3, r5, fp
 800a414:	429a      	cmp	r2, r3
 800a416:	ddb0      	ble.n	800a37a <_dtoa_r+0xaba>
 800a418:	2300      	movs	r3, #0
 800a41a:	220a      	movs	r2, #10
 800a41c:	9904      	ldr	r1, [sp, #16]
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fbb0 	bl	800ab84 <__multadd>
 800a424:	9004      	str	r0, [sp, #16]
 800a426:	e7ea      	b.n	800a3fe <_dtoa_r+0xb3e>
 800a428:	0800ba08 	.word	0x0800ba08
 800a42c:	0800ba88 	.word	0x0800ba88

0800a430 <rshift>:
 800a430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a432:	6906      	ldr	r6, [r0, #16]
 800a434:	114b      	asrs	r3, r1, #5
 800a436:	429e      	cmp	r6, r3
 800a438:	f100 0414 	add.w	r4, r0, #20
 800a43c:	dd30      	ble.n	800a4a0 <rshift+0x70>
 800a43e:	f011 011f 	ands.w	r1, r1, #31
 800a442:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a446:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a44a:	d108      	bne.n	800a45e <rshift+0x2e>
 800a44c:	4621      	mov	r1, r4
 800a44e:	42b2      	cmp	r2, r6
 800a450:	460b      	mov	r3, r1
 800a452:	d211      	bcs.n	800a478 <rshift+0x48>
 800a454:	f852 3b04 	ldr.w	r3, [r2], #4
 800a458:	f841 3b04 	str.w	r3, [r1], #4
 800a45c:	e7f7      	b.n	800a44e <rshift+0x1e>
 800a45e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a462:	f1c1 0c20 	rsb	ip, r1, #32
 800a466:	40cd      	lsrs	r5, r1
 800a468:	3204      	adds	r2, #4
 800a46a:	4623      	mov	r3, r4
 800a46c:	42b2      	cmp	r2, r6
 800a46e:	4617      	mov	r7, r2
 800a470:	d30c      	bcc.n	800a48c <rshift+0x5c>
 800a472:	601d      	str	r5, [r3, #0]
 800a474:	b105      	cbz	r5, 800a478 <rshift+0x48>
 800a476:	3304      	adds	r3, #4
 800a478:	1b1a      	subs	r2, r3, r4
 800a47a:	42a3      	cmp	r3, r4
 800a47c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a480:	bf08      	it	eq
 800a482:	2300      	moveq	r3, #0
 800a484:	6102      	str	r2, [r0, #16]
 800a486:	bf08      	it	eq
 800a488:	6143      	streq	r3, [r0, #20]
 800a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48c:	683f      	ldr	r7, [r7, #0]
 800a48e:	fa07 f70c 	lsl.w	r7, r7, ip
 800a492:	433d      	orrs	r5, r7
 800a494:	f843 5b04 	str.w	r5, [r3], #4
 800a498:	f852 5b04 	ldr.w	r5, [r2], #4
 800a49c:	40cd      	lsrs	r5, r1
 800a49e:	e7e5      	b.n	800a46c <rshift+0x3c>
 800a4a0:	4623      	mov	r3, r4
 800a4a2:	e7e9      	b.n	800a478 <rshift+0x48>

0800a4a4 <__hexdig_fun>:
 800a4a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4a8:	2b09      	cmp	r3, #9
 800a4aa:	d802      	bhi.n	800a4b2 <__hexdig_fun+0xe>
 800a4ac:	3820      	subs	r0, #32
 800a4ae:	b2c0      	uxtb	r0, r0
 800a4b0:	4770      	bx	lr
 800a4b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d801      	bhi.n	800a4be <__hexdig_fun+0x1a>
 800a4ba:	3847      	subs	r0, #71	; 0x47
 800a4bc:	e7f7      	b.n	800a4ae <__hexdig_fun+0xa>
 800a4be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d801      	bhi.n	800a4ca <__hexdig_fun+0x26>
 800a4c6:	3827      	subs	r0, #39	; 0x27
 800a4c8:	e7f1      	b.n	800a4ae <__hexdig_fun+0xa>
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	4770      	bx	lr

0800a4ce <__gethex>:
 800a4ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d2:	b08b      	sub	sp, #44	; 0x2c
 800a4d4:	468a      	mov	sl, r1
 800a4d6:	9002      	str	r0, [sp, #8]
 800a4d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a4da:	9306      	str	r3, [sp, #24]
 800a4dc:	4690      	mov	r8, r2
 800a4de:	f000 fad0 	bl	800aa82 <__localeconv_l>
 800a4e2:	6803      	ldr	r3, [r0, #0]
 800a4e4:	9303      	str	r3, [sp, #12]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7f5 fe7a 	bl	80001e0 <strlen>
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	9001      	str	r0, [sp, #4]
 800a4f0:	4403      	add	r3, r0
 800a4f2:	f04f 0b00 	mov.w	fp, #0
 800a4f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4fa:	9307      	str	r3, [sp, #28]
 800a4fc:	f8da 3000 	ldr.w	r3, [sl]
 800a500:	3302      	adds	r3, #2
 800a502:	461f      	mov	r7, r3
 800a504:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a508:	2830      	cmp	r0, #48	; 0x30
 800a50a:	d06c      	beq.n	800a5e6 <__gethex+0x118>
 800a50c:	f7ff ffca 	bl	800a4a4 <__hexdig_fun>
 800a510:	4604      	mov	r4, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d16a      	bne.n	800a5ec <__gethex+0x11e>
 800a516:	9a01      	ldr	r2, [sp, #4]
 800a518:	9903      	ldr	r1, [sp, #12]
 800a51a:	4638      	mov	r0, r7
 800a51c:	f001 f8fe 	bl	800b71c <strncmp>
 800a520:	2800      	cmp	r0, #0
 800a522:	d166      	bne.n	800a5f2 <__gethex+0x124>
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	5cf8      	ldrb	r0, [r7, r3]
 800a528:	18fe      	adds	r6, r7, r3
 800a52a:	f7ff ffbb 	bl	800a4a4 <__hexdig_fun>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d062      	beq.n	800a5f8 <__gethex+0x12a>
 800a532:	4633      	mov	r3, r6
 800a534:	7818      	ldrb	r0, [r3, #0]
 800a536:	2830      	cmp	r0, #48	; 0x30
 800a538:	461f      	mov	r7, r3
 800a53a:	f103 0301 	add.w	r3, r3, #1
 800a53e:	d0f9      	beq.n	800a534 <__gethex+0x66>
 800a540:	f7ff ffb0 	bl	800a4a4 <__hexdig_fun>
 800a544:	fab0 f580 	clz	r5, r0
 800a548:	096d      	lsrs	r5, r5, #5
 800a54a:	4634      	mov	r4, r6
 800a54c:	f04f 0b01 	mov.w	fp, #1
 800a550:	463a      	mov	r2, r7
 800a552:	4616      	mov	r6, r2
 800a554:	3201      	adds	r2, #1
 800a556:	7830      	ldrb	r0, [r6, #0]
 800a558:	f7ff ffa4 	bl	800a4a4 <__hexdig_fun>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d1f8      	bne.n	800a552 <__gethex+0x84>
 800a560:	9a01      	ldr	r2, [sp, #4]
 800a562:	9903      	ldr	r1, [sp, #12]
 800a564:	4630      	mov	r0, r6
 800a566:	f001 f8d9 	bl	800b71c <strncmp>
 800a56a:	b950      	cbnz	r0, 800a582 <__gethex+0xb4>
 800a56c:	b954      	cbnz	r4, 800a584 <__gethex+0xb6>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	18f4      	adds	r4, r6, r3
 800a572:	4622      	mov	r2, r4
 800a574:	4616      	mov	r6, r2
 800a576:	3201      	adds	r2, #1
 800a578:	7830      	ldrb	r0, [r6, #0]
 800a57a:	f7ff ff93 	bl	800a4a4 <__hexdig_fun>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d1f8      	bne.n	800a574 <__gethex+0xa6>
 800a582:	b10c      	cbz	r4, 800a588 <__gethex+0xba>
 800a584:	1ba4      	subs	r4, r4, r6
 800a586:	00a4      	lsls	r4, r4, #2
 800a588:	7833      	ldrb	r3, [r6, #0]
 800a58a:	2b50      	cmp	r3, #80	; 0x50
 800a58c:	d001      	beq.n	800a592 <__gethex+0xc4>
 800a58e:	2b70      	cmp	r3, #112	; 0x70
 800a590:	d140      	bne.n	800a614 <__gethex+0x146>
 800a592:	7873      	ldrb	r3, [r6, #1]
 800a594:	2b2b      	cmp	r3, #43	; 0x2b
 800a596:	d031      	beq.n	800a5fc <__gethex+0x12e>
 800a598:	2b2d      	cmp	r3, #45	; 0x2d
 800a59a:	d033      	beq.n	800a604 <__gethex+0x136>
 800a59c:	1c71      	adds	r1, r6, #1
 800a59e:	f04f 0900 	mov.w	r9, #0
 800a5a2:	7808      	ldrb	r0, [r1, #0]
 800a5a4:	f7ff ff7e 	bl	800a4a4 <__hexdig_fun>
 800a5a8:	1e43      	subs	r3, r0, #1
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b18      	cmp	r3, #24
 800a5ae:	d831      	bhi.n	800a614 <__gethex+0x146>
 800a5b0:	f1a0 0210 	sub.w	r2, r0, #16
 800a5b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5b8:	f7ff ff74 	bl	800a4a4 <__hexdig_fun>
 800a5bc:	1e43      	subs	r3, r0, #1
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b18      	cmp	r3, #24
 800a5c2:	d922      	bls.n	800a60a <__gethex+0x13c>
 800a5c4:	f1b9 0f00 	cmp.w	r9, #0
 800a5c8:	d000      	beq.n	800a5cc <__gethex+0xfe>
 800a5ca:	4252      	negs	r2, r2
 800a5cc:	4414      	add	r4, r2
 800a5ce:	f8ca 1000 	str.w	r1, [sl]
 800a5d2:	b30d      	cbz	r5, 800a618 <__gethex+0x14a>
 800a5d4:	f1bb 0f00 	cmp.w	fp, #0
 800a5d8:	bf0c      	ite	eq
 800a5da:	2706      	moveq	r7, #6
 800a5dc:	2700      	movne	r7, #0
 800a5de:	4638      	mov	r0, r7
 800a5e0:	b00b      	add	sp, #44	; 0x2c
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	f10b 0b01 	add.w	fp, fp, #1
 800a5ea:	e78a      	b.n	800a502 <__gethex+0x34>
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	462c      	mov	r4, r5
 800a5f0:	e7ae      	b.n	800a550 <__gethex+0x82>
 800a5f2:	463e      	mov	r6, r7
 800a5f4:	2501      	movs	r5, #1
 800a5f6:	e7c7      	b.n	800a588 <__gethex+0xba>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	e7fb      	b.n	800a5f4 <__gethex+0x126>
 800a5fc:	f04f 0900 	mov.w	r9, #0
 800a600:	1cb1      	adds	r1, r6, #2
 800a602:	e7ce      	b.n	800a5a2 <__gethex+0xd4>
 800a604:	f04f 0901 	mov.w	r9, #1
 800a608:	e7fa      	b.n	800a600 <__gethex+0x132>
 800a60a:	230a      	movs	r3, #10
 800a60c:	fb03 0202 	mla	r2, r3, r2, r0
 800a610:	3a10      	subs	r2, #16
 800a612:	e7cf      	b.n	800a5b4 <__gethex+0xe6>
 800a614:	4631      	mov	r1, r6
 800a616:	e7da      	b.n	800a5ce <__gethex+0x100>
 800a618:	1bf3      	subs	r3, r6, r7
 800a61a:	3b01      	subs	r3, #1
 800a61c:	4629      	mov	r1, r5
 800a61e:	2b07      	cmp	r3, #7
 800a620:	dc49      	bgt.n	800a6b6 <__gethex+0x1e8>
 800a622:	9802      	ldr	r0, [sp, #8]
 800a624:	f000 fa63 	bl	800aaee <_Balloc>
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	f100 0914 	add.w	r9, r0, #20
 800a62e:	f04f 0b00 	mov.w	fp, #0
 800a632:	f1c3 0301 	rsb	r3, r3, #1
 800a636:	4605      	mov	r5, r0
 800a638:	f8cd 9010 	str.w	r9, [sp, #16]
 800a63c:	46da      	mov	sl, fp
 800a63e:	9308      	str	r3, [sp, #32]
 800a640:	42b7      	cmp	r7, r6
 800a642:	d33b      	bcc.n	800a6bc <__gethex+0x1ee>
 800a644:	9804      	ldr	r0, [sp, #16]
 800a646:	f840 ab04 	str.w	sl, [r0], #4
 800a64a:	eba0 0009 	sub.w	r0, r0, r9
 800a64e:	1080      	asrs	r0, r0, #2
 800a650:	6128      	str	r0, [r5, #16]
 800a652:	0147      	lsls	r7, r0, #5
 800a654:	4650      	mov	r0, sl
 800a656:	f000 fb0e 	bl	800ac76 <__hi0bits>
 800a65a:	f8d8 6000 	ldr.w	r6, [r8]
 800a65e:	1a3f      	subs	r7, r7, r0
 800a660:	42b7      	cmp	r7, r6
 800a662:	dd64      	ble.n	800a72e <__gethex+0x260>
 800a664:	1bbf      	subs	r7, r7, r6
 800a666:	4639      	mov	r1, r7
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 fe1d 	bl	800b2a8 <__any_on>
 800a66e:	4682      	mov	sl, r0
 800a670:	b178      	cbz	r0, 800a692 <__gethex+0x1c4>
 800a672:	1e7b      	subs	r3, r7, #1
 800a674:	1159      	asrs	r1, r3, #5
 800a676:	f003 021f 	and.w	r2, r3, #31
 800a67a:	f04f 0a01 	mov.w	sl, #1
 800a67e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a682:	fa0a f202 	lsl.w	r2, sl, r2
 800a686:	420a      	tst	r2, r1
 800a688:	d003      	beq.n	800a692 <__gethex+0x1c4>
 800a68a:	4553      	cmp	r3, sl
 800a68c:	dc46      	bgt.n	800a71c <__gethex+0x24e>
 800a68e:	f04f 0a02 	mov.w	sl, #2
 800a692:	4639      	mov	r1, r7
 800a694:	4628      	mov	r0, r5
 800a696:	f7ff fecb 	bl	800a430 <rshift>
 800a69a:	443c      	add	r4, r7
 800a69c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	da52      	bge.n	800a74a <__gethex+0x27c>
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	9802      	ldr	r0, [sp, #8]
 800a6a8:	f000 fa55 	bl	800ab56 <_Bfree>
 800a6ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	27a3      	movs	r7, #163	; 0xa3
 800a6b4:	e793      	b.n	800a5de <__gethex+0x110>
 800a6b6:	3101      	adds	r1, #1
 800a6b8:	105b      	asrs	r3, r3, #1
 800a6ba:	e7b0      	b.n	800a61e <__gethex+0x150>
 800a6bc:	1e73      	subs	r3, r6, #1
 800a6be:	9305      	str	r3, [sp, #20]
 800a6c0:	9a07      	ldr	r2, [sp, #28]
 800a6c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d018      	beq.n	800a6fc <__gethex+0x22e>
 800a6ca:	f1bb 0f20 	cmp.w	fp, #32
 800a6ce:	d107      	bne.n	800a6e0 <__gethex+0x212>
 800a6d0:	9b04      	ldr	r3, [sp, #16]
 800a6d2:	f8c3 a000 	str.w	sl, [r3]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	f04f 0a00 	mov.w	sl, #0
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	46d3      	mov	fp, sl
 800a6e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6e4:	f7ff fede 	bl	800a4a4 <__hexdig_fun>
 800a6e8:	f000 000f 	and.w	r0, r0, #15
 800a6ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6f4:	f10b 0b04 	add.w	fp, fp, #4
 800a6f8:	9b05      	ldr	r3, [sp, #20]
 800a6fa:	e00d      	b.n	800a718 <__gethex+0x24a>
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	9a08      	ldr	r2, [sp, #32]
 800a700:	4413      	add	r3, r2
 800a702:	42bb      	cmp	r3, r7
 800a704:	d3e1      	bcc.n	800a6ca <__gethex+0x1fc>
 800a706:	4618      	mov	r0, r3
 800a708:	9a01      	ldr	r2, [sp, #4]
 800a70a:	9903      	ldr	r1, [sp, #12]
 800a70c:	9309      	str	r3, [sp, #36]	; 0x24
 800a70e:	f001 f805 	bl	800b71c <strncmp>
 800a712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a714:	2800      	cmp	r0, #0
 800a716:	d1d8      	bne.n	800a6ca <__gethex+0x1fc>
 800a718:	461e      	mov	r6, r3
 800a71a:	e791      	b.n	800a640 <__gethex+0x172>
 800a71c:	1eb9      	subs	r1, r7, #2
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 fdc2 	bl	800b2a8 <__any_on>
 800a724:	2800      	cmp	r0, #0
 800a726:	d0b2      	beq.n	800a68e <__gethex+0x1c0>
 800a728:	f04f 0a03 	mov.w	sl, #3
 800a72c:	e7b1      	b.n	800a692 <__gethex+0x1c4>
 800a72e:	da09      	bge.n	800a744 <__gethex+0x276>
 800a730:	1bf7      	subs	r7, r6, r7
 800a732:	4629      	mov	r1, r5
 800a734:	463a      	mov	r2, r7
 800a736:	9802      	ldr	r0, [sp, #8]
 800a738:	f000 fbd8 	bl	800aeec <__lshift>
 800a73c:	1be4      	subs	r4, r4, r7
 800a73e:	4605      	mov	r5, r0
 800a740:	f100 0914 	add.w	r9, r0, #20
 800a744:	f04f 0a00 	mov.w	sl, #0
 800a748:	e7a8      	b.n	800a69c <__gethex+0x1ce>
 800a74a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a74e:	42a0      	cmp	r0, r4
 800a750:	dd6a      	ble.n	800a828 <__gethex+0x35a>
 800a752:	1b04      	subs	r4, r0, r4
 800a754:	42a6      	cmp	r6, r4
 800a756:	dc2e      	bgt.n	800a7b6 <__gethex+0x2e8>
 800a758:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d022      	beq.n	800a7a6 <__gethex+0x2d8>
 800a760:	2b03      	cmp	r3, #3
 800a762:	d024      	beq.n	800a7ae <__gethex+0x2e0>
 800a764:	2b01      	cmp	r3, #1
 800a766:	d115      	bne.n	800a794 <__gethex+0x2c6>
 800a768:	42a6      	cmp	r6, r4
 800a76a:	d113      	bne.n	800a794 <__gethex+0x2c6>
 800a76c:	2e01      	cmp	r6, #1
 800a76e:	dc0b      	bgt.n	800a788 <__gethex+0x2ba>
 800a770:	9a06      	ldr	r2, [sp, #24]
 800a772:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	2301      	movs	r3, #1
 800a77a:	612b      	str	r3, [r5, #16]
 800a77c:	f8c9 3000 	str.w	r3, [r9]
 800a780:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a782:	2762      	movs	r7, #98	; 0x62
 800a784:	601d      	str	r5, [r3, #0]
 800a786:	e72a      	b.n	800a5de <__gethex+0x110>
 800a788:	1e71      	subs	r1, r6, #1
 800a78a:	4628      	mov	r0, r5
 800a78c:	f000 fd8c 	bl	800b2a8 <__any_on>
 800a790:	2800      	cmp	r0, #0
 800a792:	d1ed      	bne.n	800a770 <__gethex+0x2a2>
 800a794:	4629      	mov	r1, r5
 800a796:	9802      	ldr	r0, [sp, #8]
 800a798:	f000 f9dd 	bl	800ab56 <_Bfree>
 800a79c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a79e:	2300      	movs	r3, #0
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	2750      	movs	r7, #80	; 0x50
 800a7a4:	e71b      	b.n	800a5de <__gethex+0x110>
 800a7a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0e1      	beq.n	800a770 <__gethex+0x2a2>
 800a7ac:	e7f2      	b.n	800a794 <__gethex+0x2c6>
 800a7ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1dd      	bne.n	800a770 <__gethex+0x2a2>
 800a7b4:	e7ee      	b.n	800a794 <__gethex+0x2c6>
 800a7b6:	1e67      	subs	r7, r4, #1
 800a7b8:	f1ba 0f00 	cmp.w	sl, #0
 800a7bc:	d131      	bne.n	800a822 <__gethex+0x354>
 800a7be:	b127      	cbz	r7, 800a7ca <__gethex+0x2fc>
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 fd70 	bl	800b2a8 <__any_on>
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	117a      	asrs	r2, r7, #5
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f007 071f 	and.w	r7, r7, #31
 800a7d2:	fa03 f707 	lsl.w	r7, r3, r7
 800a7d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a7da:	4621      	mov	r1, r4
 800a7dc:	421f      	tst	r7, r3
 800a7de:	4628      	mov	r0, r5
 800a7e0:	bf18      	it	ne
 800a7e2:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7e6:	1b36      	subs	r6, r6, r4
 800a7e8:	f7ff fe22 	bl	800a430 <rshift>
 800a7ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a7f0:	2702      	movs	r7, #2
 800a7f2:	f1ba 0f00 	cmp.w	sl, #0
 800a7f6:	d048      	beq.n	800a88a <__gethex+0x3bc>
 800a7f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d015      	beq.n	800a82c <__gethex+0x35e>
 800a800:	2b03      	cmp	r3, #3
 800a802:	d017      	beq.n	800a834 <__gethex+0x366>
 800a804:	2b01      	cmp	r3, #1
 800a806:	d109      	bne.n	800a81c <__gethex+0x34e>
 800a808:	f01a 0f02 	tst.w	sl, #2
 800a80c:	d006      	beq.n	800a81c <__gethex+0x34e>
 800a80e:	f8d9 3000 	ldr.w	r3, [r9]
 800a812:	ea4a 0a03 	orr.w	sl, sl, r3
 800a816:	f01a 0f01 	tst.w	sl, #1
 800a81a:	d10e      	bne.n	800a83a <__gethex+0x36c>
 800a81c:	f047 0710 	orr.w	r7, r7, #16
 800a820:	e033      	b.n	800a88a <__gethex+0x3bc>
 800a822:	f04f 0a01 	mov.w	sl, #1
 800a826:	e7d0      	b.n	800a7ca <__gethex+0x2fc>
 800a828:	2701      	movs	r7, #1
 800a82a:	e7e2      	b.n	800a7f2 <__gethex+0x324>
 800a82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a82e:	f1c3 0301 	rsb	r3, r3, #1
 800a832:	9315      	str	r3, [sp, #84]	; 0x54
 800a834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0f0      	beq.n	800a81c <__gethex+0x34e>
 800a83a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a83e:	f105 0314 	add.w	r3, r5, #20
 800a842:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a846:	eb03 010a 	add.w	r1, r3, sl
 800a84a:	f04f 0c00 	mov.w	ip, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f853 2b04 	ldr.w	r2, [r3], #4
 800a854:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a858:	d01c      	beq.n	800a894 <__gethex+0x3c6>
 800a85a:	3201      	adds	r2, #1
 800a85c:	6002      	str	r2, [r0, #0]
 800a85e:	2f02      	cmp	r7, #2
 800a860:	f105 0314 	add.w	r3, r5, #20
 800a864:	d138      	bne.n	800a8d8 <__gethex+0x40a>
 800a866:	f8d8 2000 	ldr.w	r2, [r8]
 800a86a:	3a01      	subs	r2, #1
 800a86c:	42b2      	cmp	r2, r6
 800a86e:	d10a      	bne.n	800a886 <__gethex+0x3b8>
 800a870:	1171      	asrs	r1, r6, #5
 800a872:	2201      	movs	r2, #1
 800a874:	f006 061f 	and.w	r6, r6, #31
 800a878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a87c:	fa02 f606 	lsl.w	r6, r2, r6
 800a880:	421e      	tst	r6, r3
 800a882:	bf18      	it	ne
 800a884:	4617      	movne	r7, r2
 800a886:	f047 0720 	orr.w	r7, r7, #32
 800a88a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a88c:	601d      	str	r5, [r3, #0]
 800a88e:	9b06      	ldr	r3, [sp, #24]
 800a890:	601c      	str	r4, [r3, #0]
 800a892:	e6a4      	b.n	800a5de <__gethex+0x110>
 800a894:	4299      	cmp	r1, r3
 800a896:	f843 cc04 	str.w	ip, [r3, #-4]
 800a89a:	d8d8      	bhi.n	800a84e <__gethex+0x380>
 800a89c:	68ab      	ldr	r3, [r5, #8]
 800a89e:	4599      	cmp	r9, r3
 800a8a0:	db12      	blt.n	800a8c8 <__gethex+0x3fa>
 800a8a2:	6869      	ldr	r1, [r5, #4]
 800a8a4:	9802      	ldr	r0, [sp, #8]
 800a8a6:	3101      	adds	r1, #1
 800a8a8:	f000 f921 	bl	800aaee <_Balloc>
 800a8ac:	692a      	ldr	r2, [r5, #16]
 800a8ae:	3202      	adds	r2, #2
 800a8b0:	f105 010c 	add.w	r1, r5, #12
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	0092      	lsls	r2, r2, #2
 800a8b8:	300c      	adds	r0, #12
 800a8ba:	f000 f90d 	bl	800aad8 <memcpy>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	9802      	ldr	r0, [sp, #8]
 800a8c2:	f000 f948 	bl	800ab56 <_Bfree>
 800a8c6:	465d      	mov	r5, fp
 800a8c8:	692b      	ldr	r3, [r5, #16]
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a8d0:	612a      	str	r2, [r5, #16]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	615a      	str	r2, [r3, #20]
 800a8d6:	e7c2      	b.n	800a85e <__gethex+0x390>
 800a8d8:	692a      	ldr	r2, [r5, #16]
 800a8da:	454a      	cmp	r2, r9
 800a8dc:	dd0b      	ble.n	800a8f6 <__gethex+0x428>
 800a8de:	2101      	movs	r1, #1
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f7ff fda5 	bl	800a430 <rshift>
 800a8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8ea:	3401      	adds	r4, #1
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	f6ff aed9 	blt.w	800a6a4 <__gethex+0x1d6>
 800a8f2:	2701      	movs	r7, #1
 800a8f4:	e7c7      	b.n	800a886 <__gethex+0x3b8>
 800a8f6:	f016 061f 	ands.w	r6, r6, #31
 800a8fa:	d0fa      	beq.n	800a8f2 <__gethex+0x424>
 800a8fc:	449a      	add	sl, r3
 800a8fe:	f1c6 0620 	rsb	r6, r6, #32
 800a902:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a906:	f000 f9b6 	bl	800ac76 <__hi0bits>
 800a90a:	42b0      	cmp	r0, r6
 800a90c:	dbe7      	blt.n	800a8de <__gethex+0x410>
 800a90e:	e7f0      	b.n	800a8f2 <__gethex+0x424>

0800a910 <L_shift>:
 800a910:	f1c2 0208 	rsb	r2, r2, #8
 800a914:	0092      	lsls	r2, r2, #2
 800a916:	b570      	push	{r4, r5, r6, lr}
 800a918:	f1c2 0620 	rsb	r6, r2, #32
 800a91c:	6843      	ldr	r3, [r0, #4]
 800a91e:	6804      	ldr	r4, [r0, #0]
 800a920:	fa03 f506 	lsl.w	r5, r3, r6
 800a924:	432c      	orrs	r4, r5
 800a926:	40d3      	lsrs	r3, r2
 800a928:	6004      	str	r4, [r0, #0]
 800a92a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a92e:	4288      	cmp	r0, r1
 800a930:	d3f4      	bcc.n	800a91c <L_shift+0xc>
 800a932:	bd70      	pop	{r4, r5, r6, pc}

0800a934 <__match>:
 800a934:	b530      	push	{r4, r5, lr}
 800a936:	6803      	ldr	r3, [r0, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93e:	b914      	cbnz	r4, 800a946 <__match+0x12>
 800a940:	6003      	str	r3, [r0, #0]
 800a942:	2001      	movs	r0, #1
 800a944:	bd30      	pop	{r4, r5, pc}
 800a946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a94a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a94e:	2d19      	cmp	r5, #25
 800a950:	bf98      	it	ls
 800a952:	3220      	addls	r2, #32
 800a954:	42a2      	cmp	r2, r4
 800a956:	d0f0      	beq.n	800a93a <__match+0x6>
 800a958:	2000      	movs	r0, #0
 800a95a:	e7f3      	b.n	800a944 <__match+0x10>

0800a95c <__hexnan>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	680b      	ldr	r3, [r1, #0]
 800a962:	6801      	ldr	r1, [r0, #0]
 800a964:	115f      	asrs	r7, r3, #5
 800a966:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a96a:	f013 031f 	ands.w	r3, r3, #31
 800a96e:	b087      	sub	sp, #28
 800a970:	bf18      	it	ne
 800a972:	3704      	addne	r7, #4
 800a974:	2500      	movs	r5, #0
 800a976:	1f3e      	subs	r6, r7, #4
 800a978:	4682      	mov	sl, r0
 800a97a:	4690      	mov	r8, r2
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	f847 5c04 	str.w	r5, [r7, #-4]
 800a982:	46b1      	mov	r9, r6
 800a984:	4634      	mov	r4, r6
 800a986:	9502      	str	r5, [sp, #8]
 800a988:	46ab      	mov	fp, r5
 800a98a:	784a      	ldrb	r2, [r1, #1]
 800a98c:	1c4b      	adds	r3, r1, #1
 800a98e:	9303      	str	r3, [sp, #12]
 800a990:	b342      	cbz	r2, 800a9e4 <__hexnan+0x88>
 800a992:	4610      	mov	r0, r2
 800a994:	9105      	str	r1, [sp, #20]
 800a996:	9204      	str	r2, [sp, #16]
 800a998:	f7ff fd84 	bl	800a4a4 <__hexdig_fun>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d143      	bne.n	800aa28 <__hexnan+0xcc>
 800a9a0:	9a04      	ldr	r2, [sp, #16]
 800a9a2:	9905      	ldr	r1, [sp, #20]
 800a9a4:	2a20      	cmp	r2, #32
 800a9a6:	d818      	bhi.n	800a9da <__hexnan+0x7e>
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	459b      	cmp	fp, r3
 800a9ac:	dd13      	ble.n	800a9d6 <__hexnan+0x7a>
 800a9ae:	454c      	cmp	r4, r9
 800a9b0:	d206      	bcs.n	800a9c0 <__hexnan+0x64>
 800a9b2:	2d07      	cmp	r5, #7
 800a9b4:	dc04      	bgt.n	800a9c0 <__hexnan+0x64>
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7ff ffa8 	bl	800a910 <L_shift>
 800a9c0:	4544      	cmp	r4, r8
 800a9c2:	d944      	bls.n	800aa4e <__hexnan+0xf2>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a9ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a9d2:	464c      	mov	r4, r9
 800a9d4:	461d      	mov	r5, r3
 800a9d6:	9903      	ldr	r1, [sp, #12]
 800a9d8:	e7d7      	b.n	800a98a <__hexnan+0x2e>
 800a9da:	2a29      	cmp	r2, #41	; 0x29
 800a9dc:	d14a      	bne.n	800aa74 <__hexnan+0x118>
 800a9de:	3102      	adds	r1, #2
 800a9e0:	f8ca 1000 	str.w	r1, [sl]
 800a9e4:	f1bb 0f00 	cmp.w	fp, #0
 800a9e8:	d044      	beq.n	800aa74 <__hexnan+0x118>
 800a9ea:	454c      	cmp	r4, r9
 800a9ec:	d206      	bcs.n	800a9fc <__hexnan+0xa0>
 800a9ee:	2d07      	cmp	r5, #7
 800a9f0:	dc04      	bgt.n	800a9fc <__hexnan+0xa0>
 800a9f2:	462a      	mov	r2, r5
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7ff ff8a 	bl	800a910 <L_shift>
 800a9fc:	4544      	cmp	r4, r8
 800a9fe:	d928      	bls.n	800aa52 <__hexnan+0xf6>
 800aa00:	4643      	mov	r3, r8
 800aa02:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa06:	f843 2b04 	str.w	r2, [r3], #4
 800aa0a:	42a6      	cmp	r6, r4
 800aa0c:	d2f9      	bcs.n	800aa02 <__hexnan+0xa6>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f843 2b04 	str.w	r2, [r3], #4
 800aa14:	429e      	cmp	r6, r3
 800aa16:	d2fb      	bcs.n	800aa10 <__hexnan+0xb4>
 800aa18:	6833      	ldr	r3, [r6, #0]
 800aa1a:	b91b      	cbnz	r3, 800aa24 <__hexnan+0xc8>
 800aa1c:	4546      	cmp	r6, r8
 800aa1e:	d127      	bne.n	800aa70 <__hexnan+0x114>
 800aa20:	2301      	movs	r3, #1
 800aa22:	6033      	str	r3, [r6, #0]
 800aa24:	2005      	movs	r0, #5
 800aa26:	e026      	b.n	800aa76 <__hexnan+0x11a>
 800aa28:	3501      	adds	r5, #1
 800aa2a:	2d08      	cmp	r5, #8
 800aa2c:	f10b 0b01 	add.w	fp, fp, #1
 800aa30:	dd06      	ble.n	800aa40 <__hexnan+0xe4>
 800aa32:	4544      	cmp	r4, r8
 800aa34:	d9cf      	bls.n	800a9d6 <__hexnan+0x7a>
 800aa36:	2300      	movs	r3, #0
 800aa38:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa3c:	2501      	movs	r5, #1
 800aa3e:	3c04      	subs	r4, #4
 800aa40:	6822      	ldr	r2, [r4, #0]
 800aa42:	f000 000f 	and.w	r0, r0, #15
 800aa46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa4a:	6020      	str	r0, [r4, #0]
 800aa4c:	e7c3      	b.n	800a9d6 <__hexnan+0x7a>
 800aa4e:	2508      	movs	r5, #8
 800aa50:	e7c1      	b.n	800a9d6 <__hexnan+0x7a>
 800aa52:	9b01      	ldr	r3, [sp, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d0df      	beq.n	800aa18 <__hexnan+0xbc>
 800aa58:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5c:	f1c3 0320 	rsb	r3, r3, #32
 800aa60:	fa22 f303 	lsr.w	r3, r2, r3
 800aa64:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aa68:	401a      	ands	r2, r3
 800aa6a:	f847 2c04 	str.w	r2, [r7, #-4]
 800aa6e:	e7d3      	b.n	800aa18 <__hexnan+0xbc>
 800aa70:	3e04      	subs	r6, #4
 800aa72:	e7d1      	b.n	800aa18 <__hexnan+0xbc>
 800aa74:	2004      	movs	r0, #4
 800aa76:	b007      	add	sp, #28
 800aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa7c <__locale_ctype_ptr_l>:
 800aa7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aa80:	4770      	bx	lr

0800aa82 <__localeconv_l>:
 800aa82:	30f0      	adds	r0, #240	; 0xf0
 800aa84:	4770      	bx	lr
	...

0800aa88 <_localeconv_r>:
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <_localeconv_r+0x14>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6a18      	ldr	r0, [r3, #32]
 800aa8e:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <_localeconv_r+0x18>)
 800aa90:	2800      	cmp	r0, #0
 800aa92:	bf08      	it	eq
 800aa94:	4618      	moveq	r0, r3
 800aa96:	30f0      	adds	r0, #240	; 0xf0
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	20000090 	.word	0x20000090
 800aaa0:	200000f4 	.word	0x200000f4

0800aaa4 <malloc>:
 800aaa4:	4b02      	ldr	r3, [pc, #8]	; (800aab0 <malloc+0xc>)
 800aaa6:	4601      	mov	r1, r0
 800aaa8:	6818      	ldr	r0, [r3, #0]
 800aaaa:	f000 bc7b 	b.w	800b3a4 <_malloc_r>
 800aaae:	bf00      	nop
 800aab0:	20000090 	.word	0x20000090

0800aab4 <__ascii_mbtowc>:
 800aab4:	b082      	sub	sp, #8
 800aab6:	b901      	cbnz	r1, 800aaba <__ascii_mbtowc+0x6>
 800aab8:	a901      	add	r1, sp, #4
 800aaba:	b142      	cbz	r2, 800aace <__ascii_mbtowc+0x1a>
 800aabc:	b14b      	cbz	r3, 800aad2 <__ascii_mbtowc+0x1e>
 800aabe:	7813      	ldrb	r3, [r2, #0]
 800aac0:	600b      	str	r3, [r1, #0]
 800aac2:	7812      	ldrb	r2, [r2, #0]
 800aac4:	1c10      	adds	r0, r2, #0
 800aac6:	bf18      	it	ne
 800aac8:	2001      	movne	r0, #1
 800aaca:	b002      	add	sp, #8
 800aacc:	4770      	bx	lr
 800aace:	4610      	mov	r0, r2
 800aad0:	e7fb      	b.n	800aaca <__ascii_mbtowc+0x16>
 800aad2:	f06f 0001 	mvn.w	r0, #1
 800aad6:	e7f8      	b.n	800aaca <__ascii_mbtowc+0x16>

0800aad8 <memcpy>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	1e43      	subs	r3, r0, #1
 800aadc:	440a      	add	r2, r1
 800aade:	4291      	cmp	r1, r2
 800aae0:	d100      	bne.n	800aae4 <memcpy+0xc>
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaec:	e7f7      	b.n	800aade <memcpy+0x6>

0800aaee <_Balloc>:
 800aaee:	b570      	push	{r4, r5, r6, lr}
 800aaf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	b93d      	cbnz	r5, 800ab08 <_Balloc+0x1a>
 800aaf8:	2010      	movs	r0, #16
 800aafa:	f7ff ffd3 	bl	800aaa4 <malloc>
 800aafe:	6260      	str	r0, [r4, #36]	; 0x24
 800ab00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab04:	6005      	str	r5, [r0, #0]
 800ab06:	60c5      	str	r5, [r0, #12]
 800ab08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab0a:	68eb      	ldr	r3, [r5, #12]
 800ab0c:	b183      	cbz	r3, 800ab30 <_Balloc+0x42>
 800ab0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab16:	b9b8      	cbnz	r0, 800ab48 <_Balloc+0x5a>
 800ab18:	2101      	movs	r1, #1
 800ab1a:	fa01 f506 	lsl.w	r5, r1, r6
 800ab1e:	1d6a      	adds	r2, r5, #5
 800ab20:	0092      	lsls	r2, r2, #2
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fbe1 	bl	800b2ea <_calloc_r>
 800ab28:	b160      	cbz	r0, 800ab44 <_Balloc+0x56>
 800ab2a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ab2e:	e00e      	b.n	800ab4e <_Balloc+0x60>
 800ab30:	2221      	movs	r2, #33	; 0x21
 800ab32:	2104      	movs	r1, #4
 800ab34:	4620      	mov	r0, r4
 800ab36:	f000 fbd8 	bl	800b2ea <_calloc_r>
 800ab3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab3c:	60e8      	str	r0, [r5, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e4      	bne.n	800ab0e <_Balloc+0x20>
 800ab44:	2000      	movs	r0, #0
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	6802      	ldr	r2, [r0, #0]
 800ab4a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab54:	e7f7      	b.n	800ab46 <_Balloc+0x58>

0800ab56 <_Bfree>:
 800ab56:	b570      	push	{r4, r5, r6, lr}
 800ab58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	b93c      	cbnz	r4, 800ab70 <_Bfree+0x1a>
 800ab60:	2010      	movs	r0, #16
 800ab62:	f7ff ff9f 	bl	800aaa4 <malloc>
 800ab66:	6270      	str	r0, [r6, #36]	; 0x24
 800ab68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab6c:	6004      	str	r4, [r0, #0]
 800ab6e:	60c4      	str	r4, [r0, #12]
 800ab70:	b13d      	cbz	r5, 800ab82 <_Bfree+0x2c>
 800ab72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab74:	686a      	ldr	r2, [r5, #4]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab7c:	6029      	str	r1, [r5, #0]
 800ab7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab82:	bd70      	pop	{r4, r5, r6, pc}

0800ab84 <__multadd>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	690d      	ldr	r5, [r1, #16]
 800ab8a:	461f      	mov	r7, r3
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	f101 0c14 	add.w	ip, r1, #20
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8dc 0000 	ldr.w	r0, [ip]
 800ab9a:	b281      	uxth	r1, r0
 800ab9c:	fb02 7101 	mla	r1, r2, r1, r7
 800aba0:	0c0f      	lsrs	r7, r1, #16
 800aba2:	0c00      	lsrs	r0, r0, #16
 800aba4:	fb02 7000 	mla	r0, r2, r0, r7
 800aba8:	b289      	uxth	r1, r1
 800abaa:	3301      	adds	r3, #1
 800abac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800abb0:	429d      	cmp	r5, r3
 800abb2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800abb6:	f84c 1b04 	str.w	r1, [ip], #4
 800abba:	dcec      	bgt.n	800ab96 <__multadd+0x12>
 800abbc:	b1d7      	cbz	r7, 800abf4 <__multadd+0x70>
 800abbe:	68a3      	ldr	r3, [r4, #8]
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dc12      	bgt.n	800abea <__multadd+0x66>
 800abc4:	6861      	ldr	r1, [r4, #4]
 800abc6:	4630      	mov	r0, r6
 800abc8:	3101      	adds	r1, #1
 800abca:	f7ff ff90 	bl	800aaee <_Balloc>
 800abce:	6922      	ldr	r2, [r4, #16]
 800abd0:	3202      	adds	r2, #2
 800abd2:	f104 010c 	add.w	r1, r4, #12
 800abd6:	4680      	mov	r8, r0
 800abd8:	0092      	lsls	r2, r2, #2
 800abda:	300c      	adds	r0, #12
 800abdc:	f7ff ff7c 	bl	800aad8 <memcpy>
 800abe0:	4621      	mov	r1, r4
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ffb7 	bl	800ab56 <_Bfree>
 800abe8:	4644      	mov	r4, r8
 800abea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abee:	3501      	adds	r5, #1
 800abf0:	615f      	str	r7, [r3, #20]
 800abf2:	6125      	str	r5, [r4, #16]
 800abf4:	4620      	mov	r0, r4
 800abf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abfa <__s2b>:
 800abfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	4615      	mov	r5, r2
 800ac02:	461f      	mov	r7, r3
 800ac04:	2209      	movs	r2, #9
 800ac06:	3308      	adds	r3, #8
 800ac08:	4606      	mov	r6, r0
 800ac0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac0e:	2100      	movs	r1, #0
 800ac10:	2201      	movs	r2, #1
 800ac12:	429a      	cmp	r2, r3
 800ac14:	db20      	blt.n	800ac58 <__s2b+0x5e>
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ff69 	bl	800aaee <_Balloc>
 800ac1c:	9b08      	ldr	r3, [sp, #32]
 800ac1e:	6143      	str	r3, [r0, #20]
 800ac20:	2d09      	cmp	r5, #9
 800ac22:	f04f 0301 	mov.w	r3, #1
 800ac26:	6103      	str	r3, [r0, #16]
 800ac28:	dd19      	ble.n	800ac5e <__s2b+0x64>
 800ac2a:	f104 0809 	add.w	r8, r4, #9
 800ac2e:	46c1      	mov	r9, r8
 800ac30:	442c      	add	r4, r5
 800ac32:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ac36:	4601      	mov	r1, r0
 800ac38:	3b30      	subs	r3, #48	; 0x30
 800ac3a:	220a      	movs	r2, #10
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f7ff ffa1 	bl	800ab84 <__multadd>
 800ac42:	45a1      	cmp	r9, r4
 800ac44:	d1f5      	bne.n	800ac32 <__s2b+0x38>
 800ac46:	eb08 0405 	add.w	r4, r8, r5
 800ac4a:	3c08      	subs	r4, #8
 800ac4c:	1b2d      	subs	r5, r5, r4
 800ac4e:	1963      	adds	r3, r4, r5
 800ac50:	42bb      	cmp	r3, r7
 800ac52:	db07      	blt.n	800ac64 <__s2b+0x6a>
 800ac54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac58:	0052      	lsls	r2, r2, #1
 800ac5a:	3101      	adds	r1, #1
 800ac5c:	e7d9      	b.n	800ac12 <__s2b+0x18>
 800ac5e:	340a      	adds	r4, #10
 800ac60:	2509      	movs	r5, #9
 800ac62:	e7f3      	b.n	800ac4c <__s2b+0x52>
 800ac64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac68:	4601      	mov	r1, r0
 800ac6a:	3b30      	subs	r3, #48	; 0x30
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f7ff ff88 	bl	800ab84 <__multadd>
 800ac74:	e7eb      	b.n	800ac4e <__s2b+0x54>

0800ac76 <__hi0bits>:
 800ac76:	0c02      	lsrs	r2, r0, #16
 800ac78:	0412      	lsls	r2, r2, #16
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	b9b2      	cbnz	r2, 800acac <__hi0bits+0x36>
 800ac7e:	0403      	lsls	r3, r0, #16
 800ac80:	2010      	movs	r0, #16
 800ac82:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac86:	bf04      	itt	eq
 800ac88:	021b      	lsleq	r3, r3, #8
 800ac8a:	3008      	addeq	r0, #8
 800ac8c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac90:	bf04      	itt	eq
 800ac92:	011b      	lsleq	r3, r3, #4
 800ac94:	3004      	addeq	r0, #4
 800ac96:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac9a:	bf04      	itt	eq
 800ac9c:	009b      	lsleq	r3, r3, #2
 800ac9e:	3002      	addeq	r0, #2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	db06      	blt.n	800acb2 <__hi0bits+0x3c>
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	d503      	bpl.n	800acb0 <__hi0bits+0x3a>
 800aca8:	3001      	adds	r0, #1
 800acaa:	4770      	bx	lr
 800acac:	2000      	movs	r0, #0
 800acae:	e7e8      	b.n	800ac82 <__hi0bits+0xc>
 800acb0:	2020      	movs	r0, #32
 800acb2:	4770      	bx	lr

0800acb4 <__lo0bits>:
 800acb4:	6803      	ldr	r3, [r0, #0]
 800acb6:	f013 0207 	ands.w	r2, r3, #7
 800acba:	4601      	mov	r1, r0
 800acbc:	d00b      	beq.n	800acd6 <__lo0bits+0x22>
 800acbe:	07da      	lsls	r2, r3, #31
 800acc0:	d423      	bmi.n	800ad0a <__lo0bits+0x56>
 800acc2:	0798      	lsls	r0, r3, #30
 800acc4:	bf49      	itett	mi
 800acc6:	085b      	lsrmi	r3, r3, #1
 800acc8:	089b      	lsrpl	r3, r3, #2
 800acca:	2001      	movmi	r0, #1
 800accc:	600b      	strmi	r3, [r1, #0]
 800acce:	bf5c      	itt	pl
 800acd0:	600b      	strpl	r3, [r1, #0]
 800acd2:	2002      	movpl	r0, #2
 800acd4:	4770      	bx	lr
 800acd6:	b298      	uxth	r0, r3
 800acd8:	b9a8      	cbnz	r0, 800ad06 <__lo0bits+0x52>
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	2010      	movs	r0, #16
 800acde:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ace2:	bf04      	itt	eq
 800ace4:	0a1b      	lsreq	r3, r3, #8
 800ace6:	3008      	addeq	r0, #8
 800ace8:	071a      	lsls	r2, r3, #28
 800acea:	bf04      	itt	eq
 800acec:	091b      	lsreq	r3, r3, #4
 800acee:	3004      	addeq	r0, #4
 800acf0:	079a      	lsls	r2, r3, #30
 800acf2:	bf04      	itt	eq
 800acf4:	089b      	lsreq	r3, r3, #2
 800acf6:	3002      	addeq	r0, #2
 800acf8:	07da      	lsls	r2, r3, #31
 800acfa:	d402      	bmi.n	800ad02 <__lo0bits+0x4e>
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	d006      	beq.n	800ad0e <__lo0bits+0x5a>
 800ad00:	3001      	adds	r0, #1
 800ad02:	600b      	str	r3, [r1, #0]
 800ad04:	4770      	bx	lr
 800ad06:	4610      	mov	r0, r2
 800ad08:	e7e9      	b.n	800acde <__lo0bits+0x2a>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	4770      	bx	lr
 800ad0e:	2020      	movs	r0, #32
 800ad10:	4770      	bx	lr

0800ad12 <__i2b>:
 800ad12:	b510      	push	{r4, lr}
 800ad14:	460c      	mov	r4, r1
 800ad16:	2101      	movs	r1, #1
 800ad18:	f7ff fee9 	bl	800aaee <_Balloc>
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	6144      	str	r4, [r0, #20]
 800ad20:	6102      	str	r2, [r0, #16]
 800ad22:	bd10      	pop	{r4, pc}

0800ad24 <__multiply>:
 800ad24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	4614      	mov	r4, r2
 800ad2a:	690a      	ldr	r2, [r1, #16]
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	bfb8      	it	lt
 800ad32:	460b      	movlt	r3, r1
 800ad34:	4688      	mov	r8, r1
 800ad36:	bfbc      	itt	lt
 800ad38:	46a0      	movlt	r8, r4
 800ad3a:	461c      	movlt	r4, r3
 800ad3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad4c:	eb07 0609 	add.w	r6, r7, r9
 800ad50:	42b3      	cmp	r3, r6
 800ad52:	bfb8      	it	lt
 800ad54:	3101      	addlt	r1, #1
 800ad56:	f7ff feca 	bl	800aaee <_Balloc>
 800ad5a:	f100 0514 	add.w	r5, r0, #20
 800ad5e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad62:	462b      	mov	r3, r5
 800ad64:	2200      	movs	r2, #0
 800ad66:	4573      	cmp	r3, lr
 800ad68:	d316      	bcc.n	800ad98 <__multiply+0x74>
 800ad6a:	f104 0214 	add.w	r2, r4, #20
 800ad6e:	f108 0114 	add.w	r1, r8, #20
 800ad72:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad76:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	9b00      	ldr	r3, [sp, #0]
 800ad7e:	9201      	str	r2, [sp, #4]
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d80c      	bhi.n	800ad9e <__multiply+0x7a>
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	dd03      	ble.n	800ad90 <__multiply+0x6c>
 800ad88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d05d      	beq.n	800ae4c <__multiply+0x128>
 800ad90:	6106      	str	r6, [r0, #16]
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	f843 2b04 	str.w	r2, [r3], #4
 800ad9c:	e7e3      	b.n	800ad66 <__multiply+0x42>
 800ad9e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ada2:	f1bb 0f00 	cmp.w	fp, #0
 800ada6:	d023      	beq.n	800adf0 <__multiply+0xcc>
 800ada8:	4689      	mov	r9, r1
 800adaa:	46ac      	mov	ip, r5
 800adac:	f04f 0800 	mov.w	r8, #0
 800adb0:	f859 4b04 	ldr.w	r4, [r9], #4
 800adb4:	f8dc a000 	ldr.w	sl, [ip]
 800adb8:	b2a3      	uxth	r3, r4
 800adba:	fa1f fa8a 	uxth.w	sl, sl
 800adbe:	fb0b a303 	mla	r3, fp, r3, sl
 800adc2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800adc6:	f8dc 4000 	ldr.w	r4, [ip]
 800adca:	4443      	add	r3, r8
 800adcc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800add0:	fb0b 840a 	mla	r4, fp, sl, r8
 800add4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800add8:	46e2      	mov	sl, ip
 800adda:	b29b      	uxth	r3, r3
 800addc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ade0:	454f      	cmp	r7, r9
 800ade2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ade6:	f84a 3b04 	str.w	r3, [sl], #4
 800adea:	d82b      	bhi.n	800ae44 <__multiply+0x120>
 800adec:	f8cc 8004 	str.w	r8, [ip, #4]
 800adf0:	9b01      	ldr	r3, [sp, #4]
 800adf2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800adf6:	3204      	adds	r2, #4
 800adf8:	f1ba 0f00 	cmp.w	sl, #0
 800adfc:	d020      	beq.n	800ae40 <__multiply+0x11c>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	4689      	mov	r9, r1
 800ae02:	46a8      	mov	r8, r5
 800ae04:	f04f 0b00 	mov.w	fp, #0
 800ae08:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae0c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae10:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae14:	445c      	add	r4, fp
 800ae16:	46c4      	mov	ip, r8
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae1e:	f84c 3b04 	str.w	r3, [ip], #4
 800ae22:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae26:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ae2a:	0c1b      	lsrs	r3, r3, #16
 800ae2c:	fb0a b303 	mla	r3, sl, r3, fp
 800ae30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae34:	454f      	cmp	r7, r9
 800ae36:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ae3a:	d805      	bhi.n	800ae48 <__multiply+0x124>
 800ae3c:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae40:	3504      	adds	r5, #4
 800ae42:	e79b      	b.n	800ad7c <__multiply+0x58>
 800ae44:	46d4      	mov	ip, sl
 800ae46:	e7b3      	b.n	800adb0 <__multiply+0x8c>
 800ae48:	46e0      	mov	r8, ip
 800ae4a:	e7dd      	b.n	800ae08 <__multiply+0xe4>
 800ae4c:	3e01      	subs	r6, #1
 800ae4e:	e799      	b.n	800ad84 <__multiply+0x60>

0800ae50 <__pow5mult>:
 800ae50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae54:	4615      	mov	r5, r2
 800ae56:	f012 0203 	ands.w	r2, r2, #3
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	d007      	beq.n	800ae70 <__pow5mult+0x20>
 800ae60:	3a01      	subs	r2, #1
 800ae62:	4c21      	ldr	r4, [pc, #132]	; (800aee8 <__pow5mult+0x98>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae6a:	f7ff fe8b 	bl	800ab84 <__multadd>
 800ae6e:	4607      	mov	r7, r0
 800ae70:	10ad      	asrs	r5, r5, #2
 800ae72:	d035      	beq.n	800aee0 <__pow5mult+0x90>
 800ae74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae76:	b93c      	cbnz	r4, 800ae88 <__pow5mult+0x38>
 800ae78:	2010      	movs	r0, #16
 800ae7a:	f7ff fe13 	bl	800aaa4 <malloc>
 800ae7e:	6270      	str	r0, [r6, #36]	; 0x24
 800ae80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae84:	6004      	str	r4, [r0, #0]
 800ae86:	60c4      	str	r4, [r0, #12]
 800ae88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae90:	b94c      	cbnz	r4, 800aea6 <__pow5mult+0x56>
 800ae92:	f240 2171 	movw	r1, #625	; 0x271
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff ff3b 	bl	800ad12 <__i2b>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aea2:	4604      	mov	r4, r0
 800aea4:	6003      	str	r3, [r0, #0]
 800aea6:	f04f 0800 	mov.w	r8, #0
 800aeaa:	07eb      	lsls	r3, r5, #31
 800aeac:	d50a      	bpl.n	800aec4 <__pow5mult+0x74>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ff36 	bl	800ad24 <__multiply>
 800aeb8:	4639      	mov	r1, r7
 800aeba:	4681      	mov	r9, r0
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7ff fe4a 	bl	800ab56 <_Bfree>
 800aec2:	464f      	mov	r7, r9
 800aec4:	106d      	asrs	r5, r5, #1
 800aec6:	d00b      	beq.n	800aee0 <__pow5mult+0x90>
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	b938      	cbnz	r0, 800aedc <__pow5mult+0x8c>
 800aecc:	4622      	mov	r2, r4
 800aece:	4621      	mov	r1, r4
 800aed0:	4630      	mov	r0, r6
 800aed2:	f7ff ff27 	bl	800ad24 <__multiply>
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	f8c0 8000 	str.w	r8, [r0]
 800aedc:	4604      	mov	r4, r0
 800aede:	e7e4      	b.n	800aeaa <__pow5mult+0x5a>
 800aee0:	4638      	mov	r0, r7
 800aee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee6:	bf00      	nop
 800aee8:	0800bb90 	.word	0x0800bb90

0800aeec <__lshift>:
 800aeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef0:	460c      	mov	r4, r1
 800aef2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	6849      	ldr	r1, [r1, #4]
 800aefa:	eb0a 0903 	add.w	r9, sl, r3
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	4607      	mov	r7, r0
 800af02:	4616      	mov	r6, r2
 800af04:	f109 0501 	add.w	r5, r9, #1
 800af08:	42ab      	cmp	r3, r5
 800af0a:	db32      	blt.n	800af72 <__lshift+0x86>
 800af0c:	4638      	mov	r0, r7
 800af0e:	f7ff fdee 	bl	800aaee <_Balloc>
 800af12:	2300      	movs	r3, #0
 800af14:	4680      	mov	r8, r0
 800af16:	f100 0114 	add.w	r1, r0, #20
 800af1a:	461a      	mov	r2, r3
 800af1c:	4553      	cmp	r3, sl
 800af1e:	db2b      	blt.n	800af78 <__lshift+0x8c>
 800af20:	6920      	ldr	r0, [r4, #16]
 800af22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af26:	f104 0314 	add.w	r3, r4, #20
 800af2a:	f016 021f 	ands.w	r2, r6, #31
 800af2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af36:	d025      	beq.n	800af84 <__lshift+0x98>
 800af38:	f1c2 0e20 	rsb	lr, r2, #32
 800af3c:	2000      	movs	r0, #0
 800af3e:	681e      	ldr	r6, [r3, #0]
 800af40:	468a      	mov	sl, r1
 800af42:	4096      	lsls	r6, r2
 800af44:	4330      	orrs	r0, r6
 800af46:	f84a 0b04 	str.w	r0, [sl], #4
 800af4a:	f853 0b04 	ldr.w	r0, [r3], #4
 800af4e:	459c      	cmp	ip, r3
 800af50:	fa20 f00e 	lsr.w	r0, r0, lr
 800af54:	d814      	bhi.n	800af80 <__lshift+0x94>
 800af56:	6048      	str	r0, [r1, #4]
 800af58:	b108      	cbz	r0, 800af5e <__lshift+0x72>
 800af5a:	f109 0502 	add.w	r5, r9, #2
 800af5e:	3d01      	subs	r5, #1
 800af60:	4638      	mov	r0, r7
 800af62:	f8c8 5010 	str.w	r5, [r8, #16]
 800af66:	4621      	mov	r1, r4
 800af68:	f7ff fdf5 	bl	800ab56 <_Bfree>
 800af6c:	4640      	mov	r0, r8
 800af6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af72:	3101      	adds	r1, #1
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	e7c7      	b.n	800af08 <__lshift+0x1c>
 800af78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af7c:	3301      	adds	r3, #1
 800af7e:	e7cd      	b.n	800af1c <__lshift+0x30>
 800af80:	4651      	mov	r1, sl
 800af82:	e7dc      	b.n	800af3e <__lshift+0x52>
 800af84:	3904      	subs	r1, #4
 800af86:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8a:	f841 2f04 	str.w	r2, [r1, #4]!
 800af8e:	459c      	cmp	ip, r3
 800af90:	d8f9      	bhi.n	800af86 <__lshift+0x9a>
 800af92:	e7e4      	b.n	800af5e <__lshift+0x72>

0800af94 <__mcmp>:
 800af94:	6903      	ldr	r3, [r0, #16]
 800af96:	690a      	ldr	r2, [r1, #16]
 800af98:	1a9b      	subs	r3, r3, r2
 800af9a:	b530      	push	{r4, r5, lr}
 800af9c:	d10c      	bne.n	800afb8 <__mcmp+0x24>
 800af9e:	0092      	lsls	r2, r2, #2
 800afa0:	3014      	adds	r0, #20
 800afa2:	3114      	adds	r1, #20
 800afa4:	1884      	adds	r4, r0, r2
 800afa6:	4411      	add	r1, r2
 800afa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afb0:	4295      	cmp	r5, r2
 800afb2:	d003      	beq.n	800afbc <__mcmp+0x28>
 800afb4:	d305      	bcc.n	800afc2 <__mcmp+0x2e>
 800afb6:	2301      	movs	r3, #1
 800afb8:	4618      	mov	r0, r3
 800afba:	bd30      	pop	{r4, r5, pc}
 800afbc:	42a0      	cmp	r0, r4
 800afbe:	d3f3      	bcc.n	800afa8 <__mcmp+0x14>
 800afc0:	e7fa      	b.n	800afb8 <__mcmp+0x24>
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
 800afc6:	e7f7      	b.n	800afb8 <__mcmp+0x24>

0800afc8 <__mdiff>:
 800afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	460d      	mov	r5, r1
 800afce:	4607      	mov	r7, r0
 800afd0:	4611      	mov	r1, r2
 800afd2:	4628      	mov	r0, r5
 800afd4:	4614      	mov	r4, r2
 800afd6:	f7ff ffdd 	bl	800af94 <__mcmp>
 800afda:	1e06      	subs	r6, r0, #0
 800afdc:	d108      	bne.n	800aff0 <__mdiff+0x28>
 800afde:	4631      	mov	r1, r6
 800afe0:	4638      	mov	r0, r7
 800afe2:	f7ff fd84 	bl	800aaee <_Balloc>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	bfa4      	itt	ge
 800aff2:	4623      	movge	r3, r4
 800aff4:	462c      	movge	r4, r5
 800aff6:	4638      	mov	r0, r7
 800aff8:	6861      	ldr	r1, [r4, #4]
 800affa:	bfa6      	itte	ge
 800affc:	461d      	movge	r5, r3
 800affe:	2600      	movge	r6, #0
 800b000:	2601      	movlt	r6, #1
 800b002:	f7ff fd74 	bl	800aaee <_Balloc>
 800b006:	692b      	ldr	r3, [r5, #16]
 800b008:	60c6      	str	r6, [r0, #12]
 800b00a:	6926      	ldr	r6, [r4, #16]
 800b00c:	f105 0914 	add.w	r9, r5, #20
 800b010:	f104 0214 	add.w	r2, r4, #20
 800b014:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b018:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b01c:	f100 0514 	add.w	r5, r0, #20
 800b020:	f04f 0e00 	mov.w	lr, #0
 800b024:	f852 ab04 	ldr.w	sl, [r2], #4
 800b028:	f859 4b04 	ldr.w	r4, [r9], #4
 800b02c:	fa1e f18a 	uxtah	r1, lr, sl
 800b030:	b2a3      	uxth	r3, r4
 800b032:	1ac9      	subs	r1, r1, r3
 800b034:	0c23      	lsrs	r3, r4, #16
 800b036:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b03a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b03e:	b289      	uxth	r1, r1
 800b040:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b044:	45c8      	cmp	r8, r9
 800b046:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b04a:	4694      	mov	ip, r2
 800b04c:	f845 3b04 	str.w	r3, [r5], #4
 800b050:	d8e8      	bhi.n	800b024 <__mdiff+0x5c>
 800b052:	45bc      	cmp	ip, r7
 800b054:	d304      	bcc.n	800b060 <__mdiff+0x98>
 800b056:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b05a:	b183      	cbz	r3, 800b07e <__mdiff+0xb6>
 800b05c:	6106      	str	r6, [r0, #16]
 800b05e:	e7c5      	b.n	800afec <__mdiff+0x24>
 800b060:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b064:	fa1e f381 	uxtah	r3, lr, r1
 800b068:	141a      	asrs	r2, r3, #16
 800b06a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b06e:	b29b      	uxth	r3, r3
 800b070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b074:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b078:	f845 3b04 	str.w	r3, [r5], #4
 800b07c:	e7e9      	b.n	800b052 <__mdiff+0x8a>
 800b07e:	3e01      	subs	r6, #1
 800b080:	e7e9      	b.n	800b056 <__mdiff+0x8e>
	...

0800b084 <__ulp>:
 800b084:	4b12      	ldr	r3, [pc, #72]	; (800b0d0 <__ulp+0x4c>)
 800b086:	ee10 2a90 	vmov	r2, s1
 800b08a:	401a      	ands	r2, r3
 800b08c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b090:	2b00      	cmp	r3, #0
 800b092:	dd04      	ble.n	800b09e <__ulp+0x1a>
 800b094:	2000      	movs	r0, #0
 800b096:	4619      	mov	r1, r3
 800b098:	ec41 0b10 	vmov	d0, r0, r1
 800b09c:	4770      	bx	lr
 800b09e:	425b      	negs	r3, r3
 800b0a0:	151b      	asrs	r3, r3, #20
 800b0a2:	2b13      	cmp	r3, #19
 800b0a4:	f04f 0000 	mov.w	r0, #0
 800b0a8:	f04f 0100 	mov.w	r1, #0
 800b0ac:	dc04      	bgt.n	800b0b8 <__ulp+0x34>
 800b0ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0b2:	fa42 f103 	asr.w	r1, r2, r3
 800b0b6:	e7ef      	b.n	800b098 <__ulp+0x14>
 800b0b8:	3b14      	subs	r3, #20
 800b0ba:	2b1e      	cmp	r3, #30
 800b0bc:	f04f 0201 	mov.w	r2, #1
 800b0c0:	bfda      	itte	le
 800b0c2:	f1c3 031f 	rsble	r3, r3, #31
 800b0c6:	fa02 f303 	lslle.w	r3, r2, r3
 800b0ca:	4613      	movgt	r3, r2
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	e7e3      	b.n	800b098 <__ulp+0x14>
 800b0d0:	7ff00000 	.word	0x7ff00000

0800b0d4 <__b2d>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	6905      	ldr	r5, [r0, #16]
 800b0d8:	f100 0714 	add.w	r7, r0, #20
 800b0dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b0e0:	1f2e      	subs	r6, r5, #4
 800b0e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7ff fdc5 	bl	800ac76 <__hi0bits>
 800b0ec:	f1c0 0320 	rsb	r3, r0, #32
 800b0f0:	280a      	cmp	r0, #10
 800b0f2:	600b      	str	r3, [r1, #0]
 800b0f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b16c <__b2d+0x98>
 800b0f8:	dc14      	bgt.n	800b124 <__b2d+0x50>
 800b0fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800b0fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800b102:	42b7      	cmp	r7, r6
 800b104:	ea41 030c 	orr.w	r3, r1, ip
 800b108:	bf34      	ite	cc
 800b10a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b10e:	2100      	movcs	r1, #0
 800b110:	3015      	adds	r0, #21
 800b112:	fa04 f000 	lsl.w	r0, r4, r0
 800b116:	fa21 f10e 	lsr.w	r1, r1, lr
 800b11a:	ea40 0201 	orr.w	r2, r0, r1
 800b11e:	ec43 2b10 	vmov	d0, r2, r3
 800b122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b124:	42b7      	cmp	r7, r6
 800b126:	bf3a      	itte	cc
 800b128:	f1a5 0608 	subcc.w	r6, r5, #8
 800b12c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b130:	2100      	movcs	r1, #0
 800b132:	380b      	subs	r0, #11
 800b134:	d015      	beq.n	800b162 <__b2d+0x8e>
 800b136:	4084      	lsls	r4, r0
 800b138:	f1c0 0520 	rsb	r5, r0, #32
 800b13c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b140:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b144:	42be      	cmp	r6, r7
 800b146:	fa21 fc05 	lsr.w	ip, r1, r5
 800b14a:	ea44 030c 	orr.w	r3, r4, ip
 800b14e:	bf8c      	ite	hi
 800b150:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b154:	2400      	movls	r4, #0
 800b156:	fa01 f000 	lsl.w	r0, r1, r0
 800b15a:	40ec      	lsrs	r4, r5
 800b15c:	ea40 0204 	orr.w	r2, r0, r4
 800b160:	e7dd      	b.n	800b11e <__b2d+0x4a>
 800b162:	ea44 030c 	orr.w	r3, r4, ip
 800b166:	460a      	mov	r2, r1
 800b168:	e7d9      	b.n	800b11e <__b2d+0x4a>
 800b16a:	bf00      	nop
 800b16c:	3ff00000 	.word	0x3ff00000

0800b170 <__d2b>:
 800b170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b174:	460e      	mov	r6, r1
 800b176:	2101      	movs	r1, #1
 800b178:	ec59 8b10 	vmov	r8, r9, d0
 800b17c:	4615      	mov	r5, r2
 800b17e:	f7ff fcb6 	bl	800aaee <_Balloc>
 800b182:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b186:	4607      	mov	r7, r0
 800b188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b18c:	bb34      	cbnz	r4, 800b1dc <__d2b+0x6c>
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	f1b8 0300 	subs.w	r3, r8, #0
 800b194:	d027      	beq.n	800b1e6 <__d2b+0x76>
 800b196:	a802      	add	r0, sp, #8
 800b198:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b19c:	f7ff fd8a 	bl	800acb4 <__lo0bits>
 800b1a0:	9900      	ldr	r1, [sp, #0]
 800b1a2:	b1f0      	cbz	r0, 800b1e2 <__d2b+0x72>
 800b1a4:	9a01      	ldr	r2, [sp, #4]
 800b1a6:	f1c0 0320 	rsb	r3, r0, #32
 800b1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	40c2      	lsrs	r2, r0
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	9201      	str	r2, [sp, #4]
 800b1b6:	9b01      	ldr	r3, [sp, #4]
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bf14      	ite	ne
 800b1be:	2102      	movne	r1, #2
 800b1c0:	2101      	moveq	r1, #1
 800b1c2:	6139      	str	r1, [r7, #16]
 800b1c4:	b1c4      	cbz	r4, 800b1f8 <__d2b+0x88>
 800b1c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b1ca:	4404      	add	r4, r0
 800b1cc:	6034      	str	r4, [r6, #0]
 800b1ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1d2:	6028      	str	r0, [r5, #0]
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	b003      	add	sp, #12
 800b1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1e0:	e7d5      	b.n	800b18e <__d2b+0x1e>
 800b1e2:	6179      	str	r1, [r7, #20]
 800b1e4:	e7e7      	b.n	800b1b6 <__d2b+0x46>
 800b1e6:	a801      	add	r0, sp, #4
 800b1e8:	f7ff fd64 	bl	800acb4 <__lo0bits>
 800b1ec:	9b01      	ldr	r3, [sp, #4]
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	6139      	str	r1, [r7, #16]
 800b1f4:	3020      	adds	r0, #32
 800b1f6:	e7e5      	b.n	800b1c4 <__d2b+0x54>
 800b1f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b1fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b200:	6030      	str	r0, [r6, #0]
 800b202:	6918      	ldr	r0, [r3, #16]
 800b204:	f7ff fd37 	bl	800ac76 <__hi0bits>
 800b208:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b20c:	e7e1      	b.n	800b1d2 <__d2b+0x62>

0800b20e <__ratio>:
 800b20e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b212:	4688      	mov	r8, r1
 800b214:	4669      	mov	r1, sp
 800b216:	4681      	mov	r9, r0
 800b218:	f7ff ff5c 	bl	800b0d4 <__b2d>
 800b21c:	a901      	add	r1, sp, #4
 800b21e:	4640      	mov	r0, r8
 800b220:	ec57 6b10 	vmov	r6, r7, d0
 800b224:	f7ff ff56 	bl	800b0d4 <__b2d>
 800b228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b22c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b230:	eba3 0c02 	sub.w	ip, r3, r2
 800b234:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b238:	1a9b      	subs	r3, r3, r2
 800b23a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b23e:	ec5b ab10 	vmov	sl, fp, d0
 800b242:	2b00      	cmp	r3, #0
 800b244:	bfce      	itee	gt
 800b246:	463a      	movgt	r2, r7
 800b248:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b24c:	465a      	movle	r2, fp
 800b24e:	4659      	mov	r1, fp
 800b250:	463d      	mov	r5, r7
 800b252:	bfd4      	ite	le
 800b254:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b258:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b25c:	4630      	mov	r0, r6
 800b25e:	ee10 2a10 	vmov	r2, s0
 800b262:	460b      	mov	r3, r1
 800b264:	4629      	mov	r1, r5
 800b266:	f7f5 faf9 	bl	800085c <__aeabi_ddiv>
 800b26a:	ec41 0b10 	vmov	d0, r0, r1
 800b26e:	b003      	add	sp, #12
 800b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b274 <__copybits>:
 800b274:	3901      	subs	r1, #1
 800b276:	b510      	push	{r4, lr}
 800b278:	1149      	asrs	r1, r1, #5
 800b27a:	6914      	ldr	r4, [r2, #16]
 800b27c:	3101      	adds	r1, #1
 800b27e:	f102 0314 	add.w	r3, r2, #20
 800b282:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b286:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	4602      	mov	r2, r0
 800b28e:	d303      	bcc.n	800b298 <__copybits+0x24>
 800b290:	2300      	movs	r3, #0
 800b292:	428a      	cmp	r2, r1
 800b294:	d305      	bcc.n	800b2a2 <__copybits+0x2e>
 800b296:	bd10      	pop	{r4, pc}
 800b298:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29c:	f840 2b04 	str.w	r2, [r0], #4
 800b2a0:	e7f3      	b.n	800b28a <__copybits+0x16>
 800b2a2:	f842 3b04 	str.w	r3, [r2], #4
 800b2a6:	e7f4      	b.n	800b292 <__copybits+0x1e>

0800b2a8 <__any_on>:
 800b2a8:	f100 0214 	add.w	r2, r0, #20
 800b2ac:	6900      	ldr	r0, [r0, #16]
 800b2ae:	114b      	asrs	r3, r1, #5
 800b2b0:	4298      	cmp	r0, r3
 800b2b2:	b510      	push	{r4, lr}
 800b2b4:	db11      	blt.n	800b2da <__any_on+0x32>
 800b2b6:	dd0a      	ble.n	800b2ce <__any_on+0x26>
 800b2b8:	f011 011f 	ands.w	r1, r1, #31
 800b2bc:	d007      	beq.n	800b2ce <__any_on+0x26>
 800b2be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2c2:	fa24 f001 	lsr.w	r0, r4, r1
 800b2c6:	fa00 f101 	lsl.w	r1, r0, r1
 800b2ca:	428c      	cmp	r4, r1
 800b2cc:	d10b      	bne.n	800b2e6 <__any_on+0x3e>
 800b2ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d803      	bhi.n	800b2de <__any_on+0x36>
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	4603      	mov	r3, r0
 800b2dc:	e7f7      	b.n	800b2ce <__any_on+0x26>
 800b2de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2e2:	2900      	cmp	r1, #0
 800b2e4:	d0f5      	beq.n	800b2d2 <__any_on+0x2a>
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	e7f6      	b.n	800b2d8 <__any_on+0x30>

0800b2ea <_calloc_r>:
 800b2ea:	b538      	push	{r3, r4, r5, lr}
 800b2ec:	fb02 f401 	mul.w	r4, r2, r1
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f000 f857 	bl	800b3a4 <_malloc_r>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	b118      	cbz	r0, 800b302 <_calloc_r+0x18>
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	f7fc fd0b 	bl	8007d18 <memset>
 800b302:	4628      	mov	r0, r5
 800b304:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b308 <_free_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4605      	mov	r5, r0
 800b30c:	2900      	cmp	r1, #0
 800b30e:	d045      	beq.n	800b39c <_free_r+0x94>
 800b310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b314:	1f0c      	subs	r4, r1, #4
 800b316:	2b00      	cmp	r3, #0
 800b318:	bfb8      	it	lt
 800b31a:	18e4      	addlt	r4, r4, r3
 800b31c:	f000 fa36 	bl	800b78c <__malloc_lock>
 800b320:	4a1f      	ldr	r2, [pc, #124]	; (800b3a0 <_free_r+0x98>)
 800b322:	6813      	ldr	r3, [r2, #0]
 800b324:	4610      	mov	r0, r2
 800b326:	b933      	cbnz	r3, 800b336 <_free_r+0x2e>
 800b328:	6063      	str	r3, [r4, #4]
 800b32a:	6014      	str	r4, [r2, #0]
 800b32c:	4628      	mov	r0, r5
 800b32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b332:	f000 ba2c 	b.w	800b78e <__malloc_unlock>
 800b336:	42a3      	cmp	r3, r4
 800b338:	d90c      	bls.n	800b354 <_free_r+0x4c>
 800b33a:	6821      	ldr	r1, [r4, #0]
 800b33c:	1862      	adds	r2, r4, r1
 800b33e:	4293      	cmp	r3, r2
 800b340:	bf04      	itt	eq
 800b342:	681a      	ldreq	r2, [r3, #0]
 800b344:	685b      	ldreq	r3, [r3, #4]
 800b346:	6063      	str	r3, [r4, #4]
 800b348:	bf04      	itt	eq
 800b34a:	1852      	addeq	r2, r2, r1
 800b34c:	6022      	streq	r2, [r4, #0]
 800b34e:	6004      	str	r4, [r0, #0]
 800b350:	e7ec      	b.n	800b32c <_free_r+0x24>
 800b352:	4613      	mov	r3, r2
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	b10a      	cbz	r2, 800b35c <_free_r+0x54>
 800b358:	42a2      	cmp	r2, r4
 800b35a:	d9fa      	bls.n	800b352 <_free_r+0x4a>
 800b35c:	6819      	ldr	r1, [r3, #0]
 800b35e:	1858      	adds	r0, r3, r1
 800b360:	42a0      	cmp	r0, r4
 800b362:	d10b      	bne.n	800b37c <_free_r+0x74>
 800b364:	6820      	ldr	r0, [r4, #0]
 800b366:	4401      	add	r1, r0
 800b368:	1858      	adds	r0, r3, r1
 800b36a:	4282      	cmp	r2, r0
 800b36c:	6019      	str	r1, [r3, #0]
 800b36e:	d1dd      	bne.n	800b32c <_free_r+0x24>
 800b370:	6810      	ldr	r0, [r2, #0]
 800b372:	6852      	ldr	r2, [r2, #4]
 800b374:	605a      	str	r2, [r3, #4]
 800b376:	4401      	add	r1, r0
 800b378:	6019      	str	r1, [r3, #0]
 800b37a:	e7d7      	b.n	800b32c <_free_r+0x24>
 800b37c:	d902      	bls.n	800b384 <_free_r+0x7c>
 800b37e:	230c      	movs	r3, #12
 800b380:	602b      	str	r3, [r5, #0]
 800b382:	e7d3      	b.n	800b32c <_free_r+0x24>
 800b384:	6820      	ldr	r0, [r4, #0]
 800b386:	1821      	adds	r1, r4, r0
 800b388:	428a      	cmp	r2, r1
 800b38a:	bf04      	itt	eq
 800b38c:	6811      	ldreq	r1, [r2, #0]
 800b38e:	6852      	ldreq	r2, [r2, #4]
 800b390:	6062      	str	r2, [r4, #4]
 800b392:	bf04      	itt	eq
 800b394:	1809      	addeq	r1, r1, r0
 800b396:	6021      	streq	r1, [r4, #0]
 800b398:	605c      	str	r4, [r3, #4]
 800b39a:	e7c7      	b.n	800b32c <_free_r+0x24>
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	bf00      	nop
 800b3a0:	200002c8 	.word	0x200002c8

0800b3a4 <_malloc_r>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	1ccd      	adds	r5, r1, #3
 800b3a8:	f025 0503 	bic.w	r5, r5, #3
 800b3ac:	3508      	adds	r5, #8
 800b3ae:	2d0c      	cmp	r5, #12
 800b3b0:	bf38      	it	cc
 800b3b2:	250c      	movcc	r5, #12
 800b3b4:	2d00      	cmp	r5, #0
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	db01      	blt.n	800b3be <_malloc_r+0x1a>
 800b3ba:	42a9      	cmp	r1, r5
 800b3bc:	d903      	bls.n	800b3c6 <_malloc_r+0x22>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	6033      	str	r3, [r6, #0]
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}
 800b3c6:	f000 f9e1 	bl	800b78c <__malloc_lock>
 800b3ca:	4a21      	ldr	r2, [pc, #132]	; (800b450 <_malloc_r+0xac>)
 800b3cc:	6814      	ldr	r4, [r2, #0]
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	b991      	cbnz	r1, 800b3f8 <_malloc_r+0x54>
 800b3d2:	4c20      	ldr	r4, [pc, #128]	; (800b454 <_malloc_r+0xb0>)
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	b91b      	cbnz	r3, 800b3e0 <_malloc_r+0x3c>
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f000 f98f 	bl	800b6fc <_sbrk_r>
 800b3de:	6020      	str	r0, [r4, #0]
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f000 f98a 	bl	800b6fc <_sbrk_r>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d124      	bne.n	800b436 <_malloc_r+0x92>
 800b3ec:	230c      	movs	r3, #12
 800b3ee:	6033      	str	r3, [r6, #0]
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 f9cc 	bl	800b78e <__malloc_unlock>
 800b3f6:	e7e4      	b.n	800b3c2 <_malloc_r+0x1e>
 800b3f8:	680b      	ldr	r3, [r1, #0]
 800b3fa:	1b5b      	subs	r3, r3, r5
 800b3fc:	d418      	bmi.n	800b430 <_malloc_r+0x8c>
 800b3fe:	2b0b      	cmp	r3, #11
 800b400:	d90f      	bls.n	800b422 <_malloc_r+0x7e>
 800b402:	600b      	str	r3, [r1, #0]
 800b404:	50cd      	str	r5, [r1, r3]
 800b406:	18cc      	adds	r4, r1, r3
 800b408:	4630      	mov	r0, r6
 800b40a:	f000 f9c0 	bl	800b78e <__malloc_unlock>
 800b40e:	f104 000b 	add.w	r0, r4, #11
 800b412:	1d23      	adds	r3, r4, #4
 800b414:	f020 0007 	bic.w	r0, r0, #7
 800b418:	1ac3      	subs	r3, r0, r3
 800b41a:	d0d3      	beq.n	800b3c4 <_malloc_r+0x20>
 800b41c:	425a      	negs	r2, r3
 800b41e:	50e2      	str	r2, [r4, r3]
 800b420:	e7d0      	b.n	800b3c4 <_malloc_r+0x20>
 800b422:	428c      	cmp	r4, r1
 800b424:	684b      	ldr	r3, [r1, #4]
 800b426:	bf16      	itet	ne
 800b428:	6063      	strne	r3, [r4, #4]
 800b42a:	6013      	streq	r3, [r2, #0]
 800b42c:	460c      	movne	r4, r1
 800b42e:	e7eb      	b.n	800b408 <_malloc_r+0x64>
 800b430:	460c      	mov	r4, r1
 800b432:	6849      	ldr	r1, [r1, #4]
 800b434:	e7cc      	b.n	800b3d0 <_malloc_r+0x2c>
 800b436:	1cc4      	adds	r4, r0, #3
 800b438:	f024 0403 	bic.w	r4, r4, #3
 800b43c:	42a0      	cmp	r0, r4
 800b43e:	d005      	beq.n	800b44c <_malloc_r+0xa8>
 800b440:	1a21      	subs	r1, r4, r0
 800b442:	4630      	mov	r0, r6
 800b444:	f000 f95a 	bl	800b6fc <_sbrk_r>
 800b448:	3001      	adds	r0, #1
 800b44a:	d0cf      	beq.n	800b3ec <_malloc_r+0x48>
 800b44c:	6025      	str	r5, [r4, #0]
 800b44e:	e7db      	b.n	800b408 <_malloc_r+0x64>
 800b450:	200002c8 	.word	0x200002c8
 800b454:	200002cc 	.word	0x200002cc

0800b458 <__ssputs_r>:
 800b458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	688e      	ldr	r6, [r1, #8]
 800b45e:	429e      	cmp	r6, r3
 800b460:	4682      	mov	sl, r0
 800b462:	460c      	mov	r4, r1
 800b464:	4690      	mov	r8, r2
 800b466:	4699      	mov	r9, r3
 800b468:	d837      	bhi.n	800b4da <__ssputs_r+0x82>
 800b46a:	898a      	ldrh	r2, [r1, #12]
 800b46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b470:	d031      	beq.n	800b4d6 <__ssputs_r+0x7e>
 800b472:	6825      	ldr	r5, [r4, #0]
 800b474:	6909      	ldr	r1, [r1, #16]
 800b476:	1a6f      	subs	r7, r5, r1
 800b478:	6965      	ldr	r5, [r4, #20]
 800b47a:	2302      	movs	r3, #2
 800b47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b480:	fb95 f5f3 	sdiv	r5, r5, r3
 800b484:	f109 0301 	add.w	r3, r9, #1
 800b488:	443b      	add	r3, r7
 800b48a:	429d      	cmp	r5, r3
 800b48c:	bf38      	it	cc
 800b48e:	461d      	movcc	r5, r3
 800b490:	0553      	lsls	r3, r2, #21
 800b492:	d530      	bpl.n	800b4f6 <__ssputs_r+0x9e>
 800b494:	4629      	mov	r1, r5
 800b496:	f7ff ff85 	bl	800b3a4 <_malloc_r>
 800b49a:	4606      	mov	r6, r0
 800b49c:	b950      	cbnz	r0, 800b4b4 <__ssputs_r+0x5c>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	f8ca 3000 	str.w	r3, [sl]
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b4:	463a      	mov	r2, r7
 800b4b6:	6921      	ldr	r1, [r4, #16]
 800b4b8:	f7ff fb0e 	bl	800aad8 <memcpy>
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	6126      	str	r6, [r4, #16]
 800b4ca:	6165      	str	r5, [r4, #20]
 800b4cc:	443e      	add	r6, r7
 800b4ce:	1bed      	subs	r5, r5, r7
 800b4d0:	6026      	str	r6, [r4, #0]
 800b4d2:	60a5      	str	r5, [r4, #8]
 800b4d4:	464e      	mov	r6, r9
 800b4d6:	454e      	cmp	r6, r9
 800b4d8:	d900      	bls.n	800b4dc <__ssputs_r+0x84>
 800b4da:	464e      	mov	r6, r9
 800b4dc:	4632      	mov	r2, r6
 800b4de:	4641      	mov	r1, r8
 800b4e0:	6820      	ldr	r0, [r4, #0]
 800b4e2:	f000 f93a 	bl	800b75a <memmove>
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	1b9b      	subs	r3, r3, r6
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	441e      	add	r6, r3
 800b4f0:	6026      	str	r6, [r4, #0]
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e7dc      	b.n	800b4b0 <__ssputs_r+0x58>
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	f000 f94a 	bl	800b790 <_realloc_r>
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d1e2      	bne.n	800b4c8 <__ssputs_r+0x70>
 800b502:	6921      	ldr	r1, [r4, #16]
 800b504:	4650      	mov	r0, sl
 800b506:	f7ff feff 	bl	800b308 <_free_r>
 800b50a:	e7c8      	b.n	800b49e <__ssputs_r+0x46>

0800b50c <_svfiprintf_r>:
 800b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	461d      	mov	r5, r3
 800b512:	898b      	ldrh	r3, [r1, #12]
 800b514:	061f      	lsls	r7, r3, #24
 800b516:	b09d      	sub	sp, #116	; 0x74
 800b518:	4680      	mov	r8, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	4616      	mov	r6, r2
 800b51e:	d50f      	bpl.n	800b540 <_svfiprintf_r+0x34>
 800b520:	690b      	ldr	r3, [r1, #16]
 800b522:	b96b      	cbnz	r3, 800b540 <_svfiprintf_r+0x34>
 800b524:	2140      	movs	r1, #64	; 0x40
 800b526:	f7ff ff3d 	bl	800b3a4 <_malloc_r>
 800b52a:	6020      	str	r0, [r4, #0]
 800b52c:	6120      	str	r0, [r4, #16]
 800b52e:	b928      	cbnz	r0, 800b53c <_svfiprintf_r+0x30>
 800b530:	230c      	movs	r3, #12
 800b532:	f8c8 3000 	str.w	r3, [r8]
 800b536:	f04f 30ff 	mov.w	r0, #4294967295
 800b53a:	e0c8      	b.n	800b6ce <_svfiprintf_r+0x1c2>
 800b53c:	2340      	movs	r3, #64	; 0x40
 800b53e:	6163      	str	r3, [r4, #20]
 800b540:	2300      	movs	r3, #0
 800b542:	9309      	str	r3, [sp, #36]	; 0x24
 800b544:	2320      	movs	r3, #32
 800b546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54a:	2330      	movs	r3, #48	; 0x30
 800b54c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b550:	9503      	str	r5, [sp, #12]
 800b552:	f04f 0b01 	mov.w	fp, #1
 800b556:	4637      	mov	r7, r6
 800b558:	463d      	mov	r5, r7
 800b55a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b55e:	b10b      	cbz	r3, 800b564 <_svfiprintf_r+0x58>
 800b560:	2b25      	cmp	r3, #37	; 0x25
 800b562:	d13e      	bne.n	800b5e2 <_svfiprintf_r+0xd6>
 800b564:	ebb7 0a06 	subs.w	sl, r7, r6
 800b568:	d00b      	beq.n	800b582 <_svfiprintf_r+0x76>
 800b56a:	4653      	mov	r3, sl
 800b56c:	4632      	mov	r2, r6
 800b56e:	4621      	mov	r1, r4
 800b570:	4640      	mov	r0, r8
 800b572:	f7ff ff71 	bl	800b458 <__ssputs_r>
 800b576:	3001      	adds	r0, #1
 800b578:	f000 80a4 	beq.w	800b6c4 <_svfiprintf_r+0x1b8>
 800b57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b57e:	4453      	add	r3, sl
 800b580:	9309      	str	r3, [sp, #36]	; 0x24
 800b582:	783b      	ldrb	r3, [r7, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 809d 	beq.w	800b6c4 <_svfiprintf_r+0x1b8>
 800b58a:	2300      	movs	r3, #0
 800b58c:	f04f 32ff 	mov.w	r2, #4294967295
 800b590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b594:	9304      	str	r3, [sp, #16]
 800b596:	9307      	str	r3, [sp, #28]
 800b598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b59c:	931a      	str	r3, [sp, #104]	; 0x68
 800b59e:	462f      	mov	r7, r5
 800b5a0:	2205      	movs	r2, #5
 800b5a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b5a6:	4850      	ldr	r0, [pc, #320]	; (800b6e8 <_svfiprintf_r+0x1dc>)
 800b5a8:	f7f4 fe22 	bl	80001f0 <memchr>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	b9d0      	cbnz	r0, 800b5e6 <_svfiprintf_r+0xda>
 800b5b0:	06d9      	lsls	r1, r3, #27
 800b5b2:	bf44      	itt	mi
 800b5b4:	2220      	movmi	r2, #32
 800b5b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5ba:	071a      	lsls	r2, r3, #28
 800b5bc:	bf44      	itt	mi
 800b5be:	222b      	movmi	r2, #43	; 0x2b
 800b5c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5c4:	782a      	ldrb	r2, [r5, #0]
 800b5c6:	2a2a      	cmp	r2, #42	; 0x2a
 800b5c8:	d015      	beq.n	800b5f6 <_svfiprintf_r+0xea>
 800b5ca:	9a07      	ldr	r2, [sp, #28]
 800b5cc:	462f      	mov	r7, r5
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	250a      	movs	r5, #10
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d8:	3b30      	subs	r3, #48	; 0x30
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d94d      	bls.n	800b67a <_svfiprintf_r+0x16e>
 800b5de:	b1b8      	cbz	r0, 800b610 <_svfiprintf_r+0x104>
 800b5e0:	e00f      	b.n	800b602 <_svfiprintf_r+0xf6>
 800b5e2:	462f      	mov	r7, r5
 800b5e4:	e7b8      	b.n	800b558 <_svfiprintf_r+0x4c>
 800b5e6:	4a40      	ldr	r2, [pc, #256]	; (800b6e8 <_svfiprintf_r+0x1dc>)
 800b5e8:	1a80      	subs	r0, r0, r2
 800b5ea:	fa0b f000 	lsl.w	r0, fp, r0
 800b5ee:	4318      	orrs	r0, r3
 800b5f0:	9004      	str	r0, [sp, #16]
 800b5f2:	463d      	mov	r5, r7
 800b5f4:	e7d3      	b.n	800b59e <_svfiprintf_r+0x92>
 800b5f6:	9a03      	ldr	r2, [sp, #12]
 800b5f8:	1d11      	adds	r1, r2, #4
 800b5fa:	6812      	ldr	r2, [r2, #0]
 800b5fc:	9103      	str	r1, [sp, #12]
 800b5fe:	2a00      	cmp	r2, #0
 800b600:	db01      	blt.n	800b606 <_svfiprintf_r+0xfa>
 800b602:	9207      	str	r2, [sp, #28]
 800b604:	e004      	b.n	800b610 <_svfiprintf_r+0x104>
 800b606:	4252      	negs	r2, r2
 800b608:	f043 0302 	orr.w	r3, r3, #2
 800b60c:	9207      	str	r2, [sp, #28]
 800b60e:	9304      	str	r3, [sp, #16]
 800b610:	783b      	ldrb	r3, [r7, #0]
 800b612:	2b2e      	cmp	r3, #46	; 0x2e
 800b614:	d10c      	bne.n	800b630 <_svfiprintf_r+0x124>
 800b616:	787b      	ldrb	r3, [r7, #1]
 800b618:	2b2a      	cmp	r3, #42	; 0x2a
 800b61a:	d133      	bne.n	800b684 <_svfiprintf_r+0x178>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	1d1a      	adds	r2, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9203      	str	r2, [sp, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	bfb8      	it	lt
 800b628:	f04f 33ff 	movlt.w	r3, #4294967295
 800b62c:	3702      	adds	r7, #2
 800b62e:	9305      	str	r3, [sp, #20]
 800b630:	4d2e      	ldr	r5, [pc, #184]	; (800b6ec <_svfiprintf_r+0x1e0>)
 800b632:	7839      	ldrb	r1, [r7, #0]
 800b634:	2203      	movs	r2, #3
 800b636:	4628      	mov	r0, r5
 800b638:	f7f4 fdda 	bl	80001f0 <memchr>
 800b63c:	b138      	cbz	r0, 800b64e <_svfiprintf_r+0x142>
 800b63e:	2340      	movs	r3, #64	; 0x40
 800b640:	1b40      	subs	r0, r0, r5
 800b642:	fa03 f000 	lsl.w	r0, r3, r0
 800b646:	9b04      	ldr	r3, [sp, #16]
 800b648:	4303      	orrs	r3, r0
 800b64a:	3701      	adds	r7, #1
 800b64c:	9304      	str	r3, [sp, #16]
 800b64e:	7839      	ldrb	r1, [r7, #0]
 800b650:	4827      	ldr	r0, [pc, #156]	; (800b6f0 <_svfiprintf_r+0x1e4>)
 800b652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b656:	2206      	movs	r2, #6
 800b658:	1c7e      	adds	r6, r7, #1
 800b65a:	f7f4 fdc9 	bl	80001f0 <memchr>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d038      	beq.n	800b6d4 <_svfiprintf_r+0x1c8>
 800b662:	4b24      	ldr	r3, [pc, #144]	; (800b6f4 <_svfiprintf_r+0x1e8>)
 800b664:	bb13      	cbnz	r3, 800b6ac <_svfiprintf_r+0x1a0>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	3307      	adds	r3, #7
 800b66a:	f023 0307 	bic.w	r3, r3, #7
 800b66e:	3308      	adds	r3, #8
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b674:	444b      	add	r3, r9
 800b676:	9309      	str	r3, [sp, #36]	; 0x24
 800b678:	e76d      	b.n	800b556 <_svfiprintf_r+0x4a>
 800b67a:	fb05 3202 	mla	r2, r5, r2, r3
 800b67e:	2001      	movs	r0, #1
 800b680:	460f      	mov	r7, r1
 800b682:	e7a6      	b.n	800b5d2 <_svfiprintf_r+0xc6>
 800b684:	2300      	movs	r3, #0
 800b686:	3701      	adds	r7, #1
 800b688:	9305      	str	r3, [sp, #20]
 800b68a:	4619      	mov	r1, r3
 800b68c:	250a      	movs	r5, #10
 800b68e:	4638      	mov	r0, r7
 800b690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b694:	3a30      	subs	r2, #48	; 0x30
 800b696:	2a09      	cmp	r2, #9
 800b698:	d903      	bls.n	800b6a2 <_svfiprintf_r+0x196>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0c8      	beq.n	800b630 <_svfiprintf_r+0x124>
 800b69e:	9105      	str	r1, [sp, #20]
 800b6a0:	e7c6      	b.n	800b630 <_svfiprintf_r+0x124>
 800b6a2:	fb05 2101 	mla	r1, r5, r1, r2
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	e7f0      	b.n	800b68e <_svfiprintf_r+0x182>
 800b6ac:	ab03      	add	r3, sp, #12
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <_svfiprintf_r+0x1ec>)
 800b6b4:	a904      	add	r1, sp, #16
 800b6b6:	4640      	mov	r0, r8
 800b6b8:	f7fc fbca 	bl	8007e50 <_printf_float>
 800b6bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b6c0:	4681      	mov	r9, r0
 800b6c2:	d1d6      	bne.n	800b672 <_svfiprintf_r+0x166>
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	065b      	lsls	r3, r3, #25
 800b6c8:	f53f af35 	bmi.w	800b536 <_svfiprintf_r+0x2a>
 800b6cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ce:	b01d      	add	sp, #116	; 0x74
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	ab03      	add	r3, sp, #12
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4b07      	ldr	r3, [pc, #28]	; (800b6f8 <_svfiprintf_r+0x1ec>)
 800b6dc:	a904      	add	r1, sp, #16
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f7fc fe6c 	bl	80083bc <_printf_i>
 800b6e4:	e7ea      	b.n	800b6bc <_svfiprintf_r+0x1b0>
 800b6e6:	bf00      	nop
 800b6e8:	0800bb9c 	.word	0x0800bb9c
 800b6ec:	0800bba2 	.word	0x0800bba2
 800b6f0:	0800bba6 	.word	0x0800bba6
 800b6f4:	08007e51 	.word	0x08007e51
 800b6f8:	0800b459 	.word	0x0800b459

0800b6fc <_sbrk_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4c06      	ldr	r4, [pc, #24]	; (800b718 <_sbrk_r+0x1c>)
 800b700:	2300      	movs	r3, #0
 800b702:	4605      	mov	r5, r0
 800b704:	4608      	mov	r0, r1
 800b706:	6023      	str	r3, [r4, #0]
 800b708:	f7f7 fe02 	bl	8003310 <_sbrk>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d102      	bne.n	800b716 <_sbrk_r+0x1a>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	b103      	cbz	r3, 800b716 <_sbrk_r+0x1a>
 800b714:	602b      	str	r3, [r5, #0]
 800b716:	bd38      	pop	{r3, r4, r5, pc}
 800b718:	20000560 	.word	0x20000560

0800b71c <strncmp>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	b16a      	cbz	r2, 800b73c <strncmp+0x20>
 800b720:	3901      	subs	r1, #1
 800b722:	1884      	adds	r4, r0, r2
 800b724:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b728:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d103      	bne.n	800b738 <strncmp+0x1c>
 800b730:	42a0      	cmp	r0, r4
 800b732:	d001      	beq.n	800b738 <strncmp+0x1c>
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1f5      	bne.n	800b724 <strncmp+0x8>
 800b738:	1a98      	subs	r0, r3, r2
 800b73a:	bd10      	pop	{r4, pc}
 800b73c:	4610      	mov	r0, r2
 800b73e:	e7fc      	b.n	800b73a <strncmp+0x1e>

0800b740 <__ascii_wctomb>:
 800b740:	b149      	cbz	r1, 800b756 <__ascii_wctomb+0x16>
 800b742:	2aff      	cmp	r2, #255	; 0xff
 800b744:	bf85      	ittet	hi
 800b746:	238a      	movhi	r3, #138	; 0x8a
 800b748:	6003      	strhi	r3, [r0, #0]
 800b74a:	700a      	strbls	r2, [r1, #0]
 800b74c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b750:	bf98      	it	ls
 800b752:	2001      	movls	r0, #1
 800b754:	4770      	bx	lr
 800b756:	4608      	mov	r0, r1
 800b758:	4770      	bx	lr

0800b75a <memmove>:
 800b75a:	4288      	cmp	r0, r1
 800b75c:	b510      	push	{r4, lr}
 800b75e:	eb01 0302 	add.w	r3, r1, r2
 800b762:	d807      	bhi.n	800b774 <memmove+0x1a>
 800b764:	1e42      	subs	r2, r0, #1
 800b766:	4299      	cmp	r1, r3
 800b768:	d00a      	beq.n	800b780 <memmove+0x26>
 800b76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b76e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b772:	e7f8      	b.n	800b766 <memmove+0xc>
 800b774:	4283      	cmp	r3, r0
 800b776:	d9f5      	bls.n	800b764 <memmove+0xa>
 800b778:	1881      	adds	r1, r0, r2
 800b77a:	1ad2      	subs	r2, r2, r3
 800b77c:	42d3      	cmn	r3, r2
 800b77e:	d100      	bne.n	800b782 <memmove+0x28>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b786:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b78a:	e7f7      	b.n	800b77c <memmove+0x22>

0800b78c <__malloc_lock>:
 800b78c:	4770      	bx	lr

0800b78e <__malloc_unlock>:
 800b78e:	4770      	bx	lr

0800b790 <_realloc_r>:
 800b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b792:	4607      	mov	r7, r0
 800b794:	4614      	mov	r4, r2
 800b796:	460e      	mov	r6, r1
 800b798:	b921      	cbnz	r1, 800b7a4 <_realloc_r+0x14>
 800b79a:	4611      	mov	r1, r2
 800b79c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7a0:	f7ff be00 	b.w	800b3a4 <_malloc_r>
 800b7a4:	b922      	cbnz	r2, 800b7b0 <_realloc_r+0x20>
 800b7a6:	f7ff fdaf 	bl	800b308 <_free_r>
 800b7aa:	4625      	mov	r5, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b0:	f000 f814 	bl	800b7dc <_malloc_usable_size_r>
 800b7b4:	42a0      	cmp	r0, r4
 800b7b6:	d20f      	bcs.n	800b7d8 <_realloc_r+0x48>
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	f7ff fdf2 	bl	800b3a4 <_malloc_r>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d0f2      	beq.n	800b7ac <_realloc_r+0x1c>
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	f7ff f985 	bl	800aad8 <memcpy>
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	f7ff fd99 	bl	800b308 <_free_r>
 800b7d6:	e7e9      	b.n	800b7ac <_realloc_r+0x1c>
 800b7d8:	4635      	mov	r5, r6
 800b7da:	e7e7      	b.n	800b7ac <_realloc_r+0x1c>

0800b7dc <_malloc_usable_size_r>:
 800b7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e0:	1f18      	subs	r0, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfbc      	itt	lt
 800b7e6:	580b      	ldrlt	r3, [r1, r0]
 800b7e8:	18c0      	addlt	r0, r0, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_init>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	bf00      	nop
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr

0800b7f8 <_fini>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	bf00      	nop
 800b7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fe:	bc08      	pop	{r3}
 800b800:	469e      	mov	lr, r3
 800b802:	4770      	bx	lr
